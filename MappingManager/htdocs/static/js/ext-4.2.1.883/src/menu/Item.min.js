Ext.define("Ext.menu.Item",{extend:"Ext.Component",alias:"widget.menuitem",alternateClassName:"Ext.menu.TextItem",mixins:{queryable:"Ext.Queryable"},activeCls:Ext.baseCSSPrefix+"menu-item-active",ariaRole:"menuitem",canActivate:true,clickHideDelay:0,destroyMenu:true,disabledCls:Ext.baseCSSPrefix+"menu-item-disabled",hideOnClick:true,isMenuItem:true,menuAlign:"tl-tr?",menuExpandDelay:200,menuHideDelay:200,tooltipType:"qtip",arrowCls:Ext.baseCSSPrefix+"menu-item-arrow",childEls:["itemEl","iconEl","textEl","arrowEl"],renderTpl:['<tpl if="plain">',"{text}","<tpl else>",'<a id="{id}-itemEl"',' class="'+Ext.baseCSSPrefix+'menu-item-link{childElCls}"',' href="{href}"','<tpl if="hrefTarget"> target="{hrefTarget}"</tpl>',' hidefocus="true"',' unselectable="on"','<tpl if="tabIndex">',' tabIndex="{tabIndex}"',"</tpl>",">",'<div role="img" id="{id}-iconEl" class="'+Ext.baseCSSPrefix+"menu-item-icon {iconCls}",'{childElCls} {glyphCls}" style="<tpl if="icon">background-image:url({icon});</tpl>','<tpl if="glyph && glyphFontFamily">font-family:{glyphFontFamily};</tpl>">','<tpl if="glyph">&#{glyph};</tpl>',"</div>",'<span id="{id}-textEl" class="'+Ext.baseCSSPrefix+'menu-item-text" unselectable="on">{text}</span>','<img id="{id}-arrowEl" src="{blank}" class="{arrowCls}','{childElCls}"/>',"</a>","</tpl>"],maskOnDisable:false,activate:function(){var me=this;if(!me.activated&&me.canActivate&&me.rendered&&!me.isDisabled()&&me.isVisible()){me.el.addCls(me.activeCls);me.focus();me.activated=true;me.fireEvent("activate",me)}},getFocusEl:function(){return this.itemEl},deactivate:function(){var me=this;if(me.activated){me.el.removeCls(me.activeCls);me.blur();me.hideMenu();me.activated=false;me.fireEvent("deactivate",me)}},deferHideMenu:function(){if(this.menu.isVisible()){this.menu.hide()}},cancelDeferHide:function(){clearTimeout(this.hideMenuTimer)},deferHideParentMenus:function(){var ancestor;Ext.menu.Manager.hideAll();if(!Ext.Element.getActiveElement()){ancestor=this.up(":not([hidden])");if(ancestor){ancestor.focus()}}},expandMenu:function(delay){var me=this;if(me.menu){me.cancelDeferHide();if(delay===0){me.doExpandMenu()}else{clearTimeout(me.expandMenuTimer);me.expandMenuTimer=Ext.defer(me.doExpandMenu,Ext.isNumber(delay)?delay:me.menuExpandDelay,me)}}},doExpandMenu:function(){var me=this,menu=me.menu;if(me.activated&&(!menu.rendered||!menu.isVisible())){me.parentMenu.activeChild=menu;menu.parentItem=me;menu.parentMenu=me.parentMenu;menu.showBy(me,me.menuAlign)}},getRefItems:function(deep){var menu=this.menu,items;if(menu){items=menu.getRefItems(deep);items.unshift(menu)}return items||[]},hideMenu:function(delay){var me=this;if(me.menu){clearTimeout(me.expandMenuTimer);me.hideMenuTimer=Ext.defer(me.deferHideMenu,Ext.isNumber(delay)?delay:me.menuHideDelay,me)}},initComponent:function(){var me=this,prefix=Ext.baseCSSPrefix,cls=[prefix+"menu-item"],menu;me.addEvents("activate","click","deactivate","textchange","iconchange");if(me.plain){cls.push(prefix+"menu-item-plain")}if(me.cls){cls.push(me.cls)}me.cls=cls.join(" ");if(me.menu){menu=me.menu;delete me.menu;me.setMenu(menu)}me.callParent(arguments)},onClick:function(e){var me=this,clickHideDelay=me.clickHideDelay;if(!me.href){e.stopEvent()}if(me.disabled){return}if(me.hideOnClick){if(!clickHideDelay){me.deferHideParentMenus()}else{me.deferHideParentMenusTimer=Ext.defer(me.deferHideParentMenus,clickHideDelay,me)}}Ext.callback(me.handler,me.scope||me,[me,e]);me.fireEvent("click",me,e);if(!me.hideOnClick){me.focus()}},onRemoved:function(){var me=this;if(me.activated&&me.parentMenu.activeItem===me){me.parentMenu.deactivateActiveItem()}me.callParent(arguments);me.parentMenu=me.ownerButton=null},beforeDestroy:function(){var me=this;if(me.rendered){me.clearTip()}me.callParent()},onDestroy:function(){var me=this;clearTimeout(me.expandMenuTimer);me.cancelDeferHide();clearTimeout(me.deferHideParentMenusTimer);me.setMenu(null);me.callParent(arguments)},beforeRender:function(){var me=this,blank=Ext.BLANK_IMAGE_URL,glyph=me.glyph,glyphFontFamily=Ext._glyphFontFamily,glyphParts,iconCls,arrowCls;me.callParent();if(me.iconAlign==="right"){iconCls=me.checkChangeDisabled?me.disabledCls:"";arrowCls=Ext.baseCSSPrefix+"menu-item-icon-right "+me.iconCls}else{iconCls=(me.iconCls||"")+(me.checkChangeDisabled?" "+me.disabledCls:"");arrowCls=me.menu?me.arrowCls:""}if(typeof glyph==="string"){glyphParts=glyph.split("@");glyph=glyphParts[0];glyphFontFamily=glyphParts[1]}Ext.applyIf(me.renderData,{href:me.href||"#",hrefTarget:me.hrefTarget,icon:me.icon,iconCls:iconCls,glyph:glyph,glyphCls:glyph?Ext.baseCSSPrefix+"menu-item-glyph":undefined,glyphFontFamily:glyphFontFamily,hasIcon:!!(me.icon||me.iconCls||glyph),iconAlign:me.iconAlign,plain:me.plain,text:me.text,arrowCls:arrowCls,blank:blank,tabIndex:me.tabIndex})},onRender:function(){var me=this;me.callParent(arguments);if(me.tooltip){me.setTooltip(me.tooltip,true)}},setMenu:function(menu,destroyMenu){var me=this,oldMenu=me.menu,arrowEl=me.arrowEl;if(oldMenu){delete oldMenu.parentItem;delete oldMenu.parentMenu;delete oldMenu.ownerItem;if(destroyMenu===true||(destroyMenu!==false&&me.destroyMenu)){Ext.destroy(oldMenu)}}if(menu){me.menu=Ext.menu.Manager.get(menu);me.menu.ownerItem=me}else{me.menu=null}if(me.rendered&&!me.destroying&&arrowEl){arrowEl[me.menu?"addCls":"removeCls"](me.arrowCls)}},setHandler:function(fn,scope){this.handler=fn||null;this.scope=scope},setIcon:function(icon){var iconEl=this.iconEl,oldIcon=this.icon;if(iconEl){iconEl.src=icon||Ext.BLANK_IMAGE_URL}this.icon=icon;this.fireEvent("iconchange",this,oldIcon,icon)},setIconCls:function(iconCls){var me=this,iconEl=me.iconEl,oldCls=me.iconCls;if(iconEl){if(me.iconCls){iconEl.removeCls(me.iconCls)}if(iconCls){iconEl.addCls(iconCls)}}me.iconCls=iconCls;me.fireEvent("iconchange",me,oldCls,iconCls)},setText:function(text){var me=this,el=me.textEl||me.el,oldText=me.text;me.text=text;if(me.rendered){el.update(text||"");me.ownerCt.updateLayout()}me.fireEvent("textchange",me,oldText,text)},getTipAttr:function(){return this.tooltipType=="qtip"?"data-qtip":"title"},clearTip:function(){if(Ext.quickTipsActive&&Ext.isObject(this.tooltip)){Ext.tip.QuickTipManager.unregister(this.itemEl)}},setTooltip:function(tooltip,initial){var me=this;if(me.rendered){if(!initial){me.clearTip()}if(Ext.quickTipsActive&&Ext.isObject(tooltip)){Ext.tip.QuickTipManager.register(Ext.apply({target:me.itemEl.id},tooltip));me.tooltip=tooltip}else{me.itemEl.dom.setAttribute(me.getTipAttr(),tooltip)}}else{me.tooltip=tooltip}return me}});