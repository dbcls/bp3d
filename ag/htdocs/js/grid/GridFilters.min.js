Ext.grid.GridFilters=function(config){this.filters=new Ext.util.MixedCollection();this.filters.getKey=function(o){return o?o.dataIndex:null};for(var i=0,len=config.filters.length;i<len;i++){this.addFilter(config.filters[i])}this.deferredUpdate=new Ext.util.DelayedTask(this.reload,this);delete config.filters;Ext.apply(this,config)};Ext.extend(Ext.grid.GridFilters,Ext.util.Observable,{updateBuffer:500,paramPrefix:"filter",filterCls:"ux-filtered-column",local:false,autoReload:true,stateId:undefined,showMenu:true,filtersText:"Filters",init:function(grid){if(grid instanceof Ext.grid.GridPanel){this.grid=grid;this.store=this.grid.getStore();if(this.local){this.store.on("load",function(store){store.filterBy(this.getRecordFilter())},this)}else{this.store.on("beforeload",this.onBeforeLoad,this)}this.grid.filters=this;this.grid.addEvents("filterupdate");grid.on("render",this.onRender,this);grid.on("beforestaterestore",this.applyState,this);grid.on("beforestatesave",this.saveState,this)}else{if(grid instanceof Ext.PagingToolbar){this.toolbar=grid}}},applyState:function(grid,state){this.suspendStateStore=true;this.clearFilters();if(state.filters){for(var key in state.filters){var filter=this.filters.get(key);if(filter){filter.setValue(state.filters[key]);filter.setActive(true)}}}this.deferredUpdate.cancel();if(this.local){this.reload()}this.suspendStateStore=false},saveState:function(grid,state){var filters={};this.filters.each(function(filter){if(filter.active){filters[filter.dataIndex]=filter.getValue()}});return state.filters=filters},onRender:function(){var hmenu;if(this.showMenu){hmenu=this.grid.getView().hmenu;this.sep=hmenu.addSeparator();this.menu=hmenu.add(new Ext.menu.CheckItem({text:this.filtersText,menu:new Ext.menu.Menu()}));this.menu.on("checkchange",this.onCheckChange,this);this.menu.on("beforecheckchange",this.onBeforeCheck,this);hmenu.on("beforeshow",this.onMenu,this)}this.grid.getView().on("refresh",this.onRefresh,this);this.updateColumnHeadings(this.grid.getView())},onMenu:function(filterMenu){var filter=this.getMenuFilter();if(filter){this.menu.menu=filter.menu;this.menu.setChecked(filter.active,false)}this.menu.setVisible(filter!==undefined);this.sep.setVisible(filter!==undefined)},onCheckChange:function(item,value){this.getMenuFilter().setActive(value)},onBeforeCheck:function(check,value){return !value||this.getMenuFilter().isActivatable()},onStateChange:function(event,filter){if(event=="serialize"){return}if(filter==this.getMenuFilter()){this.menu.setChecked(filter.active,false)}if(this.autoReload||this.local){this.deferredUpdate.delay(this.updateBuffer)}var view=this.grid.getView();this.updateColumnHeadings(view);this.grid.saveState();this.grid.fireEvent("filterupdate",this,filter)},onBeforeLoad:function(store,options){options.params=options.params||{};this.cleanParams(options.params);var params=this.buildQuery(this.getFilterData());Ext.apply(options.params,params)},onRefresh:function(view){this.updateColumnHeadings(view)},getMenuFilter:function(){var view=this.grid.getView();if(!view||view.hdCtxIndex===undefined){return null}return this.filters.get(view.cm.config[view.hdCtxIndex].dataIndex)},updateColumnHeadings:function(view){if(!view||!view.mainHd){return}var hds=view.mainHd.select("td").removeClass(this.filterCls);for(var i=0,len=view.cm.config.length;i<len;i++){var filter=this.getFilter(view.cm.config[i].dataIndex);if(filter&&filter.active){hds.item(i).addClass(this.filterCls)}}},reload:function(){if(this.local){this.grid.store.clearFilter(true);this.grid.store.filterBy(this.getRecordFilter())}else{this.deferredUpdate.cancel();var store=this.grid.store;if(this.toolbar){var start=this.toolbar.paramNames.start;if(store.lastOptions&&store.lastOptions.params&&store.lastOptions.params[start]){store.lastOptions.params[start]=0}}store.reload()}},getRecordFilter:function(){var f=[];this.filters.each(function(filter){if(filter.active){f.push(filter)}});var len=f.length;return function(record){for(var i=0;i<len;i++){if(!f[i].validateRecord(record)){return false}}return true}},addFilter:function(config){var filter=config.menu?config:new (this.getFilterClass(config.type))(config);this.filters.add(filter);Ext.util.Observable.capture(filter,this.onStateChange,this);return filter},getFilter:function(dataIndex){return this.filters.get(dataIndex)},clearFilters:function(){this.filters.each(function(filter){filter.setActive(false)})},getFilterData:function(){var filters=[];this.filters.each(function(f){if(f.active){var d=[].concat(f.serialize());for(var i=0,len=d.length;i<len;i++){filters.push({field:f.dataIndex,data:d[i]})}}});return filters},buildQuery:function(filters){var p={};for(var i=0,len=filters.length;i<len;i++){var f=filters[i];var root=[this.paramPrefix,"[",i,"]"].join("");p[root+"[field]"]=f.field;var dataPrefix=root+"[data]";for(var key in f.data){p[[dataPrefix,"[",key,"]"].join("")]=f.data[key]}}return p},cleanParams:function(p){var regex=new RegExp("^"+this.paramPrefix+"[[0-9]+]");for(var key in p){if(regex.test(key)){delete p[key]}}},getFilterClass:function(type){return Ext.grid.filter[type.substr(0,1).toUpperCase()+type.substr(1)+"Filter"]}});