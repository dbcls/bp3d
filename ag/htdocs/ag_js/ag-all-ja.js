/*!
 * jQuery JavaScript Library v1.5.2
 * http://jquery.com/
 *
 * Copyright 2011, John Resig
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 * Copyright 2011, The Dojo Foundation
 * Released under the MIT, BSD, and GPL Licenses.
 *
 * Date: Thu Mar 31 15:28:23 2011 -0400
 */
(function(a,b){function ci(a){return d.isWindow(a)?a:a.nodeType===9?a.defaultView||a.parentWindow:!1}function cf(a){if(!b_[a]){var b=d("<"+a+">").appendTo("body"),c=b.css("display");b.remove();if(c==="none"||c==="")c="block";b_[a]=c}return b_[a]}function ce(a,b){var c={};d.each(cd.concat.apply([],cd.slice(0,b)),function(){c[this]=a});return c}function b$(){try{return new a.ActiveXObject("Microsoft.XMLHTTP")}catch(b){}}function bZ(){try{return new a.XMLHttpRequest}catch(b){}}function bY(){d(a).unload(function(){for(var a in bW)bW[a](0,1)})}function bS(a,c){a.dataFilter&&(c=a.dataFilter(c,a.dataType));var e=a.dataTypes,f={},g,h,i=e.length,j,k=e[0],l,m,n,o,p;for(g=1;g<i;g++){if(g===1)for(h in a.converters)typeof h==="string"&&(f[h.toLowerCase()]=a.converters[h]);l=k,k=e[g];if(k==="*")k=l;else if(l!=="*"&&l!==k){m=l+" "+k,n=f[m]||f["* "+k];if(!n){p=b;for(o in f){j=o.split(" ");if(j[0]===l||j[0]==="*"){p=f[j[1]+" "+k];if(p){o=f[o],o===!0?n=p:p===!0&&(n=o);break}}}}!n&&!p&&d.error("No conversion from "+m.replace(" "," to ")),n!==!0&&(c=n?n(c):p(o(c)))}}return c}function bR(a,c,d){var e=a.contents,f=a.dataTypes,g=a.responseFields,h,i,j,k;for(i in g)i in d&&(c[g[i]]=d[i]);while(f[0]==="*")f.shift(),h===b&&(h=a.mimeType||c.getResponseHeader("content-type"));if(h)for(i in e)if(e[i]&&e[i].test(h)){f.unshift(i);break}if(f[0]in d)j=f[0];else{for(i in d){if(!f[0]||a.converters[i+" "+f[0]]){j=i;break}k||(k=i)}j=j||k}if(j){j!==f[0]&&f.unshift(j);return d[j]}}function bQ(a,b,c,e){if(d.isArray(b)&&b.length)d.each(b,function(b,f){c||bs.test(a)?e(a,f):bQ(a+"["+(typeof f==="object"||d.isArray(f)?b:"")+"]",f,c,e)});else if(c||b==null||typeof b!=="object")e(a,b);else if(d.isArray(b)||d.isEmptyObject(b))e(a,"");else for(var f in b)bQ(a+"["+f+"]",b[f],c,e)}function bP(a,c,d,e,f,g){f=f||c.dataTypes[0],g=g||{},g[f]=!0;var h=a[f],i=0,j=h?h.length:0,k=a===bJ,l;for(;i<j&&(k||!l);i++)l=h[i](c,d,e),typeof l==="string"&&(!k||g[l]?l=b:(c.dataTypes.unshift(l),l=bP(a,c,d,e,l,g)));(k||!l)&&!g["*"]&&(l=bP(a,c,d,e,"*",g));return l}function bO(a){return function(b,c){typeof b!=="string"&&(c=b,b="*");if(d.isFunction(c)){var e=b.toLowerCase().split(bD),f=0,g=e.length,h,i,j;for(;f<g;f++)h=e[f],j=/^\+/.test(h),j&&(h=h.substr(1)||"*"),i=a[h]=a[h]||[],i[j?"unshift":"push"](c)}}}function bq(a,b,c){var e=b==="width"?bk:bl,f=b==="width"?a.offsetWidth:a.offsetHeight;if(c==="border")return f;d.each(e,function(){c||(f-=parseFloat(d.css(a,"padding"+this))||0),c==="margin"?f+=parseFloat(d.css(a,"margin"+this))||0:f-=parseFloat(d.css(a,"border"+this+"Width"))||0});return f}function bc(a,b){b.src?d.ajax({url:b.src,async:!1,dataType:"script"}):d.globalEval(b.text||b.textContent||b.innerHTML||""),b.parentNode&&b.parentNode.removeChild(b)}function bb(a){return"getElementsByTagName"in a?a.getElementsByTagName("*"):"querySelectorAll"in a?a.querySelectorAll("*"):[]}function ba(a,b){if(b.nodeType===1){var c=b.nodeName.toLowerCase();b.clearAttributes(),b.mergeAttributes(a);if(c==="object")b.outerHTML=a.outerHTML;else if(c!=="input"||a.type!=="checkbox"&&a.type!=="radio"){if(c==="option")b.selected=a.defaultSelected;else if(c==="input"||c==="textarea")b.defaultValue=a.defaultValue}else a.checked&&(b.defaultChecked=b.checked=a.checked),b.value!==a.value&&(b.value=a.value);b.removeAttribute(d.expando)}}function _(a,b){if(b.nodeType===1&&d.hasData(a)){var c=d.expando,e=d.data(a),f=d.data(b,e);if(e=e[c]){var g=e.events;f=f[c]=d.extend({},e);if(g){delete f.handle,f.events={};for(var h in g)for(var i=0,j=g[h].length;i<j;i++)d.event.add(b,h+(g[h][i].namespace?".":"")+g[h][i].namespace,g[h][i],g[h][i].data)}}}}function $(a,b){return d.nodeName(a,"table")?a.getElementsByTagName("tbody")[0]||a.appendChild(a.ownerDocument.createElement("tbody")):a}function Q(a,b,c){if(d.isFunction(b))return d.grep(a,function(a,d){var e=!!b.call(a,d,a);return e===c});if(b.nodeType)return d.grep(a,function(a,d){return a===b===c});if(typeof b==="string"){var e=d.grep(a,function(a){return a.nodeType===1});if(L.test(b))return d.filter(b,e,!c);b=d.filter(b,e)}return d.grep(a,function(a,e){return d.inArray(a,b)>=0===c})}function P(a){return!a||!a.parentNode||a.parentNode.nodeType===11}function H(a,b){return(a&&a!=="*"?a+".":"")+b.replace(t,"`").replace(u,"&")}function G(a){var b,c,e,f,g,h,i,j,k,l,m,n,o,p=[],q=[],s=d._data(this,"events");if(a.liveFired!==this&&s&&s.live&&!a.target.disabled&&(!a.button||a.type!=="click")){a.namespace&&(n=new RegExp("(^|\\.)"+a.namespace.split(".").join("\\.(?:.*\\.)?")+"(\\.|$)")),a.liveFired=this;var t=s.live.slice(0);for(i=0;i<t.length;i++)g=t[i],g.origType.replace(r,"")===a.type?q.push(g.selector):t.splice(i--,1);f=d(a.target).closest(q,a.currentTarget);for(j=0,k=f.length;j<k;j++){m=f[j];for(i=0;i<t.length;i++){g=t[i];if(m.selector===g.selector&&(!n||n.test(g.namespace))&&!m.elem.disabled){h=m.elem,e=null;if(g.preType==="mouseenter"||g.preType==="mouseleave")a.type=g.preType,e=d(a.relatedTarget).closest(g.selector)[0];(!e||e!==h)&&p.push({elem:h,handleObj:g,level:m.level})}}}for(j=0,k=p.length;j<k;j++){f=p[j];if(c&&f.level>c)break;a.currentTarget=f.elem,a.data=f.handleObj.data,a.handleObj=f.handleObj,o=f.handleObj.origHandler.apply(f.elem,arguments);if(o===!1||a.isPropagationStopped()){c=f.level,o===!1&&(b=!1);if(a.isImmediatePropagationStopped())break}}return b}}function E(a,c,e){var f=d.extend({},e[0]);f.type=a,f.originalEvent={},f.liveFired=b,d.event.handle.call(c,f),f.isDefaultPrevented()&&e[0].preventDefault()}function y(){return!0}function x(){return!1}function i(a){for(var b in a)if(b!=="toJSON")return!1;return!0}function h(a,c,e){if(e===b&&a.nodeType===1){e=a.getAttribute("data-"+c);if(typeof e==="string"){try{e=e==="true"?!0:e==="false"?!1:e==="null"?null:d.isNaN(e)?g.test(e)?d.parseJSON(e):e:parseFloat(e)}catch(f){}d.data(a,c,e)}else e=b}return e}var c=a.document,d=function(){function G(){if(!d.isReady){try{c.documentElement.doScroll("left")}catch(a){setTimeout(G,1);return}d.ready()}}var d=function(a,b){return new d.fn.init(a,b,g)},e=a.jQuery,f=a.$,g,h=/^(?:[^<]*(<[\w\W]+>)[^>]*$|#([\w\-]+)$)/,i=/\S/,j=/^\s+/,k=/\s+$/,l=/\d/,m=/^<(\w+)\s*\/?>(?:<\/\1>)?$/,n=/^[\],:{}\s]*$/,o=/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,p=/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,q=/(?:^|:|,)(?:\s*\[)+/g,r=/(webkit)[ \/]([\w.]+)/,s=/(opera)(?:.*version)?[ \/]([\w.]+)/,t=/(msie) ([\w.]+)/,u=/(mozilla)(?:.*? rv:([\w.]+))?/,v=navigator.userAgent,w,x,y,z=Object.prototype.toString,A=Object.prototype.hasOwnProperty,B=Array.prototype.push,C=Array.prototype.slice,D=String.prototype.trim,E=Array.prototype.indexOf,F={};d.fn=d.prototype={constructor:d,init:function(a,e,f){var g,i,j,k;if(!a)return this;if(a.nodeType){this.context=this[0]=a,this.length=1;return this}if(a==="body"&&!e&&c.body){this.context=c,this[0]=c.body,this.selector="body",this.length=1;return this}if(typeof a==="string"){g=h.exec(a);if(!g||!g[1]&&e)return!e||e.jquery?(e||f).find(a):this.constructor(e).find(a);if(g[1]){e=e instanceof d?e[0]:e,k=e?e.ownerDocument||e:c,j=m.exec(a),j?d.isPlainObject(e)?(a=[c.createElement(j[1])],d.fn.attr.call(a,e,!0)):a=[k.createElement(j[1])]:(j=d.buildFragment([g[1]],[k]),a=(j.cacheable?d.clone(j.fragment):j.fragment).childNodes);return d.merge(this,a)}i=c.getElementById(g[2]);if(i&&i.parentNode){if(i.id!==g[2])return f.find(a);this.length=1,this[0]=i}this.context=c,this.selector=a;return this}if(d.isFunction(a))return f.ready(a);a.selector!==b&&(this.selector=a.selector,this.context=a.context);return d.makeArray(a,this)},selector:"",jquery:"1.5.2",length:0,size:function(){return this.length},toArray:function(){return C.call(this,0)},get:function(a){return a==null?this.toArray():a<0?this[this.length+a]:this[a]},pushStack:function(a,b,c){var e=this.constructor();d.isArray(a)?B.apply(e,a):d.merge(e,a),e.prevObject=this,e.context=this.context,b==="find"?e.selector=this.selector+(this.selector?" ":"")+c:b&&(e.selector=this.selector+"."+b+"("+c+")");return e},each:function(a,b){return d.each(this,a,b)},ready:function(a){d.bindReady(),x.done(a);return this},eq:function(a){return a===-1?this.slice(a):this.slice(a,+a+1)},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},slice:function(){return this.pushStack(C.apply(this,arguments),"slice",C.call(arguments).join(","))},map:function(a){return this.pushStack(d.map(this,function(b,c){return a.call(b,c,b)}))},end:function(){return this.prevObject||this.constructor(null)},push:B,sort:[].sort,splice:[].splice},d.fn.init.prototype=d.fn,d.extend=d.fn.extend=function(){var a,c,e,f,g,h,i=arguments[0]||{},j=1,k=arguments.length,l=!1;typeof i==="boolean"&&(l=i,i=arguments[1]||{},j=2),typeof i!=="object"&&!d.isFunction(i)&&(i={}),k===j&&(i=this,--j);for(;j<k;j++)if((a=arguments[j])!=null)for(c in a){e=i[c],f=a[c];if(i===f)continue;l&&f&&(d.isPlainObject(f)||(g=d.isArray(f)))?(g?(g=!1,h=e&&d.isArray(e)?e:[]):h=e&&d.isPlainObject(e)?e:{},i[c]=d.extend(l,h,f)):f!==b&&(i[c]=f)}return i},d.extend({noConflict:function(b){a.$=f,b&&(a.jQuery=e);return d},isReady:!1,readyWait:1,ready:function(a){a===!0&&d.readyWait--;if(!d.readyWait||a!==!0&&!d.isReady){if(!c.body)return setTimeout(d.ready,1);d.isReady=!0;if(a!==!0&&--d.readyWait>0)return;x.resolveWith(c,[d]),d.fn.trigger&&d(c).trigger("ready").unbind("ready")}},bindReady:function(){if(!x){x=d._Deferred();if(c.readyState==="complete")return setTimeout(d.ready,1);if(c.addEventListener)c.addEventListener("DOMContentLoaded",y,!1),a.addEventListener("load",d.ready,!1);else if(c.attachEvent){c.attachEvent("onreadystatechange",y),a.attachEvent("onload",d.ready);var b=!1;try{b=a.frameElement==null}catch(e){}c.documentElement.doScroll&&b&&G()}}},isFunction:function(a){return d.type(a)==="function"},isArray:Array.isArray||function(a){return d.type(a)==="array"},isWindow:function(a){return a&&typeof a==="object"&&"setInterval"in a},isNaN:function(a){return a==null||!l.test(a)||isNaN(a)},type:function(a){return a==null?String(a):F[z.call(a)]||"object"},isPlainObject:function(a){if(!a||d.type(a)!=="object"||a.nodeType||d.isWindow(a))return!1;if(a.constructor&&!A.call(a,"constructor")&&!A.call(a.constructor.prototype,"isPrototypeOf"))return!1;var c;for(c in a){}return c===b||A.call(a,c)},isEmptyObject:function(a){for(var b in a)return!1;return!0},error:function(a){throw a},parseJSON:function(b){if(typeof b!=="string"||!b)return null;b=d.trim(b);if(n.test(b.replace(o,"@").replace(p,"]").replace(q,"")))return a.JSON&&a.JSON.parse?a.JSON.parse(b):(new Function("return "+b))();d.error("Invalid JSON: "+b)},parseXML:function(b,c,e){a.DOMParser?(e=new DOMParser,c=e.parseFromString(b,"text/xml")):(c=new ActiveXObject("Microsoft.XMLDOM"),c.async="false",c.loadXML(b)),e=c.documentElement,(!e||!e.nodeName||e.nodeName==="parsererror")&&d.error("Invalid XML: "+b);return c},noop:function(){},globalEval:function(a){if(a&&i.test(a)){var b=c.head||c.getElementsByTagName("head")[0]||c.documentElement,e=c.createElement("script");d.support.scriptEval()?e.appendChild(c.createTextNode(a)):e.text=a,b.insertBefore(e,b.firstChild),b.removeChild(e)}},nodeName:function(a,b){return a.nodeName&&a.nodeName.toUpperCase()===b.toUpperCase()},each:function(a,c,e){var f,g=0,h=a.length,i=h===b||d.isFunction(a);if(e){if(i){for(f in a)if(c.apply(a[f],e)===!1)break}else for(;g<h;)if(c.apply(a[g++],e)===!1)break}else if(i){for(f in a)if(c.call(a[f],f,a[f])===!1)break}else for(var j=a[0];g<h&&c.call(j,g,j)!==!1;j=a[++g]){}return a},trim:D?function(a){return a==null?"":D.call(a)}:function(a){return a==null?"":(a+"").replace(j,"").replace(k,"")},makeArray:function(a,b){var c=b||[];if(a!=null){var e=d.type(a);a.length==null||e==="string"||e==="function"||e==="regexp"||d.isWindow(a)?B.call(c,a):d.merge(c,a)}return c},inArray:function(a,b){if(b.indexOf)return b.indexOf(a);for(var c=0,d=b.length;c<d;c++)if(b[c]===a)return c;return-1},merge:function(a,c){var d=a.length,e=0;if(typeof c.length==="number")for(var f=c.length;e<f;e++)a[d++]=c[e];else while(c[e]!==b)a[d++]=c[e++];a.length=d;return a},grep:function(a,b,c){var d=[],e;c=!!c;for(var f=0,g=a.length;f<g;f++)e=!!b(a[f],f),c!==e&&d.push(a[f]);return d},map:function(a,b,c){var d=[],e;for(var f=0,g=a.length;f<g;f++)e=b(a[f],f,c),e!=null&&(d[d.length]=e);return d.concat.apply([],d)},guid:1,proxy:function(a,c,e){arguments.length===2&&(typeof c==="string"?(e=a,a=e[c],c=b):c&&!d.isFunction(c)&&(e=c,c=b)),!c&&a&&(c=function(){return a.apply(e||this,arguments)}),a&&(c.guid=a.guid=a.guid||c.guid||d.guid++);return c},access:function(a,c,e,f,g,h){var i=a.length;if(typeof c==="object"){for(var j in c)d.access(a,j,c[j],f,g,e);return a}if(e!==b){f=!h&&f&&d.isFunction(e);for(var k=0;k<i;k++)g(a[k],c,f?e.call(a[k],k,g(a[k],c)):e,h);return a}return i?g(a[0],c):b},now:function(){return(new Date).getTime()},uaMatch:function(a){a=a.toLowerCase();var b=r.exec(a)||s.exec(a)||t.exec(a)||a.indexOf("compatible")<0&&u.exec(a)||[];return{browser:b[1]||"",version:b[2]||"0"}},sub:function(){function a(b,c){return new a.fn.init(b,c)}d.extend(!0,a,this),a.superclass=this,a.fn=a.prototype=this(),a.fn.constructor=a,a.subclass=this.subclass,a.fn.init=function b(b,c){c&&c instanceof d&&!(c instanceof a)&&(c=a(c));return d.fn.init.call(this,b,c,e)},a.fn.init.prototype=a.fn;var e=a(c);return a},browser:{}}),d.each("Boolean Number String Function Array Date RegExp Object".split(" "),function(a,b){F["[object "+b+"]"]=b.toLowerCase()}),w=d.uaMatch(v),w.browser&&(d.browser[w.browser]=!0,d.browser.version=w.version),d.browser.webkit&&(d.browser.safari=!0),E&&(d.inArray=function(a,b){return E.call(b,a)}),i.test(" ")&&(j=/^[\s\xA0]+/,k=/[\s\xA0]+$/),g=d(c),c.addEventListener?y=function(){c.removeEventListener("DOMContentLoaded",y,!1),d.ready()}:c.attachEvent&&(y=function(){c.readyState==="complete"&&(c.detachEvent("onreadystatechange",y),d.ready())});return d}(),e="then done fail isResolved isRejected promise".split(" "),f=[].slice;d.extend({_Deferred:function(){var a=[],b,c,e,f={done:function(){if(!e){var c=arguments,g,h,i,j,k;b&&(k=b,b=0);for(g=0,h=c.length;g<h;g++)i=c[g],j=d.type(i),j==="array"?f.done.apply(f,i):j==="function"&&a.push(i);k&&f.resolveWith(k[0],k[1])}return this},resolveWith:function(d,f){if(!e&&!b&&!c){f=f||[],c=1;try{while(a[0])a.shift().apply(d,f)}finally{b=[d,f],c=0}}return this},resolve:function(){f.resolveWith(this,arguments);return this},isResolved:function(){return c||b},cancel:function(){e=1,a=[];return this}};return f},Deferred:function(a){var b=d._Deferred(),c=d._Deferred(),f;d.extend(b,{then:function(a,c){b.done(a).fail(c);return this},fail:c.done,rejectWith:c.resolveWith,reject:c.resolve,isRejected:c.isResolved,promise:function(a){if(a==null){if(f)return f;f=a={}}var c=e.length;while(c--)a[e[c]]=b[e[c]];return a}}),b.done(c.cancel).fail(b.cancel),delete b.cancel,a&&a.call(b,b);return b},when:function(a){function i(a){return function(c){b[a]=arguments.length>1?f.call(arguments,0):c,--g||h.resolveWith(h,f.call(b,0))}}var b=arguments,c=0,e=b.length,g=e,h=e<=1&&a&&d.isFunction(a.promise)?a:d.Deferred();if(e>1){for(;c<e;c++)b[c]&&d.isFunction(b[c].promise)?b[c].promise().then(i(c),h.reject):--g;g||h.resolveWith(h,b)}else h!==a&&h.resolveWith(h,e?[a]:[]);return h.promise()}}),function(){d.support={};var b=c.createElement("div");b.style.display="none",b.innerHTML="   <link/><table></table><a href='/a' style='color:red;float:left;opacity:.55;'>a</a><input type='checkbox'/>";var e=b.getElementsByTagName("*"),f=b.getElementsByTagName("a")[0],g=c.createElement("select"),h=g.appendChild(c.createElement("option")),i=b.getElementsByTagName("input")[0];if(e&&e.length&&f){d.support={leadingWhitespace:b.firstChild.nodeType===3,tbody:!b.getElementsByTagName("tbody").length,htmlSerialize:!!b.getElementsByTagName("link").length,style:/red/.test(f.getAttribute("style")),hrefNormalized:f.getAttribute("href")==="/a",opacity:/^0.55$/.test(f.style.opacity),cssFloat:!!f.style.cssFloat,checkOn:i.value==="on",optSelected:h.selected,deleteExpando:!0,optDisabled:!1,checkClone:!1,noCloneEvent:!0,noCloneChecked:!0,boxModel:null,inlineBlockNeedsLayout:!1,shrinkWrapBlocks:!1,reliableHiddenOffsets:!0,reliableMarginRight:!0},i.checked=!0,d.support.noCloneChecked=i.cloneNode(!0).checked,g.disabled=!0,d.support.optDisabled=!h.disabled;var j=null;d.support.scriptEval=function(){if(j===null){var b=c.documentElement,e=c.createElement("script"),f="script"+d.now();try{e.appendChild(c.createTextNode("window."+f+"=1;"))}catch(g){}b.insertBefore(e,b.firstChild),a[f]?(j=!0,delete a[f]):j=!1,b.removeChild(e)}return j};try{delete b.test}catch(k){d.support.deleteExpando=!1}!b.addEventListener&&b.attachEvent&&b.fireEvent&&(b.attachEvent("onclick",function l(){d.support.noCloneEvent=!1,b.detachEvent("onclick",l)}),b.cloneNode(!0).fireEvent("onclick")),b=c.createElement("div"),b.innerHTML="<input type='radio' name='radiotest' checked='checked'/>";var m=c.createDocumentFragment();m.appendChild(b.firstChild),d.support.checkClone=m.cloneNode(!0).cloneNode(!0).lastChild.checked,d(function(){var a=c.createElement("div"),b=c.getElementsByTagName("body")[0];if(b){a.style.width=a.style.paddingLeft="1px",b.appendChild(a),d.boxModel=d.support.boxModel=a.offsetWidth===2,"zoom"in a.style&&(a.style.display="inline",a.style.zoom=1,d.support.inlineBlockNeedsLayout=a.offsetWidth===2,a.style.display="",a.innerHTML="<div style='width:4px;'></div>",d.support.shrinkWrapBlocks=a.offsetWidth!==2),a.innerHTML="<table><tr><td style='padding:0;border:0;display:none'></td><td>t</td></tr></table>";var e=a.getElementsByTagName("td");d.support.reliableHiddenOffsets=e[0].offsetHeight===0,e[0].style.display="",e[1].style.display="none",d.support.reliableHiddenOffsets=d.support.reliableHiddenOffsets&&e[0].offsetHeight===0,a.innerHTML="",c.defaultView&&c.defaultView.getComputedStyle&&(a.style.width="1px",a.style.marginRight="0",d.support.reliableMarginRight=(parseInt(c.defaultView.getComputedStyle(a,null).marginRight,10)||0)===0),b.removeChild(a).style.display="none",a=e=null}});var n=function(a){var b=c.createElement("div");a="on"+a;if(!b.attachEvent)return!0;var d=a in b;d||(b.setAttribute(a,"return;"),d=typeof b[a]==="function");return d};d.support.submitBubbles=n("submit"),d.support.changeBubbles=n("change"),b=e=f=null}}();var g=/^(?:\{.*\}|\[.*\])$/;d.extend({cache:{},uuid:0,expando:"jQuery"+(d.fn.jquery+Math.random()).replace(/\D/g,""),noData:{embed:!0,object:"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",applet:!0},hasData:function(a){a=a.nodeType?d.cache[a[d.expando]]:a[d.expando];return!!a&&!i(a)},data:function(a,c,e,f){if(d.acceptData(a)){var g=d.expando,h=typeof c==="string",i,j=a.nodeType,k=j?d.cache:a,l=j?a[d.expando]:a[d.expando]&&d.expando;if((!l||f&&l&&!k[l][g])&&h&&e===b)return;l||(j?a[d.expando]=l=++d.uuid:l=d.expando),k[l]||(k[l]={},j||(k[l].toJSON=d.noop));if(typeof c==="object"||typeof c==="function")f?k[l][g]=d.extend(k[l][g],c):k[l]=d.extend(k[l],c);i=k[l],f&&(i[g]||(i[g]={}),i=i[g]),e!==b&&(i[c]=e);if(c==="events"&&!i[c])return i[g]&&i[g].events;return h?i[c]:i}},removeData:function(b,c,e){if(d.acceptData(b)){var f=d.expando,g=b.nodeType,h=g?d.cache:b,j=g?b[d.expando]:d.expando;if(!h[j])return;if(c){var k=e?h[j][f]:h[j];if(k){delete k[c];if(!i(k))return}}if(e){delete h[j][f];if(!i(h[j]))return}var l=h[j][f];d.support.deleteExpando||h!=a?delete h[j]:h[j]=null,l?(h[j]={},g||(h[j].toJSON=d.noop),h[j][f]=l):g&&(d.support.deleteExpando?delete b[d.expando]:b.removeAttribute?b.removeAttribute(d.expando):b[d.expando]=null)}},_data:function(a,b,c){return d.data(a,b,c,!0)},acceptData:function(a){if(a.nodeName){var b=d.noData[a.nodeName.toLowerCase()];if(b)return b!==!0&&a.getAttribute("classid")===b}return!0}}),d.fn.extend({data:function(a,c){var e=null;if(typeof a==="undefined"){if(this.length){e=d.data(this[0]);if(this[0].nodeType===1){var f=this[0].attributes,g;for(var i=0,j=f.length;i<j;i++)g=f[i].name,g.indexOf("data-")===0&&(g=g.substr(5),h(this[0],g,e[g]))}}return e}if(typeof a==="object")return this.each(function(){d.data(this,a)});var k=a.split(".");k[1]=k[1]?"."+k[1]:"";if(c===b){e=this.triggerHandler("getData"+k[1]+"!",[k[0]]),e===b&&this.length&&(e=d.data(this[0],a),e=h(this[0],a,e));return e===b&&k[1]?this.data(k[0]):e}return this.each(function(){var b=d(this),e=[k[0],c];b.triggerHandler("setData"+k[1]+"!",e),d.data(this,a,c),b.triggerHandler("changeData"+k[1]+"!",e)})},removeData:function(a){return this.each(function(){d.removeData(this,a)})}}),d.extend({queue:function(a,b,c){if(a){b=(b||"fx")+"queue";var e=d._data(a,b);if(!c)return e||[];!e||d.isArray(c)?e=d._data(a,b,d.makeArray(c)):e.push(c);return e}},dequeue:function(a,b){b=b||"fx";var c=d.queue(a,b),e=c.shift();e==="inprogress"&&(e=c.shift()),e&&(b==="fx"&&c.unshift("inprogress"),e.call(a,function(){d.dequeue(a,b)})),c.length||d.removeData(a,b+"queue",!0)}}),d.fn.extend({queue:function(a,c){typeof a!=="string"&&(c=a,a="fx");if(c===b)return d.queue(this[0],a);return this.each(function(b){var e=d.queue(this,a,c);a==="fx"&&e[0]!=="inprogress"&&d.dequeue(this,a)})},dequeue:function(a){return this.each(function(){d.dequeue(this,a)})},delay:function(a,b){a=d.fx?d.fx.speeds[a]||a:a,b=b||"fx";return this.queue(b,function(){var c=this;setTimeout(function(){d.dequeue(c,b)},a)})},clearQueue:function(a){return this.queue(a||"fx",[])}});var j=/[\n\t\r]/g,k=/\s+/,l=/\r/g,m=/^(?:href|src|style)$/,n=/^(?:button|input)$/i,o=/^(?:button|input|object|select|textarea)$/i,p=/^a(?:rea)?$/i,q=/^(?:radio|checkbox)$/i;d.props={"for":"htmlFor","class":"className",readonly:"readOnly",maxlength:"maxLength",cellspacing:"cellSpacing",rowspan:"rowSpan",colspan:"colSpan",tabindex:"tabIndex",usemap:"useMap",frameborder:"frameBorder"},d.fn.extend({attr:function(a,b){return d.access(this,a,b,!0,d.attr)},removeAttr:function(a,b){return this.each(function(){d.attr(this,a,""),this.nodeType===1&&this.removeAttribute(a)})},addClass:function(a){if(d.isFunction(a))return this.each(function(b){var c=d(this);c.addClass(a.call(this,b,c.attr("class")))});if(a&&typeof a==="string"){var b=(a||"").split(k);for(var c=0,e=this.length;c<e;c++){var f=this[c];if(f.nodeType===1)if(f.className){var g=" "+f.className+" ",h=f.className;for(var i=0,j=b.length;i<j;i++)g.indexOf(" "+b[i]+" ")<0&&(h+=" "+b[i]);f.className=d.trim(h)}else f.className=a}}return this},removeClass:function(a){if(d.isFunction(a))return this.each(function(b){var c=d(this);c.removeClass(a.call(this,b,c.attr("class")))});if(a&&typeof a==="string"||a===b){var c=(a||"").split(k);for(var e=0,f=this.length;e<f;e++){var g=this[e];if(g.nodeType===1&&g.className)if(a){var h=(" "+g.className+" ").replace(j," ");for(var i=0,l=c.length;i<l;i++)h=h.replace(" "+c[i]+" "," ");g.className=d.trim(h)}else g.className=""}}return this},toggleClass:function(a,b){var c=typeof a,e=typeof b==="boolean";if(d.isFunction(a))return this.each(function(c){var e=d(this);e.toggleClass(a.call(this,c,e.attr("class"),b),b)});return this.each(function(){if(c==="string"){var f,g=0,h=d(this),i=b,j=a.split(k);while(f=j[g++])i=e?i:!h.hasClass(f),h[i?"addClass":"removeClass"](f)}else if(c==="undefined"||c==="boolean")this.className&&d._data(this,"__className__",this.className),this.className=this.className||a===!1?"":d._data(this,"__className__")||""})},hasClass:function(a){var b=" "+a+" ";for(var c=0,d=this.length;c<d;c++)if((" "+this[c].className+" ").replace(j," ").indexOf(b)>-1)return!0;return!1},val:function(a){if(!arguments.length){var c=this[0];if(c){if(d.nodeName(c,"option")){var e=c.attributes.value;return!e||e.specified?c.value:c.text}if(d.nodeName(c,"select")){var f=c.selectedIndex,g=[],h=c.options,i=c.type==="select-one";if(f<0)return null;for(var j=i?f:0,k=i?f+1:h.length;j<k;j++){var m=h[j];if(m.selected&&(d.support.optDisabled?!m.disabled:m.getAttribute("disabled")===null)&&(!m.parentNode.disabled||!d.nodeName(m.parentNode,"optgroup"))){a=d(m).val();if(i)return a;g.push(a)}}if(i&&!g.length&&h.length)return d(h[f]).val();return g}if(q.test(c.type)&&!d.support.checkOn)return c.getAttribute("value")===null?"on":c.value;return(c.value||"").replace(l,"")}return b}var n=d.isFunction(a);return this.each(function(b){var c=d(this),e=a;if(this.nodeType===1){n&&(e=a.call(this,b,c.val())),e==null?e="":typeof e==="number"?e+="":d.isArray(e)&&(e=d.map(e,function(a){return a==null?"":a+""}));if(d.isArray(e)&&q.test(this.type))this.checked=d.inArray(c.val(),e)>=0;else if(d.nodeName(this,"select")){var f=d.makeArray(e);d("option",this).each(function(){this.selected=d.inArray(d(this).val(),f)>=0}),f.length||(this.selectedIndex=-1)}else this.value=e}})}}),d.extend({attrFn:{val:!0,css:!0,html:!0,text:!0,data:!0,width:!0,height:!0,offset:!0},attr:function(a,c,e,f){if(!a||a.nodeType===3||a.nodeType===8||a.nodeType===2)return b;if(f&&c in d.attrFn)return d(a)[c](e);var g=a.nodeType!==1||!d.isXMLDoc(a),h=e!==b;c=g&&d.props[c]||c;if(a.nodeType===1){var i=m.test(c);if(c==="selected"&&!d.support.optSelected){var j=a.parentNode;j&&(j.selectedIndex,j.parentNode&&j.parentNode.selectedIndex)}if((c in a||a[c]!==b)&&g&&!i){h&&(c==="type"&&n.test(a.nodeName)&&a.parentNode&&d.error("type property can't be changed"),e===null?a.nodeType===1&&a.removeAttribute(c):a[c]=e);if(d.nodeName(a,"form")&&a.getAttributeNode(c))return a.getAttributeNode(c).nodeValue;if(c==="tabIndex"){var k=a.getAttributeNode("tabIndex");return k&&k.specified?k.value:o.test(a.nodeName)||p.test(a.nodeName)&&a.href?0:b}return a[c]}if(!d.support.style&&g&&c==="style"){h&&(a.style.cssText=""+e);return a.style.cssText}h&&a.setAttribute(c,""+e);if(!a.attributes[c]&&(a.hasAttribute&&!a.hasAttribute(c)))return b;var l=!d.support.hrefNormalized&&g&&i?a.getAttribute(c,2):a.getAttribute(c);return l===null?b:l}h&&(a[c]=e);return a[c]}});var r=/\.(.*)$/,s=/^(?:textarea|input|select)$/i,t=/\./g,u=/ /g,v=/[^\w\s.|`]/g,w=function(a){return a.replace(v,"\\$&")};d.event={add:function(c,e,f,g){if(c.nodeType!==3&&c.nodeType!==8){try{d.isWindow(c)&&(c!==a&&!c.frameElement)&&(c=a)}catch(h){}if(f===!1)f=x;else if(!f)return;var i,j;f.handler&&(i=f,f=i.handler),f.guid||(f.guid=d.guid++);var k=d._data(c);if(!k)return;var l=k.events,m=k.handle;l||(k.events=l={}),m||(k.handle=m=function(a){return typeof d!=="undefined"&&d.event.triggered!==a.type?d.event.handle.apply(m.elem,arguments):b}),m.elem=c,e=e.split(" ");var n,o=0,p;while(n=e[o++]){j=i?d.extend({},i):{handler:f,data:g},n.indexOf(".")>-1?(p=n.split("."),n=p.shift(),j.namespace=p.slice(0).sort().join(".")):(p=[],j.namespace=""),j.type=n,j.guid||(j.guid=f.guid);var q=l[n],r=d.event.special[n]||{};if(!q){q=l[n]=[];if(!r.setup||r.setup.call(c,g,p,m)===!1)c.addEventListener?c.addEventListener(n,m,!1):c.attachEvent&&c.attachEvent("on"+n,m)}r.add&&(r.add.call(c,j),j.handler.guid||(j.handler.guid=f.guid)),q.push(j),d.event.global[n]=!0}c=null}},global:{},remove:function(a,c,e,f){if(a.nodeType!==3&&a.nodeType!==8){e===!1&&(e=x);var g,h,i,j,k=0,l,m,n,o,p,q,r,s=d.hasData(a)&&d._data(a),t=s&&s.events;if(!s||!t)return;c&&c.type&&(e=c.handler,c=c.type);if(!c||typeof c==="string"&&c.charAt(0)==="."){c=c||"";for(h in t)d.event.remove(a,h+c);return}c=c.split(" ");while(h=c[k++]){r=h,q=null,l=h.indexOf(".")<0,m=[],l||(m=h.split("."),h=m.shift(),n=new RegExp("(^|\\.)"+d.map(m.slice(0).sort(),w).join("\\.(?:.*\\.)?")+"(\\.|$)")),p=t[h];if(!p)continue;if(!e){for(j=0;j<p.length;j++){q=p[j];if(l||n.test(q.namespace))d.event.remove(a,r,q.handler,j),p.splice(j--,1)}continue}o=d.event.special[h]||{};for(j=f||0;j<p.length;j++){q=p[j];if(e.guid===q.guid){if(l||n.test(q.namespace))f==null&&p.splice(j--,1),o.remove&&o.remove.call(a,q);if(f!=null)break}}if(p.length===0||f!=null&&p.length===1)(!o.teardown||o.teardown.call(a,m)===!1)&&d.removeEvent(a,h,s.handle),g=null,delete t[h]}if(d.isEmptyObject(t)){var u=s.handle;u&&(u.elem=null),delete s.events,delete s.handle,d.isEmptyObject(s)&&d.removeData(a,b,!0)}}},trigger:function(a,c,e){var f=a.type||a,g=arguments[3];if(!g){a=typeof a==="object"?a[d.expando]?a:d.extend(d.Event(f),a):d.Event(f),f.indexOf("!")>=0&&(a.type=f=f.slice(0,-1),a.exclusive=!0),e||(a.stopPropagation(),d.event.global[f]&&d.each(d.cache,function(){var b=d.expando,e=this[b];e&&e.events&&e.events[f]&&d.event.trigger(a,c,e.handle.elem)}));if(!e||e.nodeType===3||e.nodeType===8)return b;a.result=b,a.target=e,c=d.makeArray(c),c.unshift(a)}a.currentTarget=e;var h=d._data(e,"handle");h&&h.apply(e,c);var i=e.parentNode||e.ownerDocument;try{e&&e.nodeName&&d.noData[e.nodeName.toLowerCase()]||e["on"+f]&&e["on"+f].apply(e,c)===!1&&(a.result=!1,a.preventDefault())}catch(j){}if(!a.isPropagationStopped()&&i)d.event.trigger(a,c,i,!0);else if(!a.isDefaultPrevented()){var k,l=a.target,m=f.replace(r,""),n=d.nodeName(l,"a")&&m==="click",o=d.event.special[m]||{};if((!o._default||o._default.call(e,a)===!1)&&!n&&!(l&&l.nodeName&&d.noData[l.nodeName.toLowerCase()])){try{l[m]&&(k=l["on"+m],k&&(l["on"+m]=null),d.event.triggered=a.type,l[m]())}catch(p){}k&&(l["on"+m]=k),d.event.triggered=b}}},handle:function(c){var e,f,g,h,i,j=[],k=d.makeArray(arguments);c=k[0]=d.event.fix(c||a.event),c.currentTarget=this,e=c.type.indexOf(".")<0&&!c.exclusive,e||(g=c.type.split("."),c.type=g.shift(),j=g.slice(0).sort(),h=new RegExp("(^|\\.)"+j.join("\\.(?:.*\\.)?")+"(\\.|$)")),c.namespace=c.namespace||j.join("."),i=d._data(this,"events"),f=(i||{})[c.type];if(i&&f){f=f.slice(0);for(var l=0,m=f.length;l<m;l++){var n=f[l];if(e||h.test(n.namespace)){c.handler=n.handler,c.data=n.data,c.handleObj=n;var o=n.handler.apply(this,k);o!==b&&(c.result=o,o===!1&&(c.preventDefault(),c.stopPropagation()));if(c.isImmediatePropagationStopped())break}}}return c.result},props:"altKey attrChange attrName bubbles button cancelable charCode clientX clientY ctrlKey currentTarget data detail eventPhase fromElement handler keyCode layerX layerY metaKey newValue offsetX offsetY pageX pageY prevValue relatedNode relatedTarget screenX screenY shiftKey srcElement target toElement view wheelDelta which".split(" "),fix:function(a){if(a[d.expando])return a;var e=a;a=d.Event(e);for(var f=this.props.length,g;f;)g=this.props[--f],a[g]=e[g];a.target||(a.target=a.srcElement||c),a.target.nodeType===3&&(a.target=a.target.parentNode),!a.relatedTarget&&a.fromElement&&(a.relatedTarget=a.fromElement===a.target?a.toElement:a.fromElement);if(a.pageX==null&&a.clientX!=null){var h=c.documentElement,i=c.body;a.pageX=a.clientX+(h&&h.scrollLeft||i&&i.scrollLeft||0)-(h&&h.clientLeft||i&&i.clientLeft||0),a.pageY=a.clientY+(h&&h.scrollTop||i&&i.scrollTop||0)-(h&&h.clientTop||i&&i.clientTop||0)}a.which==null&&(a.charCode!=null||a.keyCode!=null)&&(a.which=a.charCode!=null?a.charCode:a.keyCode),!a.metaKey&&a.ctrlKey&&(a.metaKey=a.ctrlKey),!a.which&&a.button!==b&&(a.which=a.button&1?1:a.button&2?3:a.button&4?2:0);return a},guid:1e8,proxy:d.proxy,special:{ready:{setup:d.bindReady,teardown:d.noop},live:{add:function(a){d.event.add(this,H(a.origType,a.selector),d.extend({},a,{handler:G,guid:a.handler.guid}))},remove:function(a){d.event.remove(this,H(a.origType,a.selector),a)}},beforeunload:{setup:function(a,b,c){d.isWindow(this)&&(this.onbeforeunload=c)},teardown:function(a,b){this.onbeforeunload===b&&(this.onbeforeunload=null)}}}},d.removeEvent=c.removeEventListener?function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c,!1)}:function(a,b,c){a.detachEvent&&a.detachEvent("on"+b,c)},d.Event=function(a){if(!this.preventDefault)return new d.Event(a);a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||a.returnValue===!1||a.getPreventDefault&&a.getPreventDefault()?y:x):this.type=a,this.timeStamp=d.now(),this[d.expando]=!0},d.Event.prototype={preventDefault:function(){this.isDefaultPrevented=y;var a=this.originalEvent;a&&(a.preventDefault?a.preventDefault():a.returnValue=!1)},stopPropagation:function(){this.isPropagationStopped=y;var a=this.originalEvent;a&&(a.stopPropagation&&a.stopPropagation(),a.cancelBubble=!0)},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=y,this.stopPropagation()},isDefaultPrevented:x,isPropagationStopped:x,isImmediatePropagationStopped:x};var z=function(a){var b=a.relatedTarget;try{if(b&&b!==c&&!b.parentNode)return;while(b&&b!==this)b=b.parentNode;b!==this&&(a.type=a.data,d.event.handle.apply(this,arguments))}catch(e){}},A=function(a){a.type=a.data,d.event.handle.apply(this,arguments)};d.each({mouseenter:"mouseover",mouseleave:"mouseout"},function(a,b){d.event.special[a]={setup:function(c){d.event.add(this,b,c&&c.selector?A:z,a)},teardown:function(a){d.event.remove(this,b,a&&a.selector?A:z)}}}),d.support.submitBubbles||(d.event.special.submit={setup:function(a,b){if(this.nodeName&&this.nodeName.toLowerCase()!=="form")d.event.add(this,"click.specialSubmit",function(a){var b=a.target,c=b.type;(c==="submit"||c==="image")&&d(b).closest("form").length&&E("submit",this,arguments)}),d.event.add(this,"keypress.specialSubmit",function(a){var b=a.target,c=b.type;(c==="text"||c==="password")&&d(b).closest("form").length&&a.keyCode===13&&E("submit",this,arguments)});else return!1},teardown:function(a){d.event.remove(this,".specialSubmit")}});if(!d.support.changeBubbles){var B,C=function(a){var b=a.type,c=a.value;b==="radio"||b==="checkbox"?c=a.checked:b==="select-multiple"?c=a.selectedIndex>-1?d.map(a.options,function(a){return a.selected}).join("-"):"":a.nodeName.toLowerCase()==="select"&&(c=a.selectedIndex);return c},D=function D(a){var c=a.target,e,f;if(s.test(c.nodeName)&&!c.readOnly){e=d._data(c,"_change_data"),f=C(c),(a.type!=="focusout"||c.type!=="radio")&&d._data(c,"_change_data",f);if(e===b||f===e)return;if(e!=null||f)a.type="change",a.liveFired=b,d.event.trigger(a,arguments[1],c)}};d.event.special.change={filters:{focusout:D,beforedeactivate:D,click:function(a){var b=a.target,c=b.type;(c==="radio"||c==="checkbox"||b.nodeName.toLowerCase()==="select")&&D.call(this,a)},keydown:function(a){var b=a.target,c=b.type;(a.keyCode===13&&b.nodeName.toLowerCase()!=="textarea"||a.keyCode===32&&(c==="checkbox"||c==="radio")||c==="select-multiple")&&D.call(this,a)},beforeactivate:function(a){var b=a.target;d._data(b,"_change_data",C(b))}},setup:function(a,b){if(this.type==="file")return!1;for(var c in B)d.event.add(this,c+".specialChange",B[c]);return s.test(this.nodeName)},teardown:function(a){d.event.remove(this,".specialChange");return s.test(this.nodeName)}},B=d.event.special.change.filters,B.focus=B.beforeactivate}c.addEventListener&&d.each({focus:"focusin",blur:"focusout"},function(a,b){function f(a){var c=d.event.fix(a);c.type=b,c.originalEvent={},d.event.trigger(c,null,c.target),c.isDefaultPrevented()&&a.preventDefault()}var e=0;d.event.special[b]={setup:function(){e++===0&&c.addEventListener(a,f,!0)},teardown:function(){--e===0&&c.removeEventListener(a,f,!0)}}}),d.each(["bind","one"],function(a,c){d.fn[c]=function(a,e,f){if(typeof a==="object"){for(var g in a)this[c](g,e,a[g],f);return this}if(d.isFunction(e)||e===!1)f=e,e=b;var h=c==="one"?d.proxy(f,function(a){d(this).unbind(a,h);return f.apply(this,arguments)}):f;if(a==="unload"&&c!=="one")this.one(a,e,f);else for(var i=0,j=this.length;i<j;i++)d.event.add(this[i],a,h,e);return this}}),d.fn.extend({unbind:function(a,b){if(typeof a!=="object"||a.preventDefault)for(var e=0,f=this.length;e<f;e++)d.event.remove(this[e],a,b);else for(var c in a)this.unbind(c,a[c]);return this},delegate:function(a,b,c,d){return this.live(b,c,d,a)},undelegate:function(a,b,c){return arguments.length===0?this.unbind("live"):this.die(b,null,c,a)},trigger:function(a,b){return this.each(function(){d.event.trigger(a,b,this)})},triggerHandler:function(a,b){if(this[0]){var c=d.Event(a);c.preventDefault(),c.stopPropagation(),d.event.trigger(c,b,this[0]);return c.result}},toggle:function(a){var b=arguments,c=1;while(c<b.length)d.proxy(a,b[c++]);return this.click(d.proxy(a,function(e){var f=(d._data(this,"lastToggle"+a.guid)||0)%c;d._data(this,"lastToggle"+a.guid,f+1),e.preventDefault();return b[f].apply(this,arguments)||!1}))},hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)}});var F={focus:"focusin",blur:"focusout",mouseenter:"mouseover",mouseleave:"mouseout"};d.each(["live","die"],function(a,c){d.fn[c]=function(a,e,f,g){var h,i=0,j,k,l,m=g||this.selector,n=g?this:d(this.context);if(typeof a==="object"&&!a.preventDefault){for(var o in a)n[c](o,e,a[o],m);return this}d.isFunction(e)&&(f=e,e=b),a=(a||"").split(" ");while((h=a[i++])!=null){j=r.exec(h),k="",j&&(k=j[0],h=h.replace(r,""));if(h==="hover"){a.push("mouseenter"+k,"mouseleave"+k);continue}l=h,h==="focus"||h==="blur"?(a.push(F[h]+k),h=h+k):h=(F[h]||h)+k;if(c==="live")for(var p=0,q=n.length;p<q;p++)d.event.add(n[p],"live."+H(h,m),{data:e,selector:m,handler:f,origType:h,origHandler:f,preType:l});else n.unbind("live."+H(h,m),f)}return this}}),d.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error".split(" "),function(a,b){d.fn[b]=function(a,c){c==null&&(c=a,a=null);return arguments.length>0?this.bind(b,a,c):this.trigger(b)},d.attrFn&&(d.attrFn[b]=!0)}),function(){function u(a,b,c,d,e,f){for(var g=0,h=d.length;g<h;g++){var i=d[g];if(i){var j=!1;i=i[a];while(i){if(i.sizcache===c){j=d[i.sizset];break}if(i.nodeType===1){f||(i.sizcache=c,i.sizset=g);if(typeof b!=="string"){if(i===b){j=!0;break}}else if(k.filter(b,[i]).length>0){j=i;break}}i=i[a]}d[g]=j}}}function t(a,b,c,d,e,f){for(var g=0,h=d.length;g<h;g++){var i=d[g];if(i){var j=!1;i=i[a];while(i){if(i.sizcache===c){j=d[i.sizset];break}i.nodeType===1&&!f&&(i.sizcache=c,i.sizset=g);if(i.nodeName.toLowerCase()===b){j=i;break}i=i[a]}d[g]=j}}}var a=/((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^\[\]]*\]|['"][^'"]*['"]|[^\[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g,e=0,f=Object.prototype.toString,g=!1,h=!0,i=/\\/g,j=/\W/;[0,0].sort(function(){h=!1;return 0});var k=function(b,d,e,g){e=e||[],d=d||c;var h=d;if(d.nodeType!==1&&d.nodeType!==9)return[];if(!b||typeof b!=="string")return e;var i,j,n,o,q,r,s,t,u=!0,w=k.isXML(d),x=[],y=b;do{a.exec(""),i=a.exec(y);if(i){y=i[3],x.push(i[1]);if(i[2]){o=i[3];break}}}while(i);if(x.length>1&&m.exec(b))if(x.length===2&&l.relative[x[0]])j=v(x[0]+x[1],d);else{j=l.relative[x[0]]?[d]:k(x.shift(),d);while(x.length)b=x.shift(),l.relative[b]&&(b+=x.shift()),j=v(b,j)}else{!g&&x.length>1&&d.nodeType===9&&!w&&l.match.ID.test(x[0])&&!l.match.ID.test(x[x.length-1])&&(q=k.find(x.shift(),d,w),d=q.expr?k.filter(q.expr,q.set)[0]:q.set[0]);if(d){q=g?{expr:x.pop(),set:p(g)}:k.find(x.pop(),x.length===1&&(x[0]==="~"||x[0]==="+")&&d.parentNode?d.parentNode:d,w),j=q.expr?k.filter(q.expr,q.set):q.set,x.length>0?n=p(j):u=!1;while(x.length)r=x.pop(),s=r,l.relative[r]?s=x.pop():r="",s==null&&(s=d),l.relative[r](n,s,w)}else n=x=[]}n||(n=j),n||k.error(r||b);if(f.call(n)==="[object Array]")if(u)if(d&&d.nodeType===1)for(t=0;n[t]!=null;t++)n[t]&&(n[t]===!0||n[t].nodeType===1&&k.contains(d,n[t]))&&e.push(j[t]);else for(t=0;n[t]!=null;t++)n[t]&&n[t].nodeType===1&&e.push(j[t]);else e.push.apply(e,n);else p(n,e);o&&(k(o,h,e,g),k.uniqueSort(e));return e};k.uniqueSort=function(a){if(r){g=h,a.sort(r);if(g)for(var b=1;b<a.length;b++)a[b]===a[b-1]&&a.splice(b--,1)}return a},k.matches=function(a,b){return k(a,null,null,b)},k.matchesSelector=function(a,b){return k(b,null,null,[a]).length>0},k.find=function(a,b,c){var d;if(!a)return[];for(var e=0,f=l.order.length;e<f;e++){var g,h=l.order[e];if(g=l.leftMatch[h].exec(a)){var j=g[1];g.splice(1,1);if(j.substr(j.length-1)!=="\\"){g[1]=(g[1]||"").replace(i,""),d=l.find[h](g,b,c);if(d!=null){a=a.replace(l.match[h],"");break}}}}d||(d=typeof b.getElementsByTagName!=="undefined"?b.getElementsByTagName("*"):[]);return{set:d,expr:a}},k.filter=function(a,c,d,e){var f,g,h=a,i=[],j=c,m=c&&c[0]&&k.isXML(c[0]);while(a&&c.length){for(var n in l.filter)if((f=l.leftMatch[n].exec(a))!=null&&f[2]){var o,p,q=l.filter[n],r=f[1];g=!1,f.splice(1,1);if(r.substr(r.length-1)==="\\")continue;j===i&&(i=[]);if(l.preFilter[n]){f=l.preFilter[n](f,j,d,i,e,m);if(f){if(f===!0)continue}else g=o=!0}if(f)for(var s=0;(p=j[s])!=null;s++)if(p){o=q(p,f,s,j);var t=e^!!o;d&&o!=null?t?g=!0:j[s]=!1:t&&(i.push(p),g=!0)}if(o!==b){d||(j=i),a=a.replace(l.match[n],"");if(!g)return[];break}}if(a===h)if(g==null)k.error(a);else break;h=a}return j},k.error=function(a){throw"Syntax error, unrecognized expression: "+a};var l=k.selectors={order:["ID","NAME","TAG"],match:{ID:/#((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,CLASS:/\.((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,NAME:/\[name=['"]*((?:[\w\u00c0-\uFFFF\-]|\\.)+)['"]*\]/,ATTR:/\[\s*((?:[\w\u00c0-\uFFFF\-]|\\.)+)\s*(?:(\S?=)\s*(?:(['"])(.*?)\3|(#?(?:[\w\u00c0-\uFFFF\-]|\\.)*)|)|)\s*\]/,TAG:/^((?:[\w\u00c0-\uFFFF\*\-]|\\.)+)/,CHILD:/:(only|nth|last|first)-child(?:\(\s*(even|odd|(?:[+\-]?\d+|(?:[+\-]?\d*)?n\s*(?:[+\-]\s*\d+)?))\s*\))?/,POS:/:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^\-]|$)/,PSEUDO:/:((?:[\w\u00c0-\uFFFF\-]|\\.)+)(?:\((['"]?)((?:\([^\)]+\)|[^\(\)]*)+)\2\))?/},leftMatch:{},attrMap:{"class":"className","for":"htmlFor"},attrHandle:{href:function(a){return a.getAttribute("href")},type:function(a){return a.getAttribute("type")}},relative:{"+":function(a,b){var c=typeof b==="string",d=c&&!j.test(b),e=c&&!d;d&&(b=b.toLowerCase());for(var f=0,g=a.length,h;f<g;f++)if(h=a[f]){while((h=h.previousSibling)&&h.nodeType!==1){}a[f]=e||h&&h.nodeName.toLowerCase()===b?h||!1:h===b}e&&k.filter(b,a,!0)},">":function(a,b){var c,d=typeof b==="string",e=0,f=a.length;if(d&&!j.test(b)){b=b.toLowerCase();for(;e<f;e++){c=a[e];if(c){var g=c.parentNode;a[e]=g.nodeName.toLowerCase()===b?g:!1}}}else{for(;e<f;e++)c=a[e],c&&(a[e]=d?c.parentNode:c.parentNode===b);d&&k.filter(b,a,!0)}},"":function(a,b,c){var d,f=e++,g=u;typeof b==="string"&&!j.test(b)&&(b=b.toLowerCase(),d=b,g=t),g("parentNode",b,f,a,d,c)},"~":function(a,b,c){var d,f=e++,g=u;typeof b==="string"&&!j.test(b)&&(b=b.toLowerCase(),d=b,g=t),g("previousSibling",b,f,a,d,c)}},find:{ID:function(a,b,c){if(typeof b.getElementById!=="undefined"&&!c){var d=b.getElementById(a[1]);return d&&d.parentNode?[d]:[]}},NAME:function(a,b){if(typeof b.getElementsByName!=="undefined"){var c=[],d=b.getElementsByName(a[1]);for(var e=0,f=d.length;e<f;e++)d[e].getAttribute("name")===a[1]&&c.push(d[e]);return c.length===0?null:c}},TAG:function(a,b){if(typeof b.getElementsByTagName!=="undefined")return b.getElementsByTagName(a[1])}},preFilter:{CLASS:function(a,b,c,d,e,f){a=" "+a[1].replace(i,"")+" ";if(f)return a;for(var g=0,h;(h=b[g])!=null;g++)h&&(e^(h.className&&(" "+h.className+" ").replace(/[\t\n\r]/g," ").indexOf(a)>=0)?c||d.push(h):c&&(b[g]=!1));return!1},ID:function(a){return a[1].replace(i,"")},TAG:function(a,b){return a[1].replace(i,"").toLowerCase()},CHILD:function(a){if(a[1]==="nth"){a[2]||k.error(a[0]),a[2]=a[2].replace(/^\+|\s*/g,"");var b=/(-?)(\d*)(?:n([+\-]?\d*))?/.exec(a[2]==="even"&&"2n"||a[2]==="odd"&&"2n+1"||!/\D/.test(a[2])&&"0n+"+a[2]||a[2]);a[2]=b[1]+(b[2]||1)-0,a[3]=b[3]-0}else a[2]&&k.error(a[0]);a[0]=e++;return a},ATTR:function(a,b,c,d,e,f){var g=a[1]=a[1].replace(i,"");!f&&l.attrMap[g]&&(a[1]=l.attrMap[g]),a[4]=(a[4]||a[5]||"").replace(i,""),a[2]==="~="&&(a[4]=" "+a[4]+" ");return a},PSEUDO:function(b,c,d,e,f){if(b[1]==="not")if((a.exec(b[3])||"").length>1||/^\w/.test(b[3]))b[3]=k(b[3],null,null,c);else{var g=k.filter(b[3],c,d,!0^f);d||e.push.apply(e,g);return!1}else if(l.match.POS.test(b[0])||l.match.CHILD.test(b[0]))return!0;return b},POS:function(a){a.unshift(!0);return a}},filters:{enabled:function(a){return a.disabled===!1&&a.type!=="hidden"},disabled:function(a){return a.disabled===!0},checked:function(a){return a.checked===!0},selected:function(a){a.parentNode&&a.parentNode.selectedIndex;return a.selected===!0},parent:function(a){return!!a.firstChild},empty:function(a){return!a.firstChild},has:function(a,b,c){return!!k(c[3],a).length},header:function(a){return/h\d/i.test(a.nodeName)},text:function(a){var b=a.getAttribute("type"),c=a.type;return"text"===c&&(b===c||b===null)},radio:function(a){return"radio"===a.type},checkbox:function(a){return"checkbox"===a.type},file:function(a){return"file"===a.type},password:function(a){return"password"===a.type},submit:function(a){return"submit"===a.type},image:function(a){return"image"===a.type},reset:function(a){return"reset"===a.type},button:function(a){return"button"===a.type||a.nodeName.toLowerCase()==="button"},input:function(a){return/input|select|textarea|button/i.test(a.nodeName)}},setFilters:{first:function(a,b){return b===0},last:function(a,b,c,d){return b===d.length-1},even:function(a,b){return b%2===0},odd:function(a,b){return b%2===1},lt:function(a,b,c){return b<c[3]-0},gt:function(a,b,c){return b>c[3]-0},nth:function(a,b,c){return c[3]-0===b},eq:function(a,b,c){return c[3]-0===b}},filter:{PSEUDO:function(a,b,c,d){var e=b[1],f=l.filters[e];if(f)return f(a,c,b,d);if(e==="contains")return(a.textContent||a.innerText||k.getText([a])||"").indexOf(b[3])>=0;if(e==="not"){var g=b[3];for(var h=0,i=g.length;h<i;h++)if(g[h]===a)return!1;return!0}k.error(e)},CHILD:function(a,b){var c=b[1],d=a;switch(c){case"only":case"first":while(d=d.previousSibling)if(d.nodeType===1)return!1;if(c==="first")return!0;d=a;case"last":while(d=d.nextSibling)if(d.nodeType===1)return!1;return!0;case"nth":var e=b[2],f=b[3];if(e===1&&f===0)return!0;var g=b[0],h=a.parentNode;if(h&&(h.sizcache!==g||!a.nodeIndex)){var i=0;for(d=h.firstChild;d;d=d.nextSibling)d.nodeType===1&&(d.nodeIndex=++i);h.sizcache=g}var j=a.nodeIndex-f;return e===0?j===0:j%e===0&&j/e>=0}},ID:function(a,b){return a.nodeType===1&&a.getAttribute("id")===b},TAG:function(a,b){return b==="*"&&a.nodeType===1||a.nodeName.toLowerCase()===b},CLASS:function(a,b){return(" "+(a.className||a.getAttribute("class"))+" ").indexOf(b)>-1},ATTR:function(a,b){var c=b[1],d=l.attrHandle[c]?l.attrHandle[c](a):a[c]!=null?a[c]:a.getAttribute(c),e=d+"",f=b[2],g=b[4];return d==null?f==="!=":f==="="?e===g:f==="*="?e.indexOf(g)>=0:f==="~="?(" "+e+" ").indexOf(g)>=0:g?f==="!="?e!==g:f==="^="?e.indexOf(g)===0:f==="$="?e.substr(e.length-g.length)===g:f==="|="?e===g||e.substr(0,g.length+1)===g+"-":!1:e&&d!==!1},POS:function(a,b,c,d){var e=b[2],f=l.setFilters[e];if(f)return f(a,c,b,d)}}},m=l.match.POS,n=function(a,b){return"\\"+(b-0+1)};for(var o in l.match)l.match[o]=new RegExp(l.match[o].source+/(?![^\[]*\])(?![^\(]*\))/.source),l.leftMatch[o]=new RegExp(/(^(?:.|\r|\n)*?)/.source+l.match[o].source.replace(/\\(\d+)/g,n));var p=function(a,b){a=Array.prototype.slice.call(a,0);if(b){b.push.apply(b,a);return b}return a};try{Array.prototype.slice.call(c.documentElement.childNodes,0)[0].nodeType}catch(q){p=function(a,b){var c=0,d=b||[];if(f.call(a)==="[object Array]")Array.prototype.push.apply(d,a);else if(typeof a.length==="number")for(var e=a.length;c<e;c++)d.push(a[c]);else for(;a[c];c++)d.push(a[c]);return d}}var r,s;c.documentElement.compareDocumentPosition?r=function(a,b){if(a===b){g=!0;return 0}if(!a.compareDocumentPosition||!b.compareDocumentPosition)return a.compareDocumentPosition?-1:1;return a.compareDocumentPosition(b)&4?-1:1}:(r=function(a,b){var c,d,e=[],f=[],h=a.parentNode,i=b.parentNode,j=h;if(a===b){g=!0;return 0}if(h===i)return s(a,b);if(!h)return-1;if(!i)return 1;while(j)e.unshift(j),j=j.parentNode;j=i;while(j)f.unshift(j),j=j.parentNode;c=e.length,d=f.length;for(var k=0;k<c&&k<d;k++)if(e[k]!==f[k])return s(e[k],f[k]);return k===c?s(a,f[k],-1):s(e[k],b,1)},s=function(a,b,c){if(a===b)return c;var d=a.nextSibling;while(d){if(d===b)return-1;d=d.nextSibling}return 1}),k.getText=function(a){var b="",c;for(var d=0;a[d];d++)c=a[d],c.nodeType===3||c.nodeType===4?b+=c.nodeValue:c.nodeType!==8&&(b+=k.getText(c.childNodes));return b},function(){var a=c.createElement("div"),d="script"+(new Date).getTime(),e=c.documentElement;a.innerHTML="<a name='"+d+"'/>",e.insertBefore(a,e.firstChild),c.getElementById(d)&&(l.find.ID=function(a,c,d){if(typeof c.getElementById!=="undefined"&&!d){var e=c.getElementById(a[1]);return e?e.id===a[1]||typeof e.getAttributeNode!=="undefined"&&e.getAttributeNode("id").nodeValue===a[1]?[e]:b:[]}},l.filter.ID=function(a,b){var c=typeof a.getAttributeNode!=="undefined"&&a.getAttributeNode("id");return a.nodeType===1&&c&&c.nodeValue===b}),e.removeChild(a),e=a=null}(),function(){var a=c.createElement("div");a.appendChild(c.createComment("")),a.getElementsByTagName("*").length>0&&(l.find.TAG=function(a,b){var c=b.getElementsByTagName(a[1]);if(a[1]==="*"){var d=[];for(var e=0;c[e];e++)c[e].nodeType===1&&d.push(c[e]);c=d}return c}),a.innerHTML="<a href='#'></a>",a.firstChild&&typeof a.firstChild.getAttribute!=="undefined"&&a.firstChild.getAttribute("href")!=="#"&&(l.attrHandle.href=function(a){return a.getAttribute("href",2)}),a=null}(),c.querySelectorAll&&function(){var a=k,b=c.createElement("div"),d="__sizzle__";b.innerHTML="<p class='TEST'></p>";if(!b.querySelectorAll||b.querySelectorAll(".TEST").length!==0){k=function(b,e,f,g){e=e||c;if(!g&&!k.isXML(e)){var h=/^(\w+$)|^\.([\w\-]+$)|^#([\w\-]+$)/.exec(b);if(h&&(e.nodeType===1||e.nodeType===9)){if(h[1])return p(e.getElementsByTagName(b),f);if(h[2]&&l.find.CLASS&&e.getElementsByClassName)return p(e.getElementsByClassName(h[2]),f)}if(e.nodeType===9){if(b==="body"&&e.body)return p([e.body],f);if(h&&h[3]){var i=e.getElementById(h[3]);if(!i||!i.parentNode)return p([],f);if(i.id===h[3])return p([i],f)}try{return p(e.querySelectorAll(b),f)}catch(j){}}else if(e.nodeType===1&&e.nodeName.toLowerCase()!=="object"){var m=e,n=e.getAttribute("id"),o=n||d,q=e.parentNode,r=/^\s*[+~]/.test(b);n?o=o.replace(/'/g,"\\$&"):e.setAttribute("id",o),r&&q&&(e=e.parentNode);try{if(!r||q)return p(e.querySelectorAll("[id='"+o+"'] "+b),f)}catch(s){}finally{n||m.removeAttribute("id")}}}return a(b,e,f,g)};for(var e in a)k[e]=a[e];b=null}}(),function(){var a=c.documentElement,b=a.matchesSelector||a.mozMatchesSelector||a.webkitMatchesSelector||a.msMatchesSelector;if(b){var d=!b.call(c.createElement("div"),"div"),e=!1;try{b.call(c.documentElement,"[test!='']:sizzle")}catch(f){e=!0}k.matchesSelector=function(a,c){c=c.replace(/\=\s*([^'"\]]*)\s*\]/g,"='$1']");if(!k.isXML(a))try{if(e||!l.match.PSEUDO.test(c)&&!/!=/.test(c)){var f=b.call(a,c);if(f||!d||a.document&&a.document.nodeType!==11)return f}}catch(g){}return k(c,null,null,[a]).length>0}}}(),function(){var a=c.createElement("div");a.innerHTML="<div class='test e'></div><div class='test'></div>";if(a.getElementsByClassName&&a.getElementsByClassName("e").length!==0){a.lastChild.className="e";if(a.getElementsByClassName("e").length===1)return;l.order.splice(1,0,"CLASS"),l.find.CLASS=function(a,b,c){if(typeof b.getElementsByClassName!=="undefined"&&!c)return b.getElementsByClassName(a[1])},a=null}}(),c.documentElement.contains?k.contains=function(a,b){return a!==b&&(a.contains?a.contains(b):!0)}:c.documentElement.compareDocumentPosition?k.contains=function(a,b){return!!(a.compareDocumentPosition(b)&16)}:k.contains=function(){return!1},k.isXML=function(a){var b=(a?a.ownerDocument||a:0).documentElement;return b?b.nodeName!=="HTML":!1};var v=function(a,b){var c,d=[],e="",f=b.nodeType?[b]:b;while(c=l.match.PSEUDO.exec(a))e+=c[0],a=a.replace(l.match.PSEUDO,"");a=l.relative[a]?a+"*":a;for(var g=0,h=f.length;g<h;g++)k(a,f[g],d);return k.filter(e,d)};d.find=k,d.expr=k.selectors,d.expr[":"]=d.expr.filters,d.unique=k.uniqueSort,d.text=k.getText,d.isXMLDoc=k.isXML,d.contains=k.contains}();var I=/Until$/,J=/^(?:parents|prevUntil|prevAll)/,K=/,/,L=/^.[^:#\[\.,]*$/,M=Array.prototype.slice,N=d.expr.match.POS,O={children:!0,contents:!0,next:!0,prev:!0};d.fn.extend({find:function(a){var b=this.pushStack("","find",a),c=0;for(var e=0,f=this.length;e<f;e++){c=b.length,d.find(a,this[e],b);if(e>0)for(var g=c;g<b.length;g++)for(var h=0;h<c;h++)if(b[h]===b[g]){b.splice(g--,1);break}}return b},has:function(a){var b=d(a);return this.filter(function(){for(var a=0,c=b.length;a<c;a++)if(d.contains(this,b[a]))return!0})},not:function(a){return this.pushStack(Q(this,a,!1),"not",a)},filter:function(a){return this.pushStack(Q(this,a,!0),"filter",a)},is:function(a){return!!a&&d.filter(a,this).length>0},closest:function(a,b){var c=[],e,f,g=this[0];if(d.isArray(a)){var h,i,j={},k=1;if(g&&a.length){for(e=0,f=a.length;e<f;e++)i=a[e],j[i]||(j[i]=d.expr.match.POS.test(i)?d(i,b||this.context):i);while(g&&g.ownerDocument&&g!==b){for(i in j)h=j[i],(h.jquery?h.index(g)>-1:d(g).is(h))&&c.push({selector:i,elem:g,level:k});g=g.parentNode,k++}}return c}var l=N.test(a)?d(a,b||this.context):null;for(e=0,f=this.length;e<f;e++){g=this[e];while(g){if(l?l.index(g)>-1:d.find.matchesSelector(g,a)){c.push(g);break}g=g.parentNode;if(!g||!g.ownerDocument||g===b)break}}c=c.length>1?d.unique(c):c;return this.pushStack(c,"closest",a)},index:function(a){if(!a||typeof a==="string")return d.inArray(this[0],a?d(a):this.parent().children());return d.inArray(a.jquery?a[0]:a,this)},add:function(a,b){var c=typeof a==="string"?d(a,b):d.makeArray(a),e=d.merge(this.get(),c);return this.pushStack(P(c[0])||P(e[0])?e:d.unique(e))},andSelf:function(){return this.add(this.prevObject)}}),d.each({parent:function(a){var b=a.parentNode;return b&&b.nodeType!==11?b:null},parents:function(a){return d.dir(a,"parentNode")},parentsUntil:function(a,b,c){return d.dir(a,"parentNode",c)},next:function(a){return d.nth(a,2,"nextSibling")},prev:function(a){return d.nth(a,2,"previousSibling")},nextAll:function(a){return d.dir(a,"nextSibling")},prevAll:function(a){return d.dir(a,"previousSibling")},nextUntil:function(a,b,c){return d.dir(a,"nextSibling",c)},prevUntil:function(a,b,c){return d.dir(a,"previousSibling",c)},siblings:function(a){return d.sibling(a.parentNode.firstChild,a)},children:function(a){return d.sibling(a.firstChild)},contents:function(a){return d.nodeName(a,"iframe")?a.contentDocument||a.contentWindow.document:d.makeArray(a.childNodes)}},function(a,b){d.fn[a]=function(c,e){var f=d.map(this,b,c),g=M.call(arguments);I.test(a)||(e=c),e&&typeof e==="string"&&(f=d.filter(e,f)),f=this.length>1&&!O[a]?d.unique(f):f,(this.length>1||K.test(e))&&J.test(a)&&(f=f.reverse());return this.pushStack(f,a,g.join(","))}}),d.extend({filter:function(a,b,c){c&&(a=":not("+a+")");return b.length===1?d.find.matchesSelector(b[0],a)?[b[0]]:[]:d.find.matches(a,b)},dir:function(a,c,e){var f=[],g=a[c];while(g&&g.nodeType!==9&&(e===b||g.nodeType!==1||!d(g).is(e)))g.nodeType===1&&f.push(g),g=g[c];return f},nth:function(a,b,c,d){b=b||1;var e=0;for(;a;a=a[c])if(a.nodeType===1&&++e===b)break;return a},sibling:function(a,b){var c=[];for(;a;a=a.nextSibling)a.nodeType===1&&a!==b&&c.push(a);return c}});var R=/ jQuery\d+="(?:\d+|null)"/g,S=/^\s+/,T=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/ig,U=/<([\w:]+)/,V=/<tbody/i,W=/<|&#?\w+;/,X=/<(?:script|object|embed|option|style)/i,Y=/checked\s*(?:[^=]|=\s*.checked.)/i,Z={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],area:[1,"<map>","</map>"],_default:[0,"",""]};Z.optgroup=Z.option,Z.tbody=Z.tfoot=Z.colgroup=Z.caption=Z.thead,Z.th=Z.td,d.support.htmlSerialize||(Z._default=[1,"div<div>","</div>"]),d.fn.extend({text:function(a){if(d.isFunction(a))return this.each(function(b){var c=d(this);c.text(a.call(this,b,c.text()))});if(typeof a!=="object"&&a!==b)return this.empty().append((this[0]&&this[0].ownerDocument||c).createTextNode(a));return d.text(this)},wrapAll:function(a){if(d.isFunction(a))return this.each(function(b){d(this).wrapAll(a.call(this,b))});if(this[0]){var b=d(a,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstChild&&a.firstChild.nodeType===1)a=a.firstChild;return a}).append(this)}return this},wrapInner:function(a){if(d.isFunction(a))return this.each(function(b){d(this).wrapInner(a.call(this,b))});return this.each(function(){var b=d(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){return this.each(function(){d(this).wrapAll(a)})},unwrap:function(){return this.parent().each(function(){d.nodeName(this,"body")||d(this).replaceWith(this.childNodes)}).end()},append:function(){return this.domManip(arguments,!0,function(a){this.nodeType===1&&this.appendChild(a)})},prepend:function(){return this.domManip(arguments,!0,function(a){this.nodeType===1&&this.insertBefore(a,this.firstChild)})},before:function(){if(this[0]&&this[0].parentNode)return this.domManip(arguments,!1,function(a){this.parentNode.insertBefore(a,this)});if(arguments.length){var a=d(arguments[0]);a.push.apply(a,this.toArray());return this.pushStack(a,"before",arguments)}},after:function(){if(this[0]&&this[0].parentNode)return this.domManip(arguments,!1,function(a){this.parentNode.insertBefore(a,this.nextSibling)});if(arguments.length){var a=this.pushStack(this,"after",arguments);a.push.apply(a,d(arguments[0]).toArray());return a}},remove:function(a,b){for(var c=0,e;(e=this[c])!=null;c++)if(!a||d.filter(a,[e]).length)!b&&e.nodeType===1&&(d.cleanData(e.getElementsByTagName("*")),d.cleanData([e])),e.parentNode&&e.parentNode.removeChild(e);return this},empty:function(){for(var a=0,b;(b=this[a])!=null;a++){b.nodeType===1&&d.cleanData(b.getElementsByTagName("*"));while(b.firstChild)b.removeChild(b.firstChild)}return this},clone:function(a,b){a=a==null?!1:a,b=b==null?a:b;return this.map(function(){return d.clone(this,a,b)})},html:function(a){if(a===b)return this[0]&&this[0].nodeType===1?this[0].innerHTML.replace(R,""):null;if(typeof a!=="string"||X.test(a)||!d.support.leadingWhitespace&&S.test(a)||Z[(U.exec(a)||["",""])[1].toLowerCase()])d.isFunction(a)?this.each(function(b){var c=d(this);c.html(a.call(this,b,c.html()))}):this.empty().append(a);else{a=a.replace(T,"<$1></$2>");try{for(var c=0,e=this.length;c<e;c++)this[c].nodeType===1&&(d.cleanData(this[c].getElementsByTagName("*")),this[c].innerHTML=a)}catch(f){this.empty().append(a)}}return this},replaceWith:function(a){if(this[0]&&this[0].parentNode){if(d.isFunction(a))return this.each(function(b){var c=d(this),e=c.html();c.replaceWith(a.call(this,b,e))});typeof a!=="string"&&(a=d(a).detach());return this.each(function(){var b=this.nextSibling,c=this.parentNode;d(this).remove(),b?d(b).before(a):d(c).append(a)})}return this.length?this.pushStack(d(d.isFunction(a)?a():a),"replaceWith",a):this},detach:function(a){return this.remove(a,!0)},domManip:function(a,c,e){var f,g,h,i,j=a[0],k=[];if(!d.support.checkClone&&arguments.length===3&&typeof j==="string"&&Y.test(j))return this.each(function(){d(this).domManip(a,c,e,!0)});if(d.isFunction(j))return this.each(function(f){var g=d(this);a[0]=j.call(this,f,c?g.html():b),g.domManip(a,c,e)});if(this[0]){i=j&&j.parentNode,d.support.parentNode&&i&&i.nodeType===11&&i.childNodes.length===this.length?f={fragment:i}:f=d.buildFragment(a,this,k),h=f.fragment,h.childNodes.length===1?g=h=h.firstChild:g=h.firstChild;if(g){c=c&&d.nodeName(g,"tr");for(var l=0,m=this.length,n=m-1;l<m;l++)e.call(c?$(this[l],g):this[l],f.cacheable||m>1&&l<n?d.clone(h,!0,!0):h)}k.length&&d.each(k,bc)}return this}}),d.buildFragment=function(a,b,e){var f,g,h,i=b&&b[0]?b[0].ownerDocument||b[0]:c;a.length===1&&typeof a[0]==="string"&&a[0].length<512&&i===c&&a[0].charAt(0)==="<"&&!X.test(a[0])&&(d.support.checkClone||!Y.test(a[0]))&&(g=!0,h=d.fragments[a[0]],h&&(h!==1&&(f=h))),f||(f=i.createDocumentFragment(),d.clean(a,i,f,e)),g&&(d.fragments[a[0]]=h?f:1);return{fragment:f,cacheable:g}},d.fragments={},d.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){d.fn[a]=function(c){var e=[],f=d(c),g=this.length===1&&this[0].parentNode;if(g&&g.nodeType===11&&g.childNodes.length===1&&f.length===1){f[b](this[0]);return this}for(var h=0,i=f.length;h<i;h++){var j=(h>0?this.clone(!0):this).get();d(f[h])[b](j),e=e.concat(j)}return this.pushStack(e,a,f.selector)}}),d.extend({clone:function(a,b,c){var e=a.cloneNode(!0),f,g,h;if((!d.support.noCloneEvent||!d.support.noCloneChecked)&&(a.nodeType===1||a.nodeType===11)&&!d.isXMLDoc(a)){ba(a,e),f=bb(a),g=bb(e);for(h=0;f[h];++h)ba(f[h],g[h])}if(b){_(a,e);if(c){f=bb(a),g=bb(e);for(h=0;f[h];++h)_(f[h],g[h])}}return e},clean:function(a,b,e,f){b=b||c,typeof b.createElement==="undefined"&&(b=b.ownerDocument||b[0]&&b[0].ownerDocument||c);var g=[];for(var h=0,i;(i=a[h])!=null;h++){typeof i==="number"&&(i+="");if(!i)continue;if(typeof i!=="string"||W.test(i)){if(typeof i==="string"){i=i.replace(T,"<$1></$2>");var j=(U.exec(i)||["",""])[1].toLowerCase(),k=Z[j]||Z._default,l=k[0],m=b.createElement("div");m.innerHTML=k[1]+i+k[2];while(l--)m=m.lastChild;if(!d.support.tbody){var n=V.test(i),o=j==="table"&&!n?m.firstChild&&m.firstChild.childNodes:k[1]==="<table>"&&!n?m.childNodes:[];for(var p=o.length-1;p>=0;--p)d.nodeName(o[p],"tbody")&&!o[p].childNodes.length&&o[p].parentNode.removeChild(o[p])}!d.support.leadingWhitespace&&S.test(i)&&m.insertBefore(b.createTextNode(S.exec(i)[0]),m.firstChild),i=m.childNodes}}else i=b.createTextNode(i);i.nodeType?g.push(i):g=d.merge(g,i)}if(e)for(h=0;g[h];h++)!f||!d.nodeName(g[h],"script")||g[h].type&&g[h].type.toLowerCase()!=="text/javascript"?(g[h].nodeType===1&&g.splice.apply(g,[h+1,0].concat(d.makeArray(g[h].getElementsByTagName("script")))),e.appendChild(g[h])):f.push(g[h].parentNode?g[h].parentNode.removeChild(g[h]):g[h]);return g},cleanData:function(a){var b,c,e=d.cache,f=d.expando,g=d.event.special,h=d.support.deleteExpando;for(var i=0,j;(j=a[i])!=null;i++){if(j.nodeName&&d.noData[j.nodeName.toLowerCase()])continue;c=j[d.expando];if(c){b=e[c]&&e[c][f];if(b&&b.events){for(var k in b.events)g[k]?d.event.remove(j,k):d.removeEvent(j,k,b.handle);b.handle&&(b.handle.elem=null)}h?delete j[d.expando]:j.removeAttribute&&j.removeAttribute(d.expando),delete e[c]}}}});var bd=/alpha\([^)]*\)/i,be=/opacity=([^)]*)/,bf=/-([a-z])/ig,bg=/([A-Z]|^ms)/g,bh=/^-?\d+(?:px)?$/i,bi=/^-?\d/,bj={position:"absolute",visibility:"hidden",display:"block"},bk=["Left","Right"],bl=["Top","Bottom"],bm,bn,bo,bp=function(a,b){return b.toUpperCase()};d.fn.css=function(a,c){if(arguments.length===2&&c===b)return this;return d.access(this,a,c,!0,function(a,c,e){return e!==b?d.style(a,c,e):d.css(a,c)})},d.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=bm(a,"opacity","opacity");return c===""?"1":c}return a.style.opacity}}},cssNumber:{zIndex:!0,fontWeight:!0,opacity:!0,zoom:!0,lineHeight:!0},cssProps:{"float":d.support.cssFloat?"cssFloat":"styleFloat"},style:function(a,c,e,f){if(a&&a.nodeType!==3&&a.nodeType!==8&&a.style){var g,h=d.camelCase(c),i=a.style,j=d.cssHooks[h];c=d.cssProps[h]||h;if(e===b){if(j&&"get"in j&&(g=j.get(a,!1,f))!==b)return g;return i[c]}if(typeof e==="number"&&isNaN(e)||e==null)return;typeof e==="number"&&!d.cssNumber[h]&&(e+="px");if(!j||!("set"in j)||(e=j.set(a,e))!==b)try{i[c]=e}catch(k){}}},css:function(a,c,e){var f,g=d.camelCase(c),h=d.cssHooks[g];c=d.cssProps[g]||g;if(h&&"get"in h&&(f=h.get(a,!0,e))!==b)return f;if(bm)return bm(a,c,g)},swap:function(a,b,c){var d={};for(var e in b)d[e]=a.style[e],a.style[e]=b[e];c.call(a);for(e in b)a.style[e]=d[e]},camelCase:function(a){return a.replace(bf,bp)}}),d.curCSS=d.css,d.each(["height","width"],function(a,b){d.cssHooks[b]={get:function(a,c,e){var f;if(c){a.offsetWidth!==0?f=bq(a,b,e):d.swap(a,bj,function(){f=bq(a,b,e)});if(f<=0){f=bm(a,b,b),f==="0px"&&bo&&(f=bo(a,b,b));if(f!=null)return f===""||f==="auto"?"0px":f}if(f<0||f==null){f=a.style[b];return f===""||f==="auto"?"0px":f}return typeof f==="string"?f:f+"px"}},set:function(a,b){if(!bh.test(b))return b;b=parseFloat(b);if(b>=0)return b+"px"}}}),d.support.opacity||(d.cssHooks.opacity={get:function(a,b){return be.test((b&&a.currentStyle?a.currentStyle.filter:a.style.filter)||"")?parseFloat(RegExp.$1)/100+"":b?"1":""},set:function(a,b){var c=a.style;c.zoom=1;var e=d.isNaN(b)?"":"alpha(opacity="+b*100+")",f=c.filter||"";c.filter=bd.test(f)?f.replace(bd,e):c.filter+" "+e}}),d(function(){d.support.reliableMarginRight||(d.cssHooks.marginRight={get:function(a,b){var c;d.swap(a,{display:"inline-block"},function(){b?c=bm(a,"margin-right","marginRight"):c=a.style.marginRight});return c}})}),c.defaultView&&c.defaultView.getComputedStyle&&(bn=function(a,c,e){var f,g,h;e=e.replace(bg,"-$1").toLowerCase();if(!(g=a.ownerDocument.defaultView))return b;if(h=g.getComputedStyle(a,null))f=h.getPropertyValue(e),f===""&&!d.contains(a.ownerDocument.documentElement,a)&&(f=d.style(a,e));return f}),c.documentElement.currentStyle&&(bo=function(a,b){var c,d=a.currentStyle&&a.currentStyle[b],e=a.runtimeStyle&&a.runtimeStyle[b],f=a.style;!bh.test(d)&&bi.test(d)&&(c=f.left,e&&(a.runtimeStyle.left=a.currentStyle.left),f.left=b==="fontSize"?"1em":d||0,d=f.pixelLeft+"px",f.left=c,e&&(a.runtimeStyle.left=e));return d===""?"auto":d}),bm=bn||bo,d.expr&&d.expr.filters&&(d.expr.filters.hidden=function(a){var b=a.offsetWidth,c=a.offsetHeight;return b===0&&c===0||!d.support.reliableHiddenOffsets&&(a.style.display||d.css(a,"display"))==="none"},d.expr.filters.visible=function(a){return!d.expr.filters.hidden(a)});var br=/%20/g,bs=/\[\]$/,bt=/\r?\n/g,bu=/#.*$/,bv=/^(.*?):[ \t]*([^\r\n]*)\r?$/mg,bw=/^(?:color|date|datetime|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,bx=/^(?:about|app|app\-storage|.+\-extension|file|widget):$/,by=/^(?:GET|HEAD)$/,bz=/^\/\//,bA=/\?/,bB=/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,bC=/^(?:select|textarea)/i,bD=/\s+/,bE=/([?&])_=[^&]*/,bF=/(^|\-)([a-z])/g,bG=function(a,b,c){return b+c.toUpperCase()},bH=/^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+))?)?/,bI=d.fn.load,bJ={},bK={},bL,bM;try{bL=c.location.href}catch(bN){bL=c.createElement("a"),bL.href="",bL=bL.href}bM=bH.exec(bL.toLowerCase())||[],d.fn.extend({load:function(a,c,e){if(typeof a!=="string"&&bI)return bI.apply(this,arguments);if(!this.length)return this;var f=a.indexOf(" ");if(f>=0){var g=a.slice(f,a.length);a=a.slice(0,f)}var h="GET";c&&(d.isFunction(c)?(e=c,c=b):typeof c==="object"&&(c=d.param(c,d.ajaxSettings.traditional),h="POST"));var i=this;d.ajax({url:a,type:h,dataType:"html",data:c,complete:function(a,b,c){c=a.responseText,a.isResolved()&&(a.done(function(a){c=a}),i.html(g?d("<div>").append(c.replace(bB,"")).find(g):c)),e&&i.each(e,[c,b,a])}});return this},serialize:function(){return d.param(this.serializeArray())},serializeArray:function(){return this.map(function(){return this.elements?d.makeArray(this.elements):this}).filter(function(){return this.name&&!this.disabled&&(this.checked||bC.test(this.nodeName)||bw.test(this.type))}).map(function(a,b){var c=d(this).val();return c==null?null:d.isArray(c)?d.map(c,function(a,c){return{name:b.name,value:a.replace(bt,"\r\n")}}):{name:b.name,value:c.replace(bt,"\r\n")}}).get()}}),d.each("ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "),function(a,b){d.fn[b]=function(a){return this.bind(b,a)}}),d.each(["get","post"],function(a,c){d[c]=function(a,e,f,g){d.isFunction(e)&&(g=g||f,f=e,e=b);return d.ajax({type:c,url:a,data:e,success:f,dataType:g})}}),d.extend({getScript:function(a,c){return d.get(a,b,c,"script")},getJSON:function(a,b,c){return d.get(a,b,c,"json")},ajaxSetup:function(a,b){b?d.extend(!0,a,d.ajaxSettings,b):(b=a,a=d.extend(!0,d.ajaxSettings,b));for(var c in {context:1,url:1})c in b?a[c]=b[c]:c in d.ajaxSettings&&(a[c]=d.ajaxSettings[c]);return a},ajaxSettings:{url:bL,isLocal:bx.test(bM[1]),global:!0,type:"GET",contentType:"application/x-www-form-urlencoded",processData:!0,async:!0,accepts:{xml:"application/xml, text/xml",html:"text/html",text:"text/plain",json:"application/json, text/javascript","*":"*/*"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText"},converters:{"* text":a.String,"text html":!0,"text json":d.parseJSON,"text xml":d.parseXML}},ajaxPrefilter:bO(bJ),ajaxTransport:bO(bK),ajax:function(a,c){function v(a,c,l,n){if(r!==2){r=2,p&&clearTimeout(p),o=b,m=n||"",u.readyState=a?4:0;var q,t,v,w=l?bR(e,u,l):b,x,y;if(a>=200&&a<300||a===304){if(e.ifModified){if(x=u.getResponseHeader("Last-Modified"))d.lastModified[k]=x;if(y=u.getResponseHeader("Etag"))d.etag[k]=y}if(a===304)c="notmodified",q=!0;else try{t=bS(e,w),c="success",q=!0}catch(z){c="parsererror",v=z}}else{v=c;if(!c||a)c="error",a<0&&(a=0)}u.status=a,u.statusText=c,q?h.resolveWith(f,[t,c,u]):h.rejectWith(f,[u,c,v]),u.statusCode(j),j=b,s&&g.trigger("ajax"+(q?"Success":"Error"),[u,e,q?t:v]),i.resolveWith(f,[u,c]),s&&(g.trigger("ajaxComplete",[u,e]),--d.active||d.event.trigger("ajaxStop"))}}typeof a==="object"&&(c=a,a=b),c=c||{};var e=d.ajaxSetup({},c),f=e.context||e,g=f!==e&&(f.nodeType||f instanceof d)?d(f):d.event,h=d.Deferred(),i=d._Deferred(),j=e.statusCode||{},k,l={},m,n,o,p,q,r=0,s,t,u={readyState:0,setRequestHeader:function(a,b){r||(l[a.toLowerCase().replace(bF,bG)]=b);return this},getAllResponseHeaders:function(){return r===2?m:null},getResponseHeader:function(a){var c;if(r===2){if(!n){n={};while(c=bv.exec(m))n[c[1].toLowerCase()]=c[2]}c=n[a.toLowerCase()]}return c===b?null:c},overrideMimeType:function(a){r||(e.mimeType=a);return this},abort:function(a){a=a||"abort",o&&o.abort(a),v(0,a);return this}};h.promise(u),u.success=u.done,u.error=u.fail,u.complete=i.done,u.statusCode=function(a){if(a){var b;if(r<2)for(b in a)j[b]=[j[b],a[b]];else b=a[u.status],u.then(b,b)}return this},e.url=((a||e.url)+"").replace(bu,"").replace(bz,bM[1]+"//"),e.dataTypes=d.trim(e.dataType||"*").toLowerCase().split(bD),e.crossDomain==null&&(q=bH.exec(e.url.toLowerCase()),e.crossDomain=q&&(q[1]!=bM[1]||q[2]!=bM[2]||(q[3]||(q[1]==="http:"?80:443))!=(bM[3]||(bM[1]==="http:"?80:443)))),e.data&&e.processData&&typeof e.data!=="string"&&(e.data=d.param(e.data,e.traditional)),bP(bJ,e,c,u);if(r===2)return!1;s=e.global,e.type=e.type.toUpperCase(),e.hasContent=!by.test(e.type),s&&d.active++===0&&d.event.trigger("ajaxStart");if(!e.hasContent){e.data&&(e.url+=(bA.test(e.url)?"&":"?")+e.data),k=e.url;if(e.cache===!1){var w=d.now(),x=e.url.replace(bE,"$1_="+w);e.url=x+(x===e.url?(bA.test(e.url)?"&":"?")+"_="+w:"")}}if(e.data&&e.hasContent&&e.contentType!==!1||c.contentType)l["Content-Type"]=e.contentType;e.ifModified&&(k=k||e.url,d.lastModified[k]&&(l["If-Modified-Since"]=d.lastModified[k]),d.etag[k]&&(l["If-None-Match"]=d.etag[k])),l.Accept=e.dataTypes[0]&&e.accepts[e.dataTypes[0]]?e.accepts[e.dataTypes[0]]+(e.dataTypes[0]!=="*"?", */*; q=0.01":""):e.accepts["*"];for(t in e.headers)u.setRequestHeader(t,e.headers[t]);if(e.beforeSend&&(e.beforeSend.call(f,u,e)===!1||r===2)){u.abort();return!1}for(t in {success:1,error:1,complete:1})u[t](e[t]);o=bP(bK,e,c,u);if(o){u.readyState=1,s&&g.trigger("ajaxSend",[u,e]),e.async&&e.timeout>0&&(p=setTimeout(function(){u.abort("timeout")},e.timeout));try{r=1,o.send(l,v)}catch(y){status<2?v(-1,y):d.error(y)}}else v(-1,"No Transport");return u},param:function(a,c){var e=[],f=function(a,b){b=d.isFunction(b)?b():b,e[e.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};c===b&&(c=d.ajaxSettings.traditional);if(d.isArray(a)||a.jquery&&!d.isPlainObject(a))d.each(a,function(){f(this.name,this.value)});else for(var g in a)bQ(g,a[g],c,f);return e.join("&").replace(br,"+")}}),d.extend({active:0,lastModified:{},etag:{}});var bT=d.now(),bU=/(\=)\?(&|$)|\?\?/i;d.ajaxSetup({jsonp:"callback",jsonpCallback:function(){return d.expando+"_"+bT++}}),d.ajaxPrefilter("json jsonp",function(b,c,e){var f=typeof b.data==="string";if(b.dataTypes[0]==="jsonp"||c.jsonpCallback||c.jsonp!=null||b.jsonp!==!1&&(bU.test(b.url)||f&&bU.test(b.data))){var g,h=b.jsonpCallback=d.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,i=a[h],j=b.url,k=b.data,l="$1"+h+"$2",m=function(){a[h]=i,g&&d.isFunction(i)&&a[h](g[0])};b.jsonp!==!1&&(j=j.replace(bU,l),b.url===j&&(f&&(k=k.replace(bU,l)),b.data===k&&(j+=(/\?/.test(j)?"&":"?")+b.jsonp+"="+h))),b.url=j,b.data=k,a[h]=function(a){g=[a]},e.then(m,m),b.converters["script json"]=function(){g||d.error(h+" was not called");return g[0]},b.dataTypes[0]="json";return"script"}}),d.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/javascript|ecmascript/},converters:{"text script":function(a){d.globalEval(a);return a}}}),d.ajaxPrefilter("script",function(a){a.cache===b&&(a.cache=!1),a.crossDomain&&(a.type="GET",a.global=!1)}),d.ajaxTransport("script",function(a){if(a.crossDomain){var d,e=c.head||c.getElementsByTagName("head")[0]||c.documentElement;return{send:function(f,g){d=c.createElement("script"),d.async="async",a.scriptCharset&&(d.charset=a.scriptCharset),d.src=a.url,d.onload=d.onreadystatechange=function(a,c){if(!d.readyState||/loaded|complete/.test(d.readyState))d.onload=d.onreadystatechange=null,e&&d.parentNode&&e.removeChild(d),d=b,c||g(200,"success")},e.insertBefore(d,e.firstChild)},abort:function(){d&&d.onload(0,1)}}}});var bV=d.now(),bW,bX;d.ajaxSettings.xhr=a.ActiveXObject?function(){return!this.isLocal&&bZ()||b$()}:bZ,bX=d.ajaxSettings.xhr(),d.support.ajax=!!bX,d.support.cors=bX&&"withCredentials"in bX,bX=b,d.support.ajax&&d.ajaxTransport(function(a){if(!a.crossDomain||d.support.cors){var c;return{send:function(e,f){var g=a.xhr(),h,i;a.username?g.open(a.type,a.url,a.async,a.username,a.password):g.open(a.type,a.url,a.async);if(a.xhrFields)for(i in a.xhrFields)g[i]=a.xhrFields[i];a.mimeType&&g.overrideMimeType&&g.overrideMimeType(a.mimeType),!a.crossDomain&&!e["X-Requested-With"]&&(e["X-Requested-With"]="XMLHttpRequest");try{for(i in e)g.setRequestHeader(i,e[i])}catch(j){}g.send(a.hasContent&&a.data||null),c=function(e,i){var j,k,l,m,n;try{if(c&&(i||g.readyState===4)){c=b,h&&(g.onreadystatechange=d.noop,delete bW[h]);if(i)g.readyState!==4&&g.abort();else{j=g.status,l=g.getAllResponseHeaders(),m={},n=g.responseXML,n&&n.documentElement&&(m.xml=n),m.text=g.responseText;try{k=g.statusText}catch(o){k=""}j||!a.isLocal||a.crossDomain?j===1223&&(j=204):j=m.text?200:404}}}catch(p){i||f(-1,p)}m&&f(j,k,m,l)},a.async&&g.readyState!==4?(bW||(bW={},bY()),h=bV++,g.onreadystatechange=bW[h]=c):c()},abort:function(){c&&c(0,1)}}}});var b_={},ca=/^(?:toggle|show|hide)$/,cb=/^([+\-]=)?([\d+.\-]+)([a-z%]*)$/i,cc,cd=[["height","marginTop","marginBottom","paddingTop","paddingBottom"],["width","marginLeft","marginRight","paddingLeft","paddingRight"],["opacity"]];d.fn.extend({show:function(a,b,c){var e,f;if(a||a===0)return this.animate(ce("show",3),a,b,c);for(var g=0,h=this.length;g<h;g++)e=this[g],f=e.style.display,!d._data(e,"olddisplay")&&f==="none"&&(f=e.style.display=""),f===""&&d.css(e,"display")==="none"&&d._data(e,"olddisplay",cf(e.nodeName));for(g=0;g<h;g++){e=this[g],f=e.style.display;if(f===""||f==="none")e.style.display=d._data(e,"olddisplay")||""}return this},hide:function(a,b,c){if(a||a===0)return this.animate(ce("hide",3),a,b,c);for(var e=0,f=this.length;e<f;e++){var g=d.css(this[e],"display");g!=="none"&&!d._data(this[e],"olddisplay")&&d._data(this[e],"olddisplay",g)}for(e=0;e<f;e++)this[e].style.display="none";return this},_toggle:d.fn.toggle,toggle:function(a,b,c){var e=typeof a==="boolean";d.isFunction(a)&&d.isFunction(b)?this._toggle.apply(this,arguments):a==null||e?this.each(function(){var b=e?a:d(this).is(":hidden");d(this)[b?"show":"hide"]()}):this.animate(ce("toggle",3),a,b,c);return this},fadeTo:function(a,b,c,d){return this.filter(":hidden").css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,e){var f=d.speed(b,c,e);if(d.isEmptyObject(a))return this.each(f.complete);return this[f.queue===!1?"each":"queue"](function(){var b=d.extend({},f),c,e=this.nodeType===1,g=e&&d(this).is(":hidden"),h=this;for(c in a){var i=d.camelCase(c);c!==i&&(a[i]=a[c],delete a[c],c=i);if(a[c]==="hide"&&g||a[c]==="show"&&!g)return b.complete.call(this);if(e&&(c==="height"||c==="width")){b.overflow=[this.style.overflow,this.style.overflowX,this.style.overflowY];if(d.css(this,"display")==="inline"&&d.css(this,"float")==="none")if(d.support.inlineBlockNeedsLayout){var j=cf(this.nodeName);j==="inline"?this.style.display="inline-block":(this.style.display="inline",this.style.zoom=1)}else this.style.display="inline-block"}d.isArray(a[c])&&((b.specialEasing=b.specialEasing||{})[c]=a[c][1],a[c]=a[c][0])}b.overflow!=null&&(this.style.overflow="hidden"),b.curAnim=d.extend({},a),d.each(a,function(c,e){var f=new d.fx(h,b,c);if(ca.test(e))f[e==="toggle"?g?"show":"hide":e](a);else{var i=cb.exec(e),j=f.cur();if(i){var k=parseFloat(i[2]),l=i[3]||(d.cssNumber[c]?"":"px");l!=="px"&&(d.style(h,c,(k||1)+l),j=(k||1)/f.cur()*j,d.style(h,c,j+l)),i[1]&&(k=(i[1]==="-="?-1:1)*k+j),f.custom(j,k,l)}else f.custom(j,e,"")}});return!0})},stop:function(a,b){var c=d.timers;a&&this.queue([]),this.each(function(){for(var a=c.length-1;a>=0;a--)c[a].elem===this&&(b&&c[a](!0),c.splice(a,1))}),b||this.dequeue();return this}}),d.each({slideDown:ce("show",1),slideUp:ce("hide",1),slideToggle:ce("toggle",1),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){d.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),d.extend({speed:function(a,b,c){var e=a&&typeof a==="object"?d.extend({},a):{complete:c||!c&&b||d.isFunction(a)&&a,duration:a,easing:c&&b||b&&!d.isFunction(b)&&b};e.duration=d.fx.off?0:typeof e.duration==="number"?e.duration:e.duration in d.fx.speeds?d.fx.speeds[e.duration]:d.fx.speeds._default,e.old=e.complete,e.complete=function(){e.queue!==!1&&d(this).dequeue(),d.isFunction(e.old)&&e.old.call(this)};return e},easing:{linear:function(a,b,c,d){return c+d*a},swing:function(a,b,c,d){return(-Math.cos(a*Math.PI)/2+.5)*d+c}},timers:[],fx:function(a,b,c){this.options=b,this.elem=a,this.prop=c,b.orig||(b.orig={})}}),d.fx.prototype={update:function(){this.options.step&&this.options.step.call(this.elem,this.now,this),(d.fx.step[this.prop]||d.fx.step._default)(this)},cur:function(){if(this.elem[this.prop]!=null&&(!this.elem.style||this.elem.style[this.prop]==null))return this.elem[this.prop];var a,b=d.css(this.elem,this.prop);return isNaN(a=parseFloat(b))?!b||b==="auto"?0:b:a},custom:function(a,b,c){function g(a){return e.step(a)}var e=this,f=d.fx;this.startTime=d.now(),this.start=a,this.end=b,this.unit=c||this.unit||(d.cssNumber[this.prop]?"":"px"),this.now=this.start,this.pos=this.state=0,g.elem=this.elem,g()&&d.timers.push(g)&&!cc&&(cc=setInterval(f.tick,f.interval))},show:function(){this.options.orig[this.prop]=d.style(this.elem,this.prop),this.options.show=!0,this.custom(this.prop==="width"||this.prop==="height"?1:0,this.cur()),d(this.elem).show()},hide:function(){this.options.orig[this.prop]=d.style(this.elem,this.prop),this.options.hide=!0,this.custom(this.cur(),0)},step:function(a){var b=d.now(),c=!0;if(a||b>=this.options.duration+this.startTime){this.now=this.end,this.pos=this.state=1,this.update(),this.options.curAnim[this.prop]=!0;for(var e in this.options.curAnim)this.options.curAnim[e]!==!0&&(c=!1);if(c){if(this.options.overflow!=null&&!d.support.shrinkWrapBlocks){var f=this.elem,g=this.options;d.each(["","X","Y"],function(a,b){f.style["overflow"+b]=g.overflow[a]})}this.options.hide&&d(this.elem).hide();if(this.options.hide||this.options.show)for(var h in this.options.curAnim)d.style(this.elem,h,this.options.orig[h]);this.options.complete.call(this.elem)}return!1}var i=b-this.startTime;this.state=i/this.options.duration;var j=this.options.specialEasing&&this.options.specialEasing[this.prop],k=this.options.easing||(d.easing.swing?"swing":"linear");this.pos=d.easing[j||k](this.state,i,0,1,this.options.duration),this.now=this.start+(this.end-this.start)*this.pos,this.update();return!0}},d.extend(d.fx,{tick:function(){var a=d.timers;for(var b=0;b<a.length;b++)a[b]()||a.splice(b--,1);a.length||d.fx.stop()},interval:13,stop:function(){clearInterval(cc),cc=null},speeds:{slow:600,fast:200,_default:400},step:{opacity:function(a){d.style(a.elem,"opacity",a.now)},_default:function(a){a.elem.style&&a.elem.style[a.prop]!=null?a.elem.style[a.prop]=(a.prop==="width"||a.prop==="height"?Math.max(0,a.now):a.now)+a.unit:a.elem[a.prop]=a.now}}}),d.expr&&d.expr.filters&&(d.expr.filters.animated=function(a){return d.grep(d.timers,function(b){return a===b.elem}).length});var cg=/^t(?:able|d|h)$/i,ch=/^(?:body|html)$/i;"getBoundingClientRect"in c.documentElement?d.fn.offset=function(a){var b=this[0],c;if(a)return this.each(function(b){d.offset.setOffset(this,a,b)});if(!b||!b.ownerDocument)return null;if(b===b.ownerDocument.body)return d.offset.bodyOffset(b);try{c=b.getBoundingClientRect()}catch(e){}var f=b.ownerDocument,g=f.documentElement;if(!c||!d.contains(g,b))return c?{top:c.top,left:c.left}:{top:0,left:0};var h=f.body,i=ci(f),j=g.clientTop||h.clientTop||0,k=g.clientLeft||h.clientLeft||0,l=i.pageYOffset||d.support.boxModel&&g.scrollTop||h.scrollTop,m=i.pageXOffset||d.support.boxModel&&g.scrollLeft||h.scrollLeft,n=c.top+l-j,o=c.left+m-k;return{top:n,left:o}}:d.fn.offset=function(a){var b=this[0];if(a)return this.each(function(b){d.offset.setOffset(this,a,b)});if(!b||!b.ownerDocument)return null;if(b===b.ownerDocument.body)return d.offset.bodyOffset(b);d.offset.initialize();var c,e=b.offsetParent,f=b,g=b.ownerDocument,h=g.documentElement,i=g.body,j=g.defaultView,k=j?j.getComputedStyle(b,null):b.currentStyle,l=b.offsetTop,m=b.offsetLeft;while((b=b.parentNode)&&b!==i&&b!==h){if(d.offset.supportsFixedPosition&&k.position==="fixed")break;c=j?j.getComputedStyle(b,null):b.currentStyle,l-=b.scrollTop,m-=b.scrollLeft,b===e&&(l+=b.offsetTop,m+=b.offsetLeft,d.offset.doesNotAddBorder&&(!d.offset.doesAddBorderForTableAndCells||!cg.test(b.nodeName))&&(l+=parseFloat(c.borderTopWidth)||0,m+=parseFloat(c.borderLeftWidth)||0),f=e,e=b.offsetParent),d.offset.subtractsBorderForOverflowNotVisible&&c.overflow!=="visible"&&(l+=parseFloat(c.borderTopWidth)||0,m+=parseFloat(c.borderLeftWidth)||0),k=c}if(k.position==="relative"||k.position==="static")l+=i.offsetTop,m+=i.offsetLeft;d.offset.supportsFixedPosition&&k.position==="fixed"&&(l+=Math.max(h.scrollTop,i.scrollTop),m+=Math.max(h.scrollLeft,i.scrollLeft));return{top:l,left:m}},d.offset={initialize:function(){var a=c.body,b=c.createElement("div"),e,f,g,h,i=parseFloat(d.css(a,"marginTop"))||0,j="<div style='position:absolute;top:0;left:0;margin:0;border:5px solid #000;padding:0;width:1px;height:1px;'><div></div></div><table style='position:absolute;top:0;left:0;margin:0;border:5px solid #000;padding:0;width:1px;height:1px;' cellpadding='0' cellspacing='0'><tr><td></td></tr></table>";d.extend(b.style,{position:"absolute",top:0,left:0,margin:0,border:0,width:"1px",height:"1px",visibility:"hidden"}),b.innerHTML=j,a.insertBefore(b,a.firstChild),e=b.firstChild,f=e.firstChild,h=e.nextSibling.firstChild.firstChild,this.doesNotAddBorder=f.offsetTop!==5,this.doesAddBorderForTableAndCells=h.offsetTop===5,f.style.position="fixed",f.style.top="20px",this.supportsFixedPosition=f.offsetTop===20||f.offsetTop===15,f.style.position=f.style.top="",e.style.overflow="hidden",e.style.position="relative",this.subtractsBorderForOverflowNotVisible=f.offsetTop===-5,this.doesNotIncludeMarginInBodyOffset=a.offsetTop!==i,a.removeChild(b),d.offset.initialize=d.noop},bodyOffset:function(a){var b=a.offsetTop,c=a.offsetLeft;d.offset.initialize(),d.offset.doesNotIncludeMarginInBodyOffset&&(b+=parseFloat(d.css(a,"marginTop"))||0,c+=parseFloat(d.css(a,"marginLeft"))||0);return{top:b,left:c}},setOffset:function(a,b,c){var e=d.css(a,"position");e==="static"&&(a.style.position="relative");var f=d(a),g=f.offset(),h=d.css(a,"top"),i=d.css(a,"left"),j=(e==="absolute"||e==="fixed")&&d.inArray("auto",[h,i])>-1,k={},l={},m,n;j&&(l=f.position()),m=j?l.top:parseInt(h,10)||0,n=j?l.left:parseInt(i,10)||0,d.isFunction(b)&&(b=b.call(a,c,g)),b.top!=null&&(k.top=b.top-g.top+m),b.left!=null&&(k.left=b.left-g.left+n),"using"in b?b.using.call(a,k):f.css(k)}},d.fn.extend({position:function(){if(!this[0])return null;var a=this[0],b=this.offsetParent(),c=this.offset(),e=ch.test(b[0].nodeName)?{top:0,left:0}:b.offset();c.top-=parseFloat(d.css(a,"marginTop"))||0,c.left-=parseFloat(d.css(a,"marginLeft"))||0,e.top+=parseFloat(d.css(b[0],"borderTopWidth"))||0,e.left+=parseFloat(d.css(b[0],"borderLeftWidth"))||0;return{top:c.top-e.top,left:c.left-e.left}},offsetParent:function(){return this.map(function(){var a=this.offsetParent||c.body;while(a&&(!ch.test(a.nodeName)&&d.css(a,"position")==="static"))a=a.offsetParent;return a})}}),d.each(["Left","Top"],function(a,c){var e="scroll"+c;d.fn[e]=function(c){var f=this[0],g;if(!f)return null;if(c!==b)return this.each(function(){g=ci(this),g?g.scrollTo(a?d(g).scrollLeft():c,a?c:d(g).scrollTop()):this[e]=c});g=ci(f);return g?"pageXOffset"in g?g[a?"pageYOffset":"pageXOffset"]:d.support.boxModel&&g.document.documentElement[e]||g.document.body[e]:f[e]}}),d.each(["Height","Width"],function(a,c){var e=c.toLowerCase();d.fn["inner"+c]=function(){return this[0]?parseFloat(d.css(this[0],e,"padding")):null},d.fn["outer"+c]=function(a){return this[0]?parseFloat(d.css(this[0],e,a?"margin":"border")):null},d.fn[e]=function(a){var f=this[0];if(!f)return a==null?null:this;if(d.isFunction(a))return this.each(function(b){var c=d(this);c[e](a.call(this,b,c[e]()))});if(d.isWindow(f)){var g=f.document.documentElement["client"+c];return f.document.compatMode==="CSS1Compat"&&g||f.document.body["client"+c]||g}if(f.nodeType===9)return Math.max(f.documentElement["client"+c],f.body["scroll"+c],f.documentElement["scroll"+c],f.body["offset"+c],f.documentElement["offset"+c]);if(a===b){var h=d.css(f,e),i=parseFloat(h);return d.isNaN(i)?h:i}return this.css(e,typeof a==="string"?a:a+"px")}}),a.jQuery=a.$=d})(window);/*!
 * Ext JS Library 2.2.1
 * Copyright(c) 2006-2009, Ext JS, LLC.
 * licensing@extjs.com
 * 
 * http://extjs.com/license
 */

Ext={version:"2.2.1"};window["undefined"]=window["undefined"];Ext.apply=function(d,e,b){if(b){Ext.apply(d,b)}if(d&&e&&typeof e=="object"){for(var a in e){d[a]=e[a]}}return d};(function(){var idSeed=0;var ua=navigator.userAgent.toLowerCase();var isStrict=document.compatMode=="CSS1Compat",isOpera=ua.indexOf("opera")>-1,isChrome=ua.indexOf("chrome")>-1,isSafari=!isChrome&&(/webkit|khtml/).test(ua),isSafari3=isSafari&&ua.indexOf("webkit/5")!=-1,isIE=!isOpera&&ua.indexOf("msie")>-1,isIE7=!isOpera&&ua.indexOf("msie 7")>-1,isIE8=!isOpera&&ua.indexOf("msie 8")>-1,isGecko=!isSafari&&!isChrome&&ua.indexOf("gecko")>-1,isGecko3=isGecko&&ua.indexOf("rv:1.9")>-1,isBorderBox=isIE&&!isStrict,isWindows=(ua.indexOf("windows")!=-1||ua.indexOf("win32")!=-1),isMac=(ua.indexOf("macintosh")!=-1||ua.indexOf("mac os x")!=-1),isAir=(ua.indexOf("adobeair")!=-1),isLinux=(ua.indexOf("linux")!=-1),isSecure=window.location.href.toLowerCase().indexOf("https")===0;if(isIE&&!isIE7){try{document.execCommand("BackgroundImageCache",false,true)}catch(e){}}Ext.apply(Ext,{isStrict:isStrict,isSecure:isSecure,isReady:false,enableGarbageCollector:true,enableListenerCollection:false,SSL_SECURE_URL:"javascript:false",BLANK_IMAGE_URL:"http://extjs.com/s.gif",emptyFn:function(){},applyIf:function(o,c){if(o&&c){for(var p in c){if(typeof o[p]=="undefined"){o[p]=c[p]}}}return o},addBehaviors:function(o){if(!Ext.isReady){Ext.onReady(function(){Ext.addBehaviors(o)});return}var cache={};for(var b in o){var parts=b.split("@");if(parts[1]){var s=parts[0];if(!cache[s]){cache[s]=Ext.select(s)}cache[s].on(parts[1],o[b])}}cache=null},id:function(el,prefix){prefix=prefix||"ext-gen";el=Ext.getDom(el);var id=prefix+(++idSeed);return el?(el.id?el.id:(el.id=id)):id},extend:function(){var io=function(o){for(var m in o){this[m]=o[m]}};var oc=Object.prototype.constructor;return function(sb,sp,overrides){if(typeof sp=="object"){overrides=sp;sp=sb;sb=overrides.constructor!=oc?overrides.constructor:function(){sp.apply(this,arguments)}}var F=function(){},sbp,spp=sp.prototype;F.prototype=spp;sbp=sb.prototype=new F();sbp.constructor=sb;sb.superclass=spp;if(spp.constructor==oc){spp.constructor=sp}sb.override=function(o){Ext.override(sb,o)};sbp.override=io;Ext.override(sb,overrides);sb.extend=function(o){Ext.extend(sb,o)};return sb}}(),override:function(origclass,overrides){if(overrides){var p=origclass.prototype;for(var method in overrides){p[method]=overrides[method]}if(Ext.isIE&&overrides.toString!=origclass.toString){p.toString=overrides.toString}}},namespace:function(){var a=arguments,o=null,i,j,d,rt;for(i=0;i<a.length;++i){d=a[i].split(".");rt=d[0];eval("if (typeof "+rt+' == "undefined"){'+rt+" = {};} o = "+rt+";");for(j=1;j<d.length;++j){o[d[j]]=o[d[j]]||{};o=o[d[j]]}}},urlEncode:function(o){if(!o){return""}var buf=[];for(var key in o){var ov=o[key],k=encodeURIComponent(key);var type=typeof ov;if(type=="undefined"){buf.push(k,"=&")}else{if(type!="function"&&type!="object"){buf.push(k,"=",encodeURIComponent(ov),"&")}else{if(Ext.isDate(ov)){var s=Ext.encode(ov).replace(/"/g,"");buf.push(k,"=",s,"&")}else{if(Ext.isArray(ov)){if(ov.length){for(var i=0,len=ov.length;i<len;i++){buf.push(k,"=",encodeURIComponent(ov[i]===undefined?"":ov[i]),"&")}}else{buf.push(k,"=&")}}}}}}buf.pop();return buf.join("")},urlDecode:function(string,overwrite){if(!string||!string.length){return{}}var obj={};var pairs=string.split("&");var pair,name,value;for(var i=0,len=pairs.length;i<len;i++){pair=pairs[i].split("=");name=decodeURIComponent(pair[0]);value=decodeURIComponent(pair[1]);if(overwrite!==true){if(typeof obj[name]=="undefined"){obj[name]=value}else{if(typeof obj[name]=="string"){obj[name]=[obj[name]];obj[name].push(value)}else{obj[name].push(value)}}}else{obj[name]=value}}return obj},each:function(array,fn,scope){if(typeof array.length=="undefined"||typeof array=="string"){array=[array]}for(var i=0,len=array.length;i<len;i++){if(fn.call(scope||array[i],array[i],i,array)===false){return i}}},combine:function(){var as=arguments,l=as.length,r=[];for(var i=0;i<l;i++){var a=as[i];if(Ext.isArray(a)){r=r.concat(a)}else{if(a.length!==undefined&&!a.substr){r=r.concat(Array.prototype.slice.call(a,0))}else{r.push(a)}}}return r},escapeRe:function(s){return s.replace(/([.*+?^${}()|[\]\/\\])/g,"\\$1")},callback:function(cb,scope,args,delay){if(typeof cb=="function"){if(delay){cb.defer(delay,scope,args||[])}else{cb.apply(scope,args||[])}}},getDom:function(el){if(!el||!document){return null}return el.dom?el.dom:(typeof el=="string"?document.getElementById(el):el)},getDoc:function(){return Ext.get(document)},getBody:function(){return Ext.get(document.body||document.documentElement)},getCmp:function(id){return Ext.ComponentMgr.get(id)},num:function(v,defaultValue){if(typeof v!="number"||isNaN(v)){return defaultValue}return v},destroy:function(){for(var i=0,a=arguments,len=a.length;i<len;i++){var as=a[i];if(as){if(typeof as.destroy=="function"){as.destroy()}else{if(as.dom){as.removeAllListeners();as.remove()}}}}},removeNode:isIE?function(){var d;return function(n){if(n&&n.tagName!="BODY"){d=d||document.createElement("div");d.appendChild(n);d.innerHTML=""}}}():function(n){if(n&&n.parentNode&&n.tagName!="BODY"){n.parentNode.removeChild(n)}},type:function(o){if(o===undefined||o===null){return false}if(o.htmlElement){return"element"}var t=typeof o;if(t=="object"&&o.nodeName){switch(o.nodeType){case 1:return"element";case 3:return(/\S/).test(o.nodeValue)?"textnode":"whitespace"}}if(t=="object"||t=="function"){switch(o.constructor){case Array:return"array";case RegExp:return"regexp";case Date:return"date"}if(typeof o.length=="number"&&typeof o.item=="function"){return"nodelist"}}return t},isEmpty:function(v,allowBlank){return v===null||v===undefined||(!allowBlank?v==="":false)},value:function(v,defaultValue,allowBlank){return Ext.isEmpty(v,allowBlank)?defaultValue:v},isArray:function(v){return v&&typeof v.length=="number"&&typeof v.splice=="function"},isDate:function(v){return v&&typeof v.getFullYear=="function"},isOpera:isOpera,isChrome:isChrome,isSafari:isSafari,isSafari3:isSafari3,isSafari2:isSafari&&!isSafari3,isIE:isIE,isIE6:isIE&&!isIE7&&!isIE8,isIE7:isIE7,isIE8:isIE8,isGecko:isGecko,isGecko2:isGecko&&!isGecko3,isGecko3:isGecko3,isBorderBox:isBorderBox,isLinux:isLinux,isWindows:isWindows,isMac:isMac,isAir:isAir,useShims:((isIE&&!isIE7)||(isMac&&isGecko&&!isGecko3))});Ext.ns=Ext.namespace})();Ext.ns("Ext","Ext.util","Ext.grid","Ext.dd","Ext.tree","Ext.data","Ext.form","Ext.menu","Ext.state","Ext.lib","Ext.layout","Ext.app","Ext.ux");Ext.apply(Function.prototype,{createCallback:function(){var a=arguments;var b=this;return function(){return b.apply(window,a)}},createDelegate:function(c,b,a){var d=this;return function(){var f=b||arguments;if(a===true){f=Array.prototype.slice.call(arguments,0);f=f.concat(b)}else{if(typeof a=="number"){f=Array.prototype.slice.call(arguments,0);var e=[a,0].concat(b);Array.prototype.splice.apply(f,e)}}return d.apply(c||window,f)}},defer:function(c,e,b,a){var d=this.createDelegate(e,b,a);if(c){return setTimeout(d,c)}d();return 0},createSequence:function(b,a){if(typeof b!="function"){return this}var c=this;return function(){var d=c.apply(this||window,arguments);b.apply(a||this||window,arguments);return d}},createInterceptor:function(b,a){if(typeof b!="function"){return this}var c=this;return function(){b.target=this;b.method=c;if(b.apply(a||this||window,arguments)===false){return}return c.apply(this||window,arguments)}}});Ext.applyIf(String,{escape:function(a){return a.replace(/('|\\)/g,"\\$1")},leftPad:function(d,b,c){var a=new String(d);if(!c){c=" "}while(a.length<b){a=c+a}return a.toString()},format:function(b){var a=Array.prototype.slice.call(arguments,1);return b.replace(/\{(\d+)\}/g,function(c,d){return a[d]})}});String.prototype.toggle=function(b,a){return this==b?a:b};String.prototype.trim=function(){var a=/^\s+|\s+$/g;return function(){return this.replace(a,"")}}();Ext.applyIf(Number.prototype,{constrain:function(b,a){return Math.min(Math.max(this,b),a)}});Ext.applyIf(Array.prototype,{indexOf:function(c){for(var b=0,a=this.length;b<a;b++){if(this[b]==c){return b}}return -1},remove:function(b){var a=this.indexOf(b);if(a!=-1){this.splice(a,1)}return this}});Date.prototype.getElapsed=function(a){return Math.abs((a||new Date()).getTime()-this.getTime())};(function(){var b;Ext.lib.Dom={getViewWidth:function(e){return e?this.getDocumentWidth():this.getViewportWidth()},getViewHeight:function(e){return e?this.getDocumentHeight():this.getViewportHeight()},getDocumentHeight:function(){var e=(document.compatMode!="CSS1Compat")?document.body.scrollHeight:document.documentElement.scrollHeight;return Math.max(e,this.getViewportHeight())},getDocumentWidth:function(){var e=(document.compatMode!="CSS1Compat")?document.body.scrollWidth:document.documentElement.scrollWidth;return Math.max(e,this.getViewportWidth())},getViewportHeight:function(){if(Ext.isIE){return Ext.isStrict?document.documentElement.clientHeight:document.body.clientHeight}else{return self.innerHeight}},getViewportWidth:function(){if(Ext.isIE){return Ext.isStrict?document.documentElement.clientWidth:document.body.clientWidth}else{return self.innerWidth}},isAncestor:function(f,g){f=Ext.getDom(f);g=Ext.getDom(g);if(!f||!g){return false}if(f.contains&&!Ext.isSafari){return f.contains(g)}else{if(f.compareDocumentPosition){return !!(f.compareDocumentPosition(g)&16)}else{var e=g.parentNode;while(e){if(e==f){return true}else{if(!e.tagName||e.tagName.toUpperCase()=="HTML"){return false}}e=e.parentNode}return false}}},getRegion:function(e){return Ext.lib.Region.getRegion(e)},getY:function(e){return this.getXY(e)[1]},getX:function(e){return this.getXY(e)[0]},getXY:function(g){var f,k,m,n,j=(document.body||document.documentElement);g=Ext.getDom(g);if(g==j){return[0,0]}if(g.getBoundingClientRect){m=g.getBoundingClientRect();n=c(document).getScroll();return[m.left+n.left,m.top+n.top]}var o=0,l=0;f=g;var e=c(g).getStyle("position")=="absolute";while(f){o+=f.offsetLeft;l+=f.offsetTop;if(!e&&c(f).getStyle("position")=="absolute"){e=true}if(Ext.isGecko){k=c(f);var q=parseInt(k.getStyle("borderTopWidth"),10)||0;var h=parseInt(k.getStyle("borderLeftWidth"),10)||0;o+=h;l+=q;if(f!=g&&k.getStyle("overflow")!="visible"){o+=h;l+=q}}f=f.offsetParent}if(Ext.isSafari&&e){o-=j.offsetLeft;l-=j.offsetTop}if(Ext.isGecko&&!e){var i=c(j);o+=parseInt(i.getStyle("borderLeftWidth"),10)||0;l+=parseInt(i.getStyle("borderTopWidth"),10)||0}f=g.parentNode;while(f&&f!=j){if(!Ext.isOpera||(f.tagName!="TR"&&c(f).getStyle("display")!="inline")){o-=f.scrollLeft;l-=f.scrollTop}f=f.parentNode}return[o,l]},setXY:function(e,f){e=Ext.fly(e,"_setXY");e.position();var g=e.translatePoints(f);if(f[0]!==false){e.dom.style.left=g.left+"px"}if(f[1]!==false){e.dom.style.top=g.top+"px"}},setX:function(f,e){this.setXY(f,[e,false])},setY:function(e,f){this.setXY(e,[false,f])}};Ext.lib.Event=function(){var f=false;var g=[];var k=[];var i=0;var h=[];var e=0;var j=null;return{POLL_RETRYS:200,POLL_INTERVAL:20,EL:0,TYPE:1,FN:2,WFN:3,OBJ:3,ADJ_SCOPE:4,_interval:null,startInterval:function(){if(!this._interval){var l=this;var m=function(){l._tryPreloadAttach()};this._interval=setInterval(m,this.POLL_INTERVAL)}},onAvailable:function(n,l,o,m){h.push({id:n,fn:l,obj:o,override:m,checkReady:false});i=this.POLL_RETRYS;this.startInterval()},addListener:function(q,m,p){q=Ext.getDom(q);if(!q||!p){return false}if("unload"==m){k[k.length]=[q,m,p];return true}var o=function(r){return typeof Ext!="undefined"?p(Ext.lib.Event.getEvent(r)):false};var l=[q,m,p,o];var n=g.length;g[n]=l;this.doAdd(q,m,o,false);return true},removeListener:function(s,o,r){var q,n;s=Ext.getDom(s);if(!r){return this.purgeElement(s,false,o)}if("unload"==o){for(q=0,n=k.length;q<n;q++){var m=k[q];if(m&&m[0]==s&&m[1]==o&&m[2]==r){k.splice(q,1);return true}}return false}var l=null;var p=arguments[3];if("undefined"==typeof p){p=this._getCacheIndex(s,o,r)}if(p>=0){l=g[p]}if(!s||!l){return false}this.doRemove(s,o,l[this.WFN],false);delete g[p][this.WFN];delete g[p][this.FN];g.splice(p,1);return true},getTarget:function(n,m){n=n.browserEvent||n;var l=n.target||n.srcElement;return this.resolveTextNode(l)},resolveTextNode:function(l){if(Ext.isSafari&&l&&3==l.nodeType){return l.parentNode}else{return l}},getPageX:function(m){m=m.browserEvent||m;var l=m.pageX;if(!l&&0!==l){l=m.clientX||0;if(Ext.isIE){l+=this.getScroll()[1]}}return l},getPageY:function(l){l=l.browserEvent||l;var m=l.pageY;if(!m&&0!==m){m=l.clientY||0;if(Ext.isIE){m+=this.getScroll()[0]}}return m},getXY:function(l){l=l.browserEvent||l;return[this.getPageX(l),this.getPageY(l)]},getRelatedTarget:function(m){m=m.browserEvent||m;var l=m.relatedTarget;if(!l){if(m.type=="mouseout"){l=m.toElement}else{if(m.type=="mouseover"){l=m.fromElement}}}return this.resolveTextNode(l)},getTime:function(n){n=n.browserEvent||n;if(!n.time){var m=new Date().getTime();try{n.time=m}catch(l){this.lastError=l;return m}}return n.time},stopEvent:function(l){this.stopPropagation(l);this.preventDefault(l)},stopPropagation:function(l){l=l.browserEvent||l;if(l.stopPropagation){l.stopPropagation()}else{l.cancelBubble=true}},preventDefault:function(l){l=l.browserEvent||l;if(l.preventDefault){l.preventDefault()}else{l.returnValue=false}},getEvent:function(m){var l=m||window.event;if(!l){var n=this.getEvent.caller;while(n){l=n.arguments[0];if(l&&Event==l.constructor){break}n=n.caller}}return l},getCharCode:function(l){l=l.browserEvent||l;return l.charCode||l.keyCode||0},_getCacheIndex:function(q,n,p){for(var o=0,m=g.length;o<m;++o){var l=g[o];if(l&&l[this.FN]==p&&l[this.EL]==q&&l[this.TYPE]==n){return o}}return -1},elCache:{},getEl:function(l){return document.getElementById(l)},clearCache:function(){},_load:function(m){f=true;var l=Ext.lib.Event;if(Ext.isIE){l.doRemove(window,"load",l._load)}},_tryPreloadAttach:function(){if(this.locked){return false}this.locked=true;var r=!f;if(!r){r=(i>0)}var q=[];for(var m=0,l=h.length;m<l;++m){var p=h[m];if(p){var o=this.getEl(p.id);if(o){if(!p.checkReady||f||o.nextSibling||(document&&document.body)){var n=o;if(p.override){if(p.override===true){n=p.obj}else{n=p.override}}p.fn.call(n,p.obj);h[m]=null}}else{q.push(p)}}}i=(q.length===0)?0:i-1;if(r){this.startInterval()}else{clearInterval(this._interval);this._interval=null}this.locked=false;return true},purgeElement:function(q,r,o){var s=this.getListeners(q,o);if(s){for(var p=0,m=s.length;p<m;++p){var n=s[p];this.removeListener(q,n.type,n.fn)}}if(r&&q&&q.childNodes){for(p=0,m=q.childNodes.length;p<m;++p){this.purgeElement(q.childNodes[p],r,o)}}},getListeners:function(n,s){var q=[],m;if(!s){m=[g,k]}else{if(s=="unload"){m=[k]}else{m=[g]}}for(var p=0;p<m.length;++p){var u=m[p];if(u&&u.length>0){for(var r=0,t=u.length;r<t;++r){var o=u[r];if(o&&o[this.EL]===n&&(!s||s===o[this.TYPE])){q.push({type:o[this.TYPE],fn:o[this.FN],obj:o[this.OBJ],adjust:o[this.ADJ_SCOPE],index:r})}}}}return(q.length)?q:null},_unload:function(t){var s=Ext.lib.Event,q,p,n,m,o;for(q=0,m=k.length;q<m;++q){n=k[q];if(n){var r=window;if(n[s.ADJ_SCOPE]){if(n[s.ADJ_SCOPE]===true){r=n[s.OBJ]}else{r=n[s.ADJ_SCOPE]}}n[s.FN].call(r,s.getEvent(t),n[s.OBJ]);k[q]=null;n=null;r=null}}k=null;if(g&&g.length>0){p=g.length;while(p){o=p-1;n=g[o];if(n){s.removeListener(n[s.EL],n[s.TYPE],n[s.FN],o)}p=p-1}n=null;s.clearCache()}s.doRemove(window,"unload",s._unload)},getScroll:function(){var l=document.documentElement,m=document.body;if(l&&(l.scrollTop||l.scrollLeft)){return[l.scrollTop,l.scrollLeft]}else{if(m){return[m.scrollTop,m.scrollLeft]}else{return[0,0]}}},doAdd:function(){if(window.addEventListener){return function(o,m,n,l){o.addEventListener(m,n,(l))}}else{if(window.attachEvent){return function(o,m,n,l){o.attachEvent("on"+m,n)}}else{return function(){}}}}(),doRemove:function(){if(window.removeEventListener){return function(o,m,n,l){o.removeEventListener(m,n,(l))}}else{if(window.detachEvent){return function(n,l,m){n.detachEvent("on"+l,m)}}else{return function(){}}}}()}}();var d=Ext.lib.Event;d.on=d.addListener;d.un=d.removeListener;if(document&&document.body){d._load()}else{d.doAdd(window,"load",d._load)}d.doAdd(window,"unload",d._unload);d._tryPreloadAttach();Ext.lib.Ajax={request:function(l,j,e,k,f){if(f){var g=f.headers;if(g){for(var i in g){if(g.hasOwnProperty(i)){this.initHeader(i,g[i],false)}}}if(f.xmlData){if(!g||!g["Content-Type"]){this.initHeader("Content-Type","text/xml",false)}l=(l?l:(f.method?f.method:"POST"));k=f.xmlData}else{if(f.jsonData){if(!g||!g["Content-Type"]){this.initHeader("Content-Type","application/json",false)}l=(l?l:(f.method?f.method:"POST"));k=typeof f.jsonData=="object"?Ext.encode(f.jsonData):f.jsonData}}}return this.asyncRequest(l,j,e,k)},serializeForm:function(f){if(typeof f=="string"){f=(document.getElementById(f)||document.forms[f])}var g,e,h,l,m="",o=false;for(var n=0;n<f.elements.length;n++){g=f.elements[n];l=f.elements[n].disabled;e=f.elements[n].name;h=f.elements[n].value;if(!l&&e){switch(g.type){case"select-one":case"select-multiple":for(var k=0;k<g.options.length;k++){if(g.options[k].selected){if(Ext.isIE){m+=encodeURIComponent(e)+"="+encodeURIComponent(g.options[k].attributes.value.specified?g.options[k].value:g.options[k].text)+"&"}else{m+=encodeURIComponent(e)+"="+encodeURIComponent(g.options[k].hasAttribute("value")?g.options[k].value:g.options[k].text)+"&"}}}break;case"radio":case"checkbox":if(g.checked){m+=encodeURIComponent(e)+"="+encodeURIComponent(h)+"&"}break;case"file":case undefined:case"reset":case"button":break;case"submit":if(o==false){m+=encodeURIComponent(e)+"="+encodeURIComponent(h)+"&";o=true}break;default:m+=encodeURIComponent(e)+"="+encodeURIComponent(h)+"&";break}}}m=m.substr(0,m.length-1);return m},headers:{},hasHeaders:false,useDefaultHeader:true,defaultPostHeader:"application/x-www-form-urlencoded; charset=UTF-8",useDefaultXhrHeader:true,defaultXhrHeader:"XMLHttpRequest",hasDefaultHeaders:true,defaultHeaders:{},poll:{},timeout:{},pollInterval:50,transactionId:0,setProgId:function(e){this.activeX.unshift(e)},setDefaultPostHeader:function(e){this.useDefaultHeader=e},setDefaultXhrHeader:function(e){this.useDefaultXhrHeader=e},setPollingInterval:function(e){if(typeof e=="number"&&isFinite(e)){this.pollInterval=e}},createXhrObject:function(k){var j,f;try{f=new XMLHttpRequest();j={conn:f,tId:k}}catch(h){for(var g=0;g<this.activeX.length;++g){try{f=new ActiveXObject(this.activeX[g]);j={conn:f,tId:k};break}catch(h){}}}finally{return j}},getConnectionObject:function(){var g;var h=this.transactionId;try{g=this.createXhrObject(h);if(g){this.transactionId++}}catch(f){}finally{return g}},asyncRequest:function(i,f,h,e){var g=this.getConnectionObject();if(!g){return null}else{g.conn.open(i,f,true);if(this.useDefaultXhrHeader){if(!this.defaultHeaders["X-Requested-With"]){this.initHeader("X-Requested-With",this.defaultXhrHeader,true)}}if(e&&this.useDefaultHeader&&(!this.hasHeaders||!this.headers["Content-Type"])){this.initHeader("Content-Type",this.defaultPostHeader)}if(this.hasDefaultHeaders||this.hasHeaders){this.setHeader(g)}this.handleReadyState(g,h);g.conn.send(e||null);return g}},handleReadyState:function(f,g){var e=this;if(g&&g.timeout){this.timeout[f.tId]=window.setTimeout(function(){e.abort(f,g,true)},g.timeout)}this.poll[f.tId]=window.setInterval(function(){if(f.conn&&f.conn.readyState==4){window.clearInterval(e.poll[f.tId]);delete e.poll[f.tId];if(g&&g.timeout){window.clearTimeout(e.timeout[f.tId]);delete e.timeout[f.tId]}e.handleTransactionResponse(f,g)}},this.pollInterval)},handleTransactionResponse:function(j,k,f){if(!k){this.releaseObject(j);return}var h,g;try{if(j.conn.status!==undefined&&j.conn.status!=0){h=j.conn.status}else{h=13030}}catch(i){h=13030}if((h>=200&&h<300)||(Ext.isIE&&h==1223)){g=this.createResponseObject(j,k.argument);if(k.success){if(!k.scope){k.success(g)}else{k.success.apply(k.scope,[g])}}}else{switch(h){case 12002:case 12029:case 12030:case 12031:case 12152:case 13030:g=this.createExceptionObject(j.tId,k.argument,(f?f:false));if(k.failure){if(!k.scope){k.failure(g)}else{k.failure.apply(k.scope,[g])}}break;default:g=this.createResponseObject(j,k.argument);if(k.failure){if(!k.scope){k.failure(g)}else{k.failure.apply(k.scope,[g])}}}}this.releaseObject(j);g=null},createResponseObject:function(f,m){var j={};var p={};try{var h=f.conn.getAllResponseHeaders();var l=h.split("\n");for(var k=0;k<l.length;k++){var g=l[k].indexOf(":");if(g!=-1){p[l[k].substring(0,g)]=l[k].substring(g+2)}}}catch(n){}j.tId=f.tId;j.status=f.conn.status;j.statusText=f.conn.statusText;j.getResponseHeader=p;j.getAllResponseHeaders=h;j.responseText=f.conn.responseText;j.responseXML=f.conn.responseXML;if(typeof m!==undefined){j.argument=m}return j},createExceptionObject:function(l,h,e){var j=0;var k="communication failure";var g=-1;var f="transaction aborted";var i={};i.tId=l;if(e){i.status=g;i.statusText=f}else{i.status=j;i.statusText=k}if(h){i.argument=h}return i},initHeader:function(e,h,g){var f=(g)?this.defaultHeaders:this.headers;if(f[e]===undefined){f[e]=h}else{f[e]=h+","+f[e]}if(g){this.hasDefaultHeaders=true}else{this.hasHeaders=true}},setHeader:function(e){if(this.hasDefaultHeaders){for(var f in this.defaultHeaders){if(this.defaultHeaders.hasOwnProperty(f)){e.conn.setRequestHeader(f,this.defaultHeaders[f])}}}if(this.hasHeaders){for(var f in this.headers){if(this.headers.hasOwnProperty(f)){e.conn.setRequestHeader(f,this.headers[f])}}this.headers={};this.hasHeaders=false}},resetDefaultHeaders:function(){delete this.defaultHeaders;this.defaultHeaders={};this.hasDefaultHeaders=false},abort:function(f,g,e){if(this.isCallInProgress(f)){f.conn.abort();window.clearInterval(this.poll[f.tId]);delete this.poll[f.tId];if(e){delete this.timeout[f.tId]}this.handleTransactionResponse(f,g,true);return true}else{return false}},isCallInProgress:function(e){if(e.conn){return e.conn.readyState!=4&&e.conn.readyState!=0}else{return false}},releaseObject:function(e){e.conn=null;e=null},activeX:["MSXML2.XMLHTTP.3.0","MSXML2.XMLHTTP","Microsoft.XMLHTTP"]};Ext.lib.Region=function(g,h,e,f){this.top=g;this[1]=g;this.right=h;this.bottom=e;this.left=f;this[0]=f};Ext.lib.Region.prototype={contains:function(e){return(e.left>=this.left&&e.right<=this.right&&e.top>=this.top&&e.bottom<=this.bottom)},getArea:function(){return((this.bottom-this.top)*(this.right-this.left))},intersect:function(i){var g=Math.max(this.top,i.top);var h=Math.min(this.right,i.right);var e=Math.min(this.bottom,i.bottom);var f=Math.max(this.left,i.left);if(e>=g&&h>=f){return new Ext.lib.Region(g,h,e,f)}else{return null}},union:function(i){var g=Math.min(this.top,i.top);var h=Math.max(this.right,i.right);var e=Math.max(this.bottom,i.bottom);var f=Math.min(this.left,i.left);return new Ext.lib.Region(g,h,e,f)},constrainTo:function(e){this.top=this.top.constrain(e.top,e.bottom);this.bottom=this.bottom.constrain(e.top,e.bottom);this.left=this.left.constrain(e.left,e.right);this.right=this.right.constrain(e.left,e.right);return this},adjust:function(g,f,e,h){this.top+=g;this.left+=f;this.right+=h;this.bottom+=e;return this}};Ext.lib.Region.getRegion=function(h){var j=Ext.lib.Dom.getXY(h);var g=j[1];var i=j[0]+h.offsetWidth;var e=j[1]+h.offsetHeight;var f=j[0];return new Ext.lib.Region(g,i,e,f)};Ext.lib.Point=function(e,f){if(Ext.isArray(e)){f=e[1];e=e[0]}this.x=this.right=this.left=this[0]=e;this.y=this.top=this.bottom=this[1]=f};Ext.lib.Point.prototype=new Ext.lib.Region();Ext.lib.Anim={scroll:function(h,f,i,j,e,g){return this.run(h,f,i,j,e,g,Ext.lib.Scroll)},motion:function(h,f,i,j,e,g){return this.run(h,f,i,j,e,g,Ext.lib.Motion)},color:function(h,f,i,j,e,g){return this.run(h,f,i,j,e,g,Ext.lib.ColorAnim)},run:function(i,f,k,l,e,h,g){g=g||Ext.lib.AnimBase;if(typeof l=="string"){l=Ext.lib.Easing[l]}var j=new g(i,f,k,l);j.animateX(function(){Ext.callback(e,h)});return j}};function c(e){if(!b){b=new Ext.Element.Flyweight()}b.dom=e;return b}if(Ext.isIE){function a(){var e=Function.prototype;delete e.createSequence;delete e.defer;delete e.createDelegate;delete e.createCallback;delete e.createInterceptor;window.detachEvent("onunload",a)}window.attachEvent("onunload",a)}Ext.lib.AnimBase=function(f,e,g,h){if(f){this.init(f,e,g,h)}};Ext.lib.AnimBase.prototype={toString:function(){var e=this.getEl();var f=e.id||e.tagName;return("Anim "+f)},patterns:{noNegatives:/width|height|opacity|padding/i,offsetAttribute:/^((width|height)|(top|left))$/,defaultUnit:/width|height|top$|bottom$|left$|right$/i,offsetUnit:/\d+(em|%|en|ex|pt|in|cm|mm|pc)$/i},doMethod:function(e,g,f){return this.method(this.currentFrame,g,f-g,this.totalFrames)},setAttribute:function(e,g,f){if(this.patterns.noNegatives.test(e)){g=(g>0)?g:0}Ext.fly(this.getEl(),"_anim").setStyle(e,g+f)},getAttribute:function(e){var g=this.getEl();var i=c(g).getStyle(e);if(i!=="auto"&&!this.patterns.offsetUnit.test(i)){return parseFloat(i)}var f=this.patterns.offsetAttribute.exec(e)||[];var j=!!(f[3]);var h=!!(f[2]);if(h||(c(g).getStyle("position")=="absolute"&&j)){i=g["offset"+f[0].charAt(0).toUpperCase()+f[0].substr(1)]}else{i=0}return i},getDefaultUnit:function(e){if(this.patterns.defaultUnit.test(e)){return"px"}return""},animateX:function(h,e){var g=function(){this.onComplete.removeListener(g);if(typeof h=="function"){h.call(e||this,this)}};this.onComplete.addListener(g,this);this.animate()},setRuntimeAttribute:function(f){var l;var g;var h=this.attributes;this.runtimeAttributes[f]={};var k=function(i){return(typeof i!=="undefined")};if(!k(h[f]["to"])&&!k(h[f]["by"])){return false}l=(k(h[f]["from"]))?h[f]["from"]:this.getAttribute(f);if(k(h[f]["to"])){g=h[f]["to"]}else{if(k(h[f]["by"])){if(l.constructor==Array){g=[];for(var j=0,e=l.length;j<e;++j){g[j]=l[j]+h[f]["by"][j]}}else{g=l+h[f]["by"]}}}this.runtimeAttributes[f].start=l;this.runtimeAttributes[f].end=g;this.runtimeAttributes[f].unit=(k(h[f].unit))?h[f]["unit"]:this.getDefaultUnit(f)},init:function(g,l,k,e){var f=false;var h=null;var j=0;g=Ext.getDom(g);this.attributes=l||{};this.duration=k||1;this.method=e||Ext.lib.Easing.easeNone;this.useSeconds=true;this.currentFrame=0;this.totalFrames=Ext.lib.AnimMgr.fps;this.getEl=function(){return g};this.isAnimated=function(){return f};this.getStartTime=function(){return h};this.runtimeAttributes={};this.animate=function(){if(this.isAnimated()){return false}this.currentFrame=0;this.totalFrames=(this.useSeconds)?Math.ceil(Ext.lib.AnimMgr.fps*this.duration):this.duration;Ext.lib.AnimMgr.registerElement(this)};this.stop=function(o){if(o){this.currentFrame=this.totalFrames;this._onTween.fire()}Ext.lib.AnimMgr.stop(this)};var n=function(){this.onStart.fire();this.runtimeAttributes={};for(var o in this.attributes){this.setRuntimeAttribute(o)}f=true;j=0;h=new Date()};var m=function(){var q={duration:new Date()-this.getStartTime(),currentFrame:this.currentFrame};q.toString=function(){return("duration: "+q.duration+", currentFrame: "+q.currentFrame)};this.onTween.fire(q);var p=this.runtimeAttributes;for(var o in p){this.setAttribute(o,this.doMethod(o,p[o].start,p[o].end),p[o].unit)}j+=1};var i=function(){var o=(new Date()-h)/1000;var p={duration:o,frames:j,fps:j/o};p.toString=function(){return("duration: "+p.duration+", frames: "+p.frames+", fps: "+p.fps)};f=false;j=0;this.onComplete.fire(p)};this._onStart=new Ext.util.Event(this);this.onStart=new Ext.util.Event(this);this.onTween=new Ext.util.Event(this);this._onTween=new Ext.util.Event(this);this.onComplete=new Ext.util.Event(this);this._onComplete=new Ext.util.Event(this);this._onStart.addListener(n);this._onTween.addListener(m);this._onComplete.addListener(i)}};Ext.lib.AnimMgr=new function(){var g=null;var f=[];var e=0;this.fps=1000;this.delay=1;this.registerElement=function(j){f[f.length]=j;e+=1;j._onStart.fire();this.start()};this.unRegister=function(k,j){k._onComplete.fire();j=j||i(k);if(j!=-1){f.splice(j,1)}e-=1;if(e<=0){this.stop()}};this.start=function(){if(g===null){g=setInterval(this.run,this.delay)}};this.stop=function(l){if(!l){clearInterval(g);for(var k=0,j=f.length;k<j;++k){if(f[0].isAnimated()){this.unRegister(f[0],0)}}f=[];g=null;e=0}else{this.unRegister(l)}};this.run=function(){for(var l=0,j=f.length;l<j;++l){var k=f[l];if(!k||!k.isAnimated()){continue}if(k.currentFrame<k.totalFrames||k.totalFrames===null){k.currentFrame+=1;if(k.useSeconds){h(k)}k._onTween.fire()}else{Ext.lib.AnimMgr.stop(k,l)}}};var i=function(l){for(var k=0,j=f.length;k<j;++k){if(f[k]==l){return k}}return -1};var h=function(k){var n=k.totalFrames;var m=k.currentFrame;var l=(k.currentFrame*k.duration*1000/k.totalFrames);var j=(new Date()-k.getStartTime());var o=0;if(j<k.duration*1000){o=Math.round((j/l-1)*k.currentFrame)}else{o=n-(m+1)}if(o>0&&isFinite(o)){if(k.currentFrame+o>=n){o=n-(m+1)}k.currentFrame+=o}}};Ext.lib.Bezier=new function(){this.getPosition=function(k,h){var l=k.length;var g=[];for(var f=0;f<l;++f){g[f]=[k[f][0],k[f][1]]}for(var e=1;e<l;++e){for(f=0;f<l-e;++f){g[f][0]=(1-h)*g[f][0]+h*g[parseInt(f+1,10)][0];g[f][1]=(1-h)*g[f][1]+h*g[parseInt(f+1,10)][1]}}return[g[0][0],g[0][1]]}};(function(){Ext.lib.ColorAnim=function(i,h,j,k){Ext.lib.ColorAnim.superclass.constructor.call(this,i,h,j,k)};Ext.extend(Ext.lib.ColorAnim,Ext.lib.AnimBase);var f=Ext.lib;var g=f.ColorAnim.superclass;var e=f.ColorAnim.prototype;e.toString=function(){var h=this.getEl();var i=h.id||h.tagName;return("ColorAnim "+i)};e.patterns.color=/color$/i;e.patterns.rgb=/^rgb\(([0-9]+)\s*,\s*([0-9]+)\s*,\s*([0-9]+)\)$/i;e.patterns.hex=/^#?([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})$/i;e.patterns.hex3=/^#?([0-9A-F]{1})([0-9A-F]{1})([0-9A-F]{1})$/i;e.patterns.transparent=/^transparent|rgba\(0, 0, 0, 0\)$/;e.parseColor=function(h){if(h.length==3){return h}var i=this.patterns.hex.exec(h);if(i&&i.length==4){return[parseInt(i[1],16),parseInt(i[2],16),parseInt(i[3],16)]}i=this.patterns.rgb.exec(h);if(i&&i.length==4){return[parseInt(i[1],10),parseInt(i[2],10),parseInt(i[3],10)]}i=this.patterns.hex3.exec(h);if(i&&i.length==4){return[parseInt(i[1]+i[1],16),parseInt(i[2]+i[2],16),parseInt(i[3]+i[3],16)]}return null};e.getAttribute=function(h){var j=this.getEl();if(this.patterns.color.test(h)){var k=c(j).getStyle(h);if(this.patterns.transparent.test(k)){var i=j.parentNode;k=c(i).getStyle(h);while(i&&this.patterns.transparent.test(k)){i=i.parentNode;k=c(i).getStyle(h);if(i.tagName.toUpperCase()=="HTML"){k="#fff"}}}}else{k=g.getAttribute.call(this,h)}return k};e.doMethod=function(j,n,k){var m;if(this.patterns.color.test(j)){m=[];for(var l=0,h=n.length;l<h;++l){m[l]=g.doMethod.call(this,j,n[l],k[l])}m="rgb("+Math.floor(m[0])+","+Math.floor(m[1])+","+Math.floor(m[2])+")"}else{m=g.doMethod.call(this,j,n,k)}return m};e.setRuntimeAttribute=function(j){g.setRuntimeAttribute.call(this,j);if(this.patterns.color.test(j)){var l=this.attributes;var n=this.parseColor(this.runtimeAttributes[j].start);var k=this.parseColor(this.runtimeAttributes[j].end);if(typeof l[j]["to"]==="undefined"&&typeof l[j]["by"]!=="undefined"){k=this.parseColor(l[j].by);for(var m=0,h=n.length;m<h;++m){k[m]=n[m]+k[m]}}this.runtimeAttributes[j].start=n;this.runtimeAttributes[j].end=k}}})();Ext.lib.Easing={easeNone:function(f,e,h,g){return h*f/g+e},easeIn:function(f,e,h,g){return h*(f/=g)*f+e},easeOut:function(f,e,h,g){return -h*(f/=g)*(f-2)+e},easeBoth:function(f,e,h,g){if((f/=g/2)<1){return h/2*f*f+e}return -h/2*((--f)*(f-2)-1)+e},easeInStrong:function(f,e,h,g){return h*(f/=g)*f*f*f+e},easeOutStrong:function(f,e,h,g){return -h*((f=f/g-1)*f*f*f-1)+e},easeBothStrong:function(f,e,h,g){if((f/=g/2)<1){return h/2*f*f*f*f+e}return -h/2*((f-=2)*f*f*f-2)+e},elasticIn:function(g,e,k,j,f,i){if(g==0){return e}if((g/=j)==1){return e+k}if(!i){i=j*0.3}if(!f||f<Math.abs(k)){f=k;var h=i/4}else{var h=i/(2*Math.PI)*Math.asin(k/f)}return -(f*Math.pow(2,10*(g-=1))*Math.sin((g*j-h)*(2*Math.PI)/i))+e},elasticOut:function(g,e,k,j,f,i){if(g==0){return e}if((g/=j)==1){return e+k}if(!i){i=j*0.3}if(!f||f<Math.abs(k)){f=k;var h=i/4}else{var h=i/(2*Math.PI)*Math.asin(k/f)}return f*Math.pow(2,-10*g)*Math.sin((g*j-h)*(2*Math.PI)/i)+k+e},elasticBoth:function(g,e,k,j,f,i){if(g==0){return e}if((g/=j/2)==2){return e+k}if(!i){i=j*(0.3*1.5)}if(!f||f<Math.abs(k)){f=k;var h=i/4}else{var h=i/(2*Math.PI)*Math.asin(k/f)}if(g<1){return -0.5*(f*Math.pow(2,10*(g-=1))*Math.sin((g*j-h)*(2*Math.PI)/i))+e}return f*Math.pow(2,-10*(g-=1))*Math.sin((g*j-h)*(2*Math.PI)/i)*0.5+k+e},backIn:function(f,e,i,h,g){if(typeof g=="undefined"){g=1.70158}return i*(f/=h)*f*((g+1)*f-g)+e},backOut:function(f,e,i,h,g){if(typeof g=="undefined"){g=1.70158}return i*((f=f/h-1)*f*((g+1)*f+g)+1)+e},backBoth:function(f,e,i,h,g){if(typeof g=="undefined"){g=1.70158}if((f/=h/2)<1){return i/2*(f*f*(((g*=(1.525))+1)*f-g))+e}return i/2*((f-=2)*f*(((g*=(1.525))+1)*f+g)+2)+e},bounceIn:function(f,e,h,g){return h-Ext.lib.Easing.bounceOut(g-f,0,h,g)+e},bounceOut:function(f,e,h,g){if((f/=g)<(1/2.75)){return h*(7.5625*f*f)+e}else{if(f<(2/2.75)){return h*(7.5625*(f-=(1.5/2.75))*f+0.75)+e}else{if(f<(2.5/2.75)){return h*(7.5625*(f-=(2.25/2.75))*f+0.9375)+e}}}return h*(7.5625*(f-=(2.625/2.75))*f+0.984375)+e},bounceBoth:function(f,e,h,g){if(f<g/2){return Ext.lib.Easing.bounceIn(f*2,0,h,g)*0.5+e}return Ext.lib.Easing.bounceOut(f*2-g,0,h,g)*0.5+h*0.5+e}};(function(){Ext.lib.Motion=function(k,j,l,m){if(k){Ext.lib.Motion.superclass.constructor.call(this,k,j,l,m)}};Ext.extend(Ext.lib.Motion,Ext.lib.ColorAnim);var h=Ext.lib;var i=h.Motion.superclass;var f=h.Motion.prototype;f.toString=function(){var j=this.getEl();var k=j.id||j.tagName;return("Motion "+k)};f.patterns.points=/^points$/i;f.setAttribute=function(j,l,k){if(this.patterns.points.test(j)){k=k||"px";i.setAttribute.call(this,"left",l[0],k);i.setAttribute.call(this,"top",l[1],k)}else{i.setAttribute.call(this,j,l,k)}};f.getAttribute=function(j){if(this.patterns.points.test(j)){var k=[i.getAttribute.call(this,"left"),i.getAttribute.call(this,"top")]}else{k=i.getAttribute.call(this,j)}return k};f.doMethod=function(j,n,k){var m=null;if(this.patterns.points.test(j)){var l=this.method(this.currentFrame,0,100,this.totalFrames)/100;m=h.Bezier.getPosition(this.runtimeAttributes[j],l)}else{m=i.doMethod.call(this,j,n,k)}return m};f.setRuntimeAttribute=function(s){if(this.patterns.points.test(s)){var k=this.getEl();var m=this.attributes;var j;var o=m.points["control"]||[];var l;var p,r;if(o.length>0&&!Ext.isArray(o[0])){o=[o]}else{var n=[];for(p=0,r=o.length;p<r;++p){n[p]=o[p]}o=n}Ext.fly(k,"_anim").position();if(g(m.points["from"])){Ext.lib.Dom.setXY(k,m.points["from"])}else{Ext.lib.Dom.setXY(k,Ext.lib.Dom.getXY(k))}j=this.getAttribute("points");if(g(m.points["to"])){l=e.call(this,m.points["to"],j);var q=Ext.lib.Dom.getXY(this.getEl());for(p=0,r=o.length;p<r;++p){o[p]=e.call(this,o[p],j)}}else{if(g(m.points["by"])){l=[j[0]+m.points["by"][0],j[1]+m.points["by"][1]];for(p=0,r=o.length;p<r;++p){o[p]=[j[0]+o[p][0],j[1]+o[p][1]]}}}this.runtimeAttributes[s]=[j];if(o.length>0){this.runtimeAttributes[s]=this.runtimeAttributes[s].concat(o)}this.runtimeAttributes[s][this.runtimeAttributes[s].length]=l}else{i.setRuntimeAttribute.call(this,s)}};var e=function(j,l){var k=Ext.lib.Dom.getXY(this.getEl());j=[j[0]-k[0]+l[0],j[1]-k[1]+l[1]];return j};var g=function(j){return(typeof j!=="undefined")}})();(function(){Ext.lib.Scroll=function(i,h,j,k){if(i){Ext.lib.Scroll.superclass.constructor.call(this,i,h,j,k)}};Ext.extend(Ext.lib.Scroll,Ext.lib.ColorAnim);var f=Ext.lib;var g=f.Scroll.superclass;var e=f.Scroll.prototype;e.toString=function(){var h=this.getEl();var i=h.id||h.tagName;return("Scroll "+i)};e.doMethod=function(h,k,i){var j=null;if(h=="scroll"){j=[this.method(this.currentFrame,k[0],i[0]-k[0],this.totalFrames),this.method(this.currentFrame,k[1],i[1]-k[1],this.totalFrames)]}else{j=g.doMethod.call(this,h,k,i)}return j};e.getAttribute=function(h){var j=null;var i=this.getEl();if(h=="scroll"){j=[i.scrollLeft,i.scrollTop]}else{j=g.getAttribute.call(this,h)}return j};e.setAttribute=function(h,k,j){var i=this.getEl();if(h=="scroll"){i.scrollLeft=k[0];i.scrollTop=k[1]}else{g.setAttribute.call(this,h,k,j)}}})()})();
/*!
 * Ext JS Library 2.2.1
 * Copyright(c) 2006-2009, Ext JS, LLC.
 * licensing@extjs.com
 * 
 * http://extjs.com/license
 */


Ext.DomHelper = function(){
    var tempTableEl = null;
    var emptyTags = /^(?:br|frame|hr|img|input|link|meta|range|spacer|wbr|area|param|col)$/i;
    var tableRe = /^table|tbody|tr|td$/i;

    // build as innerHTML where available
    var createHtml = function(o){
        if(typeof o == 'string'){
            return o;
        }
        var b = "";
        if (Ext.isArray(o)) {
            for (var i = 0, l = o.length; i < l; i++) {
                b += createHtml(o[i]);
            }
            return b;
        }
        if(!o.tag){
            o.tag = "div";
        }
        b += "<" + o.tag;
        for(var attr in o){
            if(attr == "tag" || attr == "children" || attr == "cn" || attr == "html" || typeof o[attr] == "function") continue;
            if(attr == "style"){
                var s = o["style"];
                if(typeof s == "function"){
                    s = s.call();
                }
                if(typeof s == "string"){
                    b += ' style="' + s + '"';
                }else if(typeof s == "object"){
                    b += ' style="';
                    for(var key in s){
                        if(typeof s[key] != "function"){
                            b += key + ":" + s[key] + ";";
                        }
                    }
                    b += '"';
                }
            }else{
                if(attr == "cls"){
                    b += ' class="' + o["cls"] + '"';
                }else if(attr == "htmlFor"){
                    b += ' for="' + o["htmlFor"] + '"';
                }else{
                    b += " " + attr + '="' + o[attr] + '"';
                }
            }
        }
        if(emptyTags.test(o.tag)){
            b += "/>";
        }else{
            b += ">";
            var cn = o.children || o.cn;
            if(cn){
                b += createHtml(cn);
            } else if(o.html){
                b += o.html;
            }
            b += "</" + o.tag + ">";
        }
        return b;
    };

    // build as dom
    
    var createDom = function(o, parentNode){
        var el;
        if (Ext.isArray(o)) {                       // Allow Arrays of siblings to be inserted
            el = document.createDocumentFragment(); // in one shot using a DocumentFragment
            for(var i = 0, l = o.length; i < l; i++) {
                createDom(o[i], el);
            }
        } else if (typeof o == "string") {         // Allow a string as a child spec.
            el = document.createTextNode(o);
        } else {
            el = document.createElement(o.tag||'div');
            var useSet = !!el.setAttribute; // In IE some elements don't have setAttribute
            for(var attr in o){
                if(attr == "tag" || attr == "children" || attr == "cn" || attr == "html" || attr == "style" || typeof o[attr] == "function") continue;
                if(attr=="cls"){
                    el.className = o["cls"];
                }else{
                    if(useSet) el.setAttribute(attr, o[attr]);
                    else el[attr] = o[attr];
                }
            }
            Ext.DomHelper.applyStyles(el, o.style);
            var cn = o.children || o.cn;
            if(cn){
                createDom(cn, el);
            } else if(o.html){
                el.innerHTML = o.html;
            }
        }
        if(parentNode){
           parentNode.appendChild(el);
        }
        return el;
    };

    var ieTable = function(depth, s, h, e){
        tempTableEl.innerHTML = [s, h, e].join('');
        var i = -1, el = tempTableEl;
        while(++i < depth){
            el = el.firstChild;
        }
        return el;
    };

    // kill repeat to save bytes
    var ts = '<table>',
        te = '</table>',
        tbs = ts+'<tbody>',
        tbe = '</tbody>'+te,
        trs = tbs + '<tr>',
        tre = '</tr>'+tbe;

    
    var insertIntoTable = function(tag, where, el, html){
        if(!tempTableEl){
            tempTableEl = document.createElement('div');
        }
        var node;
        var before = null;
        if(tag == 'td'){
            if(where == 'afterbegin' || where == 'beforeend'){ // INTO a TD
                return;
            }
            if(where == 'beforebegin'){
                before = el;
                el = el.parentNode;
            } else{
                before = el.nextSibling;
                el = el.parentNode;
            }
            node = ieTable(4, trs, html, tre);
        }
        else if(tag == 'tr'){
            if(where == 'beforebegin'){
                before = el;
                el = el.parentNode;
                node = ieTable(3, tbs, html, tbe);
            } else if(where == 'afterend'){
                before = el.nextSibling;
                el = el.parentNode;
                node = ieTable(3, tbs, html, tbe);
            } else{ // INTO a TR
                if(where == 'afterbegin'){
                    before = el.firstChild;
                }
                node = ieTable(4, trs, html, tre);
            }
        } else if(tag == 'tbody'){
            if(where == 'beforebegin'){
                before = el;
                el = el.parentNode;
                node = ieTable(2, ts, html, te);
            } else if(where == 'afterend'){
                before = el.nextSibling;
                el = el.parentNode;
                node = ieTable(2, ts, html, te);
            } else{
                if(where == 'afterbegin'){
                    before = el.firstChild;
                }
                node = ieTable(3, tbs, html, tbe);
            }
        } else{ // TABLE
            if(where == 'beforebegin' || where == 'afterend'){ // OUTSIDE the table
                return;
            }
            if(where == 'afterbegin'){
                before = el.firstChild;
            }
            node = ieTable(2, ts, html, te);
        }
        el.insertBefore(node, before);
        return node;
    };


    return {
    
    useDom : false,

    
    markup : function(o){
        return createHtml(o);
    },

    
    applyStyles : function(el, styles){
        if(styles){
           el = Ext.fly(el);
           if(typeof styles == "string"){
               var re = /\s?([a-z\-]*)\:\s?([^;]*);?/gi;
               var matches;
               while ((matches = re.exec(styles)) != null){
                   el.setStyle(matches[1], matches[2]);
               }
           }else if (typeof styles == "object"){
               for (var style in styles){
                  el.setStyle(style, styles[style]);
               }
           }else if (typeof styles == "function"){
                Ext.DomHelper.applyStyles(el, styles.call());
           }
        }
    },

    
    insertHtml : function(where, el, html){
        where = where.toLowerCase();
        if(el.insertAdjacentHTML){
            if(tableRe.test(el.tagName)){
                var rs;
                if(rs = insertIntoTable(el.tagName.toLowerCase(), where, el, html)){
                    return rs;
                }
            }
            switch(where){
                case "beforebegin":
                    el.insertAdjacentHTML('BeforeBegin', html);
                    return el.previousSibling;
                case "afterbegin":
                    el.insertAdjacentHTML('AfterBegin', html);
                    return el.firstChild;
                case "beforeend":
                    el.insertAdjacentHTML('BeforeEnd', html);
                    return el.lastChild;
                case "afterend":
                    el.insertAdjacentHTML('AfterEnd', html);
                    return el.nextSibling;
            }
            throw 'Illegal insertion point -> "' + where + '"';
        }
        var range = el.ownerDocument.createRange();
        var frag;
        switch(where){
             case "beforebegin":
                range.setStartBefore(el);
                frag = range.createContextualFragment(html);
                el.parentNode.insertBefore(frag, el);
                return el.previousSibling;
             case "afterbegin":
                if(el.firstChild){
                    range.setStartBefore(el.firstChild);
                    frag = range.createContextualFragment(html);
                    el.insertBefore(frag, el.firstChild);
                    return el.firstChild;
                }else{
                    el.innerHTML = html;
                    return el.firstChild;
                }
            case "beforeend":
                if(el.lastChild){
                    range.setStartAfter(el.lastChild);
                    frag = range.createContextualFragment(html);
                    el.appendChild(frag);
                    return el.lastChild;
                }else{
                    el.innerHTML = html;
                    return el.lastChild;
                }
            case "afterend":
                range.setStartAfter(el);
                frag = range.createContextualFragment(html);
                el.parentNode.insertBefore(frag, el.nextSibling);
                return el.nextSibling;
            }
            throw 'Illegal insertion point -> "' + where + '"';
    },

    
    insertBefore : function(el, o, returnElement){
        return this.doInsert(el, o, returnElement, "beforeBegin");
    },

    
    insertAfter : function(el, o, returnElement){
        return this.doInsert(el, o, returnElement, "afterEnd", "nextSibling");
    },

    
    insertFirst : function(el, o, returnElement){
        return this.doInsert(el, o, returnElement, "afterBegin", "firstChild");
    },

    // private
    doInsert : function(el, o, returnElement, pos, sibling){
        el = Ext.getDom(el);
        var newNode;
        if(this.useDom){
            newNode = createDom(o, null);
            (sibling === "firstChild" ? el : el.parentNode).insertBefore(newNode, sibling ? el[sibling] : el);
        }else{
            var html = createHtml(o);
            newNode = this.insertHtml(pos, el, html);
        }
        return returnElement ? Ext.get(newNode, true) : newNode;
    },

    
    append : function(el, o, returnElement){
        el = Ext.getDom(el);
        var newNode;
        if(this.useDom){
            newNode = createDom(o, null);
            el.appendChild(newNode);
        }else{
            var html = createHtml(o);
            newNode = this.insertHtml("beforeEnd", el, html);
        }
        return returnElement ? Ext.get(newNode, true) : newNode;
    },

    
    overwrite : function(el, o, returnElement){
        el = Ext.getDom(el);
        el.innerHTML = createHtml(o);
        return returnElement ? Ext.get(el.firstChild, true) : el.firstChild;
    },

    
    createTemplate : function(o){
        var html = createHtml(o);
        return new Ext.Template(html);
    }
    };
}();


Ext.Template = function(html){
    var a = arguments;
    if(Ext.isArray(html)){
        html = html.join("");
    }else if(a.length > 1){
        var buf = [];
        for(var i = 0, len = a.length; i < len; i++){
            if(typeof a[i] == 'object'){
                Ext.apply(this, a[i]);
            }else{
                buf[buf.length] = a[i];
            }
        }
        html = buf.join('');
    }
    
    this.html = html;
    if(this.compiled){
        this.compile();
    }
};
Ext.Template.prototype = {
    
    applyTemplate : function(values){
        if(this.compiled){
            return this.compiled(values);
        }
        var useF = this.disableFormats !== true;
        var fm = Ext.util.Format, tpl = this;
        var fn = function(m, name, format, args){
            if(format && useF){
                if(format.substr(0, 5) == "this."){
                    return tpl.call(format.substr(5), values[name], values);
                }else{
                    if(args){
                        // quoted values are required for strings in compiled templates,
                        // but for non compiled we need to strip them
                        // quoted reversed for jsmin
                        var re = /^\s*['"](.*)["']\s*$/;
                        args = args.split(',');
                        for(var i = 0, len = args.length; i < len; i++){
                            args[i] = args[i].replace(re, "$1");
                        }
                        args = [values[name]].concat(args);
                    }else{
                        args = [values[name]];
                    }
                    return fm[format].apply(fm, args);
                }
            }else{
                return values[name] !== undefined ? values[name] : "";
            }
        };
        return this.html.replace(this.re, fn);
    },

    
    set : function(html, compile){
        this.html = html;
        this.compiled = null;
        if(compile){
            this.compile();
        }
        return this;
    },

    
    disableFormats : false,

    
    re : /\{([\w-]+)(?:\:([\w\.]*)(?:\((.*?)?\))?)?\}/g,

    
    compile : function(){
        var fm = Ext.util.Format;
        var useF = this.disableFormats !== true;
        var sep = Ext.isGecko ? "+" : ",";
        var fn = function(m, name, format, args){
            if(format && useF){
                args = args ? ',' + args : "";
                if(format.substr(0, 5) != "this."){
                    format = "fm." + format + '(';
                }else{
                    format = 'this.call("'+ format.substr(5) + '", ';
                    args = ", values";
                }
            }else{
                args= ''; format = "(values['" + name + "'] == undefined ? '' : ";
            }
            return "'"+ sep + format + "values['" + name + "']" + args + ")"+sep+"'";
        };
        var body;
        // branched to use + in gecko and [].join() in others
        if(Ext.isGecko){
            body = "this.compiled = function(values){ return '" +
                   this.html.replace(/\\/g, '\\\\').replace(/(\r\n|\n)/g, '\\n').replace(/'/g, "\\'").replace(this.re, fn) +
                    "';};";
        }else{
            body = ["this.compiled = function(values){ return ['"];
            body.push(this.html.replace(/\\/g, '\\\\').replace(/(\r\n|\n)/g, '\\n').replace(/'/g, "\\'").replace(this.re, fn));
            body.push("'].join('');};");
            body = body.join('');
        }
        eval(body);
        return this;
    },

    // private function used to call members
    call : function(fnName, value, allValues){
        return this[fnName](value, allValues);
    },

    
    insertFirst: function(el, values, returnElement){
        return this.doInsert('afterBegin', el, values, returnElement);
    },

    
    insertBefore: function(el, values, returnElement){
        return this.doInsert('beforeBegin', el, values, returnElement);
    },

    
    insertAfter : function(el, values, returnElement){
        return this.doInsert('afterEnd', el, values, returnElement);
    },

    
    append : function(el, values, returnElement){
        return this.doInsert('beforeEnd', el, values, returnElement);
    },

    doInsert : function(where, el, values, returnEl){
        el = Ext.getDom(el);
        var newNode = Ext.DomHelper.insertHtml(where, el, this.applyTemplate(values));
        return returnEl ? Ext.get(newNode, true) : newNode;
    },

    
    overwrite : function(el, values, returnElement){
        el = Ext.getDom(el);
        el.innerHTML = this.applyTemplate(values);
        return returnElement ? Ext.get(el.firstChild, true) : el.firstChild;
    }
};

Ext.Template.prototype.apply = Ext.Template.prototype.applyTemplate;

// backwards compat
Ext.DomHelper.Template = Ext.Template;


Ext.Template.from = function(el, config){
    el = Ext.getDom(el);
    return new Ext.Template(el.value || el.innerHTML, config || '');
};


Ext.DomQuery = function(){
    var cache = {}, simpleCache = {}, valueCache = {};
    var nonSpace = /\S/;
    var trimRe = /^\s+|\s+$/g;
    var tplRe = /\{(\d+)\}/g;
    var modeRe = /^(\s?[\/>+~]\s?|\s|$)/;
    var tagTokenRe = /^(#)?([\w-\*]+)/;
    var nthRe = /(\d*)n\+?(\d*)/, nthRe2 = /\D/;

    function child(p, index){
        var i = 0;
        var n = p.firstChild;
        while(n){
            if(n.nodeType == 1){
               if(++i == index){
                   return n;
               }
            }
            n = n.nextSibling;
        }
        return null;
    };

    function next(n){
        while((n = n.nextSibling) && n.nodeType != 1);
        return n;
    };

    function prev(n){
        while((n = n.previousSibling) && n.nodeType != 1);
        return n;
    };

    function children(d){
        var n = d.firstChild, ni = -1;
 	    while(n){
 	        var nx = n.nextSibling;
 	        if(n.nodeType == 3 && !nonSpace.test(n.nodeValue)){
 	            d.removeChild(n);
 	        }else{
 	            n.nodeIndex = ++ni;
 	        }
 	        n = nx;
 	    }
 	    return this;
 	};

    function byClassName(c, a, v){
        if(!v){
            return c;
        }
        var r = [], ri = -1, cn;
        for(var i = 0, ci; ci = c[i]; i++){
            if((' '+ci.className+' ').indexOf(v) != -1){
                r[++ri] = ci;
            }
        }
        return r;
    };

    function attrValue(n, attr){
        if(!n.tagName && typeof n.length != "undefined"){
            n = n[0];
        }
        if(!n){
            return null;
        }
        if(attr == "for"){
            return n.htmlFor;
        }
        if(attr == "class" || attr == "className"){
            return n.className;
        }
        return n.getAttribute(attr) || n[attr];

    };

    function getNodes(ns, mode, tagName){
        var result = [], ri = -1, cs;
        if(!ns){
            return result;
        }
        tagName = tagName || "*";
        if(typeof ns.getElementsByTagName != "undefined"){
            ns = [ns];
        }
        if(!mode){
            for(var i = 0, ni; ni = ns[i]; i++){
                cs = ni.getElementsByTagName(tagName);
                for(var j = 0, ci; ci = cs[j]; j++){
                    result[++ri] = ci;
                }
            }
        }else if(mode == "/" || mode == ">"){
            var utag = tagName.toUpperCase();
            for(var i = 0, ni, cn; ni = ns[i]; i++){
                cn = ni.children || ni.childNodes;
                for(var j = 0, cj; cj = cn[j]; j++){
                    if(cj.nodeName == utag || cj.nodeName == tagName  || tagName == '*'){
                        result[++ri] = cj;
                    }
                }
            }
        }else if(mode == "+"){
            var utag = tagName.toUpperCase();
            for(var i = 0, n; n = ns[i]; i++){
                while((n = n.nextSibling) && n.nodeType != 1);
                if(n && (n.nodeName == utag || n.nodeName == tagName || tagName == '*')){
                    result[++ri] = n;
                }
            }
        }else if(mode == "~"){
            for(var i = 0, n; n = ns[i]; i++){
                while((n = n.nextSibling) && (n.nodeType != 1 || (tagName == '*' || n.tagName.toLowerCase()!=tagName)));
                if(n){
                    result[++ri] = n;
                }
            }
        }
        return result;
    };

    function concat(a, b){
        if(b.slice){
            return a.concat(b);
        }
        for(var i = 0, l = b.length; i < l; i++){
            a[a.length] = b[i];
        }
        return a;
    }

    function byTag(cs, tagName){
        if(cs.tagName || cs == document){
            cs = [cs];
        }
        if(!tagName){
            return cs;
        }
        var r = [], ri = -1;
        tagName = tagName.toLowerCase();
        for(var i = 0, ci; ci = cs[i]; i++){
            if(ci.nodeType == 1 && ci.tagName.toLowerCase()==tagName){
                r[++ri] = ci;
            }
        }
        return r;
    };

    function byId(cs, attr, id){
        if(cs.tagName || cs == document){
            cs = [cs];
        }
        if(!id){
            return cs;
        }
        var r = [], ri = -1;
        for(var i = 0,ci; ci = cs[i]; i++){
            if(ci && ci.id == id){
                r[++ri] = ci;
                return r;
            }
        }
        return r;
    };

    function byAttribute(cs, attr, value, op, custom){
        var r = [], ri = -1, st = custom=="{";
        var f = Ext.DomQuery.operators[op];
        for(var i = 0, ci; ci = cs[i]; i++){
            var a;
            if(st){
                a = Ext.DomQuery.getStyle(ci, attr);
            }
            else if(attr == "class" || attr == "className"){
                a = ci.className;
            }else if(attr == "for"){
                a = ci.htmlFor;
            }else if(attr == "href"){
                a = ci.getAttribute("href", 2);
            }else{
                a = ci.getAttribute(attr);
            }
            if((f && f(a, value)) || (!f && a)){
                r[++ri] = ci;
            }
        }
        return r;
    };

    function byPseudo(cs, name, value){
        return Ext.DomQuery.pseudos[name](cs, value);
    };

    // This is for IE MSXML which does not support expandos.
    // IE runs the same speed using setAttribute, however FF slows way down
    // and Safari completely fails so they need to continue to use expandos.
    var isIE = window.ActiveXObject ? true : false;

    // this eval is stop the compressor from
    // renaming the variable to something shorter
    eval("var batch = 30803;");

    var key = 30803;

    function nodupIEXml(cs){
        var d = ++key;
        cs[0].setAttribute("_nodup", d);
        var r = [cs[0]];
        for(var i = 1, len = cs.length; i < len; i++){
            var c = cs[i];
            if(!c.getAttribute("_nodup") != d){
                c.setAttribute("_nodup", d);
                r[r.length] = c;
            }
        }
        for(var i = 0, len = cs.length; i < len; i++){
            cs[i].removeAttribute("_nodup");
        }
        return r;
    }

    function nodup(cs){
        if(!cs){
            return [];
        }
        var len = cs.length, c, i, r = cs, cj, ri = -1;
        if(!len || typeof cs.nodeType != "undefined" || len == 1){
            return cs;
        }
        if(isIE && typeof cs[0].selectSingleNode != "undefined"){
            return nodupIEXml(cs);
        }
        var d = ++key;
        cs[0]._nodup = d;
        for(i = 1; c = cs[i]; i++){
            if(c._nodup != d){
                c._nodup = d;
            }else{
                r = [];
                for(var j = 0; j < i; j++){
                    r[++ri] = cs[j];
                }
                for(j = i+1; cj = cs[j]; j++){
                    if(cj._nodup != d){
                        cj._nodup = d;
                        r[++ri] = cj;
                    }
                }
                return r;
            }
        }
        return r;
    }

    function quickDiffIEXml(c1, c2){
        var d = ++key;
        for(var i = 0, len = c1.length; i < len; i++){
            c1[i].setAttribute("_qdiff", d);
        }
        var r = [];
        for(var i = 0, len = c2.length; i < len; i++){
            if(c2[i].getAttribute("_qdiff") != d){
                r[r.length] = c2[i];
            }
        }
        for(var i = 0, len = c1.length; i < len; i++){
           c1[i].removeAttribute("_qdiff");
        }
        return r;
    }

    function quickDiff(c1, c2){
        var len1 = c1.length;
        if(!len1){
            return c2;
        }
        if(isIE && c1[0].selectSingleNode){
            return quickDiffIEXml(c1, c2);
        }
        var d = ++key;
        for(var i = 0; i < len1; i++){
            c1[i]._qdiff = d;
        }
        var r = [];
        for(var i = 0, len = c2.length; i < len; i++){
            if(c2[i]._qdiff != d){
                r[r.length] = c2[i];
            }
        }
        return r;
    }

    function quickId(ns, mode, root, id){
        if(ns == root){
           var d = root.ownerDocument || root;
           return d.getElementById(id);
        }
        ns = getNodes(ns, mode, "*");
        return byId(ns, null, id);
    }

    return {
        getStyle : function(el, name){
            return Ext.fly(el).getStyle(name);
        },
        
        compile : function(path, type){
            type = type || "select";

            var fn = ["var f = function(root){\n var mode; ++batch; var n = root || document;\n"];
            var q = path, mode, lq;
            var tk = Ext.DomQuery.matchers;
            var tklen = tk.length;
            var mm;

            // accept leading mode switch
            var lmode = q.match(modeRe);
            if(lmode && lmode[1]){
                fn[fn.length] = 'mode="'+lmode[1].replace(trimRe, "")+'";';
                q = q.replace(lmode[1], "");
            }
            // strip leading slashes
            while(path.substr(0, 1)=="/"){
                path = path.substr(1);
            }

            while(q && lq != q){
                lq = q;
                var tm = q.match(tagTokenRe);
                if(type == "select"){
                    if(tm){
                        if(tm[1] == "#"){
                            fn[fn.length] = 'n = quickId(n, mode, root, "'+tm[2]+'");';
                        }else{
                            fn[fn.length] = 'n = getNodes(n, mode, "'+tm[2]+'");';
                        }
                        q = q.replace(tm[0], "");
                    }else if(q.substr(0, 1) != '@'){
                        fn[fn.length] = 'n = getNodes(n, mode, "*");';
                    }
                }else{
                    if(tm){
                        if(tm[1] == "#"){
                            fn[fn.length] = 'n = byId(n, null, "'+tm[2]+'");';
                        }else{
                            fn[fn.length] = 'n = byTag(n, "'+tm[2]+'");';
                        }
                        q = q.replace(tm[0], "");
                    }
                }
                while(!(mm = q.match(modeRe))){
                    var matched = false;
                    for(var j = 0; j < tklen; j++){
                        var t = tk[j];
                        var m = q.match(t.re);
                        if(m){
                            fn[fn.length] = t.select.replace(tplRe, function(x, i){
                                                    return m[i];
                                                });
                            q = q.replace(m[0], "");
                            matched = true;
                            break;
                        }
                    }
                    // prevent infinite loop on bad selector
                    if(!matched){
                        throw 'Error parsing selector, parsing failed at "' + q + '"';
                    }
                }
                if(mm[1]){
                    fn[fn.length] = 'mode="'+mm[1].replace(trimRe, "")+'";';
                    q = q.replace(mm[1], "");
                }
            }
            fn[fn.length] = "return nodup(n);\n}";
            eval(fn.join(""));
            return f;
        },

        
        select : function(path, root, type){
            if(!root || root == document){
                root = document;
            }
            if(typeof root == "string"){
                root = document.getElementById(root);
            }
            var paths = path.split(",");
            var results = [];
            for(var i = 0, len = paths.length; i < len; i++){
                var p = paths[i].replace(trimRe, "");
                if(!cache[p]){
                    cache[p] = Ext.DomQuery.compile(p);
                    if(!cache[p]){
                        throw p + " is not a valid selector";
                    }
                }
                var result = cache[p](root);
                if(result && result != document){
                    results = results.concat(result);
                }
            }
            if(paths.length > 1){
                return nodup(results);
            }
            return results;
        },

        
        selectNode : function(path, root){
            return Ext.DomQuery.select(path, root)[0];
        },

        
        selectValue : function(path, root, defaultValue){
            path = path.replace(trimRe, "");
            if(!valueCache[path]){
                valueCache[path] = Ext.DomQuery.compile(path, "select");
            }
            var n = valueCache[path](root);
            n = n[0] ? n[0] : n;
            var v = (n && n.firstChild ? n.firstChild.nodeValue : null);
            return ((v === null||v === undefined||v==='') ? defaultValue : v);
        },

        
        selectNumber : function(path, root, defaultValue){
            var v = Ext.DomQuery.selectValue(path, root, defaultValue || 0);
            return parseFloat(v);
        },

        
        is : function(el, ss){
            if(typeof el == "string"){
                el = document.getElementById(el);
            }
            var isArray = Ext.isArray(el);
            var result = Ext.DomQuery.filter(isArray ? el : [el], ss);
            return isArray ? (result.length == el.length) : (result.length > 0);
        },

        
        filter : function(els, ss, nonMatches){
            ss = ss.replace(trimRe, "");
            if(!simpleCache[ss]){
                simpleCache[ss] = Ext.DomQuery.compile(ss, "simple");
            }
            var result = simpleCache[ss](els);
            return nonMatches ? quickDiff(result, els) : result;
        },

        
        matchers : [{
                re: /^\.([\w-]+)/,
                select: 'n = byClassName(n, null, " {1} ");'
            }, {
                re: /^\:([\w-]+)(?:\(((?:[^\s>\/]*|.*?))\))?/,
                select: 'n = byPseudo(n, "{1}", "{2}");'
            },{
                re: /^(?:([\[\{])(?:@)?([\w-]+)\s?(?:(=|.=)\s?['"]?(.*?)["']?)?[\]\}])/,
                select: 'n = byAttribute(n, "{2}", "{4}", "{3}", "{1}");'
            }, {
                re: /^#([\w-]+)/,
                select: 'n = byId(n, null, "{1}");'
            },{
                re: /^@([\w-]+)/,
                select: 'return {firstChild:{nodeValue:attrValue(n, "{1}")}};'
            }
        ],

        
        operators : {
            "=" : function(a, v){
                return a == v;
            },
            "!=" : function(a, v){
                return a != v;
            },
            "^=" : function(a, v){
                return a && a.substr(0, v.length) == v;
            },
            "$=" : function(a, v){
                return a && a.substr(a.length-v.length) == v;
            },
            "*=" : function(a, v){
                return a && a.indexOf(v) !== -1;
            },
            "%=" : function(a, v){
                return (a % v) == 0;
            },
            "|=" : function(a, v){
                return a && (a == v || a.substr(0, v.length+1) == v+'-');
            },
            "~=" : function(a, v){
                return a && (' '+a+' ').indexOf(' '+v+' ') != -1;
            }
        },

        
        pseudos : {
            "first-child" : function(c){
                var r = [], ri = -1, n;
                for(var i = 0, ci; ci = n = c[i]; i++){
                    while((n = n.previousSibling) && n.nodeType != 1);
                    if(!n){
                        r[++ri] = ci;
                    }
                }
                return r;
            },

            "last-child" : function(c){
                var r = [], ri = -1, n;
                for(var i = 0, ci; ci = n = c[i]; i++){
                    while((n = n.nextSibling) && n.nodeType != 1);
                    if(!n){
                        r[++ri] = ci;
                    }
                }
                return r;
            },

            "nth-child" : function(c, a) {
                var r = [], ri = -1;
                var m = nthRe.exec(a == "even" && "2n" || a == "odd" && "2n+1" || !nthRe2.test(a) && "n+" + a || a);
                var f = (m[1] || 1) - 0, l = m[2] - 0;
                for(var i = 0, n; n = c[i]; i++){
                    var pn = n.parentNode;
                    if (batch != pn._batch) {
                        var j = 0;
                        for(var cn = pn.firstChild; cn; cn = cn.nextSibling){
                            if(cn.nodeType == 1){
                               cn.nodeIndex = ++j;
                            }
                        }
                        pn._batch = batch;
                    }
                    if (f == 1) {
                        if (l == 0 || n.nodeIndex == l){
                            r[++ri] = n;
                        }
                    } else if ((n.nodeIndex + l) % f == 0){
                        r[++ri] = n;
                    }
                }

                return r;
            },

            "only-child" : function(c){
                var r = [], ri = -1;;
                for(var i = 0, ci; ci = c[i]; i++){
                    if(!prev(ci) && !next(ci)){
                        r[++ri] = ci;
                    }
                }
                return r;
            },

            "empty" : function(c){
                var r = [], ri = -1;
                for(var i = 0, ci; ci = c[i]; i++){
                    var cns = ci.childNodes, j = 0, cn, empty = true;
                    while(cn = cns[j]){
                        ++j;
                        if(cn.nodeType == 1 || cn.nodeType == 3){
                            empty = false;
                            break;
                        }
                    }
                    if(empty){
                        r[++ri] = ci;
                    }
                }
                return r;
            },

            "contains" : function(c, v){
                var r = [], ri = -1;
                for(var i = 0, ci; ci = c[i]; i++){
                    if((ci.textContent||ci.innerText||'').indexOf(v) != -1){
                        r[++ri] = ci;
                    }
                }
                return r;
            },

            "nodeValue" : function(c, v){
                var r = [], ri = -1;
                for(var i = 0, ci; ci = c[i]; i++){
                    if(ci.firstChild && ci.firstChild.nodeValue == v){
                        r[++ri] = ci;
                    }
                }
                return r;
            },

            "checked" : function(c){
                var r = [], ri = -1;
                for(var i = 0, ci; ci = c[i]; i++){
                    if(ci.checked == true){
                        r[++ri] = ci;
                    }
                }
                return r;
            },

            "not" : function(c, ss){
                return Ext.DomQuery.filter(c, ss, true);
            },

            "any" : function(c, selectors){
                var ss = selectors.split('|');
                var r = [], ri = -1, s;
                for(var i = 0, ci; ci = c[i]; i++){
                    for(var j = 0; s = ss[j]; j++){
                        if(Ext.DomQuery.is(ci, s)){
                            r[++ri] = ci;
                            break;
                        }
                    }
                }
                return r;
            },

            "odd" : function(c){
                return this["nth-child"](c, "odd");
            },

            "even" : function(c){
                return this["nth-child"](c, "even");
            },

            "nth" : function(c, a){
                return c[a-1] || [];
            },

            "first" : function(c){
                return c[0] || [];
            },

            "last" : function(c){
                return c[c.length-1] || [];
            },

            "has" : function(c, ss){
                var s = Ext.DomQuery.select;
                var r = [], ri = -1;
                for(var i = 0, ci; ci = c[i]; i++){
                    if(s(ss, ci).length > 0){
                        r[++ri] = ci;
                    }
                }
                return r;
            },

            "next" : function(c, ss){
                var is = Ext.DomQuery.is;
                var r = [], ri = -1;
                for(var i = 0, ci; ci = c[i]; i++){
                    var n = next(ci);
                    if(n && is(n, ss)){
                        r[++ri] = ci;
                    }
                }
                return r;
            },

            "prev" : function(c, ss){
                var is = Ext.DomQuery.is;
                var r = [], ri = -1;
                for(var i = 0, ci; ci = c[i]; i++){
                    var n = prev(ci);
                    if(n && is(n, ss)){
                        r[++ri] = ci;
                    }
                }
                return r;
            }
        }
    };
}();


Ext.query = Ext.DomQuery.select;


Ext.util.Observable = function(){
    
    if(this.listeners){
        this.on(this.listeners);
        delete this.listeners;
    }
};
Ext.util.Observable.prototype = {
    
    fireEvent : function(){
        if(this.eventsSuspended !== true){
            var ce = this.events[arguments[0].toLowerCase()];
            if(typeof ce == "object"){
                return ce.fire.apply(ce, Array.prototype.slice.call(arguments, 1));
            }
        }
        return true;
    },

    // private
    filterOptRe : /^(?:scope|delay|buffer|single)$/,

    
    addListener : function(eventName, fn, scope, o){
        if(typeof eventName == "object"){
            o = eventName;
            for(var e in o){
                if(this.filterOptRe.test(e)){
                    continue;
                }
                if(typeof o[e] == "function"){
                    // shared options
                    this.addListener(e, o[e], o.scope,  o);
                }else{
                    // individual options
                    this.addListener(e, o[e].fn, o[e].scope, o[e]);
                }
            }
            return;
        }
        o = (!o || typeof o == "boolean") ? {} : o;
        eventName = eventName.toLowerCase();
        var ce = this.events[eventName] || true;
        if(typeof ce == "boolean"){
            ce = new Ext.util.Event(this, eventName);
            this.events[eventName] = ce;
        }
        ce.addListener(fn, scope, o);
    },

    
    removeListener : function(eventName, fn, scope){
        var ce = this.events[eventName.toLowerCase()];
        if(typeof ce == "object"){
            ce.removeListener(fn, scope);
        }
    },

    
    purgeListeners : function(){
        for(var evt in this.events){
            if(typeof this.events[evt] == "object"){
                 this.events[evt].clearListeners();
            }
        }
    },

    
    relayEvents : function(o, events){
        var createHandler = function(ename){
            return function(){
                return this.fireEvent.apply(this, Ext.combine(ename, Array.prototype.slice.call(arguments, 0)));
            };
        };
        for(var i = 0, len = events.length; i < len; i++){
            var ename = events[i];
            if(!this.events[ename]){ this.events[ename] = true; };
            o.on(ename, createHandler(ename), this);
        }
    },

    
    addEvents : function(o){
        if(!this.events){
            this.events = {};
        }
        if(typeof o == 'string'){
            for(var i = 0, a = arguments, v; v = a[i]; i++){
                if(!this.events[a[i]]){
                    this.events[a[i]] = true;
                }
            }
        }else{
            Ext.applyIf(this.events, o);
        }
    },

    
    hasListener : function(eventName){
        var e = this.events[eventName];
        return typeof e == "object" && e.listeners.length > 0;
    },

    
    suspendEvents : function(){
        this.eventsSuspended = true;
    },

    
    resumeEvents : function(){
        this.eventsSuspended = false;
    },

    // these are considered experimental
    // allows for easier interceptor and sequences, including cancelling and overwriting the return value of the call
    // private
    getMethodEvent : function(method){
        if(!this.methodEvents){
            this.methodEvents = {};
        }
        var e = this.methodEvents[method];
        if(!e){
            e = {};
            this.methodEvents[method] = e;

            e.originalFn = this[method];
            e.methodName = method;
            e.before = [];
            e.after = [];


            var returnValue, v, cancel;
            var obj = this;

            var makeCall = function(fn, scope, args){
                if((v = fn.apply(scope || obj, args)) !== undefined){
                    if(typeof v === 'object'){
                        if(v.returnValue !== undefined){
                            returnValue = v.returnValue;
                        }else{
                            returnValue = v;
                        }
                        if(v.cancel === true){
                            cancel = true;
                        }
                    }else if(v === false){
                        cancel = true;
                    }else {
                        returnValue = v;
                    }
                }
            }

            this[method] = function(){
                returnValue = v = undefined; cancel = false;
                var args = Array.prototype.slice.call(arguments, 0);
                for(var i = 0, len = e.before.length; i < len; i++){
                    makeCall(e.before[i].fn, e.before[i].scope, args);
                    if(cancel){
                        return returnValue;
                    }
                }

                if((v = e.originalFn.apply(obj, args)) !== undefined){
                    returnValue = v;
                }

                for(var i = 0, len = e.after.length; i < len; i++){
                    makeCall(e.after[i].fn, e.after[i].scope, args);
                    if(cancel){
                        return returnValue;
                    }
                }
                return returnValue;
            };
        }
        return e;
    },

    // adds an "interceptor" called before the original method
    beforeMethod : function(method, fn, scope){
        var e = this.getMethodEvent(method);
        e.before.push({fn: fn, scope: scope});
    },

    // adds a "sequence" called after the original method
    afterMethod : function(method, fn, scope){
        var e = this.getMethodEvent(method);
        e.after.push({fn: fn, scope: scope});
    },

    removeMethodListener : function(method, fn, scope){
        var e = this.getMethodEvent(method);
        for(var i = 0, len = e.before.length; i < len; i++){
            if(e.before[i].fn == fn && e.before[i].scope == scope){
                e.before.splice(i, 1);
                return;
            }
        }
        for(var i = 0, len = e.after.length; i < len; i++){
            if(e.after[i].fn == fn && e.after[i].scope == scope){
                e.after.splice(i, 1);
                return;
            }
        }
    }
};

Ext.util.Observable.prototype.on = Ext.util.Observable.prototype.addListener;

Ext.util.Observable.prototype.un = Ext.util.Observable.prototype.removeListener;


Ext.util.Observable.capture = function(o, fn, scope){
    o.fireEvent = o.fireEvent.createInterceptor(fn, scope);
};


Ext.util.Observable.releaseCapture = function(o){
    o.fireEvent = Ext.util.Observable.prototype.fireEvent;
};

(function(){

    var createBuffered = function(h, o, scope){
        var task = new Ext.util.DelayedTask();
        return function(){
            task.delay(o.buffer, h, scope, Array.prototype.slice.call(arguments, 0));
        };
    };

    var createSingle = function(h, e, fn, scope){
        return function(){
            e.removeListener(fn, scope);
            return h.apply(scope, arguments);
        };
    };

    var createDelayed = function(h, o, scope){
        return function(){
            var args = Array.prototype.slice.call(arguments, 0);
            setTimeout(function(){
                h.apply(scope, args);
            }, o.delay || 10);
        };
    };

    Ext.util.Event = function(obj, name){
        this.name = name;
        this.obj = obj;
        this.listeners = [];
    };

    Ext.util.Event.prototype = {
        addListener : function(fn, scope, options){
            scope = scope || this.obj;
            if(!this.isListening(fn, scope)){
                var l = this.createListener(fn, scope, options);
                if(!this.firing){
                    this.listeners.push(l);
                }else{ // if we are currently firing this event, don't disturb the listener loop
                    this.listeners = this.listeners.slice(0);
                    this.listeners.push(l);
                }
            }
        },

        createListener : function(fn, scope, o){
            o = o || {};
            scope = scope || this.obj;
            var l = {fn: fn, scope: scope, options: o};
            var h = fn;
            if(o.delay){
                h = createDelayed(h, o, scope);
            }
            if(o.single){
                h = createSingle(h, this, fn, scope);
            }
            if(o.buffer){
                h = createBuffered(h, o, scope);
            }
            l.fireFn = h;
            return l;
        },

        findListener : function(fn, scope){
            scope = scope || this.obj;
            var ls = this.listeners;
            for(var i = 0, len = ls.length; i < len; i++){
                var l = ls[i];
                if(l.fn == fn && l.scope == scope){
                    return i;
                }
            }
            return -1;
        },

        isListening : function(fn, scope){
            return this.findListener(fn, scope) != -1;
        },

        removeListener : function(fn, scope){
            var index;
            if((index = this.findListener(fn, scope)) != -1){
                if(!this.firing){
                    this.listeners.splice(index, 1);
                }else{
                    this.listeners = this.listeners.slice(0);
                    this.listeners.splice(index, 1);
                }
                return true;
            }
            return false;
        },

        clearListeners : function(){
            this.listeners = [];
        },

        fire : function(){
            var ls = this.listeners, scope, len = ls.length;
            if(len > 0){
                this.firing = true;
                var args = Array.prototype.slice.call(arguments, 0);
                for(var i = 0; i < len; i++){
                    var l = ls[i];
                    if(l.fireFn.apply(l.scope||this.obj||window, arguments) === false){
                        this.firing = false;
                        return false;
                    }
                }
                this.firing = false;
            }
            return true;
        }
    };
})();

Ext.EventManager = function(){
    var docReadyEvent, docReadyProcId, docReadyState = false;
    var resizeEvent, resizeTask, textEvent, textSize;
    var E = Ext.lib.Event;
    var D = Ext.lib.Dom;
    // fix parser confusion
    var xname = 'Ex' + 't';

    var elHash = {};

    var addListener = function(el, ename, fn, wrap, scope){
        var id = Ext.id(el);
        if(!elHash[id]){
            elHash[id] = {};
        }
        var es = elHash[id];
        if(!es[ename]){
            es[ename] = [];
        }
        var ls = es[ename];
        ls.push({
            id: id,
            ename: ename,
            fn: fn,
            wrap: wrap,
            scope: scope
        });

         E.on(el, ename, wrap);

        if(ename == "mousewheel" && el.addEventListener){ // workaround for jQuery
            el.addEventListener("DOMMouseScroll", wrap, false);
            E.on(window, 'unload', function(){
                el.removeEventListener("DOMMouseScroll", wrap, false);
            });
        }
        if(ename == "mousedown" && el == document){ // fix stopped mousedowns on the document
            Ext.EventManager.stoppedMouseDownEvent.addListener(wrap);
        }
    }

    var removeListener = function(el, ename, fn, scope){
        el = Ext.getDom(el);

        var id = Ext.id(el), es = elHash[id], wrap;
        if(es){
            var ls = es[ename], l;
            if(ls){
                for(var i = 0, len = ls.length; i < len; i++){
                    l = ls[i];
                    if(l.fn == fn && (!scope || l.scope == scope)){
                        wrap = l.wrap;
                        E.un(el, ename, wrap);
                        ls.splice(i, 1);
                        break;
                    }
                }
            }
        }
        if(ename == "mousewheel" && el.addEventListener && wrap){
            el.removeEventListener("DOMMouseScroll", wrap, false);
        }
        if(ename == "mousedown" && el == document && wrap){ // fix stopped mousedowns on the document
            Ext.EventManager.stoppedMouseDownEvent.removeListener(wrap);
        }
    }

    var removeAll = function(el){
        el = Ext.getDom(el);
        var id = Ext.id(el), es = elHash[id], ls;
        if(es){
            for(var ename in es){
                if(es.hasOwnProperty(ename)){
                    ls = es[ename];
                    for(var i = 0, len = ls.length; i < len; i++){
                        E.un(el, ename, ls[i].wrap);
                        ls[i] = null;
                    }
                }
                es[ename] = null;
            }
            delete elHash[id];
        }
    }


    var fireDocReady = function(){
        if(!docReadyState){
            docReadyState = true;
            Ext.isReady = true;
            if(docReadyProcId){
                clearInterval(docReadyProcId);
            }
            if(Ext.isGecko || Ext.isOpera) {
                document.removeEventListener("DOMContentLoaded", fireDocReady, false);
            }
            if(Ext.isIE){
                var defer = document.getElementById("ie-deferred-loader");
                if(defer){
                    defer.onreadystatechange = null;
                    defer.parentNode.removeChild(defer);
                }
            }
            if(docReadyEvent){
                docReadyEvent.fire();
                docReadyEvent.clearListeners();
            }
        }
    };

    var initDocReady = function(){
        docReadyEvent = new Ext.util.Event();
        if(Ext.isGecko || Ext.isOpera) {
            document.addEventListener("DOMContentLoaded", fireDocReady, false);
        }else if(Ext.isIE){
            document.write("<s"+'cript id="ie-deferred-loader" defer="defer" src="/'+'/:"></s'+"cript>");
            var defer = document.getElementById("ie-deferred-loader");
            defer.onreadystatechange = function(){
                if(this.readyState == "complete"){
                    fireDocReady();
                }
            };
        }else if(Ext.isSafari){
            docReadyProcId = setInterval(function(){
                var rs = document.readyState;
                if(rs == "complete") {
                    fireDocReady();
                 }
            }, 10);
        }
        // no matter what, make sure it fires on load
        E.on(window, "load", fireDocReady);
    };

    var createBuffered = function(h, o){
        var task = new Ext.util.DelayedTask(h);
        return function(e){
            // create new event object impl so new events don't wipe out properties
            e = new Ext.EventObjectImpl(e);
            task.delay(o.buffer, h, null, [e]);
        };
    };

    var createSingle = function(h, el, ename, fn, scope){
        return function(e){
            Ext.EventManager.removeListener(el, ename, fn, scope);
            h(e);
        };
    };

    var createDelayed = function(h, o){
        return function(e){
            // create new event object impl so new events don't wipe out properties
            e = new Ext.EventObjectImpl(e);
            setTimeout(function(){
                h(e);
            }, o.delay || 10);
        };
    };

    var listen = function(element, ename, opt, fn, scope){
        var o = (!opt || typeof opt == "boolean") ? {} : opt;
        fn = fn || o.fn; scope = scope || o.scope;
        var el = Ext.getDom(element);
        if(!el){
            throw "Error listening for \"" + ename + '\". Element "' + element + '" doesn\'t exist.';
        }
        var h = function(e){
            // prevent errors while unload occurring
            if(!window[xname]){
                return;
            }
            e = Ext.EventObject.setEvent(e);
            var t;
            if(o.delegate){
                t = e.getTarget(o.delegate, el);
                if(!t){
                    return;
                }
            }else{
                t = e.target;
            }
            if(o.stopEvent === true){
                e.stopEvent();
            }
            if(o.preventDefault === true){
               e.preventDefault();
            }
            if(o.stopPropagation === true){
                e.stopPropagation();
            }

            if(o.normalized === false){
                e = e.browserEvent;
            }

            fn.call(scope || el, e, t, o);
        };
        if(o.delay){
            h = createDelayed(h, o);
        }
        if(o.single){
            h = createSingle(h, el, ename, fn, scope);
        }
        if(o.buffer){
            h = createBuffered(h, o);
        }

        addListener(el, ename, fn, h, scope);
        return h;
    };

    var propRe = /^(?:scope|delay|buffer|single|stopEvent|preventDefault|stopPropagation|normalized|args|delegate)$/;
    var pub = {

    
        addListener : function(element, eventName, fn, scope, options){
            if(typeof eventName == "object"){
                var o = eventName;
                for(var e in o){
                    if(propRe.test(e)){
                        continue;
                    }
                    if(typeof o[e] == "function"){
                        // shared options
                        listen(element, e, o, o[e], o.scope);
                    }else{
                        // individual options
                        listen(element, e, o[e]);
                    }
                }
                return;
            }
            return listen(element, eventName, options, fn, scope);
        },

        
        removeListener : function(element, eventName, fn, scope){
            return removeListener(element, eventName, fn, scope);
        },

        
        removeAll : function(element){
            return removeAll(element);
        },

        
        onDocumentReady : function(fn, scope, options){
            if(docReadyState){ // if it already fired
                docReadyEvent.addListener(fn, scope, options);
                docReadyEvent.fire();
                docReadyEvent.clearListeners();
                return;
            }
            if(!docReadyEvent){
                initDocReady();
            }
            options = options || {};
            if(!options.delay){
                options.delay = 1;
            }
            docReadyEvent.addListener(fn, scope, options);
        },
        
        // private
        doResizeEvent: function(){
            resizeEvent.fire(D.getViewWidth(), D.getViewHeight());
        },

        
        onWindowResize : function(fn, scope, options){
            if(!resizeEvent){
                resizeEvent = new Ext.util.Event();
                resizeTask = new Ext.util.DelayedTask(this.doResizeEvent);
                E.on(window, "resize", this.fireWindowResize, this);
            }
            resizeEvent.addListener(fn, scope, options);
        },

        // exposed only to allow manual firing
        fireWindowResize : function(){
            if(resizeEvent){
                if((Ext.isIE||Ext.isAir) && resizeTask){
                    resizeTask.delay(50);
                }else{
                    resizeEvent.fire(D.getViewWidth(), D.getViewHeight());
                }
            }
        },

        
        onTextResize : function(fn, scope, options){
            if(!textEvent){
                textEvent = new Ext.util.Event();
                var textEl = new Ext.Element(document.createElement('div'));
                textEl.dom.className = 'x-text-resize';
                textEl.dom.innerHTML = 'X';
                textEl.appendTo(document.body);
                textSize = textEl.dom.offsetHeight;
                setInterval(function(){
                    if(textEl.dom.offsetHeight != textSize){
                        textEvent.fire(textSize, textSize = textEl.dom.offsetHeight);
                    }
                }, this.textResizeInterval);
            }
            textEvent.addListener(fn, scope, options);
        },

        
        removeResizeListener : function(fn, scope){
            if(resizeEvent){
                resizeEvent.removeListener(fn, scope);
            }
        },

        // private
        fireResize : function(){
            if(resizeEvent){
                resizeEvent.fire(D.getViewWidth(), D.getViewHeight());
            }
        },
        
        ieDeferSrc : false,
        
        textResizeInterval : 50
    };
     
    pub.on = pub.addListener;
    
    pub.un = pub.removeListener;

    pub.stoppedMouseDownEvent = new Ext.util.Event();
    return pub;
}();

Ext.onReady = Ext.EventManager.onDocumentReady;


// Initialize doc classes
(function(){
    var initExtCss = function(){
        // find the body element
        var bd = document.body || document.getElementsByTagName('body')[0];
        if(!bd){ return false; }
        var cls = [' ',
                Ext.isIE ? "ext-ie " + (Ext.isIE6 ? 'ext-ie6' : (Ext.isIE7 ? 'ext-ie7' : 'ext-ie8'))
                : Ext.isGecko ? "ext-gecko " + (Ext.isGecko2 ? 'ext-gecko2' : 'ext-gecko3')
                : Ext.isOpera ? "ext-opera"
                : Ext.isSafari ? "ext-safari"
                : Ext.isChrome ? "ext-chrome" : ""];

        if(Ext.isMac){
            cls.push("ext-mac");
        }
        if(Ext.isLinux){
            cls.push("ext-linux");
        }
        if(Ext.isBorderBox){
            cls.push('ext-border-box');
        }
        if(Ext.isStrict){ // add to the parent to allow for selectors like ".ext-strict .ext-ie"
            var p = bd.parentNode;
            if(p){
                p.className += ' ext-strict';
            }
        }
        bd.className += cls.join(' ');
        return true;
    }

    if(!initExtCss()){
        Ext.onReady(initExtCss);
    }
})();


Ext.EventObject = function(){

    var E = Ext.lib.Event;

    // safari keypress events for special keys return bad keycodes
    var safariKeys = {
        3 : 13, // enter
        63234 : 37, // left
        63235 : 39, // right
        63232 : 38, // up
        63233 : 40, // down
        63276 : 33, // page up
        63277 : 34, // page down
        63272 : 46, // delete
        63273 : 36, // home
        63275 : 35  // end
    };

    // normalize button clicks
    var btnMap = Ext.isIE ? {1:0,4:1,2:2} :
                (Ext.isSafari ? {1:0,2:1,3:2} : {0:0,1:1,2:2});

    Ext.EventObjectImpl = function(e){
        if(e){
            this.setEvent(e.browserEvent || e);
        }
    };

    Ext.EventObjectImpl.prototype = {
        
        browserEvent : null,
        
        button : -1,
        
        shiftKey : false,
        
        ctrlKey : false,
        
        altKey : false,

        
        BACKSPACE: 8,
        
        TAB: 9,
        
        NUM_CENTER: 12,
        
        ENTER: 13,
        
        RETURN: 13,
        
        SHIFT: 16,
        
        CTRL: 17,
        CONTROL : 17, // legacy
        
        ALT: 18,
        
        PAUSE: 19,
        
        CAPS_LOCK: 20,
        
        ESC: 27,
        
        SPACE: 32,
        
        PAGE_UP: 33,
        PAGEUP : 33, // legacy
        
        PAGE_DOWN: 34,
        PAGEDOWN : 34, // legacy
        
        END: 35,
        
        HOME: 36,
        
        LEFT: 37,
        
        UP: 38,
        
        RIGHT: 39,
        
        DOWN: 40,
        
        PRINT_SCREEN: 44,
        
        INSERT: 45,
        
        DELETE: 46,
        
        ZERO: 48,
        
        ONE: 49,
        
        TWO: 50,
        
        THREE: 51,
        
        FOUR: 52,
        
        FIVE: 53,
        
        SIX: 54,
        
        SEVEN: 55,
        
        EIGHT: 56,
        
        NINE: 57,
        
        A: 65,
        
        B: 66,
        
        C: 67,
        
        D: 68,
        
        E: 69,
        
        F: 70,
        
        G: 71,
        
        H: 72,
        
        I: 73,
        
        J: 74,
        
        K: 75,
        
        L: 76,
        
        M: 77,
        
        N: 78,
        
        O: 79,
        
        P: 80,
        
        Q: 81,
        
        R: 82,
        
        S: 83,
        
        T: 84,
        
        U: 85,
        
        V: 86,
        
        W: 87,
        
        X: 88,
        
        Y: 89,
        
        Z: 90,
        
        CONTEXT_MENU: 93,
        
        NUM_ZERO: 96,
        
        NUM_ONE: 97,
        
        NUM_TWO: 98,
        
        NUM_THREE: 99,
        
        NUM_FOUR: 100,
        
        NUM_FIVE: 101,
        
        NUM_SIX: 102,
        
        NUM_SEVEN: 103,
        
        NUM_EIGHT: 104,
        
        NUM_NINE: 105,
        
        NUM_MULTIPLY: 106,
        
        NUM_PLUS: 107,
        
        NUM_MINUS: 109,
        
        NUM_PERIOD: 110,
        
        NUM_DIVISION: 111,
        
        F1: 112,
        
        F2: 113,
        
        F3: 114,
        
        F4: 115,
        
        F5: 116,
        
        F6: 117,
        
        F7: 118,
        
        F8: 119,
        
        F9: 120,
        
        F10: 121,
        
        F11: 122,
        
        F12: 123,

           
        setEvent : function(e){
            if(e == this || (e && e.browserEvent)){ // already wrapped
                return e;
            }
            this.browserEvent = e;
            if(e){
                // normalize buttons
                this.button = e.button ? btnMap[e.button] : (e.which ? e.which-1 : -1);
                if(e.type == 'click' && this.button == -1){
                    this.button = 0;
                }
                this.type = e.type;
                this.shiftKey = e.shiftKey;
                // mac metaKey behaves like ctrlKey
                this.ctrlKey = e.ctrlKey || e.metaKey;
                this.altKey = e.altKey;
                // in getKey these will be normalized for the mac
                this.keyCode = e.keyCode;
                this.charCode = e.charCode;
                // cache the target for the delayed and or buffered events
                this.target = E.getTarget(e);
                // same for XY
                this.xy = E.getXY(e);
            }else{
                this.button = -1;
                this.shiftKey = false;
                this.ctrlKey = false;
                this.altKey = false;
                this.keyCode = 0;
                this.charCode = 0;
                this.target = null;
                this.xy = [0, 0];
            }
            return this;
        },

        
        stopEvent : function(){
            if(this.browserEvent){
                if(this.browserEvent.type == 'mousedown'){
                    Ext.EventManager.stoppedMouseDownEvent.fire(this);
                }
                E.stopEvent(this.browserEvent);
            }
        },

        
        preventDefault : function(){
            if(this.browserEvent){
                E.preventDefault(this.browserEvent);
            }
        },

        
        isNavKeyPress : function(){
            var k = this.keyCode;
            k = Ext.isSafari ? (safariKeys[k] || k) : k;
            return (k >= 33 && k <= 40) || k == this.RETURN || k == this.TAB || k == this.ESC;
        },

        isSpecialKey : function(){
            var k = this.keyCode;
            return (this.type == 'keypress' && this.ctrlKey) || k == 9 || k == 13  || k == 40 || k == 27 ||
            (k == 16) || (k == 17) ||
            (k >= 18 && k <= 20) ||
            (k >= 33 && k <= 35) ||
            (k >= 36 && k <= 39) ||
            (k >= 44 && k <= 45);
        },

        
        stopPropagation : function(){
            if(this.browserEvent){
                if(this.browserEvent.type == 'mousedown'){
                    Ext.EventManager.stoppedMouseDownEvent.fire(this);
                }
                E.stopPropagation(this.browserEvent);
            }
        },

        
        getCharCode : function(){
            return this.charCode || this.keyCode;
        },

        
        getKey : function(){
            var k = this.keyCode || this.charCode;
            return Ext.isSafari ? (safariKeys[k] || k) : k;
        },

        
        getPageX : function(){
            return this.xy[0];
        },

        
        getPageY : function(){
            return this.xy[1];
        },

        
        getTime : function(){
            if(this.browserEvent){
                return E.getTime(this.browserEvent);
            }
            return null;
        },

        
        getXY : function(){
            return this.xy;
        },

        
        getTarget : function(selector, maxDepth, returnEl){
            return selector ? Ext.fly(this.target).findParent(selector, maxDepth, returnEl) : (returnEl ? Ext.get(this.target) : this.target);
        },

        
        getRelatedTarget : function(){
            if(this.browserEvent){
                return E.getRelatedTarget(this.browserEvent);
            }
            return null;
        },

        
        getWheelDelta : function(){
            var e = this.browserEvent;
            var delta = 0;
            if(e.wheelDelta){ 
                delta = e.wheelDelta/120;
            }else if(e.detail){ 
                delta = -e.detail/3;
            }
            return delta;
        },

        
        hasModifier : function(){
            return ((this.ctrlKey || this.altKey) || this.shiftKey) ? true : false;
        },

        
        within : function(el, related, allowEl){
            var t = this[related ? "getRelatedTarget" : "getTarget"]();
            return t && ((allowEl ? (t === Ext.getDom(el)) : false) || Ext.fly(el).contains(t));
        },

        getPoint : function(){
            return new Ext.lib.Point(this.xy[0], this.xy[1]);
        }
    };

    return new Ext.EventObjectImpl();
}();

(function(){
var D = Ext.lib.Dom;
var E = Ext.lib.Event;
var A = Ext.lib.Anim;

// local style camelizing for speed
var propCache = {};
var camelRe = /(-[a-z])/gi;
var camelFn = function(m, a){ return a.charAt(1).toUpperCase(); };
var view = document.defaultView;

Ext.Element = function(element, forceNew){
    var dom = typeof element == "string" ?
            document.getElementById(element) : element;
    if(!dom){ // invalid id/element
        return null;
    }
    var id = dom.id;
    if(forceNew !== true && id && Ext.Element.cache[id]){ // element object already exists
        return Ext.Element.cache[id];
    }

    
    this.dom = dom;

    
    this.id = id || Ext.id(dom);
};

var El = Ext.Element;

El.prototype = {
    
    originalDisplay : "",

    visibilityMode : 1,
    
    defaultUnit : "px",
    
    setVisibilityMode : function(visMode){
        this.visibilityMode = visMode;
        return this;
    },
    
    enableDisplayMode : function(display){
        this.setVisibilityMode(El.DISPLAY);
        if(typeof display != "undefined") this.originalDisplay = display;
        return this;
    },

    
    findParent : function(simpleSelector, maxDepth, returnEl){
        var p = this.dom, b = document.body, depth = 0, dq = Ext.DomQuery, stopEl;
        maxDepth = maxDepth || 50;
        if(typeof maxDepth != "number"){
            stopEl = Ext.getDom(maxDepth);
            maxDepth = 10;
        }
        while(p && p.nodeType == 1 && depth < maxDepth && p != b && p != stopEl){
            if(dq.is(p, simpleSelector)){
                return returnEl ? Ext.get(p) : p;
            }
            depth++;
            p = p.parentNode;
        }
        return null;
    },


    
    findParentNode : function(simpleSelector, maxDepth, returnEl){
        var p = Ext.fly(this.dom.parentNode, '_internal');
        return p ? p.findParent(simpleSelector, maxDepth, returnEl) : null;
    },

    
    up : function(simpleSelector, maxDepth){
        return this.findParentNode(simpleSelector, maxDepth, true);
    },



    
    is : function(simpleSelector){
        return Ext.DomQuery.is(this.dom, simpleSelector);
    },

    
    animate : function(args, duration, onComplete, easing, animType){
        this.anim(args, {duration: duration, callback: onComplete, easing: easing}, animType);
        return this;
    },

    
    anim : function(args, opt, animType, defaultDur, defaultEase, cb){
        animType = animType || 'run';
        opt = opt || {};
        var anim = Ext.lib.Anim[animType](
            this.dom, args,
            (opt.duration || defaultDur) || .35,
            (opt.easing || defaultEase) || 'easeOut',
            function(){
                Ext.callback(cb, this);
                Ext.callback(opt.callback, opt.scope || this, [this, opt]);
            },
            this
        );
        opt.anim = anim;
        return anim;
    },

    // private legacy anim prep
    preanim : function(a, i){
        return !a[i] ? false : (typeof a[i] == "object" ? a[i]: {duration: a[i+1], callback: a[i+2], easing: a[i+3]});
    },

    
    clean : function(forceReclean){
        if(this.isCleaned && forceReclean !== true){
            return this;
        }
        var ns = /\S/;
        var d = this.dom, n = d.firstChild, ni = -1;
 	    while(n){
 	        var nx = n.nextSibling;
 	        if(n.nodeType == 3 && !ns.test(n.nodeValue)){
 	            d.removeChild(n);
 	        }else{
 	            n.nodeIndex = ++ni;
 	        }
 	        n = nx;
 	    }
 	    this.isCleaned = true;
 	    return this;
 	},

    
    scrollIntoView : function(container, hscroll){
        var c = Ext.getDom(container) || Ext.getBody().dom;
        var el = this.dom;

        var o = this.getOffsetsTo(c),
            l = o[0] + c.scrollLeft,
            t = o[1] + c.scrollTop,
            b = t+el.offsetHeight,
            r = l+el.offsetWidth;

        var ch = c.clientHeight;
        var ct = parseInt(c.scrollTop, 10);
        var cl = parseInt(c.scrollLeft, 10);
        var cb = ct + ch;
        var cr = cl + c.clientWidth;

        if(el.offsetHeight > ch || t < ct){
        	c.scrollTop = t;
        }else if(b > cb){
            c.scrollTop = b-ch;
        }
        c.scrollTop = c.scrollTop; // corrects IE, other browsers will ignore

        if(hscroll !== false){
			if(el.offsetWidth > c.clientWidth || l < cl){
                c.scrollLeft = l;
            }else if(r > cr){
                c.scrollLeft = r-c.clientWidth;
            }
            c.scrollLeft = c.scrollLeft;
        }
        return this;
    },

    // private
    scrollChildIntoView : function(child, hscroll){
        Ext.fly(child, '_scrollChildIntoView').scrollIntoView(this, hscroll);
    },

    
    autoHeight : function(animate, duration, onComplete, easing){
        var oldHeight = this.getHeight();
        this.clip();
        this.setHeight(1); // force clipping
        setTimeout(function(){
            var height = parseInt(this.dom.scrollHeight, 10); // parseInt for Safari
            if(!animate){
                this.setHeight(height);
                this.unclip();
                if(typeof onComplete == "function"){
                    onComplete();
                }
            }else{
                this.setHeight(oldHeight); // restore original height
                this.setHeight(height, animate, duration, function(){
                    this.unclip();
                    if(typeof onComplete == "function") onComplete();
                }.createDelegate(this), easing);
            }
        }.createDelegate(this), 0);
        return this;
    },

    
    contains : function(el){
        if(!el){return false;}
        return D.isAncestor(this.dom, el.dom ? el.dom : el);
    },

    
    isVisible : function(deep) {
        var vis = !(this.getStyle("visibility") == "hidden" || this.getStyle("display") == "none");
        if(deep !== true || !vis){
            return vis;
        }
        var p = this.dom.parentNode;
        while(p && p.tagName.toLowerCase() != "body"){
            if(!Ext.fly(p, '_isVisible').isVisible()){
                return false;
            }
            p = p.parentNode;
        }
        return true;
    },

    
    select : function(selector, unique){
        return El.select(selector, unique, this.dom);
    },

    
    query : function(selector){
        return Ext.DomQuery.select(selector, this.dom);
    },

    
    child : function(selector, returnDom){
        var n = Ext.DomQuery.selectNode(selector, this.dom);
        return returnDom ? n : Ext.get(n);
    },

    
    down : function(selector, returnDom){
        var n = Ext.DomQuery.selectNode(" > " + selector, this.dom);
        return returnDom ? n : Ext.get(n);
    },

    
    initDD : function(group, config, overrides){
        var dd = new Ext.dd.DD(Ext.id(this.dom), group, config);
        return Ext.apply(dd, overrides);
    },

    
    initDDProxy : function(group, config, overrides){
        var dd = new Ext.dd.DDProxy(Ext.id(this.dom), group, config);
        return Ext.apply(dd, overrides);
    },

    
    initDDTarget : function(group, config, overrides){
        var dd = new Ext.dd.DDTarget(Ext.id(this.dom), group, config);
        return Ext.apply(dd, overrides);
    },

    
     setVisible : function(visible, animate){
        if(!animate || !A){
            if(this.visibilityMode == El.DISPLAY){
                this.setDisplayed(visible);
            }else{
                this.fixDisplay();
                this.dom.style.visibility = visible ? "visible" : "hidden";
            }
        }else{
            // closure for composites
            var dom = this.dom;
            var visMode = this.visibilityMode;
            if(visible){
                this.setOpacity(.01);
                this.setVisible(true);
            }
            this.anim({opacity: { to: (visible?1:0) }},
                  this.preanim(arguments, 1),
                  null, .35, 'easeIn', function(){
                     if(!visible){
                         if(visMode == El.DISPLAY){
                             dom.style.display = "none";
                         }else{
                             dom.style.visibility = "hidden";
                         }
                         Ext.get(dom).setOpacity(1);
                     }
                 });
        }
        return this;
    },

    
    isDisplayed : function() {
        return this.getStyle("display") != "none";
    },

    
    toggle : function(animate){
        this.setVisible(!this.isVisible(), this.preanim(arguments, 0));
        return this;
    },

    
    setDisplayed : function(value) {
        if(typeof value == "boolean"){
           value = value ? this.originalDisplay : "none";
        }
        this.setStyle("display", value);
        return this;
    },

    
    focus : function() {
        try{
            this.dom.focus();
        }catch(e){}
        return this;
    },

    
    blur : function() {
        try{
            this.dom.blur();
        }catch(e){}
        return this;
    },

    
    addClass : function(className){
        if(Ext.isArray(className)){
            for(var i = 0, len = className.length; i < len; i++) {
            	this.addClass(className[i]);
            }
        }else{
            if(className && !this.hasClass(className)){
                this.dom.className = this.dom.className + " " + className;
            }
        }
        return this;
    },

    
    radioClass : function(className){
        var siblings = this.dom.parentNode.childNodes;
        for(var i = 0; i < siblings.length; i++) {
        	var s = siblings[i];
        	if(s.nodeType == 1){
        	    Ext.get(s).removeClass(className);
        	}
        }
        this.addClass(className);
        return this;
    },

    
    removeClass : function(className){
        if(!className || !this.dom.className){
            return this;
        }
        if(Ext.isArray(className)){
            for(var i = 0, len = className.length; i < len; i++) {
            	this.removeClass(className[i]);
            }
        }else{
            if(this.hasClass(className)){
                var re = this.classReCache[className];
                if (!re) {
                   re = new RegExp('(?:^|\\s+)' + className + '(?:\\s+|$)', "g");
                   this.classReCache[className] = re;
                }
                this.dom.className =
                    this.dom.className.replace(re, " ");
            }
        }
        return this;
    },

    // private
    classReCache: {},

    
    toggleClass : function(className){
        if(this.hasClass(className)){
            this.removeClass(className);
        }else{
            this.addClass(className);
        }
        return this;
    },

    
    hasClass : function(className){
        return className && (' '+this.dom.className+' ').indexOf(' '+className+' ') != -1;
    },

    
    replaceClass : function(oldClassName, newClassName){
        this.removeClass(oldClassName);
        this.addClass(newClassName);
        return this;
    },

    
    getStyles : function(){
        var a = arguments, len = a.length, r = {};
        for(var i = 0; i < len; i++){
            r[a[i]] = this.getStyle(a[i]);
        }
        return r;
    },

    
    getStyle : function(){
        return view && view.getComputedStyle ?
            function(prop){
                var el = this.dom, v, cs, camel;
                if(prop == 'float'){
                    prop = "cssFloat";
                }
                if(v = el.style[prop]){
                    return v;
                }
                if(cs = view.getComputedStyle(el, "")){
                    if(!(camel = propCache[prop])){
                        camel = propCache[prop] = prop.replace(camelRe, camelFn);
                    }
                    return cs[camel];
                }
                return null;
            } :
            function(prop){
                var el = this.dom, v, cs, camel;
                if(prop == 'opacity'){
                    if(typeof el.style.filter == 'string'){
                        var m = el.style.filter.match(/alpha\(opacity=(.*)\)/i);
                        if(m){
                            var fv = parseFloat(m[1]);
                            if(!isNaN(fv)){
                                return fv ? fv / 100 : 0;
                            }
                        }
                    }
                    return 1;
                }else if(prop == 'float'){
                    prop = "styleFloat";
                }
                if(!(camel = propCache[prop])){
                    camel = propCache[prop] = prop.replace(camelRe, camelFn);
                }
                if(v = el.style[camel]){
                    return v;
                }
                if(cs = el.currentStyle){
                    return cs[camel];
                }
                return null;
            };
    }(),

    
    setStyle : function(prop, value){
        if(typeof prop == "string"){
            var camel;
            if(!(camel = propCache[prop])){
                camel = propCache[prop] = prop.replace(camelRe, camelFn);
            }
            if(camel == 'opacity') {
                this.setOpacity(value);
            }else{
                this.dom.style[camel] = value;
            }
        }else{
            for(var style in prop){
                if(typeof prop[style] != "function"){
                   this.setStyle(style, prop[style]);
                }
            }
        }
        return this;
    },

    
    applyStyles : function(style){
        Ext.DomHelper.applyStyles(this.dom, style);
        return this;
    },

    
    getX : function(){
        return D.getX(this.dom);
    },

    
    getY : function(){
        return D.getY(this.dom);
    },

    
    getXY : function(){
        return D.getXY(this.dom);
    },

    
    getOffsetsTo : function(el){
        var o = this.getXY();
        var e = Ext.fly(el, '_internal').getXY();
        return [o[0]-e[0],o[1]-e[1]];
    },

    
    setX : function(x, animate){
        if(!animate || !A){
            D.setX(this.dom, x);
        }else{
            this.setXY([x, this.getY()], this.preanim(arguments, 1));
        }
        return this;
    },

    
    setY : function(y, animate){
        if(!animate || !A){
            D.setY(this.dom, y);
        }else{
            this.setXY([this.getX(), y], this.preanim(arguments, 1));
        }
        return this;
    },

    
    setLeft : function(left){
        this.setStyle("left", this.addUnits(left));
        return this;
    },

    
    setTop : function(top){
        this.setStyle("top", this.addUnits(top));
        return this;
    },

    
    setRight : function(right){
        this.setStyle("right", this.addUnits(right));
        return this;
    },

    
    setBottom : function(bottom){
        this.setStyle("bottom", this.addUnits(bottom));
        return this;
    },

    
    setXY : function(pos, animate){
        if(!animate || !A){
            D.setXY(this.dom, pos);
        }else{
            this.anim({points: {to: pos}}, this.preanim(arguments, 1), 'motion');
        }
        return this;
    },

    
    setLocation : function(x, y, animate){
        this.setXY([x, y], this.preanim(arguments, 2));
        return this;
    },

    
    moveTo : function(x, y, animate){
        this.setXY([x, y], this.preanim(arguments, 2));
        return this;
    },

    
    getRegion : function(){
        return D.getRegion(this.dom);
    },

    
    getHeight : function(contentHeight){
        var h = this.dom.offsetHeight || 0;
        h = contentHeight !== true ? h : h-this.getBorderWidth("tb")-this.getPadding("tb");
        return h < 0 ? 0 : h;
    },

    
    getWidth : function(contentWidth){
        var w = this.dom.offsetWidth || 0;
        w = contentWidth !== true ? w : w-this.getBorderWidth("lr")-this.getPadding("lr");
        return w < 0 ? 0 : w;
    },

    
    getComputedHeight : function(){
        var h = Math.max(this.dom.offsetHeight, this.dom.clientHeight);
        if(!h){
            h = parseInt(this.getStyle('height'), 10) || 0;
            if(!this.isBorderBox()){
                h += this.getFrameWidth('tb');
            }
        }
        return h;
    },

    
    getComputedWidth : function(){
        var w = Math.max(this.dom.offsetWidth, this.dom.clientWidth);
        if(!w){
            w = parseInt(this.getStyle('width'), 10) || 0;
            if(!this.isBorderBox()){
                w += this.getFrameWidth('lr');
            }
        }
        return w;
    },

    
    getSize : function(contentSize){
        return {width: this.getWidth(contentSize), height: this.getHeight(contentSize)};
    },

    getStyleSize : function(){
        var w, h, d = this.dom, s = d.style;
        if(s.width && s.width != 'auto'){
            w = parseInt(s.width, 10);
            if(Ext.isBorderBox){
               w -= this.getFrameWidth('lr');
            }
        }
        if(s.height && s.height != 'auto'){
            h = parseInt(s.height, 10);
            if(Ext.isBorderBox){
               h -= this.getFrameWidth('tb');
            }
        }
        return {width: w || this.getWidth(true), height: h || this.getHeight(true)};

    },

    
    getViewSize : function(){
        var d = this.dom, doc = document, aw = 0, ah = 0;
        if(d == doc || d == doc.body){
            return {width : D.getViewWidth(), height: D.getViewHeight()};
        }else{
            return {
                width : d.clientWidth,
                height: d.clientHeight
            };
        }
    },

    
    getValue : function(asNumber){
        return asNumber ? parseInt(this.dom.value, 10) : this.dom.value;
    },

    // private
    adjustWidth : function(width){
        if(typeof width == "number"){
            if(this.autoBoxAdjust && !this.isBorderBox()){
               width -= (this.getBorderWidth("lr") + this.getPadding("lr"));
            }
            if(width < 0){
                width = 0;
            }
        }
        return width;
    },

    // private
    adjustHeight : function(height){
        if(typeof height == "number"){
           if(this.autoBoxAdjust && !this.isBorderBox()){
               height -= (this.getBorderWidth("tb") + this.getPadding("tb"));
           }
           if(height < 0){
               height = 0;
           }
        }
        return height;
    },

    
    setWidth : function(width, animate){
        width = this.adjustWidth(width);
        if(!animate || !A){
            this.dom.style.width = this.addUnits(width);
        }else{
            this.anim({width: {to: width}}, this.preanim(arguments, 1));
        }
        return this;
    },

    
     setHeight : function(height, animate){
        height = this.adjustHeight(height);
        if(!animate || !A){
            this.dom.style.height = this.addUnits(height);
        }else{
            this.anim({height: {to: height}}, this.preanim(arguments, 1));
        }
        return this;
    },

    
     setSize : function(width, height, animate){
        if(typeof width == "object"){ // in case of object from getSize()
            height = width.height; width = width.width;
        }
        width = this.adjustWidth(width); height = this.adjustHeight(height);
        if(!animate || !A){
            this.dom.style.width = this.addUnits(width);
            this.dom.style.height = this.addUnits(height);
        }else{
            this.anim({width: {to: width}, height: {to: height}}, this.preanim(arguments, 2));
        }
        return this;
    },

    
    setBounds : function(x, y, width, height, animate){
        if(!animate || !A){
            this.setSize(width, height);
            this.setLocation(x, y);
        }else{
            width = this.adjustWidth(width); height = this.adjustHeight(height);
            this.anim({points: {to: [x, y]}, width: {to: width}, height: {to: height}},
                          this.preanim(arguments, 4), 'motion');
        }
        return this;
    },

    
    setRegion : function(region, animate){
        this.setBounds(region.left, region.top, region.right-region.left, region.bottom-region.top, this.preanim(arguments, 1));
        return this;
    },

    
    addListener : function(eventName, fn, scope, options){
        Ext.EventManager.on(this.dom,  eventName, fn, scope || this, options);
    },

    
    removeListener : function(eventName, fn, scope){
        Ext.EventManager.removeListener(this.dom,  eventName, fn, scope || this);
        return this;
    },

    
    removeAllListeners : function(){
        Ext.EventManager.removeAll(this.dom);
        return this;
    },

    
    relayEvent : function(eventName, observable){
        this.on(eventName, function(e){
            observable.fireEvent(eventName, e);
        });
    },

    
     setOpacity : function(opacity, animate){
        if(!animate || !A){
            var s = this.dom.style;
            if(Ext.isIE){
                s.zoom = 1;
                s.filter = (s.filter || '').replace(/alpha\([^\)]*\)/gi,"") +
                           (opacity == 1 ? "" : " alpha(opacity=" + opacity * 100 + ")");
            }else{
                s.opacity = opacity;
            }
        }else{
            this.anim({opacity: {to: opacity}}, this.preanim(arguments, 1), null, .35, 'easeIn');
        }
        return this;
    },

    
    getLeft : function(local){
        if(!local){
            return this.getX();
        }else{
            return parseInt(this.getStyle("left"), 10) || 0;
        }
    },

    
    getRight : function(local){
        if(!local){
            return this.getX() + this.getWidth();
        }else{
            return (this.getLeft(true) + this.getWidth()) || 0;
        }
    },

    
    getTop : function(local) {
        if(!local){
            return this.getY();
        }else{
            return parseInt(this.getStyle("top"), 10) || 0;
        }
    },

    
    getBottom : function(local){
        if(!local){
            return this.getY() + this.getHeight();
        }else{
            return (this.getTop(true) + this.getHeight()) || 0;
        }
    },

    
    position : function(pos, zIndex, x, y){
        if(!pos){
           if(this.getStyle('position') == 'static'){
               this.setStyle('position', 'relative');
           }
        }else{
            this.setStyle("position", pos);
        }
        if(zIndex){
            this.setStyle("z-index", zIndex);
        }
        if(x !== undefined && y !== undefined){
            this.setXY([x, y]);
        }else if(x !== undefined){
            this.setX(x);
        }else if(y !== undefined){
            this.setY(y);
        }
    },

    
    clearPositioning : function(value){
        value = value ||'';
        this.setStyle({
            "left": value,
            "right": value,
            "top": value,
            "bottom": value,
            "z-index": "",
            "position" : "static"
        });
        return this;
    },

    
    getPositioning : function(){
        var l = this.getStyle("left");
        var t = this.getStyle("top");
        return {
            "position" : this.getStyle("position"),
            "left" : l,
            "right" : l ? "" : this.getStyle("right"),
            "top" : t,
            "bottom" : t ? "" : this.getStyle("bottom"),
            "z-index" : this.getStyle("z-index")
        };
    },

    
    getBorderWidth : function(side){
        return this.addStyles(side, El.borders);
    },

    
    getPadding : function(side){
        return this.addStyles(side, El.paddings);
    },

    
    setPositioning : function(pc){
        this.applyStyles(pc);
        if(pc.right == "auto"){
            this.dom.style.right = "";
        }
        if(pc.bottom == "auto"){
            this.dom.style.bottom = "";
        }
        return this;
    },

    // private
    fixDisplay : function(){
        if(this.getStyle("display") == "none"){
            this.setStyle("visibility", "hidden");
            this.setStyle("display", this.originalDisplay); // first try reverting to default
            if(this.getStyle("display") == "none"){ // if that fails, default to block
                this.setStyle("display", "block");
            }
        }
    },

    // private
	setOverflow : function(v){
    	if(v=='auto' && Ext.isMac && Ext.isGecko2){ // work around stupid FF 2.0/Mac scroll bar bug
    		this.dom.style.overflow = 'hidden';
        	(function(){this.dom.style.overflow = 'auto';}).defer(1, this);
    	}else{
    		this.dom.style.overflow = v;
    	}
	},

    
     setLeftTop : function(left, top){
        this.dom.style.left = this.addUnits(left);
        this.dom.style.top = this.addUnits(top);
        return this;
    },

    
     move : function(direction, distance, animate){
        var xy = this.getXY();
        direction = direction.toLowerCase();
        switch(direction){
            case "l":
            case "left":
                this.moveTo(xy[0]-distance, xy[1], this.preanim(arguments, 2));
                break;
           case "r":
           case "right":
                this.moveTo(xy[0]+distance, xy[1], this.preanim(arguments, 2));
                break;
           case "t":
           case "top":
           case "up":
                this.moveTo(xy[0], xy[1]-distance, this.preanim(arguments, 2));
                break;
           case "b":
           case "bottom":
           case "down":
                this.moveTo(xy[0], xy[1]+distance, this.preanim(arguments, 2));
                break;
        }
        return this;
    },

    
    clip : function(){
        if(!this.isClipped){
           this.isClipped = true;
           this.originalClip = {
               "o": this.getStyle("overflow"),
               "x": this.getStyle("overflow-x"),
               "y": this.getStyle("overflow-y")
           };
           this.setStyle("overflow", "hidden");
           this.setStyle("overflow-x", "hidden");
           this.setStyle("overflow-y", "hidden");
        }
        return this;
    },

    
    unclip : function(){
        if(this.isClipped){
            this.isClipped = false;
            var o = this.originalClip;
            if(o.o){this.setStyle("overflow", o.o);}
            if(o.x){this.setStyle("overflow-x", o.x);}
            if(o.y){this.setStyle("overflow-y", o.y);}
        }
        return this;
    },


    
    getAnchorXY : function(anchor, local, s){
        //Passing a different size is useful for pre-calculating anchors,
        //especially for anchored animations that change the el size.

        var w, h, vp = false;
        if(!s){
            var d = this.dom;
            if(d == document.body || d == document){
                vp = true;
                w = D.getViewWidth(); h = D.getViewHeight();
            }else{
                w = this.getWidth(); h = this.getHeight();
            }
        }else{
            w = s.width;  h = s.height;
        }
        var x = 0, y = 0, r = Math.round;
        switch((anchor || "tl").toLowerCase()){
            case "c":
                x = r(w*.5);
                y = r(h*.5);
            break;
            case "t":
                x = r(w*.5);
                y = 0;
            break;
            case "l":
                x = 0;
                y = r(h*.5);
            break;
            case "r":
                x = w;
                y = r(h*.5);
            break;
            case "b":
                x = r(w*.5);
                y = h;
            break;
            case "tl":
                x = 0;
                y = 0;
            break;
            case "bl":
                x = 0;
                y = h;
            break;
            case "br":
                x = w;
                y = h;
            break;
            case "tr":
                x = w;
                y = 0;
            break;
        }
        if(local === true){
            return [x, y];
        }
        if(vp){
            var sc = this.getScroll();
            return [x + sc.left, y + sc.top];
        }
        //Add the element's offset xy
        var o = this.getXY();
        return [x+o[0], y+o[1]];
    },

    
    getAlignToXY : function(el, p, o){
        el = Ext.get(el);
        if(!el || !el.dom){
            throw "Element.alignToXY with an element that doesn't exist";
        }
        var d = this.dom;
        var c = false; //constrain to viewport
        var p1 = "", p2 = "";
        o = o || [0,0];

        if(!p){
            p = "tl-bl";
        }else if(p == "?"){
            p = "tl-bl?";
        }else if(p.indexOf("-") == -1){
            p = "tl-" + p;
        }
        p = p.toLowerCase();
        var m = p.match(/^([a-z]+)-([a-z]+)(\?)?$/);
        if(!m){
           throw "Element.alignTo with an invalid alignment " + p;
        }
        p1 = m[1]; p2 = m[2]; c = !!m[3];

        //Subtract the aligned el's internal xy from the target's offset xy
        //plus custom offset to get the aligned el's new offset xy
        var a1 = this.getAnchorXY(p1, true);
        var a2 = el.getAnchorXY(p2, false);

        var x = a2[0] - a1[0] + o[0];
        var y = a2[1] - a1[1] + o[1];

        if(c){
            //constrain the aligned el to viewport if necessary
            var w = this.getWidth(), h = this.getHeight(), r = el.getRegion();
            // 5px of margin for ie
            var dw = D.getViewWidth()-5, dh = D.getViewHeight()-5;

            //If we are at a viewport boundary and the aligned el is anchored on a target border that is
            //perpendicular to the vp border, allow the aligned el to slide on that border,
            //otherwise swap the aligned el to the opposite border of the target.
            var p1y = p1.charAt(0), p1x = p1.charAt(p1.length-1);
           var p2y = p2.charAt(0), p2x = p2.charAt(p2.length-1);
           var swapY = ((p1y=="t" && p2y=="b") || (p1y=="b" && p2y=="t"));
           var swapX = ((p1x=="r" && p2x=="l") || (p1x=="l" && p2x=="r"));

           var doc = document;
           var scrollX = (doc.documentElement.scrollLeft || doc.body.scrollLeft || 0)+5;
           var scrollY = (doc.documentElement.scrollTop || doc.body.scrollTop || 0)+5;

           if((x+w) > dw + scrollX){
                x = swapX ? r.left-w : dw+scrollX-w;
            }
           if(x < scrollX){
               x = swapX ? r.right : scrollX;
           }
           if((y+h) > dh + scrollY){
                y = swapY ? r.top-h : dh+scrollY-h;
            }
           if (y < scrollY){
               y = swapY ? r.bottom : scrollY;
           }
        }
        return [x,y];
    },

    // private
    getConstrainToXY : function(){
        var os = {top:0, left:0, bottom:0, right: 0};

        return function(el, local, offsets, proposedXY){
            el = Ext.get(el);
            offsets = offsets ? Ext.applyIf(offsets, os) : os;

            var vw, vh, vx = 0, vy = 0;
            if(el.dom == document.body || el.dom == document){
                vw = Ext.lib.Dom.getViewWidth();
                vh = Ext.lib.Dom.getViewHeight();
            }else{
                vw = el.dom.clientWidth;
                vh = el.dom.clientHeight;
                if(!local){
                    var vxy = el.getXY();
                    vx = vxy[0];
                    vy = vxy[1];
                }
            }

            var s = el.getScroll();

            vx += offsets.left + s.left;
            vy += offsets.top + s.top;

            vw -= offsets.right;
            vh -= offsets.bottom;

            var vr = vx+vw;
            var vb = vy+vh;

            var xy = proposedXY || (!local ? this.getXY() : [this.getLeft(true), this.getTop(true)]);
            var x = xy[0], y = xy[1];
            var w = this.dom.offsetWidth, h = this.dom.offsetHeight;

            // only move it if it needs it
            var moved = false;

            // first validate right/bottom
            if((x + w) > vr){
                x = vr - w;
                moved = true;
            }
            if((y + h) > vb){
                y = vb - h;
                moved = true;
            }
            // then make sure top/left isn't negative
            if(x < vx){
                x = vx;
                moved = true;
            }
            if(y < vy){
                y = vy;
                moved = true;
            }
            return moved ? [x, y] : false;
        };
    }(),

    // private
    adjustForConstraints : function(xy, parent, offsets){
        return this.getConstrainToXY(parent || document, false, offsets, xy) ||  xy;
    },

    
    alignTo : function(element, position, offsets, animate){
        var xy = this.getAlignToXY(element, position, offsets);
        this.setXY(xy, this.preanim(arguments, 3));
        return this;
    },

    
    anchorTo : function(el, alignment, offsets, animate, monitorScroll, callback){
        var action = function(){
            this.alignTo(el, alignment, offsets, animate);
            Ext.callback(callback, this);
        };
        Ext.EventManager.onWindowResize(action, this);
        var tm = typeof monitorScroll;
        if(tm != 'undefined'){
            Ext.EventManager.on(window, 'scroll', action, this,
                {buffer: tm == 'number' ? monitorScroll : 50});
        }
        action.call(this); // align immediately
        return this;
    },
    
    clearOpacity : function(){
        if (window.ActiveXObject) {
            if(typeof this.dom.style.filter == 'string' && (/alpha/i).test(this.dom.style.filter)){
                this.dom.style.filter = "";
            }
        } else {
            this.dom.style.opacity = "";
            this.dom.style["-moz-opacity"] = "";
            this.dom.style["-khtml-opacity"] = "";
        }
        return this;
    },

    
    hide : function(animate){
        this.setVisible(false, this.preanim(arguments, 0));
        return this;
    },

    
    show : function(animate){
        this.setVisible(true, this.preanim(arguments, 0));
        return this;
    },

    
    addUnits : function(size){
        return Ext.Element.addUnits(size, this.defaultUnit);
    },

    
    update : function(html, loadScripts, callback){
        if(typeof html == "undefined"){
            html = "";
        }
        if(loadScripts !== true){
            this.dom.innerHTML = html;
            if(typeof callback == "function"){
                callback();
            }
            return this;
        }
        var id = Ext.id();
        var dom = this.dom;

        html += '<span id="' + id + '"></span>';

        E.onAvailable(id, function(){
            var hd = document.getElementsByTagName("head")[0];
            var re = /(?:<script([^>]*)?>)((\n|\r|.)*?)(?:<\/script>)/ig;
            var srcRe = /\ssrc=([\'\"])(.*?)\1/i;
            var typeRe = /\stype=([\'\"])(.*?)\1/i;

            var match;
            while(match = re.exec(html)){
                var attrs = match[1];
                var srcMatch = attrs ? attrs.match(srcRe) : false;
                if(srcMatch && srcMatch[2]){
                   var s = document.createElement("script");
                   s.src = srcMatch[2];
                   var typeMatch = attrs.match(typeRe);
                   if(typeMatch && typeMatch[2]){
                       s.type = typeMatch[2];
                   }
                   hd.appendChild(s);
                }else if(match[2] && match[2].length > 0){
                    if(window.execScript) {
                       window.execScript(match[2]);
                    } else {
                       window.eval(match[2]);
                    }
                }
            }
            var el = document.getElementById(id);
            if(el){Ext.removeNode(el);}
            if(typeof callback == "function"){
                callback();
            }
        });
        dom.innerHTML = html.replace(/(?:<script.*?>)((\n|\r|.)*?)(?:<\/script>)/ig, "");
        return this;
    },

    
    load : function(){
        var um = this.getUpdater();
        um.update.apply(um, arguments);
        return this;
    },

    
    getUpdater : function(){
        if(!this.updateManager){
            this.updateManager = new Ext.Updater(this);
        }
        return this.updateManager;
    },

    
    unselectable : function(){
        this.dom.unselectable = "on";
        this.swallowEvent("selectstart", true);
        this.applyStyles("-moz-user-select:none;-khtml-user-select:none;");
        this.addClass("x-unselectable");
        return this;
    },

    
    getCenterXY : function(){
        return this.getAlignToXY(document, 'c-c');
    },

    
    center : function(centerIn){
        this.alignTo(centerIn || document, 'c-c');
        return this;
    },

    
    isBorderBox : function(){
        return noBoxAdjust[this.dom.tagName.toLowerCase()] || Ext.isBorderBox;
    },

    
    getBox : function(contentBox, local){
        var xy;
        if(!local){
            xy = this.getXY();
        }else{
            var left = parseInt(this.getStyle("left"), 10) || 0;
            var top = parseInt(this.getStyle("top"), 10) || 0;
            xy = [left, top];
        }
        var el = this.dom, w = el.offsetWidth, h = el.offsetHeight, bx;
        if(!contentBox){
            bx = {x: xy[0], y: xy[1], 0: xy[0], 1: xy[1], width: w, height: h};
        }else{
            var l = this.getBorderWidth("l")+this.getPadding("l");
            var r = this.getBorderWidth("r")+this.getPadding("r");
            var t = this.getBorderWidth("t")+this.getPadding("t");
            var b = this.getBorderWidth("b")+this.getPadding("b");
            bx = {x: xy[0]+l, y: xy[1]+t, 0: xy[0]+l, 1: xy[1]+t, width: w-(l+r), height: h-(t+b)};
        }
        bx.right = bx.x + bx.width;
        bx.bottom = bx.y + bx.height;
        return bx;
    },

    
    getFrameWidth : function(sides, onlyContentBox){
        return onlyContentBox && Ext.isBorderBox ? 0 : (this.getPadding(sides) + this.getBorderWidth(sides));
    },

    
    setBox : function(box, adjust, animate){
        var w = box.width, h = box.height;
        if((adjust && !this.autoBoxAdjust) && !this.isBorderBox()){
           w -= (this.getBorderWidth("lr") + this.getPadding("lr"));
           h -= (this.getBorderWidth("tb") + this.getPadding("tb"));
        }
        this.setBounds(box.x, box.y, w, h, this.preanim(arguments, 2));
        return this;
    },

    
     repaint : function(){
        var dom = this.dom;
        this.addClass("x-repaint");
        setTimeout(function(){
            Ext.get(dom).removeClass("x-repaint");
        }, 1);
        return this;
    },

    
    getMargins : function(side){
        if(!side){
            return {
                top: parseInt(this.getStyle("margin-top"), 10) || 0,
                left: parseInt(this.getStyle("margin-left"), 10) || 0,
                bottom: parseInt(this.getStyle("margin-bottom"), 10) || 0,
                right: parseInt(this.getStyle("margin-right"), 10) || 0
            };
        }else{
            return this.addStyles(side, El.margins);
         }
    },

    // private
    addStyles : function(sides, styles){
        var val = 0, v, w;
        for(var i = 0, len = sides.length; i < len; i++){
            v = this.getStyle(styles[sides.charAt(i)]);
            if(v){
                 w = parseInt(v, 10);
                 if(w){ val += (w >= 0 ? w : -1 * w); }
            }
        }
        return val;
    },

    
    createProxy : function(config, renderTo, matchBox){
        config = typeof config == "object" ?
            config : {tag : "div", cls: config};

        var proxy;
        if(renderTo){
            proxy = Ext.DomHelper.append(renderTo, config, true);
        }else {
            proxy = Ext.DomHelper.insertBefore(this.dom, config, true);
        }
        if(matchBox){
           proxy.setBox(this.getBox());
        }
        return proxy;
    },

    
    mask : function(msg, msgCls){
        if(this.getStyle("position") == "static"){
            this.addClass("x-masked-relative");
        }
        if(this._maskMsg){
            this._maskMsg.remove();
        }
        if(this._mask){
            this._mask.remove();
        }

        this._mask = Ext.DomHelper.append(this.dom, {cls:"ext-el-mask"}, true);

        this.addClass("x-masked");
        this._mask.setDisplayed(true);
        if(typeof msg == 'string'){
            this._maskMsg = Ext.DomHelper.append(this.dom, {cls:"ext-el-mask-msg", cn:{tag:'div'}}, true);
            var mm = this._maskMsg;
            mm.dom.className = msgCls ? "ext-el-mask-msg " + msgCls : "ext-el-mask-msg";
            mm.dom.firstChild.innerHTML = msg;
            mm.setDisplayed(true);
            mm.center(this);
        }
        if(Ext.isIE && !(Ext.isIE7 && Ext.isStrict) && this.getStyle('height') == 'auto'){ // ie will not expand full height automatically
            this._mask.setSize(this.getWidth(), this.getHeight());
        }
        return this._mask;
    },

    
    unmask : function(){
        if(this._mask){
            if(this._maskMsg){
                this._maskMsg.remove();
                delete this._maskMsg;
            }
            this._mask.remove();
            delete this._mask;
        }
        this.removeClass(["x-masked", "x-masked-relative"]);
    },

    
    isMasked : function(){
        return this._mask && this._mask.isVisible();
    },

    
    createShim : function(){
        var el = document.createElement('iframe');
        el.frameBorder = '0';
        el.className = 'ext-shim';
        if(Ext.isIE && Ext.isSecure){
            el.src = Ext.SSL_SECURE_URL;
        }
        var shim = Ext.get(this.dom.parentNode.insertBefore(el, this.dom));
        shim.autoBoxAdjust = false;
        return shim;
    },

    
    remove : function(){
        Ext.removeNode(this.dom);
        delete El.cache[this.dom.id];
    },

    
    hover : function(overFn, outFn, scope){
        var preOverFn = function(e){
            if(!e.within(this, true)){
                overFn.apply(scope || this, arguments);
            }
        };
        var preOutFn = function(e){
            if(!e.within(this, true)){
                outFn.apply(scope || this, arguments);
            }
        };
        this.on("mouseover", preOverFn, this.dom);
        this.on("mouseout", preOutFn, this.dom);
        return this;
    },

    
    addClassOnOver : function(className){
        this.hover(
            function(){
                Ext.fly(this, '_internal').addClass(className);
            },
            function(){
                Ext.fly(this, '_internal').removeClass(className);
            }
        );
        return this;
    },

    
    addClassOnFocus : function(className){
        this.on("focus", function(){
            Ext.fly(this, '_internal').addClass(className);
        }, this.dom);
        this.on("blur", function(){
            Ext.fly(this, '_internal').removeClass(className);
        }, this.dom);
        return this;
    },
    
    addClassOnClick : function(className){
        var dom = this.dom;
        this.on("mousedown", function(){
            Ext.fly(dom, '_internal').addClass(className);
            var d = Ext.getDoc();
            var fn = function(){
                Ext.fly(dom, '_internal').removeClass(className);
                d.removeListener("mouseup", fn);
            };
            d.on("mouseup", fn);
        });
        return this;
    },

    
    swallowEvent : function(eventName, preventDefault){
        var fn = function(e){
            e.stopPropagation();
            if(preventDefault){
                e.preventDefault();
            }
        };
        if(Ext.isArray(eventName)){
            for(var i = 0, len = eventName.length; i < len; i++){
                 this.on(eventName[i], fn);
            }
            return this;
        }
        this.on(eventName, fn);
        return this;
    },

    
    parent : function(selector, returnDom){
        return this.matchNode('parentNode', 'parentNode', selector, returnDom);
    },

     
    next : function(selector, returnDom){
        return this.matchNode('nextSibling', 'nextSibling', selector, returnDom);
    },

    
    prev : function(selector, returnDom){
        return this.matchNode('previousSibling', 'previousSibling', selector, returnDom);
    },


    
    first : function(selector, returnDom){
        return this.matchNode('nextSibling', 'firstChild', selector, returnDom);
    },

    
    last : function(selector, returnDom){
        return this.matchNode('previousSibling', 'lastChild', selector, returnDom);
    },

    matchNode : function(dir, start, selector, returnDom){
        var n = this.dom[start];
        while(n){
            if(n.nodeType == 1 && (!selector || Ext.DomQuery.is(n, selector))){
                return !returnDom ? Ext.get(n) : n;
            }
            n = n[dir];
        }
        return null;
    },

    
    appendChild: function(el){
        el = Ext.get(el);
        el.appendTo(this);
        return this;
    },

    
    createChild: function(config, insertBefore, returnDom){
        config = config || {tag:'div'};
        if(insertBefore){
            return Ext.DomHelper.insertBefore(insertBefore, config, returnDom !== true);
        }
        return Ext.DomHelper[!this.dom.firstChild ? 'overwrite' : 'append'](this.dom, config,  returnDom !== true);
    },

    
    appendTo: function(el){
        el = Ext.getDom(el);
        el.appendChild(this.dom);
        return this;
    },

    
    insertBefore: function(el){
        el = Ext.getDom(el);
        el.parentNode.insertBefore(this.dom, el);
        return this;
    },

    
    insertAfter: function(el){
        el = Ext.getDom(el);
        el.parentNode.insertBefore(this.dom, el.nextSibling);
        return this;
    },

    
    insertFirst: function(el, returnDom){
        el = el || {};
        if(typeof el == 'object' && !el.nodeType && !el.dom){ // dh config
            return this.createChild(el, this.dom.firstChild, returnDom);
        }else{
            el = Ext.getDom(el);
            this.dom.insertBefore(el, this.dom.firstChild);
            return !returnDom ? Ext.get(el) : el;
        }
    },

    
    insertSibling: function(el, where, returnDom){
        var rt;
        if(Ext.isArray(el)){
            for(var i = 0, len = el.length; i < len; i++){
                rt = this.insertSibling(el[i], where, returnDom);
            }
            return rt;
        }
        where = where ? where.toLowerCase() : 'before';
        el = el || {};
        var refNode = where == 'before' ? this.dom : this.dom.nextSibling;

        if(typeof el == 'object' && !el.nodeType && !el.dom){ // dh config
            if(where == 'after' && !this.dom.nextSibling){
                rt = Ext.DomHelper.append(this.dom.parentNode, el, !returnDom);
            }else{
                rt = Ext.DomHelper[where == 'after' ? 'insertAfter' : 'insertBefore'](this.dom, el, !returnDom);
            }

        }else{
            rt = this.dom.parentNode.insertBefore(Ext.getDom(el), refNode);
            if(!returnDom){
                rt = Ext.get(rt);
            }
        }
        return rt;
    },

    
    wrap: function(config, returnDom){
        if(!config){
            config = {tag: "div"};
        }
        var newEl = Ext.DomHelper.insertBefore(this.dom, config, !returnDom);
        newEl.dom ? newEl.dom.appendChild(this.dom) : newEl.appendChild(this.dom);
        return newEl;
    },

    
    replace: function(el){
        el = Ext.get(el);
        this.insertBefore(el);
        el.remove();
        return this;
    },

    
    replaceWith: function(el){
        if(typeof el == 'object' && !el.nodeType && !el.dom){ // dh config
            el = this.insertSibling(el, 'before');
        }else{
            el = Ext.getDom(el);
            this.dom.parentNode.insertBefore(el, this.dom);
        }
        El.uncache(this.id);
        Ext.removeNode(this.dom);
        this.dom = el;
        this.id = Ext.id(el);
        El.cache[this.id] = this;
        return this;
    },

    
    insertHtml : function(where, html, returnEl){
        var el = Ext.DomHelper.insertHtml(where, this.dom, html);
        return returnEl ? Ext.get(el) : el;
    },

    
    set : function(o, useSet){
        var el = this.dom;
        useSet = typeof useSet == 'undefined' ? (el.setAttribute ? true : false) : useSet;
        for(var attr in o){
            if(attr == "style" || typeof o[attr] == "function") continue;
            if(attr=="cls"){
                el.className = o["cls"];
            }else if(o.hasOwnProperty(attr)){
                if(useSet) el.setAttribute(attr, o[attr]);
                else el[attr] = o[attr];
            }
        }
        if(o.style){
            Ext.DomHelper.applyStyles(el, o.style);
        }
        return this;
    },

    
    addKeyListener : function(key, fn, scope){
        var config;
        if(typeof key != "object" || Ext.isArray(key)){
            config = {
                key: key,
                fn: fn,
                scope: scope
            };
        }else{
            config = {
                key : key.key,
                shift : key.shift,
                ctrl : key.ctrl,
                alt : key.alt,
                fn: fn,
                scope: scope
            };
        }
        return new Ext.KeyMap(this, config);
    },

    
    addKeyMap : function(config){
        return new Ext.KeyMap(this, config);
    },

    
     isScrollable : function(){
        var dom = this.dom;
        return dom.scrollHeight > dom.clientHeight || dom.scrollWidth > dom.clientWidth;
    },

    
    scrollTo : function(side, value, animate){
        var prop = side.toLowerCase() == "left" ? "scrollLeft" : "scrollTop";
        if(!animate || !A){
            this.dom[prop] = value;
        }else{
            var to = prop == "scrollLeft" ? [value, this.dom.scrollTop] : [this.dom.scrollLeft, value];
            this.anim({scroll: {"to": to}}, this.preanim(arguments, 2), 'scroll');
        }
        return this;
    },

    
     scroll : function(direction, distance, animate){
         if(!this.isScrollable()){
             return;
         }
         var el = this.dom;
         var l = el.scrollLeft, t = el.scrollTop;
         var w = el.scrollWidth, h = el.scrollHeight;
         var cw = el.clientWidth, ch = el.clientHeight;
         direction = direction.toLowerCase();
         var scrolled = false;
         var a = this.preanim(arguments, 2);
         switch(direction){
             case "l":
             case "left":
                 if(w - l > cw){
                     var v = Math.min(l + distance, w-cw);
                     this.scrollTo("left", v, a);
                     scrolled = true;
                 }
                 break;
            case "r":
            case "right":
                 if(l > 0){
                     var v = Math.max(l - distance, 0);
                     this.scrollTo("left", v, a);
                     scrolled = true;
                 }
                 break;
            case "t":
            case "top":
            case "up":
                 if(t > 0){
                     var v = Math.max(t - distance, 0);
                     this.scrollTo("top", v, a);
                     scrolled = true;
                 }
                 break;
            case "b":
            case "bottom":
            case "down":
                 if(h - t > ch){
                     var v = Math.min(t + distance, h-ch);
                     this.scrollTo("top", v, a);
                     scrolled = true;
                 }
                 break;
         }
         return scrolled;
    },

    
    translatePoints : function(x, y){
        if(typeof x == 'object' || Ext.isArray(x)){
            y = x[1]; x = x[0];
        }
        var p = this.getStyle('position');
        var o = this.getXY();

        var l = parseInt(this.getStyle('left'), 10);
        var t = parseInt(this.getStyle('top'), 10);

        if(isNaN(l)){
            l = (p == "relative") ? 0 : this.dom.offsetLeft;
        }
        if(isNaN(t)){
            t = (p == "relative") ? 0 : this.dom.offsetTop;
        }

        return {left: (x - o[0] + l), top: (y - o[1] + t)};
    },

    
    getScroll : function(){
        var d = this.dom, doc = document;
        if(d == doc || d == doc.body){
            var l, t;
            if(Ext.isIE && Ext.isStrict){
                l = doc.documentElement.scrollLeft || (doc.body.scrollLeft || 0);
                t = doc.documentElement.scrollTop || (doc.body.scrollTop || 0);
            }else{
                l = window.pageXOffset || (doc.body.scrollLeft || 0);
                t = window.pageYOffset || (doc.body.scrollTop || 0);
            }
            return {left: l, top: t};
        }else{
            return {left: d.scrollLeft, top: d.scrollTop};
        }
    },

    
    getColor : function(attr, defaultValue, prefix){
        var v = this.getStyle(attr);
        if(!v || v == "transparent" || v == "inherit") {
            return defaultValue;
        }
        var color = typeof prefix == "undefined" ? "#" : prefix;
        if(v.substr(0, 4) == "rgb("){
            var rvs = v.slice(4, v.length -1).split(",");
            for(var i = 0; i < 3; i++){
                var h = parseInt(rvs[i]);
                var s = h.toString(16);
                if(h < 16){
                    s = "0" + s;
                }
                color += s;
            }
        } else {
            if(v.substr(0, 1) == "#"){
                if(v.length == 4) {
                    for(var i = 1; i < 4; i++){
                        var c = v.charAt(i);
                        color +=  c + c;
                    }
                }else if(v.length == 7){
                    color += v.substr(1);
                }
            }
        }
        return(color.length > 5 ? color.toLowerCase() : defaultValue);
    },

    
    boxWrap : function(cls){
        cls = cls || 'x-box';
        var el = Ext.get(this.insertHtml('beforeBegin', String.format('<div class="{0}">'+El.boxMarkup+'</div>', cls)));
        el.child('.'+cls+'-mc').dom.appendChild(this.dom);
        return el;
    },

    
    getAttributeNS : Ext.isIE ? function(ns, name){
        var d = this.dom;
        var type = typeof d[ns+":"+name];
        if(type != 'undefined' && type != 'unknown'){
            return d[ns+":"+name];
        }
        return d[name];
    } : function(ns, name){
        var d = this.dom;
        return d.getAttributeNS(ns, name) || d.getAttribute(ns+":"+name) || d.getAttribute(name) || d[name];
    },

    
    getTextWidth : function(text, min, max){
        return (Ext.util.TextMetrics.measure(this.dom, Ext.value(text, this.dom.innerHTML, true)).width).constrain(min || 0, max || 1000000);
    }
};

var ep = El.prototype;


ep.on = ep.addListener;
    // backwards compat
ep.mon = ep.addListener;

ep.getUpdateManager = ep.getUpdater;


ep.un = ep.removeListener;


ep.autoBoxAdjust = true;

// private
El.unitPattern = /\d+(px|em|%|en|ex|pt|in|cm|mm|pc)$/i;

// private
El.addUnits = function(v, defaultUnit){
    if(v === "" || v == "auto"){
        return v;
    }
    if(v === undefined){
        return '';
    }
    if(typeof v == "number" || !El.unitPattern.test(v)){
        return v + (defaultUnit || 'px');
    }
    return v;
};

// special markup used throughout Ext when box wrapping elements
El.boxMarkup = '<div class="{0}-tl"><div class="{0}-tr"><div class="{0}-tc"></div></div></div><div class="{0}-ml"><div class="{0}-mr"><div class="{0}-mc"></div></div></div><div class="{0}-bl"><div class="{0}-br"><div class="{0}-bc"></div></div></div>';

El.VISIBILITY = 1;

El.DISPLAY = 2;

El.borders = {l: "border-left-width", r: "border-right-width", t: "border-top-width", b: "border-bottom-width"};
El.paddings = {l: "padding-left", r: "padding-right", t: "padding-top", b: "padding-bottom"};
El.margins = {l: "margin-left", r: "margin-right", t: "margin-top", b: "margin-bottom"};




El.cache = {};

var docEl;


El.get = function(el){
    var ex, elm, id;
    if(!el){ return null; }
    if(typeof el == "string"){ // element id
        if(!(elm = document.getElementById(el))){
            return null;
        }
        if(ex = El.cache[el]){
            ex.dom = elm;
        }else{
            ex = El.cache[el] = new El(elm);
        }
        return ex;
    }else if(el.tagName){ // dom element
        if(!(id = el.id)){
            id = Ext.id(el);
        }
        if(ex = El.cache[id]){
            ex.dom = el;
        }else{
            ex = El.cache[id] = new El(el);
        }
        return ex;
    }else if(el instanceof El){
        if(el != docEl){
            el.dom = document.getElementById(el.id) || el.dom; // refresh dom element in case no longer valid,
                                                          // catch case where it hasn't been appended
            El.cache[el.id] = el; // in case it was created directly with Element(), let's cache it
        }
        return el;
    }else if(el.isComposite){
        return el;
    }else if(Ext.isArray(el)){
        return El.select(el);
    }else if(el == document){
        // create a bogus element object representing the document object
        if(!docEl){
            var f = function(){};
            f.prototype = El.prototype;
            docEl = new f();
            docEl.dom = document;
        }
        return docEl;
    }
    return null;
};

// private
El.uncache = function(el){
    for(var i = 0, a = arguments, len = a.length; i < len; i++) {
        if(a[i]){
            delete El.cache[a[i].id || a[i]];
        }
    }
};

// private
// Garbage collection - uncache elements/purge listeners on orphaned elements
// so we don't hold a reference and cause the browser to retain them
El.garbageCollect = function(){
    if(!Ext.enableGarbageCollector){
        clearInterval(El.collectorThread);
        return;
    }
    for(var eid in El.cache){
        var el = El.cache[eid], d = el.dom;
        // -------------------------------------------------------
        // Determining what is garbage:
        // -------------------------------------------------------
        // !d
        // dom node is null, definitely garbage
        // -------------------------------------------------------
        // !d.parentNode
        // no parentNode == direct orphan, definitely garbage
        // -------------------------------------------------------
        // !d.offsetParent && !document.getElementById(eid)
        // display none elements have no offsetParent so we will
        // also try to look it up by it's id. However, check
        // offsetParent first so we don't do unneeded lookups.
        // This enables collection of elements that are not orphans
        // directly, but somewhere up the line they have an orphan
        // parent.
        // -------------------------------------------------------
        if(!d || !d.parentNode || (!d.offsetParent && !document.getElementById(eid))){
            delete El.cache[eid];
            if(d && Ext.enableListenerCollection){
                Ext.EventManager.removeAll(d);
            }
        }
    }
}
El.collectorThreadId = setInterval(El.garbageCollect, 30000);

var flyFn = function(){};
flyFn.prototype = El.prototype;
var _cls = new flyFn();

// dom is optional
El.Flyweight = function(dom){
    this.dom = dom;
};

El.Flyweight.prototype = _cls;
El.Flyweight.prototype.isFlyweight = true;

El._flyweights = {};

El.fly = function(el, named){
    named = named || '_global';
    el = Ext.getDom(el);
    if(!el){
        return null;
    }
    if(!El._flyweights[named]){
        El._flyweights[named] = new El.Flyweight();
    }
    El._flyweights[named].dom = el;
    return El._flyweights[named];
};


Ext.get = El.get;

Ext.fly = El.fly;

// speedy lookup for elements never to box adjust
var noBoxAdjust = Ext.isStrict ? {
    select:1
} : {
    input:1, select:1, textarea:1
};
if(Ext.isIE || Ext.isGecko){
    noBoxAdjust['button'] = 1;
}


Ext.EventManager.on(window, 'unload', function(){
    delete El.cache;
    delete El._flyweights;
});
})();

//Notifies Element that fx methods are available
Ext.enableFx = true;


Ext.Fx = {
	
    slideIn : function(anchor, o){
        var el = this.getFxEl();
        o = o || {};

        el.queueFx(o, function(){

            anchor = anchor || "t";

            // fix display to visibility
            this.fixDisplay();

            // restore values after effect
            var r = this.getFxRestore();
            var b = this.getBox();
            // fixed size for slide
            this.setSize(b);

            // wrap if needed
            var wrap = this.fxWrap(r.pos, o, "hidden");

            var st = this.dom.style;
            st.visibility = "visible";
            st.position = "absolute";

            // clear out temp styles after slide and unwrap
            var after = function(){
                el.fxUnwrap(wrap, r.pos, o);
                st.width = r.width;
                st.height = r.height;
                el.afterFx(o);
            };
            // time to calc the positions
            var a, pt = {to: [b.x, b.y]}, bw = {to: b.width}, bh = {to: b.height};

            switch(anchor.toLowerCase()){
                case "t":
                    wrap.setSize(b.width, 0);
                    st.left = st.bottom = "0";
                    a = {height: bh};
                break;
                case "l":
                    wrap.setSize(0, b.height);
                    st.right = st.top = "0";
                    a = {width: bw};
                break;
                case "r":
                    wrap.setSize(0, b.height);
                    wrap.setX(b.right);
                    st.left = st.top = "0";
                    a = {width: bw, points: pt};
                break;
                case "b":
                    wrap.setSize(b.width, 0);
                    wrap.setY(b.bottom);
                    st.left = st.top = "0";
                    a = {height: bh, points: pt};
                break;
                case "tl":
                    wrap.setSize(0, 0);
                    st.right = st.bottom = "0";
                    a = {width: bw, height: bh};
                break;
                case "bl":
                    wrap.setSize(0, 0);
                    wrap.setY(b.y+b.height);
                    st.right = st.top = "0";
                    a = {width: bw, height: bh, points: pt};
                break;
                case "br":
                    wrap.setSize(0, 0);
                    wrap.setXY([b.right, b.bottom]);
                    st.left = st.top = "0";
                    a = {width: bw, height: bh, points: pt};
                break;
                case "tr":
                    wrap.setSize(0, 0);
                    wrap.setX(b.x+b.width);
                    st.left = st.bottom = "0";
                    a = {width: bw, height: bh, points: pt};
                break;
            }
            this.dom.style.visibility = "visible";
            wrap.show();

            arguments.callee.anim = wrap.fxanim(a,
                o,
                'motion',
                .5,
                'easeOut', after);
        });
        return this;
    },
    
	
    slideOut : function(anchor, o){
        var el = this.getFxEl();
        o = o || {};

        el.queueFx(o, function(){

            anchor = anchor || "t";

            // restore values after effect
            var r = this.getFxRestore();
            
            var b = this.getBox();
            // fixed size for slide
            this.setSize(b);

            // wrap if needed
            var wrap = this.fxWrap(r.pos, o, "visible");

            var st = this.dom.style;
            st.visibility = "visible";
            st.position = "absolute";

            wrap.setSize(b);

            var after = function(){
                if(o.useDisplay){
                    el.setDisplayed(false);
                }else{
                    el.hide();
                }

                el.fxUnwrap(wrap, r.pos, o);

                st.width = r.width;
                st.height = r.height;

                el.afterFx(o);
            };

            var a, zero = {to: 0};
            switch(anchor.toLowerCase()){
                case "t":
                    st.left = st.bottom = "0";
                    a = {height: zero};
                break;
                case "l":
                    st.right = st.top = "0";
                    a = {width: zero};
                break;
                case "r":
                    st.left = st.top = "0";
                    a = {width: zero, points: {to:[b.right, b.y]}};
                break;
                case "b":
                    st.left = st.top = "0";
                    a = {height: zero, points: {to:[b.x, b.bottom]}};
                break;
                case "tl":
                    st.right = st.bottom = "0";
                    a = {width: zero, height: zero};
                break;
                case "bl":
                    st.right = st.top = "0";
                    a = {width: zero, height: zero, points: {to:[b.x, b.bottom]}};
                break;
                case "br":
                    st.left = st.top = "0";
                    a = {width: zero, height: zero, points: {to:[b.x+b.width, b.bottom]}};
                break;
                case "tr":
                    st.left = st.bottom = "0";
                    a = {width: zero, height: zero, points: {to:[b.right, b.y]}};
                break;
            }

            arguments.callee.anim = wrap.fxanim(a,
                o,
                'motion',
                .5,
                "easeOut", after);
        });
        return this;
    },

	
    puff : function(o){
        var el = this.getFxEl();
        o = o || {};

        el.queueFx(o, function(){
            this.clearOpacity();
            this.show();

            // restore values after effect
            var r = this.getFxRestore();
            var st = this.dom.style;

            var after = function(){
                if(o.useDisplay){
                    el.setDisplayed(false);
                }else{
                    el.hide();
                }

                el.clearOpacity();

                el.setPositioning(r.pos);
                st.width = r.width;
                st.height = r.height;
                st.fontSize = '';
                el.afterFx(o);
            };

            var width = this.getWidth();
            var height = this.getHeight();

            arguments.callee.anim = this.fxanim({
                    width : {to: this.adjustWidth(width * 2)},
                    height : {to: this.adjustHeight(height * 2)},
                    points : {by: [-(width * .5), -(height * .5)]},
                    opacity : {to: 0},
                    fontSize: {to:200, unit: "%"}
                },
                o,
                'motion',
                .5,
                "easeOut", after);
        });
        return this;
    },

	
    switchOff : function(o){
        var el = this.getFxEl();
        o = o || {};

        el.queueFx(o, function(){
            this.clearOpacity();
            this.clip();

            // restore values after effect
            var r = this.getFxRestore();
            var st = this.dom.style;

            var after = function(){
                if(o.useDisplay){
                    el.setDisplayed(false);
                }else{
                    el.hide();
                }

                el.clearOpacity();
                el.setPositioning(r.pos);
                st.width = r.width;
                st.height = r.height;

                el.afterFx(o);
            };

            this.fxanim({opacity:{to:0.3}}, null, null, .1, null, function(){
                this.clearOpacity();
                (function(){
                    this.fxanim({
                        height:{to:1},
                        points:{by:[0, this.getHeight() * .5]}
                    }, o, 'motion', 0.3, 'easeIn', after);
                }).defer(100, this);
            });
        });
        return this;
    },

    	
    highlight : function(color, o){
        var el = this.getFxEl();
        o = o || {};

        el.queueFx(o, function(){
            color = color || "ffff9c";
            var attr = o.attr || "backgroundColor";

            this.clearOpacity();
            this.show();

            var origColor = this.getColor(attr);
            var restoreColor = this.dom.style[attr];
            var endColor = (o.endColor || origColor) || "ffffff";

            var after = function(){
                el.dom.style[attr] = restoreColor;
                el.afterFx(o);
            };

            var a = {};
            a[attr] = {from: color, to: endColor};
            arguments.callee.anim = this.fxanim(a,
                o,
                'color',
                1,
                'easeIn', after);
        });
        return this;
    },

   
    frame : function(color, count, o){
        var el = this.getFxEl();
        o = o || {};

        el.queueFx(o, function(){
            color = color || "#C3DAF9";
            if(color.length == 6){
                color = "#" + color;
            }
            count = count || 1;
            var duration = o.duration || 1;
            this.show();

            var b = this.getBox();
            var animFn = function(){
                var proxy = Ext.getBody().createChild({
                     style:{
                        visbility:"hidden",
                        position:"absolute",
                        "z-index":"35000", // yee haw
                        border:"0px solid " + color
                     }
                  });
                var scale = Ext.isBorderBox ? 2 : 1;
                proxy.animate({
                    top:{from:b.y, to:b.y - 20},
                    left:{from:b.x, to:b.x - 20},
                    borderWidth:{from:0, to:10},
                    opacity:{from:1, to:0},
                    height:{from:b.height, to:(b.height + (20*scale))},
                    width:{from:b.width, to:(b.width + (20*scale))}
                }, duration, function(){
                    proxy.remove();
                    if(--count > 0){
                         animFn();
                    }else{
                        el.afterFx(o);
                    }
                });
            };
            animFn.call(this);
        });
        return this;
    },

   
    pause : function(seconds){
        var el = this.getFxEl();
        var o = {};

        el.queueFx(o, function(){
            setTimeout(function(){
                el.afterFx(o);
            }, seconds * 1000);
        });
        return this;
    },

   
    fadeIn : function(o){
        var el = this.getFxEl();
        o = o || {};
        el.queueFx(o, function(){
            this.setOpacity(0);
            this.fixDisplay();
            this.dom.style.visibility = 'visible';
            var to = o.endOpacity || 1;
            arguments.callee.anim = this.fxanim({opacity:{to:to}},
                o, null, .5, "easeOut", function(){
                if(to == 1){
                    this.clearOpacity();
                }
                el.afterFx(o);
            });
        });
        return this;
    },

   
    fadeOut : function(o){
        var el = this.getFxEl();
        o = o || {};
        el.queueFx(o, function(){
            var to = o.endOpacity || 0;
            arguments.callee.anim = this.fxanim({opacity:{to:to}},
                o, null, .5, "easeOut", function(){
                if(to === 0){
                    if(this.visibilityMode == Ext.Element.DISPLAY || o.useDisplay){
                         this.dom.style.display = "none";
                    }else{
                         this.dom.style.visibility = "hidden";
                    }
                    this.clearOpacity();
                }
                el.afterFx(o);
            });
        });
        return this;
    },

   
    scale : function(w, h, o){
        this.shift(Ext.apply({}, o, {
            width: w,
            height: h
        }));
        return this;
    },

   
    shift : function(o){
        var el = this.getFxEl();
        o = o || {};
        el.queueFx(o, function(){
            var a = {}, w = o.width, h = o.height, x = o.x, y = o.y,  op = o.opacity;
            if(w !== undefined){
                a.width = {to: this.adjustWidth(w)};
            }
            if(h !== undefined){
                a.height = {to: this.adjustHeight(h)};
            }
            if(o.left !== undefined){
                a.left = {to: o.left};
            }
            if(o.top !== undefined){
                a.top = {to: o.top};
            }
            if(o.right !== undefined){
                a.right = {to: o.right};
            }
            if(o.bottom !== undefined){
                a.bottom = {to: o.bottom};
            }
            if(x !== undefined || y !== undefined){
                a.points = {to: [
                    x !== undefined ? x : this.getX(),
                    y !== undefined ? y : this.getY()
                ]};
            }
            if(op !== undefined){
                a.opacity = {to: op};
            }
            if(o.xy !== undefined){
                a.points = {to: o.xy};
            }
            arguments.callee.anim = this.fxanim(a,
                o, 'motion', .35, "easeOut", function(){
                el.afterFx(o);
            });
        });
        return this;
    },

	
    ghost : function(anchor, o){
        var el = this.getFxEl();
        o = o || {};

        el.queueFx(o, function(){
            anchor = anchor || "b";

            // restore values after effect
            var r = this.getFxRestore();
            var w = this.getWidth(),
                h = this.getHeight();

            var st = this.dom.style;

            var after = function(){
                if(o.useDisplay){
                    el.setDisplayed(false);
                }else{
                    el.hide();
                }

                el.clearOpacity();
                el.setPositioning(r.pos);
                st.width = r.width;
                st.height = r.height;

                el.afterFx(o);
            };

            var a = {opacity: {to: 0}, points: {}}, pt = a.points;
            switch(anchor.toLowerCase()){
                case "t":
                    pt.by = [0, -h];
                break;
                case "l":
                    pt.by = [-w, 0];
                break;
                case "r":
                    pt.by = [w, 0];
                break;
                case "b":
                    pt.by = [0, h];
                break;
                case "tl":
                    pt.by = [-w, -h];
                break;
                case "bl":
                    pt.by = [-w, h];
                break;
                case "br":
                    pt.by = [w, h];
                break;
                case "tr":
                    pt.by = [w, -h];
                break;
            }

            arguments.callee.anim = this.fxanim(a,
                o,
                'motion',
                .5,
                "easeOut", after);
        });
        return this;
    },

	
    syncFx : function(){
        this.fxDefaults = Ext.apply(this.fxDefaults || {}, {
            block : false,
            concurrent : true,
            stopFx : false
        });
        return this;
    },

	
    sequenceFx : function(){
        this.fxDefaults = Ext.apply(this.fxDefaults || {}, {
            block : false,
            concurrent : false,
            stopFx : false
        });
        return this;
    },

	
    nextFx : function(){
        var ef = this.fxQueue[0];
        if(ef){
            ef.call(this);
        }
    },

	
    hasActiveFx : function(){
        return this.fxQueue && this.fxQueue[0];
    },

	
    stopFx : function(){
        if(this.hasActiveFx()){
            var cur = this.fxQueue[0];
            if(cur && cur.anim && cur.anim.isAnimated()){
                this.fxQueue = [cur]; // clear out others
                cur.anim.stop(true);
            }
        }
        return this;
    },

	
    beforeFx : function(o){
        if(this.hasActiveFx() && !o.concurrent){
           if(o.stopFx){
               this.stopFx();
               return true;
           }
           return false;
        }
        return true;
    },

	
    hasFxBlock : function(){
        var q = this.fxQueue;
        return q && q[0] && q[0].block;
    },

	
    queueFx : function(o, fn){
        if(!this.fxQueue){
            this.fxQueue = [];
        }
        if(!this.hasFxBlock()){
            Ext.applyIf(o, this.fxDefaults);
            if(!o.concurrent){
                var run = this.beforeFx(o);
                fn.block = o.block;
                this.fxQueue.push(fn);
                if(run){
                    this.nextFx();
                }
            }else{
                fn.call(this);
            }
        }
        return this;
    },

	
    fxWrap : function(pos, o, vis){
        var wrap;
        if(!o.wrap || !(wrap = Ext.get(o.wrap))){
            var wrapXY;
            if(o.fixPosition){
                wrapXY = this.getXY();
            }
            var div = document.createElement("div");
            div.style.visibility = vis;
            wrap = Ext.get(this.dom.parentNode.insertBefore(div, this.dom));
            wrap.setPositioning(pos);
            if(wrap.getStyle("position") == "static"){
                wrap.position("relative");
            }
            this.clearPositioning('auto');
            wrap.clip();
            wrap.dom.appendChild(this.dom);
            if(wrapXY){
                wrap.setXY(wrapXY);
            }
        }
        return wrap;
    },

	
    fxUnwrap : function(wrap, pos, o){
        this.clearPositioning();
        this.setPositioning(pos);
        if(!o.wrap){
            wrap.dom.parentNode.insertBefore(this.dom, wrap.dom);
            wrap.remove();
        }
    },

	
    getFxRestore : function(){
        var st = this.dom.style;
        return {pos: this.getPositioning(), width: st.width, height : st.height};
    },

	
    afterFx : function(o){
        if(o.afterStyle){
            this.applyStyles(o.afterStyle);
        }
        if(o.afterCls){
            this.addClass(o.afterCls);
        }
        if(o.remove === true){
            this.remove();
        }
        Ext.callback(o.callback, o.scope, [this]);
        if(!o.concurrent){
            this.fxQueue.shift();
            this.nextFx();
        }
    },

	
    getFxEl : function(){ // support for composite element fx
        return Ext.get(this.dom);
    },

	
    fxanim : function(args, opt, animType, defaultDur, defaultEase, cb){
        animType = animType || 'run';
        opt = opt || {};
        var anim = Ext.lib.Anim[animType](
            this.dom, args,
            (opt.duration || defaultDur) || .35,
            (opt.easing || defaultEase) || 'easeOut',
            function(){
                Ext.callback(cb, this);
            },
            this
        );
        opt.anim = anim;
        return anim;
    }
};

// backwords compat
Ext.Fx.resize = Ext.Fx.scale;

//When included, Ext.Fx is automatically applied to Element so that all basic
//effects are available directly via the Element API
Ext.apply(Ext.Element.prototype, Ext.Fx);


Ext.CompositeElement = function(els){
    this.elements = [];
    this.addElements(els);
};
Ext.CompositeElement.prototype = {
    isComposite: true,
    addElements : function(els){
        if(!els) return this;
        if(typeof els == "string"){
            els = Ext.Element.selectorFunction(els);
        }
        var yels = this.elements;
        var index = yels.length-1;
        for(var i = 0, len = els.length; i < len; i++) {
        	yels[++index] = Ext.get(els[i]);
        }
        return this;
    },

    
    fill : function(els){
        this.elements = [];
        this.add(els);
        return this;
    },

    
    filter : function(selector){
        var els = [];
        this.each(function(el){
            if(el.is(selector)){
                els[els.length] = el.dom;
            }
        });
        this.fill(els);
        return this;
    },

    invoke : function(fn, args){
        var els = this.elements;
        for(var i = 0, len = els.length; i < len; i++) {
        	Ext.Element.prototype[fn].apply(els[i], args);
        }
        return this;
    },
    
    add : function(els){
        if(typeof els == "string"){
            this.addElements(Ext.Element.selectorFunction(els));
        }else if(els.length !== undefined){
            this.addElements(els);
        }else{
            this.addElements([els]);
        }
        return this;
    },
    
    each : function(fn, scope){
        var els = this.elements;
        for(var i = 0, len = els.length; i < len; i++){
            if(fn.call(scope || els[i], els[i], this, i) === false) {
                break;
            }
        }
        return this;
    },

    
    item : function(index){
        return this.elements[index] || null;
    },

    
    first : function(){
        return this.item(0);
    },

    
    last : function(){
        return this.item(this.elements.length-1);
    },

    
    getCount : function(){
        return this.elements.length;
    },

    
    contains : function(el){
        return this.indexOf(el) !== -1;
    },

    
    indexOf : function(el){
        return this.elements.indexOf(Ext.get(el));
    },


    
    removeElement : function(el, removeDom){
        if(Ext.isArray(el)){
            for(var i = 0, len = el.length; i < len; i++){
                this.removeElement(el[i]);
            }
            return this;
        }
        var index = typeof el == 'number' ? el : this.indexOf(el);
        if(index !== -1 && this.elements[index]){
            if(removeDom){
                var d = this.elements[index];
                if(d.dom){
                    d.remove();
                }else{
                    Ext.removeNode(d);
                }
            }
            this.elements.splice(index, 1);
        }
        return this;
    },

    
    replaceElement : function(el, replacement, domReplace){
        var index = typeof el == 'number' ? el : this.indexOf(el);
        if(index !== -1){
            if(domReplace){
                this.elements[index].replaceWith(replacement);
            }else{
                this.elements.splice(index, 1, Ext.get(replacement))
            }
        }
        return this;
    },

    
    clear : function(){
        this.elements = [];
    }
};
(function(){
Ext.CompositeElement.createCall = function(proto, fnName){
    if(!proto[fnName]){
        proto[fnName] = function(){
            return this.invoke(fnName, arguments);
        };
    }
};
for(var fnName in Ext.Element.prototype){
    if(typeof Ext.Element.prototype[fnName] == "function"){
        Ext.CompositeElement.createCall(Ext.CompositeElement.prototype, fnName);
    }
};
})();


Ext.CompositeElementLite = function(els){
    Ext.CompositeElementLite.superclass.constructor.call(this, els);
    this.el = new Ext.Element.Flyweight();
};
Ext.extend(Ext.CompositeElementLite, Ext.CompositeElement, {
    addElements : function(els){
        if(els){
            if(Ext.isArray(els)){
                this.elements = this.elements.concat(els);
            }else{
                var yels = this.elements;
                var index = yels.length-1;
                for(var i = 0, len = els.length; i < len; i++) {
                    yels[++index] = els[i];
                }
            }
        }
        return this;
    },
    invoke : function(fn, args){
        var els = this.elements;
        var el = this.el;
        for(var i = 0, len = els.length; i < len; i++) {
            el.dom = els[i];
        	Ext.Element.prototype[fn].apply(el, args);
        }
        return this;
    },
    
    item : function(index){
        if(!this.elements[index]){
            return null;
        }
        this.el.dom = this.elements[index];
        return this.el;
    },

    // fixes scope with flyweight
    addListener : function(eventName, handler, scope, opt){
        var els = this.elements;
        for(var i = 0, len = els.length; i < len; i++) {
            Ext.EventManager.on(els[i], eventName, handler, scope || els[i], opt);
        }
        return this;
    },

    
    each : function(fn, scope){
        var els = this.elements;
        var el = this.el;
        for(var i = 0, len = els.length; i < len; i++){
            el.dom = els[i];
        	if(fn.call(scope || el, el, this, i) === false){
                break;
            }
        }
        return this;
    },

    indexOf : function(el){
        return this.elements.indexOf(Ext.getDom(el));
    },

    replaceElement : function(el, replacement, domReplace){
        var index = typeof el == 'number' ? el : this.indexOf(el);
        if(index !== -1){
            replacement = Ext.getDom(replacement);
            if(domReplace){
                var d = this.elements[index];
                d.parentNode.insertBefore(replacement, d);
                Ext.removeNode(d);
            }
            this.elements.splice(index, 1, replacement);
        }
        return this;
    }
});
Ext.CompositeElementLite.prototype.on = Ext.CompositeElementLite.prototype.addListener;
if(Ext.DomQuery){
    Ext.Element.selectorFunction = Ext.DomQuery.select;
}

Ext.Element.select = function(selector, unique, root){
    var els;
    if(typeof selector == "string"){
        els = Ext.Element.selectorFunction(selector, root);
    }else if(selector.length !== undefined){
        els = selector;
    }else{
        throw "Invalid selector";
    }
    if(unique === true){
        return new Ext.CompositeElement(els);
    }else{
        return new Ext.CompositeElementLite(els);
    }
};

Ext.select = Ext.Element.select;

Ext.data.Connection = function(config){
    Ext.apply(this, config);
    this.addEvents(
        
        "beforerequest",
        
        "requestcomplete",
        
        "requestexception"
    );
    Ext.data.Connection.superclass.constructor.call(this);
};

Ext.extend(Ext.data.Connection, Ext.util.Observable, {
    
    
    
    
    
    timeout : 30000,
    
    autoAbort:false,

    
    disableCaching: true,
    
    
    disableCachingParam: '_dc',
    

    
    request : function(o){
        if(this.fireEvent("beforerequest", this, o) !== false){
            var p = o.params;

            if(typeof p == "function"){
                p = p.call(o.scope||window, o);
            }
            if(typeof p == "object"){
                p = Ext.urlEncode(p);
            }
            if(this.extraParams){
                var extras = Ext.urlEncode(this.extraParams);
                p = p ? (p + '&' + extras) : extras;
            }

            var url = o.url || this.url;
            if(typeof url == 'function'){
                url = url.call(o.scope||window, o);
            }

            if(o.form){
                var form = Ext.getDom(o.form);
                url = url || form.action;

                var enctype = form.getAttribute("enctype");
                if(o.isUpload || (enctype && enctype.toLowerCase() == 'multipart/form-data')){
                    return this.doFormUpload(o, p, url);
                }
                var f = Ext.lib.Ajax.serializeForm(form);
                p = p ? (p + '&' + f) : f;
            }

            var hs = o.headers;
            if(this.defaultHeaders){
                hs = Ext.apply(hs || {}, this.defaultHeaders);
                if(!o.headers){
                    o.headers = hs;
                }
            }

            var cb = {
                success: this.handleResponse,
                failure: this.handleFailure,
                scope: this,
                argument: {options: o},
                timeout : o.timeout || this.timeout
            };

            var method = o.method||this.method||((p || o.xmlData || o.jsonData) ? "POST" : "GET");

            if(method == 'GET' && (this.disableCaching && o.disableCaching !== false) || o.disableCaching === true){
                var dcp = o.disableCachingParam || this.disableCachingParam;
                url += (url.indexOf('?') != -1 ? '&' : '?') + dcp + '=' + (new Date().getTime());
            }

            if(typeof o.autoAbort == 'boolean'){ // options gets top priority
                if(o.autoAbort){
                    this.abort();
                }
            }else if(this.autoAbort !== false){
                this.abort();
            }
            if((method == 'GET' || o.xmlData || o.jsonData) && p){
                url += (url.indexOf('?') != -1 ? '&' : '?') + p;
                p = '';
            }
            this.transId = Ext.lib.Ajax.request(method, url, cb, p, o);
            return this.transId;
        }else{
            Ext.callback(o.callback, o.scope, [o, null, null]);
            return null;
        }
    },

    
    isLoading : function(transId){
        if(transId){
            return Ext.lib.Ajax.isCallInProgress(transId);
        }else{
            return this.transId ? true : false;
        }
    },

    
    abort : function(transId){
        if(transId || this.isLoading()){
            Ext.lib.Ajax.abort(transId || this.transId);
        }
    },

    // private
    handleResponse : function(response){
        this.transId = false;
        var options = response.argument.options;
        response.argument = options ? options.argument : null;
        this.fireEvent("requestcomplete", this, response, options);
        Ext.callback(options.success, options.scope, [response, options]);
        Ext.callback(options.callback, options.scope, [options, true, response]);
    },

    // private
    handleFailure : function(response, e){
        this.transId = false;
        var options = response.argument.options;
        response.argument = options ? options.argument : null;
        this.fireEvent("requestexception", this, response, options, e);
        Ext.callback(options.failure, options.scope, [response, options]);
        Ext.callback(options.callback, options.scope, [options, false, response]);
    },

    // private
    doFormUpload : function(o, ps, url){
        var id = Ext.id();
        var frame = document.createElement('iframe');
        frame.id = id;
        frame.name = id;
        frame.className = 'x-hidden';
        if(Ext.isIE){
            frame.src = Ext.SSL_SECURE_URL;
        }
        document.body.appendChild(frame);

        if(Ext.isIE){
           document.frames[id].name = id;
        }

        var form = Ext.getDom(o.form);
        form.target = id;
        form.method = 'POST';
        form.enctype = form.encoding = 'multipart/form-data';
        if(url){
            form.action = url;
        }

        var hiddens, hd;
        if(ps){ // add dynamic params
            hiddens = [];
            ps = Ext.urlDecode(ps, false);
            for(var k in ps){
                if(ps.hasOwnProperty(k)){
                    hd = document.createElement('input');
                    hd.type = 'hidden';
                    hd.name = k;
                    hd.value = ps[k];
                    form.appendChild(hd);
                    hiddens.push(hd);
                }
            }
        }

        function cb(){
            var r = {  // bogus response object
                responseText : '',
                responseXML : null
            };

            r.argument = o ? o.argument : null;

            try { //
                var doc;
                if(Ext.isIE){
                    doc = frame.contentWindow.document;
                }else {
                    doc = (frame.contentDocument || window.frames[id].document);
                }
                if(doc && doc.body){
                    r.responseText = doc.body.innerHTML;
                }
                if(doc && doc.XMLDocument){
                    r.responseXML = doc.XMLDocument;
                }else {
                    r.responseXML = doc;
                }
            }
            catch(e) {
                // ignore
            }

            Ext.EventManager.removeListener(frame, 'load', cb, this);

            this.fireEvent("requestcomplete", this, r, o);

            Ext.callback(o.success, o.scope, [r, o]);
            Ext.callback(o.callback, o.scope, [o, true, r]);

            setTimeout(function(){Ext.removeNode(frame);}, 100);
        }

        Ext.EventManager.on(frame, 'load', cb, this);
        form.submit();

        if(hiddens){ // remove dynamic params
            for(var i = 0, len = hiddens.length; i < len; i++){
                Ext.removeNode(hiddens[i]);
            }
        }
    }
});


Ext.Ajax = new Ext.data.Connection({
    
    
    
    
    
    

    

    
    
    
    
    
    

    
    autoAbort : false,

    
    serializeForm : function(form){
        return Ext.lib.Ajax.serializeForm(form);
    }
});

Ext.Updater = Ext.extend(Ext.util.Observable, {
    constructor: function(el, forceNew){
        el = Ext.get(el);
        if(!forceNew && el.updateManager){
            return el.updateManager;
        }
        
        this.el = el;
        
        this.defaultUrl = null;

        this.addEvents(
            
            "beforeupdate",
            
            "update",
            
            "failure"
        );
        var d = Ext.Updater.defaults;
        
        this.sslBlankUrl = d.sslBlankUrl;
        
        this.disableCaching = d.disableCaching;
        
        this.indicatorText = d.indicatorText;
        
        this.showLoadIndicator = d.showLoadIndicator;
        
        this.timeout = d.timeout;
        
        this.loadScripts = d.loadScripts;
        
        this.transaction = null;
        
        this.refreshDelegate = this.refresh.createDelegate(this);
        
        this.updateDelegate = this.update.createDelegate(this);
        
        this.formUpdateDelegate = this.formUpdate.createDelegate(this);

        if(!this.renderer){
         
        this.renderer = this.getDefaultRenderer();
        }
        Ext.Updater.superclass.constructor.call(this);
    },
    
    getDefaultRenderer: function() {
        return new Ext.Updater.BasicRenderer();
    },
    
    getEl : function(){
        return this.el;
    },

    
    update : function(url, params, callback, discardUrl){
        if(this.fireEvent("beforeupdate", this.el, url, params) !== false){
            var cfg, callerScope;
            if(typeof url == "object"){ // must be config object
                cfg = url;
                url = cfg.url;
                params = params || cfg.params;
                callback = callback || cfg.callback;
                discardUrl = discardUrl || cfg.discardUrl;
                callerScope = cfg.scope;
                if(typeof cfg.nocache != "undefined"){this.disableCaching = cfg.nocache;};
                if(typeof cfg.text != "undefined"){this.indicatorText = '<div class="loading-indicator">'+cfg.text+"</div>";};
                if(typeof cfg.scripts != "undefined"){this.loadScripts = cfg.scripts;};
                if(typeof cfg.timeout != "undefined"){this.timeout = cfg.timeout;};
            }
            this.showLoading();

            if(!discardUrl){
                this.defaultUrl = url;
            }
            if(typeof url == "function"){
                url = url.call(this);
            }

            var o = Ext.apply({}, {
                url : url,
                params: (typeof params == "function" && callerScope) ? params.createDelegate(callerScope) : params,
                success: this.processSuccess,
                failure: this.processFailure,
                scope: this,
                callback: undefined,
                timeout: (this.timeout*1000),
                disableCaching: this.disableCaching,
                argument: {
                    "options": cfg,
                    "url": url,
                    "form": null,
                    "callback": callback,
                    "scope": callerScope || window,
                    "params": params
                }
            }, cfg);

            this.transaction = Ext.Ajax.request(o);
        }
    },

    
    formUpdate : function(form, url, reset, callback){
        if(this.fireEvent("beforeupdate", this.el, form, url) !== false){
            if(typeof url == "function"){
                url = url.call(this);
            }
            form = Ext.getDom(form)
            this.transaction = Ext.Ajax.request({
                form: form,
                url:url,
                success: this.processSuccess,
                failure: this.processFailure,
                scope: this,
                timeout: (this.timeout*1000),
                argument: {
                    "url": url,
                    "form": form,
                    "callback": callback,
                    "reset": reset
                }
            });
            this.showLoading.defer(1, this);
        }
    },

    
    refresh : function(callback){
        if(this.defaultUrl == null){
            return;
        }
        this.update(this.defaultUrl, null, callback, true);
    },

    
    startAutoRefresh : function(interval, url, params, callback, refreshNow){
        if(refreshNow){
            this.update(url || this.defaultUrl, params, callback, true);
        }
        if(this.autoRefreshProcId){
            clearInterval(this.autoRefreshProcId);
        }
        this.autoRefreshProcId = setInterval(this.update.createDelegate(this, [url || this.defaultUrl, params, callback, true]), interval*1000);
    },

    
     stopAutoRefresh : function(){
        if(this.autoRefreshProcId){
            clearInterval(this.autoRefreshProcId);
            delete this.autoRefreshProcId;
        }
    },

    
    isAutoRefreshing : function(){
       return this.autoRefreshProcId ? true : false;
    },

    
    showLoading : function(){
        if(this.showLoadIndicator){
            this.el.update(this.indicatorText);
        }
    },

    // private
    processSuccess : function(response){
        this.transaction = null;
        if(response.argument.form && response.argument.reset){
            try{ // put in try/catch since some older FF releases had problems with this
                response.argument.form.reset();
            }catch(e){}
        }
        if(this.loadScripts){
            this.renderer.render(this.el, response, this,
                this.updateComplete.createDelegate(this, [response]));
        }else{
            this.renderer.render(this.el, response, this);
            this.updateComplete(response);
        }
    },

    // private
    updateComplete : function(response){
        this.fireEvent("update", this.el, response);
        if(typeof response.argument.callback == "function"){
            response.argument.callback.call(response.argument.scope, this.el, true, response, response.argument.options);
        }
    },

    // private
    processFailure : function(response){
        this.transaction = null;
        this.fireEvent("failure", this.el, response);
        if(typeof response.argument.callback == "function"){
            response.argument.callback.call(response.argument.scope, this.el, false, response, response.argument.options);
        }
    },

    
    setRenderer : function(renderer){
        this.renderer = renderer;
    },

    
    getRenderer : function(){
       return this.renderer;
    },

    
    setDefaultUrl : function(defaultUrl){
        this.defaultUrl = defaultUrl;
    },

    
    abort : function(){
        if(this.transaction){
            Ext.Ajax.abort(this.transaction);
        }
    },

    
    isUpdating : function(){
        if(this.transaction){
            return Ext.Ajax.isLoading(this.transaction);
        }
        return false;
    }
});


   Ext.Updater.defaults = {
       
         timeout : 30,
         
        loadScripts : false,
        
        sslBlankUrl : (Ext.SSL_SECURE_URL || "javascript:false"),
        
        disableCaching : false,
        
        showLoadIndicator : true,
        
        indicatorText : '<div class="loading-indicator">Loading...</div>'
   };


Ext.Updater.updateElement = function(el, url, params, options){
    var um = Ext.get(el).getUpdater();
    Ext.apply(um, options);
    um.update(url, params, options ? options.callback : null);
};

Ext.Updater.BasicRenderer = function(){};

Ext.Updater.BasicRenderer.prototype = {
    
     render : function(el, response, updateManager, callback){
        el.update(response.responseText, updateManager.loadScripts, callback);
    }
};

Ext.UpdateManager = Ext.Updater;





(function() {

// create private copy of Ext's String.format() method
// - to remove unnecessary dependency
// - to resolve namespace conflict with M$-Ajax's implementation
function xf(format) {
    var args = Array.prototype.slice.call(arguments, 1);
    return format.replace(/\{(\d+)\}/g, function(m, i) {
        return args[i];
    });
}


// private
Date.formatCodeToRegex = function(character, currentGroup) {
    // Note: currentGroup - position in regex result array (see notes for Date.parseCodes below)
    var p = Date.parseCodes[character];

    if (p) {
      p = Ext.type(p) == 'function'? p() : p;
      Date.parseCodes[character] = p; // reassign function result to prevent repeated execution
    }

    return p? Ext.applyIf({
      c: p.c? xf(p.c, currentGroup || "{0}") : p.c
    }, p) : {
        g:0,
        c:null,
        s:Ext.escapeRe(character) // treat unrecognised characters as literals
    }
}

// private shorthand for Date.formatCodeToRegex since we'll be using it fairly often
var $f = Date.formatCodeToRegex;

Ext.apply(Date, {
    // private
    parseFunctions: {count:0},
    parseRegexes: [],
    formatFunctions: {count:0},
    daysInMonth : [31,28,31,30,31,30,31,31,30,31,30,31],
    y2kYear : 50,

    
    MILLI : "ms",

    
    SECOND : "s",

    
    MINUTE : "mi",

    
    HOUR : "h",

    
    DAY : "d",

    
    MONTH : "mo",

    
    YEAR : "y",

    
    dayNames : [
        "Sunday",
        "Monday",
        "Tuesday",
        "Wednesday",
        "Thursday",
        "Friday",
        "Saturday"
    ],

    
    monthNames : [
        "January",
        "February",
        "March",
        "April",
        "May",
        "June",
        "July",
        "August",
        "September",
        "October",
        "November",
        "December"
    ],

    
    monthNumbers : {
        Jan:0,
        Feb:1,
        Mar:2,
        Apr:3,
        May:4,
        Jun:5,
        Jul:6,
        Aug:7,
        Sep:8,
        Oct:9,
        Nov:10,
        Dec:11
    },

    
    getShortMonthName : function(month) {
        return Date.monthNames[month].substring(0, 3);
    },

    
    getShortDayName : function(day) {
        return Date.dayNames[day].substring(0, 3);
    },

    
    getMonthNumber : function(name) {
        // handle camel casing for english month names (since the keys for the Date.monthNumbers hash are case sensitive)
        return Date.monthNumbers[name.substring(0, 1).toUpperCase() + name.substring(1, 3).toLowerCase()];
    },

    
    formatCodes : {
        d: "String.leftPad(this.getDate(), 2, '0')",
        D: "Date.getShortDayName(this.getDay())", // get localised short day name
        j: "this.getDate()",
        l: "Date.dayNames[this.getDay()]",
        N: "(this.getDay() ? this.getDay() : 7)",
        S: "this.getSuffix()",
        w: "this.getDay()",
        z: "this.getDayOfYear()",
        W: "String.leftPad(this.getWeekOfYear(), 2, '0')",
        F: "Date.monthNames[this.getMonth()]",
        m: "String.leftPad(this.getMonth() + 1, 2, '0')",
        M: "Date.getShortMonthName(this.getMonth())", // get localised short month name
        n: "(this.getMonth() + 1)",
        t: "this.getDaysInMonth()",
        L: "(this.isLeapYear() ? 1 : 0)",
        o: "(this.getFullYear() + (this.getWeekOfYear() == 1 && this.getMonth() > 0 ? +1 : (this.getWeekOfYear() >= 52 && this.getMonth() < 11 ? -1 : 0)))",
        Y: "this.getFullYear()",
        y: "('' + this.getFullYear()).substring(2, 4)",
        a: "(this.getHours() < 12 ? 'am' : 'pm')",
        A: "(this.getHours() < 12 ? 'AM' : 'PM')",
        g: "((this.getHours() % 12) ? this.getHours() % 12 : 12)",
        G: "this.getHours()",
        h: "String.leftPad((this.getHours() % 12) ? this.getHours() % 12 : 12, 2, '0')",
        H: "String.leftPad(this.getHours(), 2, '0')",
        i: "String.leftPad(this.getMinutes(), 2, '0')",
        s: "String.leftPad(this.getSeconds(), 2, '0')",
        u: "String.leftPad(this.getMilliseconds(), 3, '0')",
        O: "this.getGMTOffset()",
        P: "this.getGMTOffset(true)",
        T: "this.getTimezone()",
        Z: "(this.getTimezoneOffset() * -60)",
        c: function() { // ISO-8601 -- GMT format
            for (var c = "Y-m-dTH:i:sP", code = [], i = 0, l = c.length; i < l; ++i) {
                var e = c.charAt(i);
                code.push(e == "T" ? "'T'" : Date.getFormatCode(e)); // treat T as a character literal
            }
            return code.join(" + ");
        },
        
        U: "Math.round(this.getTime() / 1000)"
    },

    
    parseDate : function(input, format) {
        var p = Date.parseFunctions;
        if (p[format] == null) {
            Date.createParser(format);
        }
        var func = p[format];
        return Date[func](input);
    },

    // private
    getFormatCode : function(character) {
        var f = Date.formatCodes[character];

        if (f) {
          f = Ext.type(f) == 'function'? f() : f;
          Date.formatCodes[character] = f; // reassign function result to prevent repeated execution
        }

        // note: unknown characters are treated as literals
        return f || ("'" + String.escape(character) + "'");
    },

    // private
    createNewFormat : function(format) {
        var funcName = "format" + Date.formatFunctions.count++,
            code = "Date.prototype." + funcName + " = function(){return ",
            special = false,
            ch = '';

        Date.formatFunctions[format] = funcName;

        for (var i = 0; i < format.length; ++i) {
            ch = format.charAt(i);
            if (!special && ch == "\\") {
                special = true;
            }
            else if (special) {
                special = false;
                code += "'" + String.escape(ch) + "' + ";
            }
            else {
                code += Date.getFormatCode(ch) + " + ";
            }
        }
        eval(code.substring(0, code.length - 3) + ";}");
    },

    // private
    createParser : function() {
        var code = [
            "Date.{0} = function(input){",
                "var y, m, d, h = 0, i = 0, s = 0, ms = 0, o, z, u, v;",
                "input = String(input);",
                "d = new Date();",
                "y = d.getFullYear();",
                "m = d.getMonth();",
                "d = d.getDate();",
                "var results = input.match(Date.parseRegexes[{1}]);",
                "if(results && results.length > 0){",
                    "{2}",
                    "if(u){",
                        "v = new Date(u * 1000);", // give top priority to UNIX time
                    "}else if (y >= 0 && m >= 0 && d > 0 && h >= 0 && i >= 0 && s >= 0 && ms >= 0){",
                        "v = new Date(y, m, d, h, i, s, ms);",
                    "}else if (y >= 0 && m >= 0 && d > 0 && h >= 0 && i >= 0 && s >= 0){",
                        "v = new Date(y, m, d, h, i, s);",
                    "}else if (y >= 0 && m >= 0 && d > 0 && h >= 0 && i >= 0){",
                        "v = new Date(y, m, d, h, i);",
                    "}else if (y >= 0 && m >= 0 && d > 0 && h >= 0){",
                        "v = new Date(y, m, d, h);",
                    "}else if (y >= 0 && m >= 0 && d > 0){",
                        "v = new Date(y, m, d);",
                    "}else if (y >= 0 && m >= 0){",
                        "v = new Date(y, m);",
                    "}else if (y >= 0){",
                        "v = new Date(y);",
                    "}",
                "}",
                "return (v && (z != null || o != null))?" // favour UTC offset over GMT offset
                    + " (Ext.type(z) == 'number' ? v.add(Date.SECOND, -v.getTimezoneOffset() * 60 - z) :" // reset to UTC, then add offset
                    + " v.add(Date.MINUTE, -v.getTimezoneOffset() + (sn == '+'? -1 : 1) * (hr * 60 + mn))) : v;", // reset to GMT, then add offset
            "}"
        ].join('\n');

        return function(format) {
            var funcName = "parse" + Date.parseFunctions.count++,
                regexNum = Date.parseRegexes.length,
                currentGroup = 1,
                calc = "",
                regex = "",
                special = false,
                ch = "";

            Date.parseFunctions[format] = funcName;

            for (var i = 0; i < format.length; ++i) {
                ch = format.charAt(i);
                if (!special && ch == "\\") {
                    special = true;
                }
                else if (special) {
                    special = false;
                    regex += String.escape(ch);
                }
                else {
                    var obj = $f(ch, currentGroup);
                    currentGroup += obj.g;
                    regex += obj.s;
                    if (obj.g && obj.c) {
                        calc += obj.c;
                    }
                }
            }

            Date.parseRegexes[regexNum] = new RegExp("^" + regex + "$", "i");
            eval(xf(code, funcName, regexNum, calc));
        }
    }(),

    // private
    parseCodes : {
        
        d: {
            g:1,
            c:"d = parseInt(results[{0}], 10);\n",
            s:"(\\d{2})" // day of month with leading zeroes (01 - 31)
        },
        j: {
            g:1,
            c:"d = parseInt(results[{0}], 10);\n",
            s:"(\\d{1,2})" // day of month without leading zeroes (1 - 31)
        },
        D: function() {
            for (var a = [], i = 0; i < 7; a.push(Date.getShortDayName(i)), ++i); // get localised short day names
            return {
                g:0,
                c:null,
                s:"(?:" + a.join("|") +")"
            }
        },
        l: function() {
            return {
                g:0,
                c:null,
                s:"(?:" + Date.dayNames.join("|") + ")"
            }
        },
        N: {
            g:0,
            c:null,
            s:"[1-7]" // ISO-8601 day number (1 (monday) - 7 (sunday))
        },
        S: {
            g:0,
            c:null,
            s:"(?:st|nd|rd|th)"
        },
        w: {
            g:0,
            c:null,
            s:"[0-6]" // javascript day number (0 (sunday) - 6 (saturday))
        },
        z: {
            g:0,
            c:null,
            s:"(?:\\d{1,3})" // day of the year (0 - 364 (365 in leap years))
        },
        W: {
            g:0,
            c:null,
            s:"(?:\\d{2})" // ISO-8601 week number (with leading zero)
        },
        F: function() {
            return {
                g:1,
                c:"m = parseInt(Date.getMonthNumber(results[{0}]), 10);\n", // get localised month number
                s:"(" + Date.monthNames.join("|") + ")"
            }
        },
        M: function() {
            for (var a = [], i = 0; i < 12; a.push(Date.getShortMonthName(i)), ++i); // get localised short month names
            return Ext.applyIf({
                s:"(" + a.join("|") + ")"
            }, $f("F"));
        },
        m: {
            g:1,
            c:"m = parseInt(results[{0}], 10) - 1;\n",
            s:"(\\d{2})" // month number with leading zeros (01 - 12)
        },
        n: {
            g:1,
            c:"m = parseInt(results[{0}], 10) - 1;\n",
            s:"(\\d{1,2})" // month number without leading zeros (1 - 12)
        },
        t: {
            g:0,
            c:null,
            s:"(?:\\d{2})" // no. of days in the month (28 - 31)
        },
        L: {
            g:0,
            c:null,
            s:"(?:1|0)"
        },
        o: function() {
            return $f("Y");
        },
        Y: {
            g:1,
            c:"y = parseInt(results[{0}], 10);\n",
            s:"(\\d{4})" // 4-digit year
        },
        y: {
            g:1,
            c:"var ty = parseInt(results[{0}], 10);\n"
                + "y = ty > Date.y2kYear ? 1900 + ty : 2000 + ty;\n", // 2-digit year
            s:"(\\d{1,2})"
        },
        a: {
            g:1,
            c:"if (results[{0}] == 'am') {\n"
                + "if (h == 12) { h = 0; }\n"
                + "} else { if (h < 12) { h += 12; }}",
            s:"(am|pm)"
        },
        A: {
            g:1,
            c:"if (results[{0}] == 'AM') {\n"
                + "if (h == 12) { h = 0; }\n"
                + "} else { if (h < 12) { h += 12; }}",
            s:"(AM|PM)"
        },
        g: function() {
            return $f("G");
        },
        G: {
            g:1,
            c:"h = parseInt(results[{0}], 10);\n",
            s:"(\\d{1,2})" // 24-hr format of an hour without leading zeroes (0 - 23)
        },
        h: function() {
            return $f("H");
        },
        H: {
            g:1,
            c:"h = parseInt(results[{0}], 10);\n",
            s:"(\\d{2})" //  24-hr format of an hour with leading zeroes (00 - 23)
        },
        i: {
            g:1,
            c:"i = parseInt(results[{0}], 10);\n",
            s:"(\\d{2})" // minutes with leading zeros (00 - 59)
        },
        s: {
            g:1,
            c:"s = parseInt(results[{0}], 10);\n",
            s:"(\\d{2})" // seconds with leading zeros (00 - 59)
        },
        u: {
            g:1,
            c:"ms = results[{0}]; ms = parseInt(ms, 10)/Math.pow(10, ms.length - 3);\n",
            s:"(\\d+)" // decimal fraction of a second (minimum = 1 digit, maximum = unlimited)
        },
        O: {
            g:1,
            c:[
                "o = results[{0}];",
                "var sn = o.substring(0,1);", // get + / - sign
                "var hr = o.substring(1,3)*1 + Math.floor(o.substring(3,5) / 60);", // get hours (performs minutes-to-hour conversion also, just in case)
                "var mn = o.substring(3,5) % 60;", // get minutes
                "o = ((-12 <= (hr*60 + mn)/60) && ((hr*60 + mn)/60 <= 14))? (sn + String.leftPad(hr, 2, '0') + String.leftPad(mn, 2, '0')) : null;\n" // -12hrs <= GMT offset <= 14hrs
            ].join("\n"),
            s: "([+\-]\\d{4})" // GMT offset in hrs and mins
        },
        P: {
            g:1,
            c:[
                "o = results[{0}];",
                "var sn = o.substring(0,1);", // get + / - sign
                "var hr = o.substring(1,3)*1 + Math.floor(o.substring(4,6) / 60);", // get hours (performs minutes-to-hour conversion also, just in case)
                "var mn = o.substring(4,6) % 60;", // get minutes
                "o = ((-12 <= (hr*60 + mn)/60) && ((hr*60 + mn)/60 <= 14))? (sn + String.leftPad(hr, 2, '0') + String.leftPad(mn, 2, '0')) : null;\n" // -12hrs <= GMT offset <= 14hrs
            ].join("\n"),
            s: "([+\-]\\d{2}:\\d{2})" // GMT offset in hrs and mins (with colon separator)
        },
        T: {
            g:0,
            c:null,
            s:"[A-Z]{1,4}" // timezone abbrev. may be between 1 - 4 chars
        },
        Z: {
            g:1,
            c:"z = results[{0}] * 1;\n" // -43200 <= UTC offset <= 50400
                  + "z = (-43200 <= z && z <= 50400)? z : null;\n",
            s:"([+\-]?\\d{1,5})" // leading '+' sign is optional for UTC offset
        },
        c: function() {
            var calc = [],
                arr = [
                    $f("Y", 1), // year
                    $f("m", 2), // month
                    $f("d", 3), // day
                    $f("h", 4), // hour
                    $f("i", 5), // minute
                    $f("s", 6), // second
                    {c:"ms = (results[7] || '.0').substring(1); ms = parseInt(ms, 10)/Math.pow(10, ms.length - 3);\n"}, // decimal fraction of a second (minimum = 1 digit, maximum = unlimited)
                    {c:[ // allow both "Z" (i.e. UTC) and "+08:00" (i.e. UTC offset) time zone delimiters
                        "if(results[9] == 'Z'){",
                            "z = 0;",
                        "}else{",
                            $f("P", 9).c,
                        "}"
                    ].join('\n')}
                ];

            for (var i = 0, l = arr.length; i < l; ++i) {
                calc.push(arr[i].c);
            }

            return {
                g:1,
                c:calc.join(""),
                s:arr[0].s + "-" + arr[1].s + "-" + arr[2].s + "T" + arr[3].s + ":" + arr[4].s + ":" + arr[5].s
                      + "((\.|,)\\d+)?" // decimal fraction of a second (e.g. ",998465" or ".998465")
                      + "(Z|([+\-]\\d{2}:\\d{2}))" // "Z" (UTC) or "+08:00" (UTC offset)
            }
        },
        U: {
            g:1,
            c:"u = parseInt(results[{0}], 10);\n",
            s:"(-?\\d+)" // leading minus sign indicates seconds before UNIX epoch
        }
    }
});

}());

Ext.apply(Date.prototype, {
    // private
    dateFormat : function(format) {
        if (Date.formatFunctions[format] == null) {
            Date.createNewFormat(format);
        }
        var func = Date.formatFunctions[format];
        return this[func]();
    },

    
    getTimezone : function() {
        // the following list shows the differences between date strings from different browsers on a WinXP SP2 machine from an Asian locale:
        //
        // Opera  : "Thu, 25 Oct 2007 22:53:45 GMT+0800" -- shortest (weirdest) date string of the lot
        // Safari : "Thu Oct 25 2007 22:55:35 GMT+0800 (Malay Peninsula Standard Time)" -- value in parentheses always gives the correct timezone (same as FF)
        // FF     : "Thu Oct 25 2007 22:55:35 GMT+0800 (Malay Peninsula Standard Time)" -- value in parentheses always gives the correct timezone
        // IE     : "Thu Oct 25 22:54:35 UTC+0800 2007" -- (Asian system setting) look for 3-4 letter timezone abbrev
        // IE     : "Thu Oct 25 17:06:37 PDT 2007" -- (American system setting) look for 3-4 letter timezone abbrev
        //
        // this crazy regex attempts to guess the correct timezone abbreviation despite these differences.
        // step 1: (?:\((.*)\) -- find timezone in parentheses
        // step 2: ([A-Z]{1,4})(?:[\-+][0-9]{4})?(?: -?\d+)?) -- if nothing was found in step 1, find timezone from timezone offset portion of date string
        // step 3: remove all non uppercase characters found in step 1 and 2
        return this.toString().replace(/^.* (?:\((.*)\)|([A-Z]{1,4})(?:[\-+][0-9]{4})?(?: -?\d+)?)$/, "$1$2").replace(/[^A-Z]/g, "");
    },

    
    getGMTOffset : function(colon) {
        return (this.getTimezoneOffset() > 0 ? "-" : "+")
            + String.leftPad(Math.floor(Math.abs(this.getTimezoneOffset()) / 60), 2, "0")
            + (colon ? ":" : "")
            + String.leftPad(Math.abs(this.getTimezoneOffset() % 60), 2, "0");
    },

    
    getDayOfYear : function() {
        var num = 0;
        Date.daysInMonth[1] = this.isLeapYear() ? 29 : 28;
        for (var i = 0; i < this.getMonth(); ++i) {
            num += Date.daysInMonth[i];
        }
        return num + this.getDate() - 1;
    },

    
    getWeekOfYear : function() {
        // adapted from http://www.merlyn.demon.co.uk/weekcalc.htm
        var ms1d = 864e5, // milliseconds in a day
            ms7d = 7 * ms1d; // milliseconds in a week

        return function() { // return a closure so constants get calculated only once
            var DC3 = Date.UTC(this.getFullYear(), this.getMonth(), this.getDate() + 3) / ms1d, // an Absolute Day Number
                AWN = Math.floor(DC3 / 7), // an Absolute Week Number
                Wyr = new Date(AWN * ms7d).getUTCFullYear();

            return AWN - Math.floor(Date.UTC(Wyr, 0, 7) / ms7d) + 1;
        }
    }(),

    
    isLeapYear : function() {
        var year = this.getFullYear();
        return !!((year & 3) == 0 && (year % 100 || (year % 400 == 0 && year)));
    },

    
    getFirstDayOfMonth : function() {
        var day = (this.getDay() - (this.getDate() - 1)) % 7;
        return (day < 0) ? (day + 7) : day;
    },

    
    getLastDayOfMonth : function() {
        var day = (this.getDay() + (Date.daysInMonth[this.getMonth()] - this.getDate())) % 7;
        return (day < 0) ? (day + 7) : day;
    },


    
    getFirstDateOfMonth : function() {
        return new Date(this.getFullYear(), this.getMonth(), 1);
    },

    
    getLastDateOfMonth : function() {
        return new Date(this.getFullYear(), this.getMonth(), this.getDaysInMonth());
    },

    
    getDaysInMonth : function() {
        Date.daysInMonth[1] = this.isLeapYear() ? 29 : 28;
        return Date.daysInMonth[this.getMonth()];
    },

    
    getSuffix : function() {
        switch (this.getDate()) {
            case 1:
            case 21:
            case 31:
                return "st";
            case 2:
            case 22:
                return "nd";
            case 3:
            case 23:
                return "rd";
            default:
                return "th";
        }
    },

    
    clone : function() {
        return new Date(this.getTime());
    },

    
    clearTime : function(clone){
        if(clone){
            return this.clone().clearTime();
        }
        this.setHours(0);
        this.setMinutes(0);
        this.setSeconds(0);
        this.setMilliseconds(0);
        return this;
    },

    
    add : function(interval, value){
        var d = this.clone();
        if (!interval || value === 0) return d;

        switch(interval.toLowerCase()){
            case Date.MILLI:
                d.setMilliseconds(this.getMilliseconds() + value);
                break;
            case Date.SECOND:
                d.setSeconds(this.getSeconds() + value);
                break;
            case Date.MINUTE:
                d.setMinutes(this.getMinutes() + value);
                break;
            case Date.HOUR:
                d.setHours(this.getHours() + value);
                break;
            case Date.DAY:
                d.setDate(this.getDate() + value);
                break;
            case Date.MONTH:
                var day = this.getDate();
                if(day > 28){
                    day = Math.min(day, this.getFirstDateOfMonth().add('mo', value).getLastDateOfMonth().getDate());
                }
                d.setDate(day);
                d.setMonth(this.getMonth() + value);
                break;
            case Date.YEAR:
                d.setFullYear(this.getFullYear() + value);
                break;
        }
        return d;
    },

    
    between : function(start, end){
        var t = this.getTime();
        return start.getTime() <= t && t <= end.getTime();
    }
});



Date.prototype.format = Date.prototype.dateFormat;


// private
// safari setMonth is broken
if(Ext.isSafari){
    Date.brokenSetMonth = Date.prototype.setMonth;
    Date.prototype.setMonth = function(num){
        if(num <= -1){
            var n = Math.ceil(-num);
            var back_year = Math.ceil(n/12);
            var month = (n % 12) ? 12 - n % 12 : 0 ;
            this.setFullYear(this.getFullYear() - back_year);
            return Date.brokenSetMonth.call(this, month);
        } else {
            return Date.brokenSetMonth.apply(this, arguments);
        }
    };
}

Ext.util.DelayedTask = function(fn, scope, args){
    var id = null, d, t;

    var call = function(){
        var now = new Date().getTime();
        if(now - t >= d){
            clearInterval(id);
            id = null;
            fn.apply(scope, args || []);
        }
    };
    
    this.delay = function(delay, newFn, newScope, newArgs){
        if(id && delay != d){
            this.cancel();
        }
        d = delay;
        t = new Date().getTime();
        fn = newFn || fn;
        scope = newScope || scope;
        args = newArgs || args;
        if(!id){
            id = setInterval(call, d);
        }
    };

    
    this.cancel = function(){
        if(id){
            clearInterval(id);
            id = null;
        }
    };
};

Ext.util.TaskRunner = function(interval){
    interval = interval || 10;
    var tasks = [], removeQueue = [];
    var id = 0;
    var running = false;

    // private
    var stopThread = function(){
        running = false;
        clearInterval(id);
        id = 0;
    };

    // private
    var startThread = function(){
        if(!running){
            running = true;
            id = setInterval(runTasks, interval);
        }
    };

    // private
    var removeTask = function(t){
        removeQueue.push(t);
        if(t.onStop){
            t.onStop.apply(t.scope || t);
        }
    };

    // private
    var runTasks = function(){
        if(removeQueue.length > 0){
            for(var i = 0, len = removeQueue.length; i < len; i++){
                tasks.remove(removeQueue[i]);
            }
            removeQueue = [];
            if(tasks.length < 1){
                stopThread();
                return;
            }
        }
        var now = new Date().getTime();
        for(var i = 0, len = tasks.length; i < len; ++i){
            var t = tasks[i];
            var itime = now - t.taskRunTime;
            if(t.interval <= itime){
                var rt = t.run.apply(t.scope || t, t.args || [++t.taskRunCount]);
                t.taskRunTime = now;
                if(rt === false || t.taskRunCount === t.repeat){
                    removeTask(t);
                    return;
                }
            }
            if(t.duration && t.duration <= (now - t.taskStartTime)){
                removeTask(t);
            }
        }
    };

    
    this.start = function(task){
        tasks.push(task);
        task.taskStartTime = new Date().getTime();
        task.taskRunTime = 0;
        task.taskRunCount = 0;
        startThread();
        return task;
    };

    
    this.stop = function(task){
        removeTask(task);
        return task;
    };

    
    this.stopAll = function(){
        stopThread();
        for(var i = 0, len = tasks.length; i < len; i++){
            if(tasks[i].onStop){
                tasks[i].onStop();
            }
        }
        tasks = [];
        removeQueue = [];
    };
};


Ext.TaskMgr = new Ext.util.TaskRunner();

Ext.util.MixedCollection = function(allowFunctions, keyFn){
    this.items = [];
    this.map = {};
    this.keys = [];
    this.length = 0;
    this.addEvents(
        
        "clear",
        
        "add",
        
        "replace",
        
        "remove",
        "sort"
    );
    this.allowFunctions = allowFunctions === true;
    if(keyFn){
        this.getKey = keyFn;
    }
    Ext.util.MixedCollection.superclass.constructor.call(this);
};

Ext.extend(Ext.util.MixedCollection, Ext.util.Observable, {
    allowFunctions : false,


    add : function(key, o){
        if(arguments.length == 1){
            o = arguments[0];
            key = this.getKey(o);
        }
        if(typeof key == "undefined" || key === null){
            this.length++;
            this.items.push(o);
            this.keys.push(null);
        }else{
            var old = this.map[key];
            if(old){
                return this.replace(key, o);
            }
            this.length++;
            this.items.push(o);
            this.map[key] = o;
            this.keys.push(key);
        }
        this.fireEvent("add", this.length-1, o, key);
        return o;
    },


    getKey : function(o){
         return o.id;
    },


    replace : function(key, o){
        if(arguments.length == 1){
            o = arguments[0];
            key = this.getKey(o);
        }
        var old = this.item(key);
        if(typeof key == "undefined" || key === null || typeof old == "undefined"){
             return this.add(key, o);
        }
        var index = this.indexOfKey(key);
        this.items[index] = o;
        this.map[key] = o;
        this.fireEvent("replace", key, old, o);
        return o;
    },


    addAll : function(objs){
        if(arguments.length > 1 || Ext.isArray(objs)){
            var args = arguments.length > 1 ? arguments : objs;
            for(var i = 0, len = args.length; i < len; i++){
                this.add(args[i]);
            }
        }else{
            for(var key in objs){
                if(this.allowFunctions || typeof objs[key] != "function"){
                    this.add(key, objs[key]);
                }
            }
        }
    },


    each : function(fn, scope){
        var items = [].concat(this.items); // each safe for removal
        for(var i = 0, len = items.length; i < len; i++){
            if(fn.call(scope || items[i], items[i], i, len) === false){
                break;
            }
        }
    },


    eachKey : function(fn, scope){
        for(var i = 0, len = this.keys.length; i < len; i++){
            fn.call(scope || window, this.keys[i], this.items[i], i, len);
        }
    },

    
    find : function(fn, scope){
        for(var i = 0, len = this.items.length; i < len; i++){
            if(fn.call(scope || window, this.items[i], this.keys[i])){
                return this.items[i];
            }
        }
        return null;
    },


    insert : function(index, key, o){
        if(arguments.length == 2){
            o = arguments[1];
            key = this.getKey(o);
        }
        if(index >= this.length){
            return this.add(key, o);
        }
        this.length++;
        this.items.splice(index, 0, o);
        if(typeof key != "undefined" && key != null){
            this.map[key] = o;
        }
        this.keys.splice(index, 0, key);
        this.fireEvent("add", index, o, key);
        return o;
    },


    remove : function(o){
        return this.removeAt(this.indexOf(o));
    },


    removeAt : function(index){
        if(index < this.length && index >= 0){
            this.length--;
            var o = this.items[index];
            this.items.splice(index, 1);
            var key = this.keys[index];
            if(typeof key != "undefined"){
                delete this.map[key];
            }
            this.keys.splice(index, 1);
            this.fireEvent("remove", o, key);
            return o;
        }
        return false;
    },


    removeKey : function(key){
        return this.removeAt(this.indexOfKey(key));
    },


    getCount : function(){
        return this.length;
    },


    indexOf : function(o){
        return this.items.indexOf(o);
    },


    indexOfKey : function(key){
        return this.keys.indexOf(key);
    },


    item : function(key){
        var item = typeof this.map[key] != "undefined" ? this.map[key] : this.items[key];
        return typeof item != 'function' || this.allowFunctions ? item : null; // for prototype!
    },


    itemAt : function(index){
        return this.items[index];
    },


    key : function(key){
        return this.map[key];
    },


    contains : function(o){
        return this.indexOf(o) != -1;
    },


    containsKey : function(key){
        return typeof this.map[key] != "undefined";
    },


    clear : function(){
        this.length = 0;
        this.items = [];
        this.keys = [];
        this.map = {};
        this.fireEvent("clear");
    },


    first : function(){
        return this.items[0];
    },


    last : function(){
        return this.items[this.length-1];
    },

    // private
    _sort : function(property, dir, fn){
        var dsc = String(dir).toUpperCase() == "DESC" ? -1 : 1;
        fn = fn || function(a, b){
            return a-b;
        };
        var c = [], k = this.keys, items = this.items;
        for(var i = 0, len = items.length; i < len; i++){
            c[c.length] = {key: k[i], value: items[i], index: i};
        }
        c.sort(function(a, b){
            var v = fn(a[property], b[property]) * dsc;
            if(v == 0){
                v = (a.index < b.index ? -1 : 1);
            }
            return v;
        });
        for(var i = 0, len = c.length; i < len; i++){
            items[i] = c[i].value;
            k[i] = c[i].key;
        }
        this.fireEvent("sort", this);
    },

    
    sort : function(dir, fn){
        this._sort("value", dir, fn);
    },

    
    keySort : function(dir, fn){
        this._sort("key", dir, fn || function(a, b){
            var v1 = String(a).toUpperCase(), v2 = String(b).toUpperCase();
            return v1 > v2 ? 1 : (v1 < v2 ? -1 : 0);
        });
    },

    
    getRange : function(start, end){
        var items = this.items;
        if(items.length < 1){
            return [];
        }
        start = start || 0;
        end = Math.min(typeof end == "undefined" ? this.length-1 : end, this.length-1);
        var r = [];
        if(start <= end){
            for(var i = start; i <= end; i++) {
        	    r[r.length] = items[i];
            }
        }else{
            for(var i = start; i >= end; i--) {
        	    r[r.length] = items[i];
            }
        }
        return r;
    },

    
    filter : function(property, value, anyMatch, caseSensitive){
        if(Ext.isEmpty(value, false)){
            return this.clone();
        }
        value = this.createValueMatcher(value, anyMatch, caseSensitive);
        return this.filterBy(function(o){
            return o && value.test(o[property]);
        });
	},

    
    filterBy : function(fn, scope){
        var r = new Ext.util.MixedCollection();
        r.getKey = this.getKey;
        var k = this.keys, it = this.items;
        for(var i = 0, len = it.length; i < len; i++){
            if(fn.call(scope||this, it[i], k[i])){
				r.add(k[i], it[i]);
			}
        }
        return r;
    },

    
    findIndex : function(property, value, start, anyMatch, caseSensitive){
        if(Ext.isEmpty(value, false)){
            return -1;
        }
        value = this.createValueMatcher(value, anyMatch, caseSensitive);
        return this.findIndexBy(function(o){
            return o && value.test(o[property]);
        }, null, start);
	},

    
    findIndexBy : function(fn, scope, start){
        var k = this.keys, it = this.items;
        for(var i = (start||0), len = it.length; i < len; i++){
            if(fn.call(scope||this, it[i], k[i])){
				return i;
            }
        }
        if(typeof start == 'number' && start > 0){
            for(var i = 0; i < start; i++){
                if(fn.call(scope||this, it[i], k[i])){
                    return i;
                }
            }
        }
        return -1;
    },

    // private
    createValueMatcher : function(value, anyMatch, caseSensitive){
        if(!value.exec){ // not a regex
            value = String(value);
            value = new RegExp((anyMatch === true ? '' : '^') + Ext.escapeRe(value), caseSensitive ? '' : 'i');
        }
        return value;
    },

    
    clone : function(){
        var r = new Ext.util.MixedCollection();
        var k = this.keys, it = this.items;
        for(var i = 0, len = it.length; i < len; i++){
            r.add(k[i], it[i]);
        }
        r.getKey = this.getKey;
        return r;
    }
});

Ext.util.MixedCollection.prototype.get = Ext.util.MixedCollection.prototype.item;

Ext.util.JSON = new (function(){
    var useHasOwn = !!{}.hasOwnProperty;

    // crashes Safari in some instances
    //var validRE = /^("(\\.|[^"\\\n\r])*?"|[,:{}\[\]0-9.\-+Eaeflnr-u \n\r\t])+?$/;

    var pad = function(n) {
        return n < 10 ? "0" + n : n;
    };

    var m = {
        "\b": '\\b',
        "\t": '\\t',
        "\n": '\\n',
        "\f": '\\f',
        "\r": '\\r',
        '"' : '\\"',
        "\\": '\\\\'
    };

    var encodeString = function(s){
        if (/["\\\x00-\x1f]/.test(s)) {
            return '"' + s.replace(/([\x00-\x1f\\"])/g, function(a, b) {
                var c = m[b];
                if(c){
                    return c;
                }
                c = b.charCodeAt();
                return "\\u00" +
                    Math.floor(c / 16).toString(16) +
                    (c % 16).toString(16);
            }) + '"';
        }
        return '"' + s + '"';
    };

    var encodeArray = function(o){
        var a = ["["], b, i, l = o.length, v;
            for (i = 0; i < l; i += 1) {
                v = o[i];
                switch (typeof v) {
                    case "undefined":
                    case "function":
                    case "unknown":
                        break;
                    default:
                        if (b) {
                            a.push(',');
                        }
                        a.push(v === null ? "null" : Ext.util.JSON.encode(v));
                        b = true;
                }
            }
            a.push("]");
            return a.join("");
    };

    this.encodeDate = function(o){
        return '"' + o.getFullYear() + "-" +
                pad(o.getMonth() + 1) + "-" +
                pad(o.getDate()) + "T" +
                pad(o.getHours()) + ":" +
                pad(o.getMinutes()) + ":" +
                pad(o.getSeconds()) + '"';
    };

    
    this.encode = function(o){
        if(typeof o == "undefined" || o === null){
            return "null";
        }else if(Ext.isArray(o)){
            return encodeArray(o);
        }else if(Ext.isDate(o)){
            return Ext.util.JSON.encodeDate(o);
        }else if(typeof o == "string"){
            return encodeString(o);
        }else if(typeof o == "number"){
            return isFinite(o) ? String(o) : "null";
        }else if(typeof o == "boolean"){
            return String(o);
        }else {
            var a = ["{"], b, i, v;
            for (i in o) {
                if(!useHasOwn || o.hasOwnProperty(i)) {
                    v = o[i];
                    switch (typeof v) {
                    case "undefined":
                    case "function":
                    case "unknown":
                        break;
                    default:
                        if(b){
                            a.push(',');
                        }
                        a.push(this.encode(i), ":",
                                v === null ? "null" : this.encode(v));
                        b = true;
                    }
                }
            }
            a.push("}");
            return a.join("");
        }
    };

    
    this.decode = function(json){
        return eval("(" + json + ')');
    };
})();

Ext.encode = Ext.util.JSON.encode;

Ext.decode = Ext.util.JSON.decode;


Ext.util.Format = function(){
    var trimRe = /^\s+|\s+$/g;
    return {
        
        ellipsis : function(value, len){
            if(value && value.length > len){
                return value.substr(0, len-3)+"...";
            }
            return value;
        },

        
        undef : function(value){
            return value !== undefined ? value : "";
        },

        
        defaultValue : function(value, defaultValue){
            return value !== undefined && value !== '' ? value : defaultValue;
        },

        
        htmlEncode : function(value){
            return !value ? value : String(value).replace(/&/g, "&amp;").replace(/>/g, "&gt;").replace(/</g, "&lt;").replace(/"/g, "&quot;");
        },

        
        htmlDecode : function(value){
            return !value ? value : String(value).replace(/&gt;/g, ">").replace(/&lt;/g, "<").replace(/&quot;/g, '"').replace(/&amp;/g, "&");
        },

        
        trim : function(value){
            return String(value).replace(trimRe, "");
        },

        
        substr : function(value, start, length){
            return String(value).substr(start, length);
        },

        
        lowercase : function(value){
            return String(value).toLowerCase();
        },

        
        uppercase : function(value){
            return String(value).toUpperCase();
        },

        
        capitalize : function(value){
            return !value ? value : value.charAt(0).toUpperCase() + value.substr(1).toLowerCase();
        },

        // private
        call : function(value, fn){
            if(arguments.length > 2){
                var args = Array.prototype.slice.call(arguments, 2);
                args.unshift(value);
                return eval(fn).apply(window, args);
            }else{
                return eval(fn).call(window, value);
            }
        },

        
        usMoney : function(v){
            v = (Math.round((v-0)*100))/100;
            v = (v == Math.floor(v)) ? v + ".00" : ((v*10 == Math.floor(v*10)) ? v + "0" : v);
            v = String(v);
            var ps = v.split('.');
            var whole = ps[0];
            var sub = ps[1] ? '.'+ ps[1] : '.00';
            var r = /(\d+)(\d{3})/;
            while (r.test(whole)) {
                whole = whole.replace(r, '$1' + ',' + '$2');
            }
            v = whole + sub;
            if(v.charAt(0) == '-'){
                return '-$' + v.substr(1);
            }
            return "$" +  v;
        },

        
        date : function(v, format){
            if(!v){
                return "";
            }
            if(!Ext.isDate(v)){
                v = new Date(Date.parse(v));
            }
            return v.dateFormat(format || "m/d/Y");
        },

        
        dateRenderer : function(format){
            return function(v){
                return Ext.util.Format.date(v, format);
            };
        },

        // private
        stripTagsRE : /<\/?[^>]+>/gi,
        
        
        stripTags : function(v){
            return !v ? v : String(v).replace(this.stripTagsRE, "");
        },

        // private
        stripScriptsRe : /(?:<script.*?>)((\n|\r|.)*?)(?:<\/script>)/ig,

        
        stripScripts : function(v){
            return !v ? v : String(v).replace(this.stripScriptsRe, "");
        },

        
        fileSize : function(size){
            if(size < 1024) {
                return size + " bytes";
            } else if(size < 1048576) {
                return (Math.round(((size*10) / 1024))/10) + " KB";
            } else {
                return (Math.round(((size*10) / 1048576))/10) + " MB";
            }
        },

        math : function(){
            var fns = {};
            return function(v, a){
                if(!fns[a]){
                    fns[a] = new Function('v', 'return v ' + a + ';');
                }
                return fns[a](v);
            }
        }(),

		
        nl2br : function(v){
            return v === undefined || v === null ? '' : v.replace(/\n/g, '<br/>');
        }
    };
}();

Ext.XTemplate = function(){
    Ext.XTemplate.superclass.constructor.apply(this, arguments);
    var s = this.html;

    s = ['<tpl>', s, '</tpl>'].join('');

    var re = /<tpl\b[^>]*>((?:(?=([^<]+))\2|<(?!tpl\b[^>]*>))*?)<\/tpl>/;

    var nameRe = /^<tpl\b[^>]*?for="(.*?)"/;
    var ifRe = /^<tpl\b[^>]*?if="(.*?)"/;
    var execRe = /^<tpl\b[^>]*?exec="(.*?)"/;
    var m, id = 0;
    var tpls = [];

    while(m = s.match(re)){
       var m2 = m[0].match(nameRe);
       var m3 = m[0].match(ifRe);
       var m4 = m[0].match(execRe);
       var exp = null, fn = null, exec = null;
       var name = m2 && m2[1] ? m2[1] : '';
       if(m3){
           exp = m3 && m3[1] ? m3[1] : null;
           if(exp){
               fn = new Function('values', 'parent', 'xindex', 'xcount', 'with(values){ return '+(Ext.util.Format.htmlDecode(exp))+'; }');
           }
       }
       if(m4){
           exp = m4 && m4[1] ? m4[1] : null;
           if(exp){
               exec = new Function('values', 'parent', 'xindex', 'xcount', 'with(values){ '+(Ext.util.Format.htmlDecode(exp))+'; }');
           }
       }
       if(name){
           switch(name){
               case '.': name = new Function('values', 'parent', 'with(values){ return values; }'); break;
               case '..': name = new Function('values', 'parent', 'with(values){ return parent; }'); break;
               default: name = new Function('values', 'parent', 'with(values){ return '+name+'; }');
           }
       }
       tpls.push({
            id: id,
            target: name,
            exec: exec,
            test: fn,
            body: m[1]||''
        });
       s = s.replace(m[0], '{xtpl'+ id + '}');
       ++id;
    }
    for(var i = tpls.length-1; i >= 0; --i){
        this.compileTpl(tpls[i]);
    }
    this.master = tpls[tpls.length-1];
    this.tpls = tpls;
};
Ext.extend(Ext.XTemplate, Ext.Template, {
    // private
    re : /\{([\w-\.\#]+)(?:\:([\w\.]*)(?:\((.*?)?\))?)?(\s?[\+\-\*\\]\s?[\d\.\+\-\*\\\(\)]+)?\}/g,
    // private
    codeRe : /\{\[((?:\\\]|.|\n)*?)\]\}/g,

    // private
    applySubTemplate : function(id, values, parent, xindex, xcount){
        var t = this.tpls[id];
        if(t.test && !t.test.call(this, values, parent, xindex, xcount)){
            return '';
        }
        if(t.exec && t.exec.call(this, values, parent, xindex, xcount)){
            return '';
        }
        var vs = t.target ? t.target.call(this, values, parent) : values;
        parent = t.target ? values : parent;
        if(t.target && Ext.isArray(vs)){
            var buf = [];
            for(var i = 0, len = vs.length; i < len; i++){
                buf[buf.length] = t.compiled.call(this, vs[i], parent, i+1, len);
            }
            return buf.join('');
        }
        return t.compiled.call(this, vs, parent, xindex, xcount);
    },

    // private
    compileTpl : function(tpl){
        var fm = Ext.util.Format;
        var useF = this.disableFormats !== true;
        var sep = Ext.isGecko ? "+" : ",";
        var fn = function(m, name, format, args, math){
            if(name.substr(0, 4) == 'xtpl'){
                return "'"+ sep +'this.applySubTemplate('+name.substr(4)+', values, parent, xindex, xcount)'+sep+"'";
            }
            var v;
            if(name === '.'){
                v = 'values';
            }else if(name === '#'){
                v = 'xindex';
            }else if(name.indexOf('.') != -1){
                v = name;
            }else{
                v = "values['" + name + "']";
            }
            if(math){
                v = '(' + v + math + ')';
            }
            if(format && useF){
                args = args ? ',' + args : "";
                if(format.substr(0, 5) != "this."){
                    format = "fm." + format + '(';
                }else{
                    format = 'this.call("'+ format.substr(5) + '", ';
                    args = ", values";
                }
            }else{
                args= ''; format = "("+v+" === undefined ? '' : ";
            }
            return "'"+ sep + format + v + args + ")"+sep+"'";
        };
        var codeFn = function(m, code){
            return "'"+ sep +'('+code+')'+sep+"'";
        };

        var body;
        // branched to use + in gecko and [].join() in others
        if(Ext.isGecko){
            body = "tpl.compiled = function(values, parent, xindex, xcount){ return '" +
                   tpl.body.replace(/(\r\n|\n)/g, '\\n').replace(/'/g, "\\'").replace(this.re, fn).replace(this.codeRe, codeFn) +
                    "';};";
        }else{
            body = ["tpl.compiled = function(values, parent, xindex, xcount){ return ['"];
            body.push(tpl.body.replace(/(\r\n|\n)/g, '\\n').replace(/'/g, "\\'").replace(this.re, fn).replace(this.codeRe, codeFn));
            body.push("'].join('');};");
            body = body.join('');
        }
        eval(body);
        return this;
    },

    
    applyTemplate : function(values){
        return this.master.compiled.call(this, values, {}, 1, 1);
    },

    
    compile : function(){return this;}

    
    
    

});

Ext.XTemplate.prototype.apply = Ext.XTemplate.prototype.applyTemplate;


Ext.XTemplate.from = function(el){
    el = Ext.getDom(el);
    return new Ext.XTemplate(el.value || el.innerHTML);
};

Ext.util.CSS = function(){
	var rules = null;
   	var doc = document;

    var camelRe = /(-[a-z])/gi;
    var camelFn = function(m, a){ return a.charAt(1).toUpperCase(); };

   return {
   
   createStyleSheet : function(cssText, id){
       var ss;
       var head = doc.getElementsByTagName("head")[0];
       var rules = doc.createElement("style");
       rules.setAttribute("type", "text/css");
       if(id){
           rules.setAttribute("id", id);
       }
       if(Ext.isIE){
           head.appendChild(rules);
           ss = rules.styleSheet;
           ss.cssText = cssText;
       }else{
           try{
                rules.appendChild(doc.createTextNode(cssText));
           }catch(e){
               rules.cssText = cssText;
           }
           head.appendChild(rules);
           ss = rules.styleSheet ? rules.styleSheet : (rules.sheet || doc.styleSheets[doc.styleSheets.length-1]);
       }
       this.cacheStyleSheet(ss);
       return ss;
   },

   
   removeStyleSheet : function(id){
       var existing = doc.getElementById(id);
       if(existing){
           existing.parentNode.removeChild(existing);
       }
   },

   
   swapStyleSheet : function(id, url){
       this.removeStyleSheet(id);
       var ss = doc.createElement("link");
       ss.setAttribute("rel", "stylesheet");
       ss.setAttribute("type", "text/css");
       ss.setAttribute("id", id);
       ss.setAttribute("href", url);
       doc.getElementsByTagName("head")[0].appendChild(ss);
   },
   
   
   refreshCache : function(){
       return this.getRules(true);
   },

   // private
   cacheStyleSheet : function(ss){
       if(!rules){
           rules = {};
       }
       try{// try catch for cross domain access issue
           var ssRules = ss.cssRules || ss.rules;
           for(var j = ssRules.length-1; j >= 0; --j){
               rules[ssRules[j].selectorText] = ssRules[j];
           }
       }catch(e){}
   },
   
   
   getRules : function(refreshCache){
   		if(rules == null || refreshCache){
   			rules = {};
   			var ds = doc.styleSheets;
   			for(var i =0, len = ds.length; i < len; i++){
   			    try{
    		        this.cacheStyleSheet(ds[i]);
    		    }catch(e){} 
	        }
   		}
   		return rules;
   	},
   	
   	
   getRule : function(selector, refreshCache){
   		var rs = this.getRules(refreshCache);
   		if(!Ext.isArray(selector)){
   		    return rs[selector];
   		}
   		for(var i = 0; i < selector.length; i++){
			if(rs[selector[i]]){
				return rs[selector[i]];
			}
		}
		return null;
   	},
   	
   	
   	
   updateRule : function(selector, property, value){
   		if(!Ext.isArray(selector)){
   			var rule = this.getRule(selector);
   			if(rule){
   				rule.style[property.replace(camelRe, camelFn)] = value;
   				return true;
   			}
   		}else{
   			for(var i = 0; i < selector.length; i++){
   				if(this.updateRule(selector[i], property, value)){
   					return true;
   				}
   			}
   		}
   		return false;
   	}
   };	
}();

Ext.util.ClickRepeater = function(el, config)
{
    this.el = Ext.get(el);
    this.el.unselectable();

    Ext.apply(this, config);

    this.addEvents(
    
        "mousedown",
    
        "click",
    
        "mouseup"
    );

    this.el.on("mousedown", this.handleMouseDown, this);
    if(this.preventDefault || this.stopDefault){
        this.el.on("click", function(e){
            if(this.preventDefault){
                e.preventDefault();
            }
            if(this.stopDefault){
                e.stopEvent();
            }
        }, this);
    }

    // allow inline handler
    if(this.handler){
        this.on("click", this.handler,  this.scope || this);
    }

    Ext.util.ClickRepeater.superclass.constructor.call(this);
};

Ext.extend(Ext.util.ClickRepeater, Ext.util.Observable, {
    interval : 20,
    delay: 250,
    preventDefault : true,
    stopDefault : false,
    timer : 0,

    // private
    destroy : function() {
        Ext.destroy(this.el);
        this.purgeListeners();
    },
    
    // private
    handleMouseDown : function(){
        clearTimeout(this.timer);
        this.el.blur();
        if(this.pressClass){
            this.el.addClass(this.pressClass);
        }
        this.mousedownTime = new Date();

        Ext.getDoc().on("mouseup", this.handleMouseUp, this);
        this.el.on("mouseout", this.handleMouseOut, this);

        this.fireEvent("mousedown", this);
        this.fireEvent("click", this);

//      Do not honor delay or interval if acceleration wanted.
        if (this.accelerate) {
            this.delay = 400;
	    }
        this.timer = this.click.defer(this.delay || this.interval, this);
    },

    // private
    click : function(){
        this.fireEvent("click", this);
        this.timer = this.click.defer(this.accelerate ?
            this.easeOutExpo(this.mousedownTime.getElapsed(),
                400,
                -390,
                12000) :
            this.interval, this);
    },

    easeOutExpo : function (t, b, c, d) {
        return (t==d) ? b+c : c * (-Math.pow(2, -10 * t/d) + 1) + b;
    },

    // private
    handleMouseOut : function(){
        clearTimeout(this.timer);
        if(this.pressClass){
            this.el.removeClass(this.pressClass);
        }
        this.el.on("mouseover", this.handleMouseReturn, this);
    },

    // private
    handleMouseReturn : function(){
        this.el.un("mouseover", this.handleMouseReturn, this);
        if(this.pressClass){
            this.el.addClass(this.pressClass);
        }
        this.click();
    },

    // private
    handleMouseUp : function(){
        clearTimeout(this.timer);
        this.el.un("mouseover", this.handleMouseReturn, this);
        this.el.un("mouseout", this.handleMouseOut, this);
        Ext.getDoc().un("mouseup", this.handleMouseUp, this);
        this.el.removeClass(this.pressClass);
        this.fireEvent("mouseup", this);
    }
});

Ext.KeyNav = function(el, config){
    this.el = Ext.get(el);
    Ext.apply(this, config);
    if(!this.disabled){
        this.disabled = true;
        this.enable();
    }
};

Ext.KeyNav.prototype = {
    
    disabled : false,
    
    defaultEventAction: "stopEvent",
    
    forceKeyDown : false,

    // private
    prepareEvent : function(e){
        var k = e.getKey();
        var h = this.keyToHandler[k];
        //if(h && this[h]){
        //    e.stopPropagation();
        //}
        if(Ext.isSafari2 && h && k >= 37 && k <= 40){
            e.stopEvent();
        }
    },

    // private
    relay : function(e){
        var k = e.getKey();
        var h = this.keyToHandler[k];
        if(h && this[h]){
            if(this.doRelay(e, this[h], h) !== true){
                e[this.defaultEventAction]();
            }
        }
    },

    // private
    doRelay : function(e, h, hname){
        return h.call(this.scope || this, e);
    },

    // possible handlers
    enter : false,
    left : false,
    right : false,
    up : false,
    down : false,
    tab : false,
    esc : false,
    pageUp : false,
    pageDown : false,
    del : false,
    home : false,
    end : false,

    // quick lookup hash
    keyToHandler : {
        37 : "left",
        39 : "right",
        38 : "up",
        40 : "down",
        33 : "pageUp",
        34 : "pageDown",
        46 : "del",
        36 : "home",
        35 : "end",
        13 : "enter",
        27 : "esc",
        9  : "tab"
    },

	
	enable: function(){
		if(this.disabled){
            if(this.forceKeyDown || Ext.isIE || Ext.isSafari3 || Ext.isAir){
                this.el.on("keydown", this.relay,  this);
            }else{
                this.el.on("keydown", this.prepareEvent,  this);
                this.el.on("keypress", this.relay,  this);
            }
		    this.disabled = false;
		}
	},

	
	disable: function(){
		if(!this.disabled){
		    if(this.forceKeyDown || Ext.isIE || Ext.isSafari3 || Ext.isAir){
                this.el.un("keydown", this.relay, this);
            }else{
                this.el.un("keydown", this.prepareEvent, this);
                this.el.un("keypress", this.relay, this);
            }
		    this.disabled = true;
		}
	}
};

Ext.KeyMap = function(el, config, eventName){
    this.el  = Ext.get(el);
    this.eventName = eventName || "keydown";
    this.bindings = [];
    if(config){
        this.addBinding(config);
    }
    this.enable();
};

Ext.KeyMap.prototype = {
    
    stopEvent : false,

    
	addBinding : function(config){
        if(Ext.isArray(config)){
            for(var i = 0, len = config.length; i < len; i++){
                this.addBinding(config[i]);
            }
            return;
        }
        var keyCode = config.key,
            shift = config.shift,
            ctrl = config.ctrl,
            alt = config.alt,
            fn = config.fn || config.handler,
            scope = config.scope;
	
	if (config.stopEvent) {
	    this.stopEvent = config.stopEvent;    
	}	

        if(typeof keyCode == "string"){
            var ks = [];
            var keyString = keyCode.toUpperCase();
            for(var j = 0, len = keyString.length; j < len; j++){
                ks.push(keyString.charCodeAt(j));
            }
            keyCode = ks;
        }
        var keyArray = Ext.isArray(keyCode);
        
        var handler = function(e){
            if((!shift || e.shiftKey) && (!ctrl || e.ctrlKey) &&  (!alt || e.altKey)){
                var k = e.getKey();
                if(keyArray){
                    for(var i = 0, len = keyCode.length; i < len; i++){
                        if(keyCode[i] == k){
                          if(this.stopEvent){
                              e.stopEvent();
                          }
                          fn.call(scope || window, k, e);
                          return;
                        }
                    }
                }else{
                    if(k == keyCode){
                        if(this.stopEvent){
                           e.stopEvent();
                        }
                        fn.call(scope || window, k, e);
                    }
                }
            }
        };
        this.bindings.push(handler);
	},

    
    on : function(key, fn, scope){
        var keyCode, shift, ctrl, alt;
        if(typeof key == "object" && !Ext.isArray(key)){
            keyCode = key.key;
            shift = key.shift;
            ctrl = key.ctrl;
            alt = key.alt;
        }else{
            keyCode = key;
        }
        this.addBinding({
            key: keyCode,
            shift: shift,
            ctrl: ctrl,
            alt: alt,
            fn: fn,
            scope: scope
        })
    },

    // private
    handleKeyDown : function(e){
	    if(this.enabled){ //just in case
    	    var b = this.bindings;
    	    for(var i = 0, len = b.length; i < len; i++){
    	        b[i].call(this, e);
    	    }
	    }
	},

	
	isEnabled : function(){
	    return this.enabled;
	},

	
	enable: function(){
		if(!this.enabled){
		    this.el.on(this.eventName, this.handleKeyDown, this);
		    this.enabled = true;
		}
	},

	
	disable: function(){
		if(this.enabled){
		    this.el.removeListener(this.eventName, this.handleKeyDown, this);
		    this.enabled = false;
		}
	}
};

Ext.util.TextMetrics = function(){
    var shared;
    return {
        
        measure : function(el, text, fixedWidth){
            if(!shared){
                shared = Ext.util.TextMetrics.Instance(el, fixedWidth);
            }
            shared.bind(el);
            shared.setFixedWidth(fixedWidth || 'auto');
            return shared.getSize(text);
        },

        
        createInstance : function(el, fixedWidth){
            return Ext.util.TextMetrics.Instance(el, fixedWidth);
        }
    };
}();

Ext.util.TextMetrics.Instance = function(bindTo, fixedWidth){
    var ml = new Ext.Element(document.createElement('div'));
    document.body.appendChild(ml.dom);
    ml.position('absolute');
    ml.setLeftTop(-1000, -1000);
    ml.hide();

    if(fixedWidth){
        ml.setWidth(fixedWidth);
    }

    var instance = {
        
        getSize : function(text){
            ml.update(text);
            var s = ml.getSize();
            ml.update('');
            return s;
        },

        
        bind : function(el){
            ml.setStyle(
                Ext.fly(el).getStyles('font-size','font-style', 'font-weight', 'font-family','line-height', 'text-transform', 'letter-spacing')
            );
        },

        
        setFixedWidth : function(width){
            ml.setWidth(width);
        },

        
        getWidth : function(text){
            ml.dom.style.width = 'auto';
            return this.getSize(text).width;
        },

        
        getHeight : function(text){
            return this.getSize(text).height;
        }
    };

    instance.bind(bindTo);

    return instance;
};

// backwards compat
Ext.Element.measureText = Ext.util.TextMetrics.measure;


(function() {

var Event=Ext.EventManager;
var Dom=Ext.lib.Dom;


Ext.dd.DragDrop = function(id, sGroup, config) {
    if(id) {
        this.init(id, sGroup, config);
    }
};

Ext.dd.DragDrop.prototype = {

    
    id: null,

    
    config: null,

    
    dragElId: null,

    
    handleElId: null,

    
    invalidHandleTypes: null,

    
    invalidHandleIds: null,

    
    invalidHandleClasses: null,

    
    startPageX: 0,

    
    startPageY: 0,

    
    groups: null,

    
    locked: false,

    
    lock: function() { this.locked = true; },

    
    moveOnly: false,

    
    unlock: function() { this.locked = false; },

    
    isTarget: true,

    
    padding: null,

    
    _domRef: null,

    
    __ygDragDrop: true,

    
    constrainX: false,

    
    constrainY: false,

    
    minX: 0,

    
    maxX: 0,

    
    minY: 0,

    
    maxY: 0,

    
    maintainOffset: false,

    
    xTicks: null,

    
    yTicks: null,

    
    primaryButtonOnly: true,

    
    available: false,

    
    hasOuterHandles: false,

    
    b4StartDrag: function(x, y) { },

    
    startDrag: function(x, y) {  },

    
    b4Drag: function(e) { },

    
    onDrag: function(e) {  },

    
    onDragEnter: function(e, id) {  },

    
    b4DragOver: function(e) { },

    
    onDragOver: function(e, id) {  },

    
    b4DragOut: function(e) { },

    
    onDragOut: function(e, id) {  },

    
    b4DragDrop: function(e) { },

    
    onDragDrop: function(e, id) {  },

    
    onInvalidDrop: function(e) {  },

    
    b4EndDrag: function(e) { },

    
    endDrag: function(e) {  },

    
    b4MouseDown: function(e) {  },

    
    onMouseDown: function(e) {  },

    
    onMouseUp: function(e) {  },

    
    onAvailable: function () {
    },

    
    defaultPadding : {left:0, right:0, top:0, bottom:0},

    
    constrainTo : function(constrainTo, pad, inContent){
        if(typeof pad == "number"){
            pad = {left: pad, right:pad, top:pad, bottom:pad};
        }
        pad = pad || this.defaultPadding;
        var b = Ext.get(this.getEl()).getBox();
        var ce = Ext.get(constrainTo);
        var s = ce.getScroll();
        var c, cd = ce.dom;
        if(cd == document.body){
            c = { x: s.left, y: s.top, width: Ext.lib.Dom.getViewWidth(), height: Ext.lib.Dom.getViewHeight()};
        }else{
            var xy = ce.getXY();
            c = {x : xy[0]+s.left, y: xy[1]+s.top, width: cd.clientWidth, height: cd.clientHeight};
        }


        var topSpace = b.y - c.y;
        var leftSpace = b.x - c.x;

        this.resetConstraints();
        this.setXConstraint(leftSpace - (pad.left||0), // left
                c.width - leftSpace - b.width - (pad.right||0), //right
				this.xTickSize
        );
        this.setYConstraint(topSpace - (pad.top||0), //top
                c.height - topSpace - b.height - (pad.bottom||0), //bottom
				this.yTickSize
        );
    },

    
    getEl: function() {
        if (!this._domRef) {
            this._domRef = Ext.getDom(this.id);
        }

        return this._domRef;
    },

    
    getDragEl: function() {
        return Ext.getDom(this.dragElId);
    },

    
    init: function(id, sGroup, config) {
        this.initTarget(id, sGroup, config);
        Event.on(this.id, "mousedown", this.handleMouseDown, this);
        // Event.on(this.id, "selectstart", Event.preventDefault);
    },

    
    initTarget: function(id, sGroup, config) {

        // configuration attributes
        this.config = config || {};

        // create a local reference to the drag and drop manager
        this.DDM = Ext.dd.DDM;
        // initialize the groups array
        this.groups = {};

        // assume that we have an element reference instead of an id if the
        // parameter is not a string
        if (typeof id !== "string") {
            id = Ext.id(id);
        }

        // set the id
        this.id = id;

        // add to an interaction group
        this.addToGroup((sGroup) ? sGroup : "default");

        // We don't want to register this as the handle with the manager
        // so we just set the id rather than calling the setter.
        this.handleElId = id;

        // the linked element is the element that gets dragged by default
        this.setDragElId(id);

        // by default, clicked anchors will not start drag operations.
        this.invalidHandleTypes = { A: "A" };
        this.invalidHandleIds = {};
        this.invalidHandleClasses = [];

        this.applyConfig();

        this.handleOnAvailable();
    },

    
    applyConfig: function() {

        // configurable properties:
        //    padding, isTarget, maintainOffset, primaryButtonOnly
        this.padding           = this.config.padding || [0, 0, 0, 0];
        this.isTarget          = (this.config.isTarget !== false);
        this.maintainOffset    = (this.config.maintainOffset);
        this.primaryButtonOnly = (this.config.primaryButtonOnly !== false);

    },

    
    handleOnAvailable: function() {
        this.available = true;
        this.resetConstraints();
        this.onAvailable();
    },

     
    setPadding: function(iTop, iRight, iBot, iLeft) {
        // this.padding = [iLeft, iRight, iTop, iBot];
        if (!iRight && 0 !== iRight) {
            this.padding = [iTop, iTop, iTop, iTop];
        } else if (!iBot && 0 !== iBot) {
            this.padding = [iTop, iRight, iTop, iRight];
        } else {
            this.padding = [iTop, iRight, iBot, iLeft];
        }
    },

    
    setInitPosition: function(diffX, diffY) {
        var el = this.getEl();

        if (!this.DDM.verifyEl(el)) {
            return;
        }

        var dx = diffX || 0;
        var dy = diffY || 0;

        var p = Dom.getXY( el );

        this.initPageX = p[0] - dx;
        this.initPageY = p[1] - dy;

        this.lastPageX = p[0];
        this.lastPageY = p[1];


        this.setStartPosition(p);
    },

    
    setStartPosition: function(pos) {
        var p = pos || Dom.getXY( this.getEl() );
        this.deltaSetXY = null;

        this.startPageX = p[0];
        this.startPageY = p[1];
    },

    
    addToGroup: function(sGroup) {
        this.groups[sGroup] = true;
        this.DDM.regDragDrop(this, sGroup);
    },

    
    removeFromGroup: function(sGroup) {
        if (this.groups[sGroup]) {
            delete this.groups[sGroup];
        }

        this.DDM.removeDDFromGroup(this, sGroup);
    },

    
    setDragElId: function(id) {
        this.dragElId = id;
    },

    
    setHandleElId: function(id) {
        if (typeof id !== "string") {
            id = Ext.id(id);
        }
        this.handleElId = id;
        this.DDM.regHandle(this.id, id);
    },

    
    setOuterHandleElId: function(id) {
        if (typeof id !== "string") {
            id = Ext.id(id);
        }
        Event.on(id, "mousedown",
                this.handleMouseDown, this);
        this.setHandleElId(id);

        this.hasOuterHandles = true;
    },

    
    unreg: function() {
        Event.un(this.id, "mousedown",
                this.handleMouseDown);
        this._domRef = null;
        this.DDM._remove(this);
    },

    destroy : function(){
        this.unreg();
    },

    
    isLocked: function() {
        return (this.DDM.isLocked() || this.locked);
    },

    
    handleMouseDown: function(e, oDD){
        if (this.primaryButtonOnly && e.button != 0) {
            return;
        }

        if (this.isLocked()) {
            return;
        }

        this.DDM.refreshCache(this.groups);

        var pt = new Ext.lib.Point(Ext.lib.Event.getPageX(e), Ext.lib.Event.getPageY(e));
        if (!this.hasOuterHandles && !this.DDM.isOverTarget(pt, this) )  {
        } else {
            if (this.clickValidator(e)) {

                // set the initial element position
                this.setStartPosition();


                this.b4MouseDown(e);
                this.onMouseDown(e);

                this.DDM.handleMouseDown(e, this);

                this.DDM.stopEvent(e);
            } else {


            }
        }
    },

    clickValidator: function(e) {
        var target = e.getTarget();
        return ( this.isValidHandleChild(target) &&
                    (this.id == this.handleElId ||
                        this.DDM.handleWasClicked(target, this.id)) );
    },

    
    addInvalidHandleType: function(tagName) {
        var type = tagName.toUpperCase();
        this.invalidHandleTypes[type] = type;
    },

    
    addInvalidHandleId: function(id) {
        if (typeof id !== "string") {
            id = Ext.id(id);
        }
        this.invalidHandleIds[id] = id;
    },

    
    addInvalidHandleClass: function(cssClass) {
        this.invalidHandleClasses.push(cssClass);
    },

    
    removeInvalidHandleType: function(tagName) {
        var type = tagName.toUpperCase();
        // this.invalidHandleTypes[type] = null;
        delete this.invalidHandleTypes[type];
    },

    
    removeInvalidHandleId: function(id) {
        if (typeof id !== "string") {
            id = Ext.id(id);
        }
        delete this.invalidHandleIds[id];
    },

    
    removeInvalidHandleClass: function(cssClass) {
        for (var i=0, len=this.invalidHandleClasses.length; i<len; ++i) {
            if (this.invalidHandleClasses[i] == cssClass) {
                delete this.invalidHandleClasses[i];
            }
        }
    },

    
    isValidHandleChild: function(node) {

        var valid = true;
        // var n = (node.nodeName == "#text") ? node.parentNode : node;
        var nodeName;
        try {
            nodeName = node.nodeName.toUpperCase();
        } catch(e) {
            nodeName = node.nodeName;
        }
        valid = valid && !this.invalidHandleTypes[nodeName];
        valid = valid && !this.invalidHandleIds[node.id];

        for (var i=0, len=this.invalidHandleClasses.length; valid && i<len; ++i) {
            valid = !Ext.fly(node).hasClass(this.invalidHandleClasses[i]);
        }


        return valid;

    },

    
    setXTicks: function(iStartX, iTickSize) {
        this.xTicks = [];
        this.xTickSize = iTickSize;

        var tickMap = {};

        for (var i = this.initPageX; i >= this.minX; i = i - iTickSize) {
            if (!tickMap[i]) {
                this.xTicks[this.xTicks.length] = i;
                tickMap[i] = true;
            }
        }

        for (i = this.initPageX; i <= this.maxX; i = i + iTickSize) {
            if (!tickMap[i]) {
                this.xTicks[this.xTicks.length] = i;
                tickMap[i] = true;
            }
        }

        this.xTicks.sort(this.DDM.numericSort) ;
    },

    
    setYTicks: function(iStartY, iTickSize) {
        this.yTicks = [];
        this.yTickSize = iTickSize;

        var tickMap = {};

        for (var i = this.initPageY; i >= this.minY; i = i - iTickSize) {
            if (!tickMap[i]) {
                this.yTicks[this.yTicks.length] = i;
                tickMap[i] = true;
            }
        }

        for (i = this.initPageY; i <= this.maxY; i = i + iTickSize) {
            if (!tickMap[i]) {
                this.yTicks[this.yTicks.length] = i;
                tickMap[i] = true;
            }
        }

        this.yTicks.sort(this.DDM.numericSort) ;
    },

    
    setXConstraint: function(iLeft, iRight, iTickSize) {
        this.leftConstraint = iLeft;
        this.rightConstraint = iRight;

        this.minX = this.initPageX - iLeft;
        this.maxX = this.initPageX + iRight;
        if (iTickSize) { this.setXTicks(this.initPageX, iTickSize); }

        this.constrainX = true;
    },

    
    clearConstraints: function() {
        this.constrainX = false;
        this.constrainY = false;
        this.clearTicks();
    },

    
    clearTicks: function() {
        this.xTicks = null;
        this.yTicks = null;
        this.xTickSize = 0;
        this.yTickSize = 0;
    },

    
    setYConstraint: function(iUp, iDown, iTickSize) {
        this.topConstraint = iUp;
        this.bottomConstraint = iDown;

        this.minY = this.initPageY - iUp;
        this.maxY = this.initPageY + iDown;
        if (iTickSize) { this.setYTicks(this.initPageY, iTickSize); }

        this.constrainY = true;

    },

    
    resetConstraints: function() {


        // Maintain offsets if necessary
        if (this.initPageX || this.initPageX === 0) {
            // figure out how much this thing has moved
            var dx = (this.maintainOffset) ? this.lastPageX - this.initPageX : 0;
            var dy = (this.maintainOffset) ? this.lastPageY - this.initPageY : 0;

            this.setInitPosition(dx, dy);

        // This is the first time we have detected the element's position
        } else {
            this.setInitPosition();
        }

        if (this.constrainX) {
            this.setXConstraint( this.leftConstraint,
                                 this.rightConstraint,
                                 this.xTickSize        );
        }

        if (this.constrainY) {
            this.setYConstraint( this.topConstraint,
                                 this.bottomConstraint,
                                 this.yTickSize         );
        }
    },

    
    getTick: function(val, tickArray) {

        if (!tickArray) {
            // If tick interval is not defined, it is effectively 1 pixel,
            // so we return the value passed to us.
            return val;
        } else if (tickArray[0] >= val) {
            // The value is lower than the first tick, so we return the first
            // tick.
            return tickArray[0];
        } else {
            for (var i=0, len=tickArray.length; i<len; ++i) {
                var next = i + 1;
                if (tickArray[next] && tickArray[next] >= val) {
                    var diff1 = val - tickArray[i];
                    var diff2 = tickArray[next] - val;
                    return (diff2 > diff1) ? tickArray[i] : tickArray[next];
                }
            }

            // The value is larger than the last tick, so we return the last
            // tick.
            return tickArray[tickArray.length - 1];
        }
    },

    
    toString: function() {
        return ("DragDrop " + this.id);
    }

};

})();


// Only load the library once.  Rewriting the manager class would orphan
// existing drag and drop instances.
if (!Ext.dd.DragDropMgr) {


Ext.dd.DragDropMgr = function() {

    var Event = Ext.EventManager;

    return {

        
        ids: {},

        
        handleIds: {},

        
        dragCurrent: null,

        
        dragOvers: {},

        
        deltaX: 0,

        
        deltaY: 0,

        
        preventDefault: true,

        
        stopPropagation: true,

        
        initialized: false,

        
        locked: false,

        
        init: function() {
            this.initialized = true;
        },

        
        POINT: 0,

        
        INTERSECT: 1,

        
        mode: 0,

        
        _execOnAll: function(sMethod, args) {
            for (var i in this.ids) {
                for (var j in this.ids[i]) {
                    var oDD = this.ids[i][j];
                    if (! this.isTypeOfDD(oDD)) {
                        continue;
                    }
                    oDD[sMethod].apply(oDD, args);
                }
            }
        },

        
        _onLoad: function() {

            this.init();


            Event.on(document, "mouseup",   this.handleMouseUp, this, true);
            Event.on(document, "mousemove", this.handleMouseMove, this, true);
            Event.on(window,   "unload",    this._onUnload, this, true);
            Event.on(window,   "resize",    this._onResize, this, true);
            // Event.on(window,   "mouseout",    this._test);

        },

        
        _onResize: function(e) {
            this._execOnAll("resetConstraints", []);
        },

        
        lock: function() { this.locked = true; },

        
        unlock: function() { this.locked = false; },

        
        isLocked: function() { return this.locked; },

        
        locationCache: {},

        
        useCache: true,

        
        clickPixelThresh: 3,

        
        clickTimeThresh: 350,

        
        dragThreshMet: false,

        
        clickTimeout: null,

        
        startX: 0,

        
        startY: 0,

        
        regDragDrop: function(oDD, sGroup) {
            if (!this.initialized) { this.init(); }

            if (!this.ids[sGroup]) {
                this.ids[sGroup] = {};
            }
            this.ids[sGroup][oDD.id] = oDD;
        },

        
        removeDDFromGroup: function(oDD, sGroup) {
            if (!this.ids[sGroup]) {
                this.ids[sGroup] = {};
            }

            var obj = this.ids[sGroup];
            if (obj && obj[oDD.id]) {
                delete obj[oDD.id];
            }
        },

        
        _remove: function(oDD) {
            for (var g in oDD.groups) {
                if (g && this.ids[g] && this.ids[g][oDD.id]) {
                    delete this.ids[g][oDD.id];
                }
            }
            delete this.handleIds[oDD.id];
        },

        
        regHandle: function(sDDId, sHandleId) {
            if (!this.handleIds[sDDId]) {
                this.handleIds[sDDId] = {};
            }
            this.handleIds[sDDId][sHandleId] = sHandleId;
        },

        
        isDragDrop: function(id) {
            return ( this.getDDById(id) ) ? true : false;
        },

        
        getRelated: function(p_oDD, bTargetsOnly) {
            var oDDs = [];
            for (var i in p_oDD.groups) {
                for (j in this.ids[i]) {
                    var dd = this.ids[i][j];
                    if (! this.isTypeOfDD(dd)) {
                        continue;
                    }
                    if (!bTargetsOnly || dd.isTarget) {
                        oDDs[oDDs.length] = dd;
                    }
                }
            }

            return oDDs;
        },

        
        isLegalTarget: function (oDD, oTargetDD) {
            var targets = this.getRelated(oDD, true);
            for (var i=0, len=targets.length;i<len;++i) {
                if (targets[i].id == oTargetDD.id) {
                    return true;
                }
            }

            return false;
        },

        
        isTypeOfDD: function (oDD) {
            return (oDD && oDD.__ygDragDrop);
        },

        
        isHandle: function(sDDId, sHandleId) {
            return ( this.handleIds[sDDId] &&
                            this.handleIds[sDDId][sHandleId] );
        },

        
        getDDById: function(id) {
            for (var i in this.ids) {
                if (this.ids[i][id]) {
                    return this.ids[i][id];
                }
            }
            return null;
        },

        
        handleMouseDown: function(e, oDD) {
            if(Ext.QuickTips){
                Ext.QuickTips.disable();
            }
            if(this.dragCurrent){
                // the original browser mouseup wasn't handled (e.g. outside FF browser window)
                // so clean up first to avoid breaking the next drag
                this.handleMouseUp(e);
            }
            
            this.currentTarget = e.getTarget();
            this.dragCurrent = oDD;

            var el = oDD.getEl();

            // track start position
            this.startX = e.getPageX();
            this.startY = e.getPageY();

            this.deltaX = this.startX - el.offsetLeft;
            this.deltaY = this.startY - el.offsetTop;

            this.dragThreshMet = false;

            this.clickTimeout = setTimeout(
                    function() {
                        var DDM = Ext.dd.DDM;
                        DDM.startDrag(DDM.startX, DDM.startY);
                    },
                    this.clickTimeThresh );
        },

        
        startDrag: function(x, y) {
            clearTimeout(this.clickTimeout);
            if (this.dragCurrent) {
                this.dragCurrent.b4StartDrag(x, y);
                this.dragCurrent.startDrag(x, y);
            }
            this.dragThreshMet = true;
        },

        
        handleMouseUp: function(e) {

            if(Ext.QuickTips){
                Ext.QuickTips.enable();
            }
            if (! this.dragCurrent) {
                return;
            }

            clearTimeout(this.clickTimeout);

            if (this.dragThreshMet) {
                this.fireEvents(e, true);
            } else {
            }

            this.stopDrag(e);

            this.stopEvent(e);
        },

        
        stopEvent: function(e){
            if(this.stopPropagation) {
                e.stopPropagation();
            }

            if (this.preventDefault) {
                e.preventDefault();
            }
        },

        
        stopDrag: function(e) {
            // Fire the drag end event for the item that was dragged
            if (this.dragCurrent) {
                if (this.dragThreshMet) {
                    this.dragCurrent.b4EndDrag(e);
                    this.dragCurrent.endDrag(e);
                }

                this.dragCurrent.onMouseUp(e);
            }

            this.dragCurrent = null;
            this.dragOvers = {};
        },

        
        handleMouseMove: function(e) {
            if (! this.dragCurrent) {
                return true;
            }

            // var button = e.which || e.button;

            // check for IE mouseup outside of page boundary
            if (Ext.isIE && (e.button !== 0 && e.button !== 1 && e.button !== 2)) {
                this.stopEvent(e);
                return this.handleMouseUp(e);
            }

            if (!this.dragThreshMet) {
                var diffX = Math.abs(this.startX - e.getPageX());
                var diffY = Math.abs(this.startY - e.getPageY());
                if (diffX > this.clickPixelThresh ||
                            diffY > this.clickPixelThresh) {
                    this.startDrag(this.startX, this.startY);
                }
            }

            if (this.dragThreshMet) {
                this.dragCurrent.b4Drag(e);
                this.dragCurrent.onDrag(e);
                if(!this.dragCurrent.moveOnly){
                    this.fireEvents(e, false);
                }
            }

            this.stopEvent(e);

            return true;
        },

        
        fireEvents: function(e, isDrop) {
            var dc = this.dragCurrent;

            // If the user did the mouse up outside of the window, we could
            // get here even though we have ended the drag.
            if (!dc || dc.isLocked()) {
                return;
            }

            var pt = e.getPoint();

            // cache the previous dragOver array
            var oldOvers = [];

            var outEvts   = [];
            var overEvts  = [];
            var dropEvts  = [];
            var enterEvts = [];

            // Check to see if the object(s) we were hovering over is no longer
            // being hovered over so we can fire the onDragOut event
            for (var i in this.dragOvers) {

                var ddo = this.dragOvers[i];

                if (! this.isTypeOfDD(ddo)) {
                    continue;
                }

                if (! this.isOverTarget(pt, ddo, this.mode)) {
                    outEvts.push( ddo );
                }

                oldOvers[i] = true;
                delete this.dragOvers[i];
            }

            for (var sGroup in dc.groups) {

                if ("string" != typeof sGroup) {
                    continue;
                }

                for (i in this.ids[sGroup]) {
                    var oDD = this.ids[sGroup][i];
                    if (! this.isTypeOfDD(oDD)) {
                        continue;
                    }

                    if (oDD.isTarget && !oDD.isLocked() && oDD != dc) {
                        if (this.isOverTarget(pt, oDD, this.mode)) {
                            // look for drop interactions
                            if (isDrop) {
                                dropEvts.push( oDD );
                            // look for drag enter and drag over interactions
                            } else {

                                // initial drag over: dragEnter fires
                                if (!oldOvers[oDD.id]) {
                                    enterEvts.push( oDD );
                                // subsequent drag overs: dragOver fires
                                } else {
                                    overEvts.push( oDD );
                                }

                                this.dragOvers[oDD.id] = oDD;
                            }
                        }
                    }
                }
            }

            if (this.mode) {
                if (outEvts.length) {
                    dc.b4DragOut(e, outEvts);
                    dc.onDragOut(e, outEvts);
                }

                if (enterEvts.length) {
                    dc.onDragEnter(e, enterEvts);
                }

                if (overEvts.length) {
                    dc.b4DragOver(e, overEvts);
                    dc.onDragOver(e, overEvts);
                }

                if (dropEvts.length) {
                    dc.b4DragDrop(e, dropEvts);
                    dc.onDragDrop(e, dropEvts);
                }

            } else {
                // fire dragout events
                var len = 0;
                for (i=0, len=outEvts.length; i<len; ++i) {
                    dc.b4DragOut(e, outEvts[i].id);
                    dc.onDragOut(e, outEvts[i].id);
                }

                // fire enter events
                for (i=0,len=enterEvts.length; i<len; ++i) {
                    // dc.b4DragEnter(e, oDD.id);
                    dc.onDragEnter(e, enterEvts[i].id);
                }

                // fire over events
                for (i=0,len=overEvts.length; i<len; ++i) {
                    dc.b4DragOver(e, overEvts[i].id);
                    dc.onDragOver(e, overEvts[i].id);
                }

                // fire drop events
                for (i=0, len=dropEvts.length; i<len; ++i) {
                    dc.b4DragDrop(e, dropEvts[i].id);
                    dc.onDragDrop(e, dropEvts[i].id);
                }

            }

            // notify about a drop that did not find a target
            if (isDrop && !dropEvts.length) {
                dc.onInvalidDrop(e);
            }

        },

        
        getBestMatch: function(dds) {
            var winner = null;
            // Return null if the input is not what we expect
            //if (!dds || !dds.length || dds.length == 0) {
               // winner = null;
            // If there is only one item, it wins
            //} else if (dds.length == 1) {

            var len = dds.length;

            if (len == 1) {
                winner = dds[0];
            } else {
                // Loop through the targeted items
                for (var i=0; i<len; ++i) {
                    var dd = dds[i];
                    // If the cursor is over the object, it wins.  If the
                    // cursor is over multiple matches, the first one we come
                    // to wins.
                    if (dd.cursorIsOver) {
                        winner = dd;
                        break;
                    // Otherwise the object with the most overlap wins
                    } else {
                        if (!winner ||
                            winner.overlap.getArea() < dd.overlap.getArea()) {
                            winner = dd;
                        }
                    }
                }
            }

            return winner;
        },

        
        refreshCache: function(groups) {
            for (var sGroup in groups) {
                if ("string" != typeof sGroup) {
                    continue;
                }
                for (var i in this.ids[sGroup]) {
                    var oDD = this.ids[sGroup][i];

                    if (this.isTypeOfDD(oDD)) {
                    // if (this.isTypeOfDD(oDD) && oDD.isTarget) {
                        var loc = this.getLocation(oDD);
                        if (loc) {
                            this.locationCache[oDD.id] = loc;
                        } else {
                            delete this.locationCache[oDD.id];
                            // this will unregister the drag and drop object if
                            // the element is not in a usable state
                            // oDD.unreg();
                        }
                    }
                }
            }
        },

        
        verifyEl: function(el) {
            if (el) {
                var parent;
                if(Ext.isIE){
                    try{
                        parent = el.offsetParent;
                    }catch(e){}
                }else{
                    parent = el.offsetParent;
                }
                if (parent) {
                    return true;
                }
            }

            return false;
        },

        
        getLocation: function(oDD) {
            if (! this.isTypeOfDD(oDD)) {
                return null;
            }

            var el = oDD.getEl(), pos, x1, x2, y1, y2, t, r, b, l;

            try {
                pos= Ext.lib.Dom.getXY(el);
            } catch (e) { }

            if (!pos) {
                return null;
            }

            x1 = pos[0];
            x2 = x1 + el.offsetWidth;
            y1 = pos[1];
            y2 = y1 + el.offsetHeight;

            t = y1 - oDD.padding[0];
            r = x2 + oDD.padding[1];
            b = y2 + oDD.padding[2];
            l = x1 - oDD.padding[3];

            return new Ext.lib.Region( t, r, b, l );
        },

        
        isOverTarget: function(pt, oTarget, intersect) {
            // use cache if available
            var loc = this.locationCache[oTarget.id];
            if (!loc || !this.useCache) {
                loc = this.getLocation(oTarget);
                this.locationCache[oTarget.id] = loc;

            }

            if (!loc) {
                return false;
            }

            oTarget.cursorIsOver = loc.contains( pt );

            // DragDrop is using this as a sanity check for the initial mousedown
            // in this case we are done.  In POINT mode, if the drag obj has no
            // contraints, we are also done. Otherwise we need to evaluate the
            // location of the target as related to the actual location of the
            // dragged element.
            var dc = this.dragCurrent;
            if (!dc || !dc.getTargetCoord ||
                    (!intersect && !dc.constrainX && !dc.constrainY)) {
                return oTarget.cursorIsOver;
            }

            oTarget.overlap = null;

            // Get the current location of the drag element, this is the
            // location of the mouse event less the delta that represents
            // where the original mousedown happened on the element.  We
            // need to consider constraints and ticks as well.
            var pos = dc.getTargetCoord(pt.x, pt.y);

            var el = dc.getDragEl();
            var curRegion = new Ext.lib.Region( pos.y,
                                                   pos.x + el.offsetWidth,
                                                   pos.y + el.offsetHeight,
                                                   pos.x );

            var overlap = curRegion.intersect(loc);

            if (overlap) {
                oTarget.overlap = overlap;
                return (intersect) ? true : oTarget.cursorIsOver;
            } else {
                return false;
            }
        },

        
        _onUnload: function(e, me) {
            Ext.dd.DragDropMgr.unregAll();
        },

        
        unregAll: function() {

            if (this.dragCurrent) {
                this.stopDrag();
                this.dragCurrent = null;
            }

            this._execOnAll("unreg", []);

            for (var i in this.elementCache) {
                delete this.elementCache[i];
            }

            this.elementCache = {};
            this.ids = {};
        },

        
        elementCache: {},

        
        getElWrapper: function(id) {
            var oWrapper = this.elementCache[id];
            if (!oWrapper || !oWrapper.el) {
                oWrapper = this.elementCache[id] =
                    new this.ElementWrapper(Ext.getDom(id));
            }
            return oWrapper;
        },

        
        getElement: function(id) {
            return Ext.getDom(id);
        },

        
        getCss: function(id) {
            var el = Ext.getDom(id);
            return (el) ? el.style : null;
        },

        
        ElementWrapper: function(el) {
                
                this.el = el || null;
                
                this.id = this.el && el.id;
                
                this.css = this.el && el.style;
            },

        
        getPosX: function(el) {
            return Ext.lib.Dom.getX(el);
        },

        
        getPosY: function(el) {
            return Ext.lib.Dom.getY(el);
        },

        
        swapNode: function(n1, n2) {
            if (n1.swapNode) {
                n1.swapNode(n2);
            } else {
                var p = n2.parentNode;
                var s = n2.nextSibling;

                if (s == n1) {
                    p.insertBefore(n1, n2);
                } else if (n2 == n1.nextSibling) {
                    p.insertBefore(n2, n1);
                } else {
                    n1.parentNode.replaceChild(n2, n1);
                    p.insertBefore(n1, s);
                }
            }
        },

        
        getScroll: function () {
            var t, l, dde=document.documentElement, db=document.body;
            if (dde && (dde.scrollTop || dde.scrollLeft)) {
                t = dde.scrollTop;
                l = dde.scrollLeft;
            } else if (db) {
                t = db.scrollTop;
                l = db.scrollLeft;
            } else {

            }
            return { top: t, left: l };
        },

        
        getStyle: function(el, styleProp) {
            return Ext.fly(el).getStyle(styleProp);
        },

        
        getScrollTop: function () { return this.getScroll().top; },

        
        getScrollLeft: function () { return this.getScroll().left; },

        
        moveToEl: function (moveEl, targetEl) {
            var aCoord = Ext.lib.Dom.getXY(targetEl);
            Ext.lib.Dom.setXY(moveEl, aCoord);
        },

        
        numericSort: function(a, b) { return (a - b); },

        
        _timeoutCount: 0,

        
        _addListeners: function() {
            var DDM = Ext.dd.DDM;
            if ( Ext.lib.Event && document ) {
                DDM._onLoad();
            } else {
                if (DDM._timeoutCount > 2000) {
                } else {
                    setTimeout(DDM._addListeners, 10);
                    if (document && document.body) {
                        DDM._timeoutCount += 1;
                    }
                }
            }
        },

        
        handleWasClicked: function(node, id) {
            if (this.isHandle(id, node.id)) {
                return true;
            } else {
                // check to see if this is a text node child of the one we want
                var p = node.parentNode;

                while (p) {
                    if (this.isHandle(id, p.id)) {
                        return true;
                    } else {
                        p = p.parentNode;
                    }
                }
            }

            return false;
        }

    };

}();

// shorter alias, save a few bytes
Ext.dd.DDM = Ext.dd.DragDropMgr;
Ext.dd.DDM._addListeners();

}


Ext.dd.DD = function(id, sGroup, config) {
    if (id) {
        this.init(id, sGroup, config);
    }
};

Ext.extend(Ext.dd.DD, Ext.dd.DragDrop, {

    
    scroll: true,

    
    autoOffset: function(iPageX, iPageY) {
        var x = iPageX - this.startPageX;
        var y = iPageY - this.startPageY;
        this.setDelta(x, y);
    },

    
    setDelta: function(iDeltaX, iDeltaY) {
        this.deltaX = iDeltaX;
        this.deltaY = iDeltaY;
    },

    
    setDragElPos: function(iPageX, iPageY) {
        // the first time we do this, we are going to check to make sure
        // the element has css positioning

        var el = this.getDragEl();
        this.alignElWithMouse(el, iPageX, iPageY);
    },

    
    alignElWithMouse: function(el, iPageX, iPageY) {
        var oCoord = this.getTargetCoord(iPageX, iPageY);
        var fly = el.dom ? el : Ext.fly(el, '_dd');
        if (!this.deltaSetXY) {
            var aCoord = [oCoord.x, oCoord.y];
            fly.setXY(aCoord);
            var newLeft = fly.getLeft(true);
            var newTop  = fly.getTop(true);
            this.deltaSetXY = [ newLeft - oCoord.x, newTop - oCoord.y ];
        } else {
            fly.setLeftTop(oCoord.x + this.deltaSetXY[0], oCoord.y + this.deltaSetXY[1]);
        }

        this.cachePosition(oCoord.x, oCoord.y);
        this.autoScroll(oCoord.x, oCoord.y, el.offsetHeight, el.offsetWidth);
        return oCoord;
    },

    
    cachePosition: function(iPageX, iPageY) {
        if (iPageX) {
            this.lastPageX = iPageX;
            this.lastPageY = iPageY;
        } else {
            var aCoord = Ext.lib.Dom.getXY(this.getEl());
            this.lastPageX = aCoord[0];
            this.lastPageY = aCoord[1];
        }
    },

    
    autoScroll: function(x, y, h, w) {

        if (this.scroll) {
            // The client height
            var clientH = Ext.lib.Dom.getViewHeight();

            // The client width
            var clientW = Ext.lib.Dom.getViewWidth();

            // The amt scrolled down
            var st = this.DDM.getScrollTop();

            // The amt scrolled right
            var sl = this.DDM.getScrollLeft();

            // Location of the bottom of the element
            var bot = h + y;

            // Location of the right of the element
            var right = w + x;

            // The distance from the cursor to the bottom of the visible area,
            // adjusted so that we don't scroll if the cursor is beyond the
            // element drag constraints
            var toBot = (clientH + st - y - this.deltaY);

            // The distance from the cursor to the right of the visible area
            var toRight = (clientW + sl - x - this.deltaX);


            // How close to the edge the cursor must be before we scroll
            // var thresh = (document.all) ? 100 : 40;
            var thresh = 40;

            // How many pixels to scroll per autoscroll op.  This helps to reduce
            // clunky scrolling. IE is more sensitive about this ... it needs this
            // value to be higher.
            var scrAmt = (document.all) ? 80 : 30;

            // Scroll down if we are near the bottom of the visible page and the
            // obj extends below the crease
            if ( bot > clientH && toBot < thresh ) {
                window.scrollTo(sl, st + scrAmt);
            }

            // Scroll up if the window is scrolled down and the top of the object
            // goes above the top border
            if ( y < st && st > 0 && y - st < thresh ) {
                window.scrollTo(sl, st - scrAmt);
            }

            // Scroll right if the obj is beyond the right border and the cursor is
            // near the border.
            if ( right > clientW && toRight < thresh ) {
                window.scrollTo(sl + scrAmt, st);
            }

            // Scroll left if the window has been scrolled to the right and the obj
            // extends past the left border
            if ( x < sl && sl > 0 && x - sl < thresh ) {
                window.scrollTo(sl - scrAmt, st);
            }
        }
    },

    
    getTargetCoord: function(iPageX, iPageY) {


        var x = iPageX - this.deltaX;
        var y = iPageY - this.deltaY;

        if (this.constrainX) {
            if (x < this.minX) { x = this.minX; }
            if (x > this.maxX) { x = this.maxX; }
        }

        if (this.constrainY) {
            if (y < this.minY) { y = this.minY; }
            if (y > this.maxY) { y = this.maxY; }
        }

        x = this.getTick(x, this.xTicks);
        y = this.getTick(y, this.yTicks);


        return {x:x, y:y};
    },

    
    applyConfig: function() {
        Ext.dd.DD.superclass.applyConfig.call(this);
        this.scroll = (this.config.scroll !== false);
    },

    
    b4MouseDown: function(e) {
        // this.resetConstraints();
        this.autoOffset(e.getPageX(),
                            e.getPageY());
    },

    
    b4Drag: function(e) {
        this.setDragElPos(e.getPageX(),
                            e.getPageY());
    },

    toString: function() {
        return ("DD " + this.id);
    }

    //////////////////////////////////////////////////////////////////////////
    // Debugging ygDragDrop events that can be overridden
    //////////////////////////////////////////////////////////////////////////
    

});

Ext.dd.DDProxy = function(id, sGroup, config) {
    if (id) {
        this.init(id, sGroup, config);
        this.initFrame();
    }
};


Ext.dd.DDProxy.dragElId = "ygddfdiv";

Ext.extend(Ext.dd.DDProxy, Ext.dd.DD, {

    
    resizeFrame: true,

    
    centerFrame: false,

    
    createFrame: function() {
        var self = this;
        var body = document.body;

        if (!body || !body.firstChild) {
            setTimeout( function() { self.createFrame(); }, 50 );
            return;
        }

        var div = this.getDragEl();

        if (!div) {
            div    = document.createElement("div");
            div.id = this.dragElId;
            var s  = div.style;

            s.position   = "absolute";
            s.visibility = "hidden";
            s.cursor     = "move";
            s.border     = "2px solid #aaa";
            s.zIndex     = 999;

            // appendChild can blow up IE if invoked prior to the window load event
            // while rendering a table.  It is possible there are other scenarios
            // that would cause this to happen as well.
            body.insertBefore(div, body.firstChild);
        }
    },

    
    initFrame: function() {
        this.createFrame();
    },

    applyConfig: function() {
        Ext.dd.DDProxy.superclass.applyConfig.call(this);

        this.resizeFrame = (this.config.resizeFrame !== false);
        this.centerFrame = (this.config.centerFrame);
        this.setDragElId(this.config.dragElId || Ext.dd.DDProxy.dragElId);
    },

    
    showFrame: function(iPageX, iPageY) {
        var el = this.getEl();
        var dragEl = this.getDragEl();
        var s = dragEl.style;

        this._resizeProxy();

        if (this.centerFrame) {
            this.setDelta( Math.round(parseInt(s.width,  10)/2),
                           Math.round(parseInt(s.height, 10)/2) );
        }

        this.setDragElPos(iPageX, iPageY);

        Ext.fly(dragEl).show();
    },

    
    _resizeProxy: function() {
        if (this.resizeFrame) {
            var el = this.getEl();
            Ext.fly(this.getDragEl()).setSize(el.offsetWidth, el.offsetHeight);
        }
    },

    // overrides Ext.dd.DragDrop
    b4MouseDown: function(e) {
        var x = e.getPageX();
        var y = e.getPageY();
        this.autoOffset(x, y);
        this.setDragElPos(x, y);
    },

    // overrides Ext.dd.DragDrop
    b4StartDrag: function(x, y) {
        // show the drag frame
        this.showFrame(x, y);
    },

    // overrides Ext.dd.DragDrop
    b4EndDrag: function(e) {
        Ext.fly(this.getDragEl()).hide();
    },

    // overrides Ext.dd.DragDrop
    // By default we try to move the element to the last location of the frame.
    // This is so that the default behavior mirrors that of Ext.dd.DD.
    endDrag: function(e) {

        var lel = this.getEl();
        var del = this.getDragEl();

        // Show the drag frame briefly so we can get its position
        del.style.visibility = "";

        this.beforeMove();
        // Hide the linked element before the move to get around a Safari
        // rendering bug.
        lel.style.visibility = "hidden";
        Ext.dd.DDM.moveToEl(lel, del);
        del.style.visibility = "hidden";
        lel.style.visibility = "";

        this.afterDrag();
    },

    beforeMove : function(){

    },

    afterDrag : function(){

    },

    toString: function() {
        return ("DDProxy " + this.id);
    }

});

Ext.dd.DDTarget = function(id, sGroup, config) {
    if (id) {
        this.initTarget(id, sGroup, config);
    }
};

// Ext.dd.DDTarget.prototype = new Ext.dd.DragDrop();
Ext.extend(Ext.dd.DDTarget, Ext.dd.DragDrop, {
    toString: function() {
        return ("DDTarget " + this.id);
    }
});

Ext.dd.DragTracker = function(config){
    Ext.apply(this, config);
    this.addEvents(
        'mousedown',
        'mouseup',
        'mousemove',
        'dragstart',
        'dragend',
        'drag'
    );

    this.dragRegion = new Ext.lib.Region(0,0,0,0);

    if(this.el){
        this.initEl(this.el);
    }
}

Ext.extend(Ext.dd.DragTracker, Ext.util.Observable,  {
    active: false,
    tolerance: 5,
    autoStart: false,

    initEl: function(el){
        this.el = Ext.get(el);
        el.on('mousedown', this.onMouseDown, this,
                this.delegate ? {delegate: this.delegate} : undefined);
    },

    destroy : function(){
        this.el.un('mousedown', this.onMouseDown, this);
    },

    onMouseDown: function(e, target){
        if(this.fireEvent('mousedown', this, e) !== false && this.onBeforeStart(e) !== false){
            this.startXY = this.lastXY = e.getXY();
            this.dragTarget = this.delegate ? target : this.el.dom;
            e.preventDefault();
            var doc = Ext.getDoc();
            doc.on('mouseup', this.onMouseUp, this);
            doc.on('mousemove', this.onMouseMove, this);
            doc.on('selectstart', this.stopSelect, this);
            if(this.autoStart){
                this.timer = this.triggerStart.defer(this.autoStart === true ? 1000 : this.autoStart, this);
            }
        }
    },

    onMouseMove: function(e, target){
        e.preventDefault();
        var xy = e.getXY(), s = this.startXY;
        this.lastXY = xy;
        if(!this.active){
            if(Math.abs(s[0]-xy[0]) > this.tolerance || Math.abs(s[1]-xy[1]) > this.tolerance){
                this.triggerStart();
            }else{
                return;
            }
        }
        this.fireEvent('mousemove', this, e);
        this.onDrag(e);
        this.fireEvent('drag', this, e);
    },

    onMouseUp: function(e){
        var doc = Ext.getDoc();
        doc.un('mousemove', this.onMouseMove, this);
        doc.un('mouseup', this.onMouseUp, this);
        doc.un('selectstart', this.stopSelect, this);
        e.preventDefault();
        this.clearStart();
        this.active = false;
        delete this.elRegion;
        this.fireEvent('mouseup', this, e);
        this.onEnd(e);
        this.fireEvent('dragend', this, e);
    },

    triggerStart: function(isTimer){
        this.clearStart();
        this.active = true;
        this.onStart(this.startXY);
        this.fireEvent('dragstart', this, this.startXY);
    },

    clearStart : function(){
        if(this.timer){
            clearTimeout(this.timer);
            delete this.timer;
        }
    },

    stopSelect : function(e){
        e.stopEvent();
        return false;
    },

    onBeforeStart : function(e){

    },

    onStart : function(xy){

    },

    onDrag : function(e){

    },

    onEnd : function(e){

    },

    getDragTarget : function(){
        return this.dragTarget;
    },

    getDragCt : function(){
        return this.el;
    },

    getXY : function(constrain){
        return constrain ?
               this.constrainModes[constrain].call(this, this.lastXY) : this.lastXY;
    },

    getOffset : function(constrain){
        var xy = this.getXY(constrain);
        var s = this.startXY;
        return [s[0]-xy[0], s[1]-xy[1]];
    },

    constrainModes: {
        'point' : function(xy){

            if(!this.elRegion){
                this.elRegion = this.getDragCt().getRegion();
            }

            var dr = this.dragRegion;

            dr.left = xy[0];
            dr.top = xy[1];
            dr.right = xy[0];
            dr.bottom = xy[1];

            dr.constrainTo(this.elRegion);

            return [dr.left, dr.top];
        }
    }
});

Ext.dd.ScrollManager = function(){
    var ddm = Ext.dd.DragDropMgr;
    var els = {};
    var dragEl = null;
    var proc = {};
    
    var onStop = function(e){
        dragEl = null;
        clearProc();
    };
    
    var triggerRefresh = function(){
        if(ddm.dragCurrent){
             ddm.refreshCache(ddm.dragCurrent.groups);
        }
    };
    
    var doScroll = function(){
        if(ddm.dragCurrent){
            var dds = Ext.dd.ScrollManager;
            var inc = proc.el.ddScrollConfig ?
                      proc.el.ddScrollConfig.increment : dds.increment;
            if(!dds.animate){
                if(proc.el.scroll(proc.dir, inc)){
                    triggerRefresh();
                }
            }else{
                proc.el.scroll(proc.dir, inc, true, dds.animDuration, triggerRefresh);
            }
        }
    };
    
    var clearProc = function(){
        if(proc.id){
            clearInterval(proc.id);
        }
        proc.id = 0;
        proc.el = null;
        proc.dir = "";
    };
    
    var startProc = function(el, dir){
        clearProc();
        proc.el = el;
        proc.dir = dir;
        var freq = (el.ddScrollConfig && el.ddScrollConfig.frequency) ? 
                el.ddScrollConfig.frequency : Ext.dd.ScrollManager.frequency;
        proc.id = setInterval(doScroll, freq);
    };
    
    var onFire = function(e, isDrop){
        if(isDrop || !ddm.dragCurrent){ return; }
        var dds = Ext.dd.ScrollManager;
        if(!dragEl || dragEl != ddm.dragCurrent){
            dragEl = ddm.dragCurrent;
            // refresh regions on drag start
            dds.refreshCache();
        }
        
        var xy = Ext.lib.Event.getXY(e);
        var pt = new Ext.lib.Point(xy[0], xy[1]);
        for(var id in els){
            var el = els[id], r = el._region;
            var c = el.ddScrollConfig ? el.ddScrollConfig : dds;
            if(r && r.contains(pt) && el.isScrollable()){
                if(r.bottom - pt.y <= c.vthresh){
                    if(proc.el != el){
                        startProc(el, "down");
                    }
                    return;
                }else if(r.right - pt.x <= c.hthresh){
                    if(proc.el != el){
                        startProc(el, "left");
                    }
                    return;
                }else if(pt.y - r.top <= c.vthresh){
                    if(proc.el != el){
                        startProc(el, "up");
                    }
                    return;
                }else if(pt.x - r.left <= c.hthresh){
                    if(proc.el != el){
                        startProc(el, "right");
                    }
                    return;
                }
            }
        }
        clearProc();
    };
    
    ddm.fireEvents = ddm.fireEvents.createSequence(onFire, ddm);
    ddm.stopDrag = ddm.stopDrag.createSequence(onStop, ddm);
    
    return {
        
        register : function(el){
            if(Ext.isArray(el)){
                for(var i = 0, len = el.length; i < len; i++) {
                	this.register(el[i]);
                }
            }else{
                el = Ext.get(el);
                els[el.id] = el;
            }
        },
        
        
        unregister : function(el){
            if(Ext.isArray(el)){
                for(var i = 0, len = el.length; i < len; i++) {
                	this.unregister(el[i]);
                }
            }else{
                el = Ext.get(el);
                delete els[el.id];
            }
        },
        
        
        vthresh : 25,
        
        hthresh : 25,

        
        increment : 100,
        
        
        frequency : 500,
        
        
        animate: true,
        
        
        animDuration: .4,
        
        
        refreshCache : function(){
            for(var id in els){
                if(typeof els[id] == 'object'){ // for people extending the object prototype
                    els[id]._region = els[id].getRegion();
                }
            }
        }
    };
}();

Ext.dd.Registry = function(){
    var elements = {}; 
    var handles = {}; 
    var autoIdSeed = 0;

    var getId = function(el, autogen){
        if(typeof el == "string"){
            return el;
        }
        var id = el.id;
        if(!id && autogen !== false){
            id = "extdd-" + (++autoIdSeed);
            el.id = id;
        }
        return id;
    };
    
    return {
    
        register : function(el, data){
            data = data || {};
            if(typeof el == "string"){
                el = document.getElementById(el);
            }
            data.ddel = el;
            elements[getId(el)] = data;
            if(data.isHandle !== false){
                handles[data.ddel.id] = data;
            }
            if(data.handles){
                var hs = data.handles;
                for(var i = 0, len = hs.length; i < len; i++){
                	handles[getId(hs[i])] = data;
                }
            }
        },

    
        unregister : function(el){
            var id = getId(el, false);
            var data = elements[id];
            if(data){
                delete elements[id];
                if(data.handles){
                    var hs = data.handles;
                    for(var i = 0, len = hs.length; i < len; i++){
                    	delete handles[getId(hs[i], false)];
                    }
                }
            }
        },

    
        getHandle : function(id){
            if(typeof id != "string"){ // must be element?
                id = id.id;
            }
            return handles[id];
        },

    
        getHandleFromEvent : function(e){
            var t = Ext.lib.Event.getTarget(e);
            return t ? handles[t.id] : null;
        },

    
        getTarget : function(id){
            if(typeof id != "string"){ // must be element?
                id = id.id;
            }
            return elements[id];
        },

    
        getTargetFromEvent : function(e){
            var t = Ext.lib.Event.getTarget(e);
            return t ? elements[t.id] || handles[t.id] : null;
        }
    };
}();

Ext.dd.StatusProxy = function(config){
    Ext.apply(this, config);
    this.id = this.id || Ext.id();
    this.el = new Ext.Layer({
        dh: {
            id: this.id, tag: "div", cls: "x-dd-drag-proxy "+this.dropNotAllowed, children: [
                {tag: "div", cls: "x-dd-drop-icon"},
                {tag: "div", cls: "x-dd-drag-ghost"}
            ]
        }, 
        shadow: !config || config.shadow !== false
    });
    this.ghost = Ext.get(this.el.dom.childNodes[1]);
    this.dropStatus = this.dropNotAllowed;
};

Ext.dd.StatusProxy.prototype = {
    
    dropAllowed : "x-dd-drop-ok",
    
    dropNotAllowed : "x-dd-drop-nodrop",

    
    setStatus : function(cssClass){
        cssClass = cssClass || this.dropNotAllowed;
        if(this.dropStatus != cssClass){
            this.el.replaceClass(this.dropStatus, cssClass);
            this.dropStatus = cssClass;
        }
    },

    
    reset : function(clearGhost){
        this.el.dom.className = "x-dd-drag-proxy " + this.dropNotAllowed;
        this.dropStatus = this.dropNotAllowed;
        if(clearGhost){
            this.ghost.update("");
        }
    },

    
    update : function(html){
        if(typeof html == "string"){
            this.ghost.update(html);
        }else{
            this.ghost.update("");
            html.style.margin = "0";
            this.ghost.dom.appendChild(html);
        }
        var el = this.ghost.dom.firstChild; 
        if(el){
            Ext.fly(el).setStyle(Ext.isIE ? 'styleFloat' : 'cssFloat', 'none');
        }
    },

    
    getEl : function(){
        return this.el;
    },

    
    getGhost : function(){
        return this.ghost;
    },

    
    hide : function(clear){
        this.el.hide();
        if(clear){
            this.reset(true);
        }
    },

    
    stop : function(){
        if(this.anim && this.anim.isAnimated && this.anim.isAnimated()){
            this.anim.stop();
        }
    },

    
    show : function(){
        this.el.show();
    },

    
    sync : function(){
        this.el.sync();
    },

    
    repair : function(xy, callback, scope){
        this.callback = callback;
        this.scope = scope;
        if(xy && this.animRepair !== false){
            this.el.addClass("x-dd-drag-repair");
            this.el.hideUnders(true);
            this.anim = this.el.shift({
                duration: this.repairDuration || .5,
                easing: 'easeOut',
                xy: xy,
                stopFx: true,
                callback: this.afterRepair,
                scope: this
            });
        }else{
            this.afterRepair();
        }
    },

    // private
    afterRepair : function(){
        this.hide(true);
        if(typeof this.callback == "function"){
            this.callback.call(this.scope || this);
        }
        this.callback = null;
        this.scope = null;
    }
};

Ext.dd.DragSource = function(el, config){
    this.el = Ext.get(el);
    if(!this.dragData){
        this.dragData = {};
    }
    
    Ext.apply(this, config);
    
    if(!this.proxy){
        this.proxy = new Ext.dd.StatusProxy();
    }
    Ext.dd.DragSource.superclass.constructor.call(this, this.el.dom, this.ddGroup || this.group, 
          {dragElId : this.proxy.id, resizeFrame: false, isTarget: false, scroll: this.scroll === true});
    
    this.dragging = false;
};

Ext.extend(Ext.dd.DragSource, Ext.dd.DDProxy, {
    
    
    dropAllowed : "x-dd-drop-ok",
    
    dropNotAllowed : "x-dd-drop-nodrop",

    
    getDragData : function(e){
        return this.dragData;
    },

    // private
    onDragEnter : function(e, id){
        var target = Ext.dd.DragDropMgr.getDDById(id);
        this.cachedTarget = target;
        if(this.beforeDragEnter(target, e, id) !== false){
            if(target.isNotifyTarget){
                var status = target.notifyEnter(this, e, this.dragData);
                this.proxy.setStatus(status);
            }else{
                this.proxy.setStatus(this.dropAllowed);
            }
            
            if(this.afterDragEnter){
                
                this.afterDragEnter(target, e, id);
            }
        }
    },

    
    beforeDragEnter : function(target, e, id){
        return true;
    },

    // private
    alignElWithMouse: function() {
        Ext.dd.DragSource.superclass.alignElWithMouse.apply(this, arguments);
        this.proxy.sync();
    },

    // private
    onDragOver : function(e, id){
        var target = this.cachedTarget || Ext.dd.DragDropMgr.getDDById(id);
        if(this.beforeDragOver(target, e, id) !== false){
            if(target.isNotifyTarget){
                var status = target.notifyOver(this, e, this.dragData);
                this.proxy.setStatus(status);
            }

            if(this.afterDragOver){
                
                this.afterDragOver(target, e, id);
            }
        }
    },

    
    beforeDragOver : function(target, e, id){
        return true;
    },

    // private
    onDragOut : function(e, id){
        var target = this.cachedTarget || Ext.dd.DragDropMgr.getDDById(id);
        if(this.beforeDragOut(target, e, id) !== false){
            if(target.isNotifyTarget){
                target.notifyOut(this, e, this.dragData);
            }
            this.proxy.reset();
            if(this.afterDragOut){
                
                this.afterDragOut(target, e, id);
            }
        }
        this.cachedTarget = null;
    },

    
    beforeDragOut : function(target, e, id){
        return true;
    },
    
    // private
    onDragDrop : function(e, id){
        var target = this.cachedTarget || Ext.dd.DragDropMgr.getDDById(id);
        if(this.beforeDragDrop(target, e, id) !== false){
            if(target.isNotifyTarget){
                if(target.notifyDrop(this, e, this.dragData)){ // valid drop?
                    this.onValidDrop(target, e, id);
                }else{
                    this.onInvalidDrop(target, e, id);
                }
            }else{
                this.onValidDrop(target, e, id);
            }
            
            if(this.afterDragDrop){
                
                this.afterDragDrop(target, e, id);
            }
        }
        delete this.cachedTarget;
    },

    
    beforeDragDrop : function(target, e, id){
        return true;
    },

    // private
    onValidDrop : function(target, e, id){
        this.hideProxy();
        if(this.afterValidDrop){
            
            this.afterValidDrop(target, e, id);
        }
    },

    // private
    getRepairXY : function(e, data){
        return this.el.getXY();  
    },

    // private
    onInvalidDrop : function(target, e, id){
        this.beforeInvalidDrop(target, e, id);
        if(this.cachedTarget){
            if(this.cachedTarget.isNotifyTarget){
                this.cachedTarget.notifyOut(this, e, this.dragData);
            }
            this.cacheTarget = null;
        }
        this.proxy.repair(this.getRepairXY(e, this.dragData), this.afterRepair, this);

        if(this.afterInvalidDrop){
            
            this.afterInvalidDrop(e, id);
        }
    },

    // private
    afterRepair : function(){
        if(Ext.enableFx){
            this.el.highlight(this.hlColor || "c3daf9");
        }
        this.dragging = false;
    },

    
    beforeInvalidDrop : function(target, e, id){
        return true;
    },

    // private
    handleMouseDown : function(e){
        if(this.dragging) {
            return;
        }
        var data = this.getDragData(e);
        if(data && this.onBeforeDrag(data, e) !== false){
            this.dragData = data;
            this.proxy.stop();
            Ext.dd.DragSource.superclass.handleMouseDown.apply(this, arguments);
        } 
    },

    
    onBeforeDrag : function(data, e){
        return true;
    },

    
    onStartDrag : Ext.emptyFn,

    // private override
    startDrag : function(x, y){
        this.proxy.reset();
        this.dragging = true;
        this.proxy.update("");
        this.onInitDrag(x, y);
        this.proxy.show();
    },

    // private
    onInitDrag : function(x, y){
        var clone = this.el.dom.cloneNode(true);
        clone.id = Ext.id(); // prevent duplicate ids
        this.proxy.update(clone);
        this.onStartDrag(x, y);
        return true;
    },

    
    getProxy : function(){
        return this.proxy;  
    },

    
    hideProxy : function(){
        this.proxy.hide();  
        this.proxy.reset(true);
        this.dragging = false;
    },

    // private
    triggerCacheRefresh : function(){
        Ext.dd.DDM.refreshCache(this.groups);
    },

    // private - override to prevent hiding
    b4EndDrag: function(e) {
    },

    // private - override to prevent moving
    endDrag : function(e){
        this.onEndDrag(this.dragData, e);
    },

    // private
    onEndDrag : function(data, e){
    },
    
    // private - pin to cursor
    autoOffset : function(x, y) {
        this.setDelta(-12, -20);
    }    
});

Ext.dd.DropTarget = function(el, config){
    this.el = Ext.get(el);
    
    Ext.apply(this, config);
    
    if(this.containerScroll){
        Ext.dd.ScrollManager.register(this.el);
    }
    
    Ext.dd.DropTarget.superclass.constructor.call(this, this.el.dom, this.ddGroup || this.group, 
          {isTarget: true});

};

Ext.extend(Ext.dd.DropTarget, Ext.dd.DDTarget, {
    
    
    
    dropAllowed : "x-dd-drop-ok",
    
    dropNotAllowed : "x-dd-drop-nodrop",

    // private
    isTarget : true,

    // private
    isNotifyTarget : true,

    
    notifyEnter : function(dd, e, data){
        if(this.overClass){
            this.el.addClass(this.overClass);
        }
        return this.dropAllowed;
    },

    
    notifyOver : function(dd, e, data){
        return this.dropAllowed;
    },

    
    notifyOut : function(dd, e, data){
        if(this.overClass){
            this.el.removeClass(this.overClass);
        }
    },

    
    notifyDrop : function(dd, e, data){
        return false;
    }
});

Ext.dd.DragZone = function(el, config){
    Ext.dd.DragZone.superclass.constructor.call(this, el, config);
    if(this.containerScroll){
        Ext.dd.ScrollManager.register(this.el);
    }
};

Ext.extend(Ext.dd.DragZone, Ext.dd.DragSource, {
    
    

    
    getDragData : function(e){
        return Ext.dd.Registry.getHandleFromEvent(e);
    },
    
    
    onInitDrag : function(x, y){
        this.proxy.update(this.dragData.ddel.cloneNode(true));
        this.onStartDrag(x, y);
        return true;
    },
    
    
    afterRepair : function(){
        if(Ext.enableFx){
            Ext.Element.fly(this.dragData.ddel).highlight(this.hlColor || "c3daf9");
        }
        this.dragging = false;
    },

    
    getRepairXY : function(e){
        return Ext.Element.fly(this.dragData.ddel).getXY();  
    }
});

Ext.dd.DropZone = function(el, config){
    Ext.dd.DropZone.superclass.constructor.call(this, el, config);
};

Ext.extend(Ext.dd.DropZone, Ext.dd.DropTarget, {
    
    getTargetFromEvent : function(e){
        return Ext.dd.Registry.getTargetFromEvent(e);
    },

    
    onNodeEnter : function(n, dd, e, data){
        
    },

    
    onNodeOver : function(n, dd, e, data){
        return this.dropAllowed;
    },

    
    onNodeOut : function(n, dd, e, data){
        
    },

    
    onNodeDrop : function(n, dd, e, data){
        return false;
    },

    
    onContainerOver : function(dd, e, data){
        return this.dropNotAllowed;
    },

    
    onContainerDrop : function(dd, e, data){
        return false;
    },

    
    notifyEnter : function(dd, e, data){
        return this.dropNotAllowed;
    },

    
    notifyOver : function(dd, e, data){
        var n = this.getTargetFromEvent(e);
        if(!n){ // not over valid drop target
            if(this.lastOverNode){
                this.onNodeOut(this.lastOverNode, dd, e, data);
                this.lastOverNode = null;
            }
            return this.onContainerOver(dd, e, data);
        }
        if(this.lastOverNode != n){
            if(this.lastOverNode){
                this.onNodeOut(this.lastOverNode, dd, e, data);
            }
            this.onNodeEnter(n, dd, e, data);
            this.lastOverNode = n;
        }
        return this.onNodeOver(n, dd, e, data);
    },

    
    notifyOut : function(dd, e, data){
        if(this.lastOverNode){
            this.onNodeOut(this.lastOverNode, dd, e, data);
            this.lastOverNode = null;
        }
    },

    
    notifyDrop : function(dd, e, data){
        if(this.lastOverNode){
            this.onNodeOut(this.lastOverNode, dd, e, data);
            this.lastOverNode = null;
        }
        var n = this.getTargetFromEvent(e);
        return n ?
            this.onNodeDrop(n, dd, e, data) :
            this.onContainerDrop(dd, e, data);
    },

    // private
    triggerCacheRefresh : function(){
        Ext.dd.DDM.refreshCache(this.groups);
    }  
});


Ext.data.SortTypes = {
    
    none : function(s){
        return s;
    },
    
    
    stripTagsRE : /<\/?[^>]+>/gi,
    
    
    asText : function(s){
        return String(s).replace(this.stripTagsRE, "");
    },
    
    
    asUCText : function(s){
        return String(s).toUpperCase().replace(this.stripTagsRE, "");
    },
    
    
    asUCString : function(s) {
    	return String(s).toUpperCase();
    },
    
    
    asDate : function(s) {
        if(!s){
            return 0;
        }
        if(Ext.isDate(s)){
            return s.getTime();
        }
    	return Date.parse(String(s));
    },
    
    
    asFloat : function(s) {
    	var val = parseFloat(String(s).replace(/,/g, ""));
        if(isNaN(val)) val = 0;
    	return val;
    },
    
    
    asInt : function(s) {
        var val = parseInt(String(s).replace(/,/g, ""));
        if(isNaN(val)) val = 0;
    	return val;
    }
};

Ext.data.Record = function(data, id){
    this.id = (id || id === 0) ? id : ++Ext.data.Record.AUTO_ID;
    this.data = data;
};


Ext.data.Record.create = function(o){
    var f = Ext.extend(Ext.data.Record, {});
    var p = f.prototype;
    p.fields = new Ext.util.MixedCollection(false, function(field){
        return field.name;
    });
    for(var i = 0, len = o.length; i < len; i++){
        p.fields.add(new Ext.data.Field(o[i]));
    }
    f.getField = function(name){
        return p.fields.get(name);
    };
    return f;
};

Ext.data.Record.AUTO_ID = 1000;
Ext.data.Record.EDIT = 'edit';
Ext.data.Record.REJECT = 'reject';
Ext.data.Record.COMMIT = 'commit';

Ext.data.Record.prototype = {
    
    
    
    
    dirty : false,
    editing : false,
    error: null,
    
    modified: null,

    // private
    join : function(store){
        this.store = store;
    },

    
    set : function(name, value){
        if(String(this.data[name]) == String(value)){
            return;
        }
        this.dirty = true;
        if(!this.modified){
            this.modified = {};
        }
        if(typeof this.modified[name] == 'undefined'){
            this.modified[name] = this.data[name];
        }
        this.data[name] = value;
        if(!this.editing && this.store){
            this.store.afterEdit(this);
        }
    },

    
    get : function(name){
        return this.data[name];
    },

    
    beginEdit : function(){
        this.editing = true;
        this.modified = {};
    },

    
    cancelEdit : function(){
        this.editing = false;
        delete this.modified;
    },

    
    endEdit : function(){
        this.editing = false;
        if(this.dirty && this.store){
            this.store.afterEdit(this);
        }
    },

    
    reject : function(silent){
        var m = this.modified;
        for(var n in m){
            if(typeof m[n] != "function"){
                this.data[n] = m[n];
            }
        }
        this.dirty = false;
        delete this.modified;
        this.editing = false;
        if(this.store && silent !== true){
            this.store.afterReject(this);
        }
    },

    
    commit : function(silent){
        this.dirty = false;
        delete this.modified;
        this.editing = false;
        if(this.store && silent !== true){
            this.store.afterCommit(this);
        }
    },

    
    getChanges : function(){
        var m = this.modified, cs = {};
        for(var n in m){
            if(m.hasOwnProperty(n)){
                cs[n] = this.data[n];
            }
        }
        return cs;
    },

    // private
    hasError : function(){
        return this.error != null;
    },

    // private
    clearError : function(){
        this.error = null;
    },

    
    copy : function(newId) {
        return new this.constructor(Ext.apply({}, this.data), newId || this.id);
    },

    
    isModified : function(fieldName){
        return !!(this.modified && this.modified.hasOwnProperty(fieldName));
    }
};

Ext.StoreMgr = Ext.apply(new Ext.util.MixedCollection(), {
    

    
    register : function(){
        for(var i = 0, s; s = arguments[i]; i++){
            this.add(s);
        }
    },

    
    unregister : function(){
        for(var i = 0, s; s = arguments[i]; i++){
            this.remove(this.lookup(s));
        }
    },

    
    lookup : function(id){
        return typeof id == "object" ? id : this.get(id);
    },

    // getKey implementation for MixedCollection
    getKey : function(o){
         return o.storeId || o.id;
    }
});

Ext.data.Store = function(config){
    this.data = new Ext.util.MixedCollection(false);
    this.data.getKey = function(o){
        return o.id;
    };
    
    this.baseParams = {};
    
    this.paramNames = {
        "start" : "start",
        "limit" : "limit",
        "sort" : "sort",
        "dir" : "dir"
    };

    if(config && config.data){
        this.inlineData = config.data;
        delete config.data;
    }

    Ext.apply(this, config);

    if(this.url && !this.proxy){
        this.proxy = new Ext.data.HttpProxy({url: this.url});
    }

    if(this.reader){ // reader passed
        if(!this.recordType){
            this.recordType = this.reader.recordType;
        }
        if(this.reader.onMetaChange){
            this.reader.onMetaChange = this.onMetaChange.createDelegate(this);
        }
    }

    
    if(this.recordType){
        
        this.fields = this.recordType.prototype.fields;
    }
    this.modified = [];

    this.addEvents(
        
        'datachanged',
        
        'metachange',
        
        'add',
        
        'remove',
        
        'update',
        
        'clear',
        
        'beforeload',
        
        'load',
        
        'loadexception'
    );

    if(this.proxy){
        this.relayEvents(this.proxy,  ["loadexception"]);
    }

    this.sortToggle = {};
    if(this.sortInfo){
        this.setDefaultSort(this.sortInfo.field, this.sortInfo.direction);
    }

    Ext.data.Store.superclass.constructor.call(this);

    if(this.storeId || this.id){
        Ext.StoreMgr.register(this);
    }
    if(this.inlineData){
        this.loadData(this.inlineData);
        delete this.inlineData;
    }else if(this.autoLoad){
        this.load.defer(10, this, [
            typeof this.autoLoad == 'object' ?
                this.autoLoad : undefined]);
    }
};
Ext.extend(Ext.data.Store, Ext.util.Observable, {
    
    
    
    
    
    
    
    
    
    remoteSort : false,

    
    pruneModifiedRecords : false,

    
   lastOptions : null,

    destroy : function(){
        if(this.storeId || this.id){
            Ext.StoreMgr.unregister(this);
        }
        this.data = null;
        this.purgeListeners();
    },

    
    add : function(records){
        records = [].concat(records);
        if(records.length < 1){
            return;
        }
        for(var i = 0, len = records.length; i < len; i++){
            records[i].join(this);
        }
        var index = this.data.length;
        this.data.addAll(records);
        if(this.snapshot){
            this.snapshot.addAll(records);
        }
        this.fireEvent("add", this, records, index);
    },

    
    addSorted : function(record){
        var index = this.findInsertIndex(record);
        this.insert(index, record);
    },

    
    remove : function(record){
        var index = this.data.indexOf(record);
        this.data.removeAt(index);
        if(this.pruneModifiedRecords){
            this.modified.remove(record);
        }
        if(this.snapshot){
            this.snapshot.remove(record);
        }
        this.fireEvent("remove", this, record, index);
    },
    
    
    removeAt : function(index){
        this.remove(this.getAt(index));    
    },

    
    removeAll : function(){
        this.data.clear();
        if(this.snapshot){
            this.snapshot.clear();
        }
        if(this.pruneModifiedRecords){
            this.modified = [];
        }
        this.fireEvent("clear", this);
    },

    
    insert : function(index, records){
        records = [].concat(records);
        for(var i = 0, len = records.length; i < len; i++){
            this.data.insert(index, records[i]);
            records[i].join(this);
        }
        this.fireEvent("add", this, records, index);
    },

    
    indexOf : function(record){
        return this.data.indexOf(record);
    },

    
    indexOfId : function(id){
        return this.data.indexOfKey(id);
    },

    
    getById : function(id){
        return this.data.key(id);
    },

    
    getAt : function(index){
        return this.data.itemAt(index);
    },

    
    getRange : function(start, end){
        return this.data.getRange(start, end);
    },

    // private
    storeOptions : function(o){
        o = Ext.apply({}, o);
        delete o.callback;
        delete o.scope;
        this.lastOptions = o;
    },

    
    load : function(options){
        options = options || {};
        if(this.fireEvent("beforeload", this, options) !== false){
            this.storeOptions(options);
            var p = Ext.apply(options.params || {}, this.baseParams);
            if(this.sortInfo && this.remoteSort){
                var pn = this.paramNames;
                p[pn["sort"]] = this.sortInfo.field;
                p[pn["dir"]] = this.sortInfo.direction;
            }
            this.proxy.load(p, this.reader, this.loadRecords, this, options);
            return true;
        } else {
          return false;
        }
    },

    
    reload : function(options){
        this.load(Ext.applyIf(options||{}, this.lastOptions));
    },

    // private
    // Called as a callback by the Reader during a load operation.
    loadRecords : function(o, options, success){
        if(!o || success === false){
            if(success !== false){
                this.fireEvent("load", this, [], options);
            }
            if(options.callback){
                options.callback.call(options.scope || this, [], options, false);
            }
            return;
        }
        var r = o.records, t = o.totalRecords || r.length;
        if(!options || options.add !== true){
            if(this.pruneModifiedRecords){
                this.modified = [];
            }
            for(var i = 0, len = r.length; i < len; i++){
                r[i].join(this);
            }
            if(this.snapshot){
                this.data = this.snapshot;
                delete this.snapshot;
            }
            this.data.clear();
            this.data.addAll(r);
            this.totalLength = t;
            this.applySort();
            this.fireEvent("datachanged", this);
        }else{
            this.totalLength = Math.max(t, this.data.length+r.length);
            this.add(r);
        }
        this.fireEvent("load", this, r, options);
        if(options.callback){
            options.callback.call(options.scope || this, r, options, true);
        }
    },

    
    loadData : function(o, append){
        var r = this.reader.readRecords(o);
        this.loadRecords(r, {add: append}, true);
    },

    
    getCount : function(){
        return this.data.length || 0;
    },

    
    getTotalCount : function(){
        return this.totalLength || 0;
    },

    
    getSortState : function(){
        return this.sortInfo;
    },

    // private
    applySort : function(){
        if(this.sortInfo && !this.remoteSort){
            var s = this.sortInfo, f = s.field;
            this.sortData(f, s.direction);
        }
    },

    // private
    sortData : function(f, direction){
        direction = direction || 'ASC';
        var st = this.fields.get(f).sortType;
        var fn = function(r1, r2){
            var v1 = st(r1.data[f]), v2 = st(r2.data[f]);
            return v1 > v2 ? 1 : (v1 < v2 ? -1 : 0);
        };
        this.data.sort(direction, fn);
        if(this.snapshot && this.snapshot != this.data){
            this.snapshot.sort(direction, fn);
        }
    },

    
    setDefaultSort : function(field, dir){
        dir = dir ? dir.toUpperCase() : "ASC";
        this.sortInfo = {field: field, direction: dir};
        this.sortToggle[field] = dir;
    },

    
    sort : function(fieldName, dir){
        var f = this.fields.get(fieldName);
        if(!f){
            return false;
        }
        if(!dir){
            if(this.sortInfo && this.sortInfo.field == f.name){ // toggle sort dir
                dir = (this.sortToggle[f.name] || "ASC").toggle("ASC", "DESC");
            }else{
                dir = f.sortDir;
            }
        }
        var st = (this.sortToggle) ? this.sortToggle[f.name] : null;
        var si = (this.sortInfo) ? this.sortInfo : null;

        this.sortToggle[f.name] = dir;
        this.sortInfo = {field: f.name, direction: dir};
        if(!this.remoteSort){
            this.applySort();
            this.fireEvent("datachanged", this);
        }else{
            if (!this.load(this.lastOptions)) {
                if (st) {
                    this.sortToggle[f.name] = st;
                }
                if (si) {
                    this.sortInfo = si;
                }
            }
        }
    },

    
    each : function(fn, scope){
        this.data.each(fn, scope);
    },

    
    getModifiedRecords : function(){
        return this.modified;
    },

    // private
    createFilterFn : function(property, value, anyMatch, caseSensitive){
        if(Ext.isEmpty(value, false)){
            return false;
        }
        value = this.data.createValueMatcher(value, anyMatch, caseSensitive);
        return function(r){
            return value.test(r.data[property]);
        };
    },

    
    sum : function(property, start, end){
        var rs = this.data.items, v = 0;
        start = start || 0;
        end = (end || end === 0) ? end : rs.length-1;

        for(var i = start; i <= end; i++){
            v += (rs[i].data[property] || 0);
        }
        return v;
    },

    
    filter : function(property, value, anyMatch, caseSensitive){
        var fn = this.createFilterFn(property, value, anyMatch, caseSensitive);
        return fn ? this.filterBy(fn) : this.clearFilter();
    },

    
    filterBy : function(fn, scope){
        this.snapshot = this.snapshot || this.data;
        this.data = this.queryBy(fn, scope||this);
        this.fireEvent("datachanged", this);
    },

    
    query : function(property, value, anyMatch, caseSensitive){
        var fn = this.createFilterFn(property, value, anyMatch, caseSensitive);
        return fn ? this.queryBy(fn) : this.data.clone();
    },

    
    queryBy : function(fn, scope){
        var data = this.snapshot || this.data;
        return data.filterBy(fn, scope||this);
    },

    
    find : function(property, value, start, anyMatch, caseSensitive){
        var fn = this.createFilterFn(property, value, anyMatch, caseSensitive);
        return fn ? this.data.findIndexBy(fn, null, start) : -1;
    },

    
    findBy : function(fn, scope, start){
        return this.data.findIndexBy(fn, scope, start);
    },

    
    collect : function(dataIndex, allowNull, bypassFilter){
        var d = (bypassFilter === true && this.snapshot) ?
                this.snapshot.items : this.data.items;
        var v, sv, r = [], l = {};
        for(var i = 0, len = d.length; i < len; i++){
            v = d[i].data[dataIndex];
            sv = String(v);
            if((allowNull || !Ext.isEmpty(v)) && !l[sv]){
                l[sv] = true;
                r[r.length] = v;
            }
        }
        return r;
    },

    
    clearFilter : function(suppressEvent){
        if(this.isFiltered()){
            this.data = this.snapshot;
            delete this.snapshot;
            if(suppressEvent !== true){
                this.fireEvent("datachanged", this);
            }
        }
    },

    
    isFiltered : function(){
        return this.snapshot && this.snapshot != this.data;
    },

    // private
    afterEdit : function(record){
        if(this.modified.indexOf(record) == -1){
            this.modified.push(record);
        }
        this.fireEvent("update", this, record, Ext.data.Record.EDIT);
    },

    // private
    afterReject : function(record){
        this.modified.remove(record);
        this.fireEvent("update", this, record, Ext.data.Record.REJECT);
    },

    // private
    afterCommit : function(record){
        this.modified.remove(record);
        this.fireEvent("update", this, record, Ext.data.Record.COMMIT);
    },

    
    commitChanges : function(){
        var m = this.modified.slice(0);
        this.modified = [];
        for(var i = 0, len = m.length; i < len; i++){
            m[i].commit();
        }
    },

    
    rejectChanges : function(){
        var m = this.modified.slice(0);
        this.modified = [];
        for(var i = 0, len = m.length; i < len; i++){
            m[i].reject();
        }
    },

    // private
    onMetaChange : function(meta, rtype, o){
        this.recordType = rtype;
        this.fields = rtype.prototype.fields;
        delete this.snapshot;
        this.sortInfo = meta.sortInfo;
        this.modified = [];
        this.fireEvent('metachange', this, this.reader.meta);
    },

    // private
    findInsertIndex : function(record){
        this.suspendEvents();
        var data = this.data.clone();
        this.data.add(record);
        this.applySort();
        var index = this.data.indexOf(record);
        this.data = data;
        this.resumeEvents();
        return index;
    }
});

Ext.data.SimpleStore = function(config){
    Ext.data.SimpleStore.superclass.constructor.call(this, Ext.apply(config, {
        reader: new Ext.data.ArrayReader({
                id: config.id
            },
            Ext.data.Record.create(config.fields)
        )
    }));
};
Ext.extend(Ext.data.SimpleStore, Ext.data.Store, {
    loadData : function(data, append){
        if(this.expandData === true){
            var r = [];
            for(var i = 0, len = data.length; i < len; i++){
                r[r.length] = [data[i]];
            }
            data = r;
        }
        Ext.data.SimpleStore.superclass.loadData.call(this, data, append);
    }
});

Ext.data.JsonStore = function(c){
    
    
    Ext.data.JsonStore.superclass.constructor.call(this, Ext.apply(c, {
        proxy: c.proxy || (!c.data ? new Ext.data.HttpProxy({url: c.url}) : undefined),
        reader: new Ext.data.JsonReader(c, c.fields)
    }));
};
Ext.extend(Ext.data.JsonStore, Ext.data.Store);

Ext.data.Field = function(config){
    if(typeof config == "string"){
        config = {name: config};
    }
    Ext.apply(this, config);
    
    if(!this.type){
        this.type = "auto";
    }
    
    var st = Ext.data.SortTypes;
    // named sortTypes are supported, here we look them up
    if(typeof this.sortType == "string"){
        this.sortType = st[this.sortType];
    }
    
    // set default sortType for strings and dates
    if(!this.sortType){
        switch(this.type){
            case "string":
                this.sortType = st.asUCString;
                break;
            case "date":
                this.sortType = st.asDate;
                break;
            default:
                this.sortType = st.none;
        }
    }

    // define once
    var stripRe = /[\$,%]/g;

    // prebuilt conversion function for this field, instead of
    // switching every time we're reading a value
    if(!this.convert){
        var cv, dateFormat = this.dateFormat;
        switch(this.type){
            case "":
            case "auto":
            case undefined:
                cv = function(v){ return v; };
                break;
            case "string":
                cv = function(v){ return (v === undefined || v === null) ? '' : String(v); };
                break;
            case "int":
                cv = function(v){
                    return v !== undefined && v !== null && v !== '' ?
                           parseInt(String(v).replace(stripRe, ""), 10) : '';
                    };
                break;
            case "float":
                cv = function(v){
                    return v !== undefined && v !== null && v !== '' ?
                           parseFloat(String(v).replace(stripRe, ""), 10) : ''; 
                    };
                break;
            case "bool":
            case "boolean":
                cv = function(v){ return v === true || v === "true" || v == 1; };
                break;
            case "date":
                cv = function(v){
                    if(!v){
                        return '';
                    }
                    if(Ext.isDate(v)){
                        return v;
                    }
                    if(dateFormat){
                        if(dateFormat == "timestamp"){
                            return new Date(v*1000);
                        }
                        if(dateFormat == "time"){
                            return new Date(parseInt(v, 10));
                        }
                        return Date.parseDate(v, dateFormat);
                    }
                    var parsed = Date.parse(v);
                    return parsed ? new Date(parsed) : null;
                };
             break;
            
        }
        this.convert = cv;
    }
};

Ext.data.Field.prototype = {
    
    
    
    
    dateFormat: null,
    
    defaultValue: "",
    
    mapping: null,
    
    sortType : null,
    
    sortDir : "ASC"
};

Ext.data.DataReader = function(meta, recordType){
    
    this.meta = meta;
    this.recordType = Ext.isArray(recordType) ? 
        Ext.data.Record.create(recordType) : recordType;
};

Ext.data.DataReader.prototype = {
    
};

Ext.data.DataProxy = function(){
    this.addEvents(
        
        'beforeload',
        
        'load'
    );
    Ext.data.DataProxy.superclass.constructor.call(this);
};

Ext.extend(Ext.data.DataProxy, Ext.util.Observable);

Ext.data.MemoryProxy = function(data){
    Ext.data.MemoryProxy.superclass.constructor.call(this);
    this.data = data;
};

Ext.extend(Ext.data.MemoryProxy, Ext.data.DataProxy, {
    
    
    
    load : function(params, reader, callback, scope, arg){
        params = params || {};
        var result;
        try {
            result = reader.readRecords(this.data);
        }catch(e){
            this.fireEvent("loadexception", this, arg, null, e);
            callback.call(scope, null, arg, false);
            return;
        }
        callback.call(scope, result, arg, true);
    },
    
    // private
    update : function(params, records){
        
    }
});

Ext.data.HttpProxy = function(conn){
    Ext.data.HttpProxy.superclass.constructor.call(this);
    
    this.conn = conn;
    this.useAjax = !conn || !conn.events;

    
};

Ext.extend(Ext.data.HttpProxy, Ext.data.DataProxy, {
    
    getConnection : function(){
        return this.useAjax ? Ext.Ajax : this.conn;
    },

    
    load : function(params, reader, callback, scope, arg){
        if(this.fireEvent("beforeload", this, params) !== false){
            var  o = {
                params : params || {},
                request: {
                    callback : callback,
                    scope : scope,
                    arg : arg
                },
                reader: reader,
                callback : this.loadResponse,
                scope: this
            };
            if(this.useAjax){
                Ext.applyIf(o, this.conn);
                if(this.activeRequest){
                    Ext.Ajax.abort(this.activeRequest);
                }
                this.activeRequest = Ext.Ajax.request(o);
            }else{
                this.conn.request(o);
            }
        }else{
            callback.call(scope||this, null, arg, false);
        }
    },

    // private
    loadResponse : function(o, success, response){
        delete this.activeRequest;
        if(!success){
            this.fireEvent("loadexception", this, o, response);
            o.request.callback.call(o.request.scope, null, o.request.arg, false);
            return;
        }
        var result;
        try {
            result = o.reader.read(response);
        }catch(e){
            this.fireEvent("loadexception", this, o, response, e);
            o.request.callback.call(o.request.scope, null, o.request.arg, false);
            return;
        }
        this.fireEvent("load", this, o, o.request.arg);
        o.request.callback.call(o.request.scope, result, o.request.arg, true);
    },
    
    // private
    update : function(dataSet){
        
    },
    
    // private
    updateResponse : function(dataSet){
        
    }
});

Ext.data.ScriptTagProxy = function(config){
    Ext.data.ScriptTagProxy.superclass.constructor.call(this);
    Ext.apply(this, config);
    this.head = document.getElementsByTagName("head")[0];
    
    
};

Ext.data.ScriptTagProxy.TRANS_ID = 1000;

Ext.extend(Ext.data.ScriptTagProxy, Ext.data.DataProxy, {
    
    
    timeout : 30000,
    
    callbackParam : "callback",
    
    nocache : true,

    
    load : function(params, reader, callback, scope, arg){
        if(this.fireEvent("beforeload", this, params) !== false){

            var p = Ext.urlEncode(Ext.apply(params, this.extraParams));

            var url = this.url;
            url += (url.indexOf("?") != -1 ? "&" : "?") + p;
            if(this.nocache){
                url += "&_dc=" + (new Date().getTime());
            }
            var transId = ++Ext.data.ScriptTagProxy.TRANS_ID;
            var trans = {
                id : transId,
                cb : "stcCallback"+transId,
                scriptId : "stcScript"+transId,
                params : params,
                arg : arg,
                url : url,
                callback : callback,
                scope : scope,
                reader : reader
            };
            var conn = this;

            window[trans.cb] = function(o){
                conn.handleResponse(o, trans);
            };

            url += String.format("&{0}={1}", this.callbackParam, trans.cb);

            if(this.autoAbort !== false){
                this.abort();
            }

            trans.timeoutId = this.handleFailure.defer(this.timeout, this, [trans]);

            var script = document.createElement("script");
            script.setAttribute("src", url);
            script.setAttribute("type", "text/javascript");
            script.setAttribute("id", trans.scriptId);
            this.head.appendChild(script);

            this.trans = trans;
        }else{
            callback.call(scope||this, null, arg, false);
        }
    },

    // private
    isLoading : function(){
        return this.trans ? true : false;
    },

    
    abort : function(){
        if(this.isLoading()){
            this.destroyTrans(this.trans);
        }
    },

    // private
    destroyTrans : function(trans, isLoaded){
        this.head.removeChild(document.getElementById(trans.scriptId));
        clearTimeout(trans.timeoutId);
        if(isLoaded){
            window[trans.cb] = undefined;
            try{
                delete window[trans.cb];
            }catch(e){}
        }else{
            // if hasn't been loaded, wait for load to remove it to prevent script error
            window[trans.cb] = function(){
                window[trans.cb] = undefined;
                try{
                    delete window[trans.cb];
                }catch(e){}
            };
        }
    },

    // private
    handleResponse : function(o, trans){
        this.trans = false;
        this.destroyTrans(trans, true);
        var result;
        try {
            result = trans.reader.readRecords(o);
        }catch(e){
            this.fireEvent("loadexception", this, o, trans.arg, e);
            trans.callback.call(trans.scope||window, null, trans.arg, false);
            return;
        }
        this.fireEvent("load", this, o, trans.arg);
        trans.callback.call(trans.scope||window, result, trans.arg, true);
    },

    // private
    handleFailure : function(trans){
        this.trans = false;
        this.destroyTrans(trans, false);
        this.fireEvent("loadexception", this, null, trans.arg);
        trans.callback.call(trans.scope||window, null, trans.arg, false);
    }
});

Ext.data.JsonReader = function(meta, recordType){
    meta = meta || {};
    Ext.data.JsonReader.superclass.constructor.call(this, meta, recordType || meta.fields);
};
Ext.extend(Ext.data.JsonReader, Ext.data.DataReader, {
    
    
    read : function(response){
        var json = response.responseText;
        var o = eval("("+json+")");
        if(!o) {
            throw {message: "JsonReader.read: Json object not found"};
        }
        return this.readRecords(o);
    },

    // private function a store will implement
    onMetaChange : function(meta, recordType, o){

    },

    
    simpleAccess: function(obj, subsc) {
    	return obj[subsc];
    },

	
    getJsonAccessor: function(){
        var re = /[\[\.]/;
        return function(expr) {
            try {
                return(re.test(expr))
                    ? new Function("obj", "return obj." + expr)
                    : function(obj){
                        return obj[expr];
                    };
            } catch(e){}
            return Ext.emptyFn;
        };
    }(),

    
    readRecords : function(o){
        
        this.jsonData = o;
        if(o.metaData){
            delete this.ef;
            this.meta = o.metaData;
            this.recordType = Ext.data.Record.create(o.metaData.fields);
            this.onMetaChange(this.meta, this.recordType, o);
        }
        var s = this.meta, Record = this.recordType,
            f = Record.prototype.fields, fi = f.items, fl = f.length;

//      Generate extraction functions for the totalProperty, the root, the id, and for each field
        if (!this.ef) {
            if(s.totalProperty) {
	            this.getTotal = this.getJsonAccessor(s.totalProperty);
	        }
	        if(s.successProperty) {
	            this.getSuccess = this.getJsonAccessor(s.successProperty);
	        }
	        this.getRoot = s.root ? this.getJsonAccessor(s.root) : function(p){return p;};
	        if (s.id) {
	        	var g = this.getJsonAccessor(s.id);
	        	this.getId = function(rec) {
	        		var r = g(rec);
		        	return (r === undefined || r === "") ? null : r;
	        	};
	        } else {
	        	this.getId = function(){return null;};
	        }
            this.ef = [];
            for(var i = 0; i < fl; i++){
                f = fi[i];
                var map = (f.mapping !== undefined && f.mapping !== null) ? f.mapping : f.name;
                this.ef[i] = this.getJsonAccessor(map);
            }
        }

    	var root = this.getRoot(o), c = root.length, totalRecords = c, success = true;
    	if(s.totalProperty){
            var v = parseInt(this.getTotal(o), 10);
            if(!isNaN(v)){
                totalRecords = v;
            }
        }
        if(s.successProperty){
            var v = this.getSuccess(o);
            if(v === false || v === 'false'){
                success = false;
            }
        }
        var records = [];
	    for(var i = 0; i < c; i++){
		    var n = root[i];
	        var values = {};
	        var id = this.getId(n);
	        for(var j = 0; j < fl; j++){
	            f = fi[j];
                var v = this.ef[j](n);
                values[f.name] = f.convert((v !== undefined) ? v : f.defaultValue, n);
	        }
	        var record = new Record(values, id);
	        record.json = n;
	        records[i] = record;
	    }
	    return {
	        success : success,
	        records : records,
	        totalRecords : totalRecords
	    };
    }
});

Ext.data.XmlReader = function(meta, recordType){
    meta = meta || {};
    Ext.data.XmlReader.superclass.constructor.call(this, meta, recordType || meta.fields);
};
Ext.extend(Ext.data.XmlReader, Ext.data.DataReader, {
    
    read : function(response){
        var doc = response.responseXML;
        if(!doc) {
            throw {message: "XmlReader.read: XML Document not available"};
        }
        return this.readRecords(doc);
    },

    
    readRecords : function(doc){
        
        this.xmlData = doc;
        var root = doc.documentElement || doc;
    	var q = Ext.DomQuery;
    	var recordType = this.recordType, fields = recordType.prototype.fields;
    	var sid = this.meta.id;
    	var totalRecords = 0, success = true;
    	if(this.meta.totalRecords){
    	    totalRecords = q.selectNumber(this.meta.totalRecords, root, 0);
    	}

        if(this.meta.success){
            var sv = q.selectValue(this.meta.success, root, true);
            success = sv !== false && sv !== 'false';
    	}
    	var records = [];
    	var ns = q.select(this.meta.record, root);
        for(var i = 0, len = ns.length; i < len; i++) {
	        var n = ns[i];
	        var values = {};
	        var id = sid ? q.selectValue(sid, n) : undefined;
	        for(var j = 0, jlen = fields.length; j < jlen; j++){
	            var f = fields.items[j];
                var v = q.selectValue(f.mapping || f.name, n, f.defaultValue);
	            v = f.convert(v, n);
	            values[f.name] = v;
	        }
	        var record = new recordType(values, id);
	        record.node = n;
	        records[records.length] = record;
	    }

	    return {
	        success : success,
	        records : records,
	        totalRecords : totalRecords || records.length
	    };
    }
});

Ext.data.ArrayReader = Ext.extend(Ext.data.JsonReader, {
    
    readRecords : function(o){
        var sid = this.meta ? this.meta.id : null;
    	var recordType = this.recordType, fields = recordType.prototype.fields;
    	var records = [];
    	var root = o;
	    for(var i = 0; i < root.length; i++){
		    var n = root[i];
	        var values = {};
	        var id = ((sid || sid === 0) && n[sid] !== undefined && n[sid] !== "" ? n[sid] : null);
	        for(var j = 0, jlen = fields.length; j < jlen; j++){
                var f = fields.items[j];
                var k = f.mapping !== undefined && f.mapping !== null ? f.mapping : j;
                var v = n[k] !== undefined ? n[k] : f.defaultValue;
                v = f.convert(v, n);
                values[f.name] = v;
            }
	        var record = new recordType(values, id);
	        record.json = n;
	        records[records.length] = record;
	    }
	    return {
	        records : records,
	        totalRecords : records.length
	    };
    }
});

Ext.data.Tree = function(root){
   this.nodeHash = {};
   
   this.root = null;
   if(root){
       this.setRootNode(root);
   }
   this.addEvents(
       
       "append",
       
       "remove",
       
       "move",
       
       "insert",
       
       "beforeappend",
       
       "beforeremove",
       
       "beforemove",
       
       "beforeinsert"
   );

    Ext.data.Tree.superclass.constructor.call(this);
};

Ext.extend(Ext.data.Tree, Ext.util.Observable, {
    
    pathSeparator: "/",

    // private
    proxyNodeEvent : function(){
        return this.fireEvent.apply(this, arguments);
    },

    
    getRootNode : function(){
        return this.root;
    },

    
    setRootNode : function(node){
        this.root = node;
        node.ownerTree = this;
        node.isRoot = true;
        this.registerNode(node);
        return node;
    },

    
    getNodeById : function(id){
        return this.nodeHash[id];
    },

    // private
    registerNode : function(node){
        this.nodeHash[node.id] = node;
    },

    // private
    unregisterNode : function(node){
        delete this.nodeHash[node.id];
    },

    toString : function(){
        return "[Tree"+(this.id?" "+this.id:"")+"]";
    }
});


Ext.data.Node = function(attributes){
    
    this.attributes = attributes || {};
    this.leaf = this.attributes.leaf;
    
    this.id = this.attributes.id;
    if(!this.id){
        this.id = Ext.id(null, "ynode-");
        this.attributes.id = this.id;
    }
    
    this.childNodes = [];
    if(!this.childNodes.indexOf){ // indexOf is a must
        this.childNodes.indexOf = function(o){
            for(var i = 0, len = this.length; i < len; i++){
                if(this[i] == o) return i;
            }
            return -1;
        };
    }
    
    this.parentNode = null;
    
    this.firstChild = null;
    
    this.lastChild = null;
    
    this.previousSibling = null;
    
    this.nextSibling = null;

    this.addEvents({
       
       "append" : true,
       
       "remove" : true,
       
       "move" : true,
       
       "insert" : true,
       
       "beforeappend" : true,
       
       "beforeremove" : true,
       
       "beforemove" : true,
       
       "beforeinsert" : true
   });
    this.listeners = this.attributes.listeners;
    Ext.data.Node.superclass.constructor.call(this);
};

Ext.extend(Ext.data.Node, Ext.util.Observable, {
    // private
    fireEvent : function(evtName){
        // first do standard event for this node
        if(Ext.data.Node.superclass.fireEvent.apply(this, arguments) === false){
            return false;
        }
        // then bubble it up to the tree if the event wasn't cancelled
        var ot = this.getOwnerTree();
        if(ot){
            if(ot.proxyNodeEvent.apply(ot, arguments) === false){
                return false;
            }
        }
        return true;
    },

    
    isLeaf : function(){
        return this.leaf === true;
    },

    // private
    setFirstChild : function(node){
        this.firstChild = node;
    },

    //private
    setLastChild : function(node){
        this.lastChild = node;
    },


    
    isLast : function(){
       return (!this.parentNode ? true : this.parentNode.lastChild == this);
    },

    
    isFirst : function(){
       return (!this.parentNode ? true : this.parentNode.firstChild == this);
    },

    
    hasChildNodes : function(){
        return !this.isLeaf() && this.childNodes.length > 0;
    },
    
    
    isExpandable : function(){
        return this.attributes.expandable || this.hasChildNodes();
    },

    
    appendChild : function(node){
        var multi = false;
        if(Ext.isArray(node)){
            multi = node;
        }else if(arguments.length > 1){
            multi = arguments;
        }
        // if passed an array or multiple args do them one by one
        if(multi){
            for(var i = 0, len = multi.length; i < len; i++) {
            	this.appendChild(multi[i]);
            }
        }else{
            if(this.fireEvent("beforeappend", this.ownerTree, this, node) === false){
                return false;
            }
            var index = this.childNodes.length;
            var oldParent = node.parentNode;
            // it's a move, make sure we move it cleanly
            if(oldParent){
                if(node.fireEvent("beforemove", node.getOwnerTree(), node, oldParent, this, index) === false){
                    return false;
                }
                oldParent.removeChild(node);
            }
            index = this.childNodes.length;
            if(index == 0){
                this.setFirstChild(node);
            }
            this.childNodes.push(node);
            node.parentNode = this;
            var ps = this.childNodes[index-1];
            if(ps){
                node.previousSibling = ps;
                ps.nextSibling = node;
            }else{
                node.previousSibling = null;
            }
            node.nextSibling = null;
            this.setLastChild(node);
            node.setOwnerTree(this.getOwnerTree());
            this.fireEvent("append", this.ownerTree, this, node, index);
            if(oldParent){
                node.fireEvent("move", this.ownerTree, node, oldParent, this, index);
            }
            return node;
        }
    },

    
    removeChild : function(node){
        var index = this.childNodes.indexOf(node);
        if(index == -1){
            return false;
        }
        if(this.fireEvent("beforeremove", this.ownerTree, this, node) === false){
            return false;
        }

        // remove it from childNodes collection
        this.childNodes.splice(index, 1);

        // update siblings
        if(node.previousSibling){
            node.previousSibling.nextSibling = node.nextSibling;
        }
        if(node.nextSibling){
            node.nextSibling.previousSibling = node.previousSibling;
        }

        // update child refs
        if(this.firstChild == node){
            this.setFirstChild(node.nextSibling);
        }
        if(this.lastChild == node){
            this.setLastChild(node.previousSibling);
        }

        node.setOwnerTree(null);
        // clear any references from the node
        node.parentNode = null;
        node.previousSibling = null;
        node.nextSibling = null;
        this.fireEvent("remove", this.ownerTree, this, node);
        return node;
    },

    
    insertBefore : function(node, refNode){
        if(!refNode){ // like standard Dom, refNode can be null for append
            return this.appendChild(node);
        }
        // nothing to do
        if(node == refNode){
            return false;
        }

        if(this.fireEvent("beforeinsert", this.ownerTree, this, node, refNode) === false){
            return false;
        }
        var index = this.childNodes.indexOf(refNode);
        var oldParent = node.parentNode;
        var refIndex = index;

        // when moving internally, indexes will change after remove
        if(oldParent == this && this.childNodes.indexOf(node) < index){
            refIndex--;
        }

        // it's a move, make sure we move it cleanly
        if(oldParent){
            if(node.fireEvent("beforemove", node.getOwnerTree(), node, oldParent, this, index, refNode) === false){
                return false;
            }
            oldParent.removeChild(node);
        }
        if(refIndex == 0){
            this.setFirstChild(node);
        }
        this.childNodes.splice(refIndex, 0, node);
        node.parentNode = this;
        var ps = this.childNodes[refIndex-1];
        if(ps){
            node.previousSibling = ps;
            ps.nextSibling = node;
        }else{
            node.previousSibling = null;
        }
        node.nextSibling = refNode;
        refNode.previousSibling = node;
        node.setOwnerTree(this.getOwnerTree());
        this.fireEvent("insert", this.ownerTree, this, node, refNode);
        if(oldParent){
            node.fireEvent("move", this.ownerTree, node, oldParent, this, refIndex, refNode);
        }
        return node;
    },

    
    remove : function(){
        this.parentNode.removeChild(this);
        return this;
    },

    
    item : function(index){
        return this.childNodes[index];
    },

    
    replaceChild : function(newChild, oldChild){
        var s = oldChild ? oldChild.nextSibling : null;
        this.removeChild(oldChild);
        this.insertBefore(newChild, s);
        return oldChild;
    },

    
    indexOf : function(child){
        return this.childNodes.indexOf(child);
    },

    
    getOwnerTree : function(){
        // if it doesn't have one, look for one
        if(!this.ownerTree){
            var p = this;
            while(p){
                if(p.ownerTree){
                    this.ownerTree = p.ownerTree;
                    break;
                }
                p = p.parentNode;
            }
        }
        return this.ownerTree;
    },

    
    getDepth : function(){
        var depth = 0;
        var p = this;
        while(p.parentNode){
            ++depth;
            p = p.parentNode;
        }
        return depth;
    },

    // private
    setOwnerTree : function(tree){
        // if it's move, we need to update everyone
        if(tree != this.ownerTree){
            if(this.ownerTree){
                this.ownerTree.unregisterNode(this);
            }
            this.ownerTree = tree;
            var cs = this.childNodes;
            for(var i = 0, len = cs.length; i < len; i++) {
            	cs[i].setOwnerTree(tree);
            }
            if(tree){
                tree.registerNode(this);
            }
        }
    },

    
    getPath : function(attr){
        attr = attr || "id";
        var p = this.parentNode;
        var b = [this.attributes[attr]];
        while(p){
            b.unshift(p.attributes[attr]);
            p = p.parentNode;
        }
        var sep = this.getOwnerTree().pathSeparator;
        return sep + b.join(sep);
    },

    
    bubble : function(fn, scope, args){
        var p = this;
        while(p){
            if(fn.apply(scope || p, args || [p]) === false){
                break;
            }
            p = p.parentNode;
        }
    },

    
    cascade : function(fn, scope, args){
        if(fn.apply(scope || this, args || [this]) !== false){
            var cs = this.childNodes;
            for(var i = 0, len = cs.length; i < len; i++) {
            	cs[i].cascade(fn, scope, args);
            }
        }
    },

    
    eachChild : function(fn, scope, args){
        var cs = this.childNodes;
        for(var i = 0, len = cs.length; i < len; i++) {
        	if(fn.apply(scope || this, args || [cs[i]]) === false){
        	    break;
        	}
        }
    },

    
    findChild : function(attribute, value){
        var cs = this.childNodes;
        for(var i = 0, len = cs.length; i < len; i++) {
        	if(cs[i].attributes[attribute] == value){
        	    return cs[i];
        	}
        }
        return null;
    },

    
    findChildBy : function(fn, scope){
        var cs = this.childNodes;
        for(var i = 0, len = cs.length; i < len; i++) {
        	if(fn.call(scope||cs[i], cs[i]) === true){
        	    return cs[i];
        	}
        }
        return null;
    },

    
    sort : function(fn, scope){
        var cs = this.childNodes;
        var len = cs.length;
        if(len > 0){
            var sortFn = scope ? function(){fn.apply(scope, arguments);} : fn;
            cs.sort(sortFn);
            for(var i = 0; i < len; i++){
                var n = cs[i];
                n.previousSibling = cs[i-1];
                n.nextSibling = cs[i+1];
                if(i == 0){
                    this.setFirstChild(n);
                }
                if(i == len-1){
                    this.setLastChild(n);
                }
            }
        }
    },

    
    contains : function(node){
        return node.isAncestor(this);
    },

    
    isAncestor : function(node){
        var p = this.parentNode;
        while(p){
            if(p == node){
                return true;
            }
            p = p.parentNode;
        }
        return false;
    },

    toString : function(){
        return "[Node"+(this.id?" "+this.id:"")+"]";
    }
});

Ext.data.GroupingStore = Ext.extend(Ext.data.Store, {
    
    
    remoteGroup : false,
    
    groupOnSort:false,

    
    clearGrouping : function(){
        this.groupField = false;
        if(this.remoteGroup){
            if(this.baseParams){
                delete this.baseParams.groupBy;
            }
            this.reload();
        }else{
            this.applySort();
            this.fireEvent('datachanged', this);
        }
    },

    
    groupBy : function(field, forceRegroup){
        if(this.groupField == field && !forceRegroup){
            return; // already grouped by this field
        }
        this.groupField = field;
        if(this.remoteGroup){
            if(!this.baseParams){
                this.baseParams = {};
            }
            this.baseParams['groupBy'] = field;
        }
        if(this.groupOnSort){
            this.sort(field);
            return;
        }
        if(this.remoteGroup){
            this.reload();
        }else{
            var si = this.sortInfo || {};
            if(si.field != field){
                this.applySort();
            }else{
                this.sortData(field);
            }
            this.fireEvent('datachanged', this);
        }
    },

    // private
    applySort : function(){
        Ext.data.GroupingStore.superclass.applySort.call(this);
        if(!this.groupOnSort && !this.remoteGroup){
            var gs = this.getGroupState();
            if(gs && gs != this.sortInfo.field){
                this.sortData(this.groupField);
            }
        }
    },

    // private
    applyGrouping : function(alwaysFireChange){
        if(this.groupField !== false){
            this.groupBy(this.groupField, true);
            return true;
        }else{
            if(alwaysFireChange === true){
                this.fireEvent('datachanged', this);
            }
            return false;
        }
    },

    // private
    getGroupState : function(){
        return this.groupOnSort && this.groupField !== false ?
               (this.sortInfo ? this.sortInfo.field : undefined) : this.groupField;
    }
});

Ext.ComponentMgr = function(){
    var all = new Ext.util.MixedCollection();
    var types = {};

    return {
        
        register : function(c){
            all.add(c);
        },

        
        unregister : function(c){
            all.remove(c);
        },

        
        get : function(id){
            return all.get(id);
        },

        
        onAvailable : function(id, fn, scope){
            all.on("add", function(index, o){
                if(o.id == id){
                    fn.call(scope || o, o);
                    all.un("add", fn, scope);
                }
            });
        },

        
        all : all,

        
        registerType : function(xtype, cls){
            types[xtype] = cls;
            cls.xtype = xtype;
        },

        
        create : function(config, defaultType){
            return new types[config.xtype || defaultType](config);
        }
    };
}();


Ext.reg = Ext.ComponentMgr.registerType; // this will be called a lot internally, shorthand to keep the bytes down

Ext.Component = function(config){
    config = config || {};
    if(config.initialConfig){
        if(config.isAction){           // actions
            this.baseAction = config;
        }
        config = config.initialConfig; // component cloning / action set up
    }else if(config.tagName || config.dom || typeof config == "string"){ // element object
        config = {applyTo: config, id: config.id || config};
    }

    
    this.initialConfig = config;

    Ext.apply(this, config);
    this.addEvents(
        
        'disable',
        
        'enable',
        
        'beforeshow',
        
        'show',
        
        'beforehide',
        
        'hide',
        
        'beforerender',
        
        'render',
        
        'beforedestroy',
        
        'destroy',
        
        'beforestaterestore',
        
        'staterestore',
        
        'beforestatesave',
        
        'statesave'
    );
    this.getId();
    Ext.ComponentMgr.register(this);
    Ext.Component.superclass.constructor.call(this);

    if(this.baseAction){
        this.baseAction.addComponent(this);
    }

    this.initComponent();

    if(this.plugins){
        if(Ext.isArray(this.plugins)){
            for(var i = 0, len = this.plugins.length; i < len; i++){
                this.plugins[i] = this.initPlugin(this.plugins[i]);
            }
        }else{
            this.plugins = this.initPlugin(this.plugins);
        }
    }

    if(this.stateful !== false){
        this.initState(config);
    }

    if(this.applyTo){
        this.applyToMarkup(this.applyTo);
        delete this.applyTo;
    }else if(this.renderTo){
        this.render(this.renderTo);
        delete this.renderTo;
    }
};

// private
Ext.Component.AUTO_ID = 1000;

Ext.extend(Ext.Component, Ext.util.Observable, {
    // Configs below are used for all Components when rendered by FormLayout.
    
    
    
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    

    
    
    

    
    disabledClass : "x-item-disabled",
	
    allowDomMove : true,
	
    autoShow : false,
    
    hideMode: 'display',
    
    hideParent: false,

    
    
    hidden : false,
    
    disabled : false,
    
    rendered : false,

    // private
    ctype : "Ext.Component",

    // private
    actionMode : "el",

    // private
    getActionEl : function(){
        return this[this.actionMode];
    },

    initPlugin : function(p){
        p.init(this);
        return p;
    },

    
    initComponent : Ext.emptyFn,

    
    render : function(container, position){
        if(!this.rendered && this.fireEvent("beforerender", this) !== false){
            if(!container && this.el){
                this.el = Ext.get(this.el);
                container = this.el.dom.parentNode;
                this.allowDomMove = false;
            }
            this.container = Ext.get(container);
            if(this.ctCls){
                this.container.addClass(this.ctCls);
            }
            this.rendered = true;
            if(position !== undefined){
                if(typeof position == 'number'){
                    position = this.container.dom.childNodes[position];
                }else{
                    position = Ext.getDom(position);
                }
            }
            this.onRender(this.container, position || null);
            if(this.autoShow){
                this.el.removeClass(['x-hidden','x-hide-' + this.hideMode]);
            }
            if(this.cls){
                this.el.addClass(this.cls);
                delete this.cls;
            }
            if(this.style){
                this.el.applyStyles(this.style);
                delete this.style;
            }
            if(this.overCls){
                this.el.addClassOnOver(this.overCls);
            }
            this.fireEvent("render", this);
            this.afterRender(this.container);
            if(this.hidden){
                this.hide();
            }
            if(this.disabled){
                this.disable();
            }

            if(this.stateful !== false){
                this.initStateEvents();
            }
        }
        return this;
    },

    // private
    initState : function(config){
        if(Ext.state.Manager){
            var id = this.getStateId();
            if(id){
                var state = Ext.state.Manager.get(id);
                if(state){
                    if(this.fireEvent('beforestaterestore', this, state) !== false){
                        this.applyState(state);
                        this.fireEvent('staterestore', this, state);
                    }
                }
            }
        }
    },

    // private
    getStateId : function(){
        return this.stateId || ((this.id.indexOf('ext-comp-') == 0 || this.id.indexOf('ext-gen') == 0) ? null : this.id);
    },

    // private
    initStateEvents : function(){
        if(this.stateEvents){
            for(var i = 0, e; e = this.stateEvents[i]; i++){
                this.on(e, this.saveState, this, {delay:100});
            }
        }
    },

    // private
    applyState : function(state, config){
        if(state){
            Ext.apply(this, state);
        }
    },

    // private
    getState : function(){
        return null;
    },

    // private
    saveState : function(){
        if(Ext.state.Manager){
            var id = this.getStateId();
            if(id){
                var state = this.getState();
                if(this.fireEvent('beforestatesave', this, state) !== false){
                    Ext.state.Manager.set(id, state);
                    this.fireEvent('statesave', this, state);
                }
            }
        }
    },

    
    applyToMarkup : function(el){
        this.allowDomMove = false;
        this.el = Ext.get(el);
        this.render(this.el.dom.parentNode);
    },

    
    addClass : function(cls){
        if(this.el){
            this.el.addClass(cls);
        }else{
            this.cls = this.cls ? this.cls + ' ' + cls : cls;
        }
    },

    
    removeClass : function(cls){
        if(this.el){
            this.el.removeClass(cls);
        }else if(this.cls){
            this.cls = this.cls.split(' ').remove(cls).join(' ');
        }
    },

    // private
    // default function is not really useful
    onRender : function(ct, position){
        if(this.autoEl){
            if(typeof this.autoEl == 'string'){
                this.el = document.createElement(this.autoEl);
            }else{
                var div = document.createElement('div');
                Ext.DomHelper.overwrite(div, this.autoEl);
                this.el = div.firstChild;
            }
            if (!this.el.id) {
            	this.el.id = this.getId();
            }
        }
        if(this.el){
            this.el = Ext.get(this.el);
            if(this.allowDomMove !== false){
                ct.dom.insertBefore(this.el.dom, position);
            }
        }
    },

    // private
    getAutoCreate : function(){
        var cfg = typeof this.autoCreate == "object" ?
                      this.autoCreate : Ext.apply({}, this.defaultAutoCreate);
        if(this.id && !cfg.id){
            cfg.id = this.id;
        }
        return cfg;
    },

    // private
    afterRender : Ext.emptyFn,

    
    destroy : function(){
        if(this.fireEvent("beforedestroy", this) !== false){
            this.beforeDestroy();
            if(this.rendered){
                this.el.removeAllListeners();
                this.el.remove();
                if(this.actionMode == "container"){
                    this.container.remove();
                }
            }
            this.onDestroy();
            Ext.ComponentMgr.unregister(this);
            this.fireEvent("destroy", this);
            this.purgeListeners();
        }
    },

	// private
    beforeDestroy : Ext.emptyFn,

	// private
    onDestroy  : Ext.emptyFn,

    
    getEl : function(){
        return this.el;
    },

    
    getId : function(){
        return this.id || (this.id = "ext-comp-" + (++Ext.Component.AUTO_ID));
    },

    
    getItemId : function(){
        return this.itemId || this.getId();
    },

    
    focus : function(selectText, delay){
        if(delay){
            this.focus.defer(typeof delay == 'number' ? delay : 10, this, [selectText, false]);
            return;
        }
        if(this.rendered){
            this.el.focus();
            if(selectText === true){
                this.el.dom.select();
            }
        }
        return this;
    },

    // private
    blur : function(){
        if(this.rendered){
            this.el.blur();
        }
        return this;
    },

    
    disable : function(){
        if(this.rendered){
            this.onDisable();
        }
        this.disabled = true;
        this.fireEvent("disable", this);
        return this;
    },

	// private
    onDisable : function(){
        this.getActionEl().addClass(this.disabledClass);
        this.el.dom.disabled = true;
    },

    
    enable : function(){
        if(this.rendered){
            this.onEnable();
        }
        this.disabled = false;
        this.fireEvent("enable", this);
        return this;
    },

	// private
    onEnable : function(){
        this.getActionEl().removeClass(this.disabledClass);
        this.el.dom.disabled = false;
    },

    
    setDisabled : function(disabled){
        this[disabled ? "disable" : "enable"]();
    },

    
    show: function(){
        if(this.fireEvent("beforeshow", this) !== false){
            this.hidden = false;
            if(this.autoRender){
                this.render(typeof this.autoRender == 'boolean' ? Ext.getBody() : this.autoRender);
            }
            if(this.rendered){
                this.onShow();
            }
            this.fireEvent("show", this);
        }
        return this;
    },

    // private
    onShow : function(){
        if(this.hideParent){
            this.container.removeClass('x-hide-' + this.hideMode);
        }else{
            this.getActionEl().removeClass('x-hide-' + this.hideMode);
        }

    },

    
    hide: function(){
        if(this.fireEvent("beforehide", this) !== false){
            this.hidden = true;
            if(this.rendered){
                this.onHide();
            }
            this.fireEvent("hide", this);
        }
        return this;
    },

    // private
    onHide : function(){
        if(this.hideParent){
            this.container.addClass('x-hide-' + this.hideMode);
        }else{
            this.getActionEl().addClass('x-hide-' + this.hideMode);
        }
    },

    
    setVisible: function(visible){
        if(visible) {
            this.show();
        }else{
            this.hide();
        }
        return this;
    },

    
    isVisible : function(){
        return this.rendered && this.getActionEl().isVisible();
    },

    
    cloneConfig : function(overrides){
        overrides = overrides || {};
        var id = overrides.id || Ext.id();
        var cfg = Ext.applyIf(overrides, this.initialConfig);
        cfg.id = id; // prevent dup id
        return new this.constructor(cfg);
    },

    
    getXType : function(){
        return this.constructor.xtype;
    },

    
    isXType : function(xtype, shallow){
        //assume a string by default
        if (typeof xtype == 'function'){
            xtype = xtype.xtype; //handle being passed the class, eg. Ext.Component
        }else if (typeof xtype == 'object'){
            xtype = xtype.constructor.xtype; //handle being passed an instance
        }
            
        return !shallow ? ('/' + this.getXTypes() + '/').indexOf('/' + xtype + '/') != -1 : this.constructor.xtype == xtype;
    },

    
    getXTypes : function(){
        var tc = this.constructor;
        if(!tc.xtypes){
            var c = [], sc = this;
            while(sc && sc.constructor.xtype){
                c.unshift(sc.constructor.xtype);
                sc = sc.constructor.superclass;
            }
            tc.xtypeChain = c;
            tc.xtypes = c.join('/');
        }
        return tc.xtypes;
    },

    
    findParentBy: function(fn) {
        for (var p = this.ownerCt; (p != null) && !fn(p, this); p = p.ownerCt);
        return p || null;
    },

    
    findParentByType: function(xtype) {
        return typeof xtype == 'function' ?
            this.findParentBy(function(p){
                return p.constructor === xtype;
            }) :
            this.findParentBy(function(p){
                return p.constructor.xtype === xtype;
            });
    },

    // internal function for auto removal of assigned event handlers on destruction
    mon : function(item, ename, fn, scope, opt){
        if(!this.mons){
            this.mons = [];
            this.on('beforedestroy', function(){
                for(var i= 0, len = this.mons.length; i < len; i++){
                    var m = this.mons[i];
                    m.item.un(m.ename, m.fn, m.scope);
                }
            }, this);
        }
        this.mons.push({
            item: item, ename: ename, fn: fn, scope: scope
        });
        item.on(ename, fn, scope, opt);
    }
});

Ext.reg('component', Ext.Component);


Ext.Action = function(config){
    this.initialConfig = config;
    this.items = [];
}

Ext.Action.prototype = {
    
    
    
    
    
    

    // private
    isAction : true,

    
    setText : function(text){
        this.initialConfig.text = text;
        this.callEach('setText', [text]);
    },

    
    getText : function(){
        return this.initialConfig.text;
    },

    
    setIconClass : function(cls){
        this.initialConfig.iconCls = cls;
        this.callEach('setIconClass', [cls]);
    },

    
    getIconClass : function(){
        return this.initialConfig.iconCls;
    },

    
    setDisabled : function(v){
        this.initialConfig.disabled = v;
        this.callEach('setDisabled', [v]);
    },

    
    enable : function(){
        this.setDisabled(false);
    },

    
    disable : function(){
        this.setDisabled(true);
    },

    
    isDisabled : function(){
        return this.initialConfig.disabled;
    },

    
    setHidden : function(v){
        this.initialConfig.hidden = v;
        this.callEach('setVisible', [!v]);
    },

    
    show : function(){
        this.setHidden(false);
    },

    
    hide : function(){
        this.setHidden(true);
    },

    
    isHidden : function(){
        return this.initialConfig.hidden;
    },

    
    setHandler : function(fn, scope){
        this.initialConfig.handler = fn;
        this.initialConfig.scope = scope;
        this.callEach('setHandler', [fn, scope]);
    },

    
    each : function(fn, scope){
        Ext.each(this.items, fn, scope);
    },

    // private
    callEach : function(fnName, args){
        var cs = this.items;
        for(var i = 0, len = cs.length; i < len; i++){
            cs[i][fnName].apply(cs[i], args);
        }
    },

    // private
    addComponent : function(comp){
        this.items.push(comp);
        comp.on('destroy', this.removeComponent, this);
    },

    // private
    removeComponent : function(comp){
        this.items.remove(comp);
    },

    
    execute : function(){
        this.initialConfig.handler.apply(this.initialConfig.scope || window, arguments);
    }
};

(function(){
Ext.Layer = function(config, existingEl){
    config = config || {};
    var dh = Ext.DomHelper;
    var cp = config.parentEl, pel = cp ? Ext.getDom(cp) : document.body;
    if(existingEl){
        this.dom = Ext.getDom(existingEl);
    }
    if(!this.dom){
        var o = config.dh || {tag: "div", cls: "x-layer"};
        this.dom = dh.append(pel, o);
    }
    if(config.cls){
        this.addClass(config.cls);
    }
    this.constrain = config.constrain !== false;
    this.visibilityMode = Ext.Element.VISIBILITY;
    if(config.id){
        this.id = this.dom.id = config.id;
    }else{
        this.id = Ext.id(this.dom);
    }
    this.zindex = config.zindex || this.getZIndex();
    this.position("absolute", this.zindex);
    if(config.shadow){
        this.shadowOffset = config.shadowOffset || 4;
        this.shadow = new Ext.Shadow({
            offset : this.shadowOffset,
            mode : config.shadow
        });
    }else{
        this.shadowOffset = 0;
    }
    this.useShim = config.shim !== false && Ext.useShims;
    this.useDisplay = config.useDisplay;
    this.hide();
};

var supr = Ext.Element.prototype;

// shims are shared among layer to keep from having 100 iframes
var shims = [];

Ext.extend(Ext.Layer, Ext.Element, {

    getZIndex : function(){
        return this.zindex || parseInt(this.getStyle("z-index"), 10) || 11000;
    },

    getShim : function(){
        if(!this.useShim){
            return null;
        }
        if(this.shim){
            return this.shim;
        }
        var shim = shims.shift();
        if(!shim){
            shim = this.createShim();
            shim.enableDisplayMode('block');
            shim.dom.style.display = 'none';
            shim.dom.style.visibility = 'visible';
        }
        var pn = this.dom.parentNode;
        if(shim.dom.parentNode != pn){
            pn.insertBefore(shim.dom, this.dom);
        }
        shim.setStyle('z-index', this.getZIndex()-2);
        this.shim = shim;
        return shim;
    },

    hideShim : function(){
        if(this.shim){
            this.shim.setDisplayed(false);
            shims.push(this.shim);
            delete this.shim;
        }
    },

    disableShadow : function(){
        if(this.shadow){
            this.shadowDisabled = true;
            this.shadow.hide();
            this.lastShadowOffset = this.shadowOffset;
            this.shadowOffset = 0;
        }
    },

    enableShadow : function(show){
        if(this.shadow){
            this.shadowDisabled = false;
            this.shadowOffset = this.lastShadowOffset;
            delete this.lastShadowOffset;
            if(show){
                this.sync(true);
            }
        }
    },

    // private
    // this code can execute repeatedly in milliseconds (i.e. during a drag) so
    // code size was sacrificed for effeciency (e.g. no getBox/setBox, no XY calls)
    sync : function(doShow){
        var sw = this.shadow;
        if(!this.updating && this.isVisible() && (sw || this.useShim)){
            var sh = this.getShim();

            var w = this.getWidth(),
                h = this.getHeight();

            var l = this.getLeft(true),
                t = this.getTop(true);

            if(sw && !this.shadowDisabled){
                if(doShow && !sw.isVisible()){
                    sw.show(this);
                }else{
                    sw.realign(l, t, w, h);
                }
                if(sh){
                    if(doShow){
                       sh.show();
                    }
                    // fit the shim behind the shadow, so it is shimmed too
                    var a = sw.adjusts, s = sh.dom.style;
                    s.left = (Math.min(l, l+a.l))+"px";
                    s.top = (Math.min(t, t+a.t))+"px";
                    s.width = (w+a.w)+"px";
                    s.height = (h+a.h)+"px";
                }
            }else if(sh){
                if(doShow){
                   sh.show();
                }
                sh.setSize(w, h);
                sh.setLeftTop(l, t);
            }

        }
    },

    // private
    destroy : function(){
        this.hideShim();
        if(this.shadow){
            this.shadow.hide();
        }
        this.removeAllListeners();
        Ext.removeNode(this.dom);
        Ext.Element.uncache(this.id);
    },

    remove : function(){
        this.destroy();
    },

    // private
    beginUpdate : function(){
        this.updating = true;
    },

    // private
    endUpdate : function(){
        this.updating = false;
        this.sync(true);
    },

    // private
    hideUnders : function(negOffset){
        if(this.shadow){
            this.shadow.hide();
        }
        this.hideShim();
    },

    // private
    constrainXY : function(){
        if(this.constrain){
            var vw = Ext.lib.Dom.getViewWidth(),
                vh = Ext.lib.Dom.getViewHeight();
            var s = Ext.getDoc().getScroll();

            var xy = this.getXY();
            var x = xy[0], y = xy[1];
            var w = this.dom.offsetWidth+this.shadowOffset, h = this.dom.offsetHeight+this.shadowOffset;
            // only move it if it needs it
            var moved = false;
            // first validate right/bottom
            if((x + w) > vw+s.left){
                x = vw - w - this.shadowOffset;
                moved = true;
            }
            if((y + h) > vh+s.top){
                y = vh - h - this.shadowOffset;
                moved = true;
            }
            // then make sure top/left isn't negative
            if(x < s.left){
                x = s.left;
                moved = true;
            }
            if(y < s.top){
                y = s.top;
                moved = true;
            }
            if(moved){
                if(this.avoidY){
                    var ay = this.avoidY;
                    if(y <= ay && (y+h) >= ay){
                        y = ay-h-5;
                    }
                }
                xy = [x, y];
                this.storeXY(xy);
                supr.setXY.call(this, xy);
                this.sync();
            }
        }
    },

    isVisible : function(){
        return this.visible;
    },

    // private
    showAction : function(){
        this.visible = true; // track visibility to prevent getStyle calls
        if(this.useDisplay === true){
            this.setDisplayed("");
        }else if(this.lastXY){
            supr.setXY.call(this, this.lastXY);
        }else if(this.lastLT){
            supr.setLeftTop.call(this, this.lastLT[0], this.lastLT[1]);
        }
    },

    // private
    hideAction : function(){
        this.visible = false;
        if(this.useDisplay === true){
            this.setDisplayed(false);
        }else{
            this.setLeftTop(-10000,-10000);
        }
    },

    // overridden Element method
    setVisible : function(v, a, d, c, e){
        if(v){
            this.showAction();
        }
        if(a && v){
            var cb = function(){
                this.sync(true);
                if(c){
                    c();
                }
            }.createDelegate(this);
            supr.setVisible.call(this, true, true, d, cb, e);
        }else{
            if(!v){
                this.hideUnders(true);
            }
            var cb = c;
            if(a){
                cb = function(){
                    this.hideAction();
                    if(c){
                        c();
                    }
                }.createDelegate(this);
            }
            supr.setVisible.call(this, v, a, d, cb, e);
            if(v){
                this.sync(true);
            }else if(!a){
                this.hideAction();
            }
        }
    },

    storeXY : function(xy){
        delete this.lastLT;
        this.lastXY = xy;
    },

    storeLeftTop : function(left, top){
        delete this.lastXY;
        this.lastLT = [left, top];
    },

    // private
    beforeFx : function(){
        this.beforeAction();
        return Ext.Layer.superclass.beforeFx.apply(this, arguments);
    },

    // private
    afterFx : function(){
        Ext.Layer.superclass.afterFx.apply(this, arguments);
        this.sync(this.isVisible());
    },

    // private
    beforeAction : function(){
        if(!this.updating && this.shadow){
            this.shadow.hide();
        }
    },

    // overridden Element method
    setLeft : function(left){
        this.storeLeftTop(left, this.getTop(true));
        supr.setLeft.apply(this, arguments);
        this.sync();
    },

    setTop : function(top){
        this.storeLeftTop(this.getLeft(true), top);
        supr.setTop.apply(this, arguments);
        this.sync();
    },

    setLeftTop : function(left, top){
        this.storeLeftTop(left, top);
        supr.setLeftTop.apply(this, arguments);
        this.sync();
    },

    setXY : function(xy, a, d, c, e){
        this.fixDisplay();
        this.beforeAction();
        this.storeXY(xy);
        var cb = this.createCB(c);
        supr.setXY.call(this, xy, a, d, cb, e);
        if(!a){
            cb();
        }
    },

    // private
    createCB : function(c){
        var el = this;
        return function(){
            el.constrainXY();
            el.sync(true);
            if(c){
                c();
            }
        };
    },

    // overridden Element method
    setX : function(x, a, d, c, e){
        this.setXY([x, this.getY()], a, d, c, e);
    },

    // overridden Element method
    setY : function(y, a, d, c, e){
        this.setXY([this.getX(), y], a, d, c, e);
    },

    // overridden Element method
    setSize : function(w, h, a, d, c, e){
        this.beforeAction();
        var cb = this.createCB(c);
        supr.setSize.call(this, w, h, a, d, cb, e);
        if(!a){
            cb();
        }
    },

    // overridden Element method
    setWidth : function(w, a, d, c, e){
        this.beforeAction();
        var cb = this.createCB(c);
        supr.setWidth.call(this, w, a, d, cb, e);
        if(!a){
            cb();
        }
    },

    // overridden Element method
    setHeight : function(h, a, d, c, e){
        this.beforeAction();
        var cb = this.createCB(c);
        supr.setHeight.call(this, h, a, d, cb, e);
        if(!a){
            cb();
        }
    },

    // overridden Element method
    setBounds : function(x, y, w, h, a, d, c, e){
        this.beforeAction();
        var cb = this.createCB(c);
        if(!a){
            this.storeXY([x, y]);
            supr.setXY.call(this, [x, y]);
            supr.setSize.call(this, w, h, a, d, cb, e);
            cb();
        }else{
            supr.setBounds.call(this, x, y, w, h, a, d, cb, e);
        }
        return this;
    },

    
    setZIndex : function(zindex){
        this.zindex = zindex;
        this.setStyle("z-index", zindex + 2);
        if(this.shadow){
            this.shadow.setZIndex(zindex + 1);
        }
        if(this.shim){
            this.shim.setStyle("z-index", zindex);
        }
    }
});
})();

Ext.Shadow = function(config){
    Ext.apply(this, config);
    if(typeof this.mode != "string"){
        this.mode = this.defaultMode;
    }
    var o = this.offset, a = {h: 0};
    var rad = Math.floor(this.offset/2);
    switch(this.mode.toLowerCase()){ // all this hideous nonsense calculates the various offsets for shadows
        case "drop":
            a.w = 0;
            a.l = a.t = o;
            a.t -= 1;
            if(Ext.isIE){
                a.l -= this.offset + rad;
                a.t -= this.offset + rad;
                a.w -= rad;
                a.h -= rad;
                a.t += 1;
            }
        break;
        case "sides":
            a.w = (o*2);
            a.l = -o;
            a.t = o-1;
            if(Ext.isIE){
                a.l -= (this.offset - rad);
                a.t -= this.offset + rad;
                a.l += 1;
                a.w -= (this.offset - rad)*2;
                a.w -= rad + 1;
                a.h -= 1;
            }
        break;
        case "frame":
            a.w = a.h = (o*2);
            a.l = a.t = -o;
            a.t += 1;
            a.h -= 2;
            if(Ext.isIE){
                a.l -= (this.offset - rad);
                a.t -= (this.offset - rad);
                a.l += 1;
                a.w -= (this.offset + rad + 1);
                a.h -= (this.offset + rad);
                a.h += 1;
            }
        break;
    };

    this.adjusts = a;
};

Ext.Shadow.prototype = {
    
    
    offset: 4,

    // private
    defaultMode: "drop",

    
    show : function(target){
        target = Ext.get(target);
        if(!this.el){
            this.el = Ext.Shadow.Pool.pull();
            if(this.el.dom.nextSibling != target.dom){
                this.el.insertBefore(target);
            }
        }
        this.el.setStyle("z-index", this.zIndex || parseInt(target.getStyle("z-index"), 10)-1);
        if(Ext.isIE){
            this.el.dom.style.filter="progid:DXImageTransform.Microsoft.alpha(opacity=50) progid:DXImageTransform.Microsoft.Blur(pixelradius="+(this.offset)+")";
        }
        this.realign(
            target.getLeft(true),
            target.getTop(true),
            target.getWidth(),
            target.getHeight()
        );
        this.el.dom.style.display = "block";
    },

    
    isVisible : function(){
        return this.el ? true : false;  
    },

    
    realign : function(l, t, w, h){
        if(!this.el){
            return;
        }
        var a = this.adjusts, d = this.el.dom, s = d.style;
        var iea = 0;
        s.left = (l+a.l)+"px";
        s.top = (t+a.t)+"px";
        var sw = (w+a.w), sh = (h+a.h), sws = sw +"px", shs = sh + "px";
        if(s.width != sws || s.height != shs){
            s.width = sws;
            s.height = shs;
            if(!Ext.isIE){
                var cn = d.childNodes;
                var sww = Math.max(0, (sw-12))+"px";
                cn[0].childNodes[1].style.width = sww;
                cn[1].childNodes[1].style.width = sww;
                cn[2].childNodes[1].style.width = sww;
                cn[1].style.height = Math.max(0, (sh-12))+"px";
            }
        }
    },

    
    hide : function(){
        if(this.el){
            this.el.dom.style.display = "none";
            Ext.Shadow.Pool.push(this.el);
            delete this.el;
        }
    },

    
    setZIndex : function(z){
        this.zIndex = z;
        if(this.el){
            this.el.setStyle("z-index", z);
        }
    }
};

// Private utility class that manages the internal Shadow cache
Ext.Shadow.Pool = function(){
    var p = [];
    var markup = Ext.isIE ?
                 '<div class="x-ie-shadow"></div>' :
                 '<div class="x-shadow"><div class="xst"><div class="xstl"></div><div class="xstc"></div><div class="xstr"></div></div><div class="xsc"><div class="xsml"></div><div class="xsmc"></div><div class="xsmr"></div></div><div class="xsb"><div class="xsbl"></div><div class="xsbc"></div><div class="xsbr"></div></div></div>';
    return {
        pull : function(){
            var sh = p.shift();
            if(!sh){
                sh = Ext.get(Ext.DomHelper.insertHtml("beforeBegin", document.body.firstChild, markup));
                sh.autoBoxAdjust = false;
            }
            return sh;
        },

        push : function(sh){
            p.push(sh);
        }
    };
}();

Ext.BoxComponent = Ext.extend(Ext.Component, {
    
    
    
    
    
    
    
    

    

	// private
    initComponent : function(){
        Ext.BoxComponent.superclass.initComponent.call(this);
        this.addEvents(
            
            'resize',
            
            'move'
        );
    },

    // private, set in afterRender to signify that the component has been rendered
    boxReady : false,
    // private, used to defer height settings to subclasses
    deferHeight: false,

    
    setSize : function(w, h){
        // support for standard size objects
        if(typeof w == 'object'){
            h = w.height;
            w = w.width;
        }
        // not rendered
        if(!this.boxReady){
            this.width = w;
            this.height = h;
            return this;
        }

        // prevent recalcs when not needed
        if(this.lastSize && this.lastSize.width == w && this.lastSize.height == h){
            return this;
        }
        this.lastSize = {width: w, height: h};
        var adj = this.adjustSize(w, h);
        var aw = adj.width, ah = adj.height;
        if(aw !== undefined || ah !== undefined){ // this code is nasty but performs better with floaters
            var rz = this.getResizeEl();
            if(!this.deferHeight && aw !== undefined && ah !== undefined){
                rz.setSize(aw, ah);
            }else if(!this.deferHeight && ah !== undefined){
                rz.setHeight(ah);
            }else if(aw !== undefined){
                rz.setWidth(aw);
            }
            this.onResize(aw, ah, w, h);
            this.fireEvent('resize', this, aw, ah, w, h);
        }
        return this;
    },

    
    setWidth : function(width){
        return this.setSize(width);
    },

    
    setHeight : function(height){
        return this.setSize(undefined, height);
    },

    
    getSize : function(){
        return this.el.getSize();
    },

    
    getPosition : function(local){
        if(local === true){
            return [this.el.getLeft(true), this.el.getTop(true)];
        }
        return this.xy || this.el.getXY();
    },

    
    getBox : function(local){
        var s = this.el.getSize();
        if(local === true){
            s.x = this.el.getLeft(true);
            s.y = this.el.getTop(true);
        }else{
            var xy = this.xy || this.el.getXY();
            s.x = xy[0];
            s.y = xy[1];
        }
        return s;
    },

    
    updateBox : function(box){
        this.setSize(box.width, box.height);
        this.setPagePosition(box.x, box.y);
        return this;
    },

    // protected
    getResizeEl : function(){
        return this.resizeEl || this.el;
    },

    // protected
    getPositionEl : function(){
        return this.positionEl || this.el;
    },

    
    setPosition : function(x, y){
        if(x && typeof x[1] == 'number'){
            y = x[1];
            x = x[0];
        }
        this.x = x;
        this.y = y;
        if(!this.boxReady){
            return this;
        }
        var adj = this.adjustPosition(x, y);
        var ax = adj.x, ay = adj.y;

        var el = this.getPositionEl();
        if(ax !== undefined || ay !== undefined){
            if(ax !== undefined && ay !== undefined){
                el.setLeftTop(ax, ay);
            }else if(ax !== undefined){
                el.setLeft(ax);
            }else if(ay !== undefined){
                el.setTop(ay);
            }
            this.onPosition(ax, ay);
            this.fireEvent('move', this, ax, ay);
        }
        return this;
    },

    
    setPagePosition : function(x, y){
        if(x && typeof x[1] == 'number'){
            y = x[1];
            x = x[0];
        }
        this.pageX = x;
        this.pageY = y;
        if(!this.boxReady){
            return;
        }
        if(x === undefined || y === undefined){ // cannot translate undefined points
            return;
        }
        var p = this.el.translatePoints(x, y);
        this.setPosition(p.left, p.top);
        return this;
    },

    // private
    onRender : function(ct, position){
        Ext.BoxComponent.superclass.onRender.call(this, ct, position);
        if(this.resizeEl){
            this.resizeEl = Ext.get(this.resizeEl);
        }
        if(this.positionEl){
            this.positionEl = Ext.get(this.positionEl);
        }
    },

    // private
    afterRender : function(){
        Ext.BoxComponent.superclass.afterRender.call(this);
        this.boxReady = true;
        this.setSize(this.width, this.height);
        if(this.x || this.y){
            this.setPosition(this.x, this.y);
        }else if(this.pageX || this.pageY){
            this.setPagePosition(this.pageX, this.pageY);
        }
    },

    
    syncSize : function(){
        delete this.lastSize;
        this.setSize(this.autoWidth ? undefined : this.el.getWidth(), this.autoHeight ? undefined : this.el.getHeight());
        return this;
    },

    
    onResize : function(adjWidth, adjHeight, rawWidth, rawHeight){

    },

    
    onPosition : function(x, y){

    },

    // private
    adjustSize : function(w, h){
        if(this.autoWidth){
            w = 'auto';
        }
        if(this.autoHeight){
            h = 'auto';
        }
        return {width : w, height: h};
    },

    // private
    adjustPosition : function(x, y){
        return {x : x, y: y};
    }
});
Ext.reg('box', Ext.BoxComponent);

Ext.SplitBar = function(dragElement, resizingElement, orientation, placement, existingProxy){
    
    
    this.el = Ext.get(dragElement, true);
    this.el.dom.unselectable = "on";
    
    this.resizingEl = Ext.get(resizingElement, true);

    
    this.orientation = orientation || Ext.SplitBar.HORIZONTAL;
    
    
    this.minSize = 0;
    
    
    this.maxSize = 2000;
    
    
    this.animate = false;
    
    
    this.useShim = false;
    
    
    this.shim = null;
    
    if(!existingProxy){
        
        this.proxy = Ext.SplitBar.createProxy(this.orientation);
    }else{
        this.proxy = Ext.get(existingProxy).dom;
    }
    
    this.dd = new Ext.dd.DDProxy(this.el.dom.id, "XSplitBars", {dragElId : this.proxy.id});
    
    
    this.dd.b4StartDrag = this.onStartProxyDrag.createDelegate(this);
    
    
    this.dd.endDrag = this.onEndProxyDrag.createDelegate(this);
    
    
    this.dragSpecs = {};
    
    
    this.adapter = new Ext.SplitBar.BasicLayoutAdapter();
    this.adapter.init(this);
    
    if(this.orientation == Ext.SplitBar.HORIZONTAL){
        
        this.placement = placement || (this.el.getX() > this.resizingEl.getX() ? Ext.SplitBar.LEFT : Ext.SplitBar.RIGHT);
        this.el.addClass("x-splitbar-h");
    }else{
        
        this.placement = placement || (this.el.getY() > this.resizingEl.getY() ? Ext.SplitBar.TOP : Ext.SplitBar.BOTTOM);
        this.el.addClass("x-splitbar-v");
    }
    
    this.addEvents(
        
        "resize",
        
        "moved",
        
        "beforeresize",

        "beforeapply"
    );

    Ext.SplitBar.superclass.constructor.call(this);
};

Ext.extend(Ext.SplitBar, Ext.util.Observable, {
    onStartProxyDrag : function(x, y){
        this.fireEvent("beforeresize", this);
        this.overlay =  Ext.DomHelper.append(document.body,  {cls: "x-drag-overlay", html: "&#160;"}, true);
        this.overlay.unselectable();
        this.overlay.setSize(Ext.lib.Dom.getViewWidth(true), Ext.lib.Dom.getViewHeight(true));
        this.overlay.show();
        Ext.get(this.proxy).setDisplayed("block");
        var size = this.adapter.getElementSize(this);
        this.activeMinSize = this.getMinimumSize();
        this.activeMaxSize = this.getMaximumSize();
        var c1 = size - this.activeMinSize;
        var c2 = Math.max(this.activeMaxSize - size, 0);
        if(this.orientation == Ext.SplitBar.HORIZONTAL){
            this.dd.resetConstraints();
            this.dd.setXConstraint(
                this.placement == Ext.SplitBar.LEFT ? c1 : c2, 
                this.placement == Ext.SplitBar.LEFT ? c2 : c1
            );
            this.dd.setYConstraint(0, 0);
        }else{
            this.dd.resetConstraints();
            this.dd.setXConstraint(0, 0);
            this.dd.setYConstraint(
                this.placement == Ext.SplitBar.TOP ? c1 : c2, 
                this.placement == Ext.SplitBar.TOP ? c2 : c1
            );
         }
        this.dragSpecs.startSize = size;
        this.dragSpecs.startPoint = [x, y];
        Ext.dd.DDProxy.prototype.b4StartDrag.call(this.dd, x, y);
    },
    
    
    onEndProxyDrag : function(e){
        Ext.get(this.proxy).setDisplayed(false);
        var endPoint = Ext.lib.Event.getXY(e);
        if(this.overlay){
            Ext.destroy(this.overlay);
            delete this.overlay;
        }
        var newSize;
        if(this.orientation == Ext.SplitBar.HORIZONTAL){
            newSize = this.dragSpecs.startSize + 
                (this.placement == Ext.SplitBar.LEFT ?
                    endPoint[0] - this.dragSpecs.startPoint[0] :
                    this.dragSpecs.startPoint[0] - endPoint[0]
                );
        }else{
            newSize = this.dragSpecs.startSize + 
                (this.placement == Ext.SplitBar.TOP ?
                    endPoint[1] - this.dragSpecs.startPoint[1] :
                    this.dragSpecs.startPoint[1] - endPoint[1]
                );
        }
        newSize = Math.min(Math.max(newSize, this.activeMinSize), this.activeMaxSize);
        if(newSize != this.dragSpecs.startSize){
            if(this.fireEvent('beforeapply', this, newSize) !== false){
                this.adapter.setElementSize(this, newSize);
                this.fireEvent("moved", this, newSize);
                this.fireEvent("resize", this, newSize);
            }
        }
    },
    
    
    getAdapter : function(){
        return this.adapter;
    },
    
    
    setAdapter : function(adapter){
        this.adapter = adapter;
        this.adapter.init(this);
    },
    
    
    getMinimumSize : function(){
        return this.minSize;
    },
    
    
    setMinimumSize : function(minSize){
        this.minSize = minSize;
    },
    
    
    getMaximumSize : function(){
        return this.maxSize;
    },
    
    
    setMaximumSize : function(maxSize){
        this.maxSize = maxSize;
    },
    
    
    setCurrentSize : function(size){
        var oldAnimate = this.animate;
        this.animate = false;
        this.adapter.setElementSize(this, size);
        this.animate = oldAnimate;
    },
    
    
    destroy : function(removeEl){
        if(this.shim){
            this.shim.remove();
        }
        this.dd.unreg();
        Ext.destroy(Ext.get(this.proxy));
        if(removeEl){
            this.el.remove();
        }
    }
});


Ext.SplitBar.createProxy = function(dir){
    var proxy = new Ext.Element(document.createElement("div"));
    proxy.unselectable();
    var cls = 'x-splitbar-proxy';
    proxy.addClass(cls + ' ' + (dir == Ext.SplitBar.HORIZONTAL ? cls +'-h' : cls + '-v'));
    document.body.appendChild(proxy.dom);
    return proxy.dom;
};


Ext.SplitBar.BasicLayoutAdapter = function(){
};

Ext.SplitBar.BasicLayoutAdapter.prototype = {
    // do nothing for now
    init : function(s){
    
    },
    
     getElementSize : function(s){
        if(s.orientation == Ext.SplitBar.HORIZONTAL){
            return s.resizingEl.getWidth();
        }else{
            return s.resizingEl.getHeight();
        }
    },
    
    
    setElementSize : function(s, newSize, onComplete){
        if(s.orientation == Ext.SplitBar.HORIZONTAL){
            if(!s.animate){
                s.resizingEl.setWidth(newSize);
                if(onComplete){
                    onComplete(s, newSize);
                }
            }else{
                s.resizingEl.setWidth(newSize, true, .1, onComplete, 'easeOut');
            }
        }else{
            
            if(!s.animate){
                s.resizingEl.setHeight(newSize);
                if(onComplete){
                    onComplete(s, newSize);
                }
            }else{
                s.resizingEl.setHeight(newSize, true, .1, onComplete, 'easeOut');
            }
        }
    }
};


Ext.SplitBar.AbsoluteLayoutAdapter = function(container){
    this.basic = new Ext.SplitBar.BasicLayoutAdapter();
    this.container = Ext.get(container);
};

Ext.SplitBar.AbsoluteLayoutAdapter.prototype = {
    init : function(s){
        this.basic.init(s);
    },
    
    getElementSize : function(s){
        return this.basic.getElementSize(s);
    },
    
    setElementSize : function(s, newSize, onComplete){
        this.basic.setElementSize(s, newSize, this.moveSplitter.createDelegate(this, [s]));
    },
    
    moveSplitter : function(s){
        var yes = Ext.SplitBar;
        switch(s.placement){
            case yes.LEFT:
                s.el.setX(s.resizingEl.getRight());
                break;
            case yes.RIGHT:
                s.el.setStyle("right", (this.container.getWidth() - s.resizingEl.getLeft()) + "px");
                break;
            case yes.TOP:
                s.el.setY(s.resizingEl.getBottom());
                break;
            case yes.BOTTOM:
                s.el.setY(s.resizingEl.getTop() - s.el.getHeight());
                break;
        }
    }
};


Ext.SplitBar.VERTICAL = 1;


Ext.SplitBar.HORIZONTAL = 2;


Ext.SplitBar.LEFT = 1;


Ext.SplitBar.RIGHT = 2;


Ext.SplitBar.TOP = 3;


Ext.SplitBar.BOTTOM = 4;


Ext.Container = Ext.extend(Ext.BoxComponent, {
    
    
    
    
    
    
    

    
    autoDestroy: true,
    
    
    defaultType: 'panel',

    // private
    initComponent : function(){
        Ext.Container.superclass.initComponent.call(this);

        this.addEvents(
            
            'afterlayout',
            
            'beforeadd',
            
            'beforeremove',
            
            'add',
            
            'remove'
        );

        
        var items = this.items;
        if(items){
            delete this.items;
            if(Ext.isArray(items) && items.length > 0){
                this.add.apply(this, items);
            }else{
                this.add(items);
            }
        }
    },

    // private
    initItems : function(){
        if(!this.items){
            this.items = new Ext.util.MixedCollection(false, this.getComponentId);
            this.getLayout(); // initialize the layout
        }
    },

    // private
    setLayout : function(layout){
        if(this.layout && this.layout != layout){
            this.layout.setContainer(null);
        }
        this.initItems();
        this.layout = layout;
        layout.setContainer(this);
    },

    // private
    render : function(){
        Ext.Container.superclass.render.apply(this, arguments);
        if(this.layout){
            if(typeof this.layout == 'string'){
                this.layout = new Ext.Container.LAYOUTS[this.layout.toLowerCase()](this.layoutConfig);
            }
            this.setLayout(this.layout);

            if(this.activeItem !== undefined){
                var item = this.activeItem;
                delete this.activeItem;
                this.layout.setActiveItem(item);
                return;
            }
        }
        if(!this.ownerCt){
            this.doLayout();
        }
        if(this.monitorResize === true){
            Ext.EventManager.onWindowResize(this.doLayout, this, [false]);
        }
    },

    
    getLayoutTarget : function(){
        return this.el;
    },

    // private - used as the key lookup function for the items collection
    getComponentId : function(comp){
        return comp.itemId || comp.id;
    },

    
    add : function(comp){
        if(!this.items){
            this.initItems();
        }
        var a = arguments, len = a.length;
        if(len > 1){
            for(var i = 0; i < len; i++) {
                this.add(a[i]);
            }
            return;
        }
        var c = this.lookupComponent(this.applyDefaults(comp));
        var pos = this.items.length;
        if(this.fireEvent('beforeadd', this, c, pos) !== false && this.onBeforeAdd(c) !== false){
            this.items.add(c);
            c.ownerCt = this;
            this.fireEvent('add', this, c, pos);
        }
        return c;
    },

    
    insert : function(index, comp){
        if(!this.items){
            this.initItems();
        }
        var a = arguments, len = a.length;
        if(len > 2){
            for(var i = len-1; i >= 1; --i) {
                this.insert(index, a[i]);
            }
            return;
        }
        var c = this.lookupComponent(this.applyDefaults(comp));

        if(c.ownerCt == this && this.items.indexOf(c) < index){
            --index;
        }

        if(this.fireEvent('beforeadd', this, c, index) !== false && this.onBeforeAdd(c) !== false){
            this.items.insert(index, c);
            c.ownerCt = this;
            this.fireEvent('add', this, c, index);
        }
        return c;
    },

    // private
    applyDefaults : function(c){
        if(this.defaults){
            if(typeof c == 'string'){
                c = Ext.ComponentMgr.get(c);
                Ext.apply(c, this.defaults);
            }else if(!c.events){
                Ext.applyIf(c, this.defaults);
            }else{
                Ext.apply(c, this.defaults);
            }
        }
        return c;
    },

    // private
    onBeforeAdd : function(item){
        if(item.ownerCt){
            item.ownerCt.remove(item, false);
        }
        if(this.hideBorders === true){
            item.border = (item.border === true);
        }
    },

    
    remove : function(comp, autoDestroy){
        var c = this.getComponent(comp);
        if(c && this.fireEvent('beforeremove', this, c) !== false){
            this.items.remove(c);
            delete c.ownerCt;
            if(autoDestroy === true || (autoDestroy !== false && this.autoDestroy)){
                c.destroy();
            }
            if(this.layout && this.layout.activeItem == c){
                delete this.layout.activeItem;
            }
            this.fireEvent('remove', this, c);
        }
        return c;
    },
    
    
    removeAll: function(autoDestroy){
        var item, items = [];
        while((item = this.items.last())){
            items.unshift(this.remove(item, autoDestroy));
        }
        return items;
    },

    
    getComponent : function(comp){
        if(typeof comp == 'object'){
            return comp;
        }
        return this.items.get(comp);
    },

    // private
    lookupComponent : function(comp){
        if(typeof comp == 'string'){
            return Ext.ComponentMgr.get(comp);
        }else if(!comp.events){
            return this.createComponent(comp);
        }
        return comp;
    },

    // private
    createComponent : function(config){
        return Ext.ComponentMgr.create(config, this.defaultType);
    },

    
    doLayout : function(shallow){
        if(this.rendered && this.layout){
            this.layout.layout();
        }
        if(shallow !== false && this.items){
            var cs = this.items.items;
            for(var i = 0, len = cs.length; i < len; i++) {
                var c  = cs[i];
                if(c.doLayout){
                    c.doLayout();
                }
            }
        }
    },

    
    getLayout : function(){
        if(!this.layout){
            var layout = new Ext.layout.ContainerLayout(this.layoutConfig);
            this.setLayout(layout);
        }
        return this.layout;
    },

    // private
    beforeDestroy : function(){
        if(this.items){
            Ext.destroy.apply(Ext, this.items.items);
        }
        if(this.monitorResize){
            Ext.EventManager.removeResizeListener(this.doLayout, this);
        }
        if (this.layout && this.layout.destroy) {
            this.layout.destroy();
        }
        Ext.Container.superclass.beforeDestroy.call(this);
    },

    
    bubble : function(fn, scope, args){
        var p = this;
        while(p){
            if(fn.apply(scope || p, args || [p]) === false){
                break;
            }
            p = p.ownerCt;
        }
    },

    
    cascade : function(fn, scope, args){
        if(fn.apply(scope || this, args || [this]) !== false){
            if(this.items){
                var cs = this.items.items;
                for(var i = 0, len = cs.length; i < len; i++){
                    if(cs[i].cascade){
                        cs[i].cascade(fn, scope, args);
                    }else{
                        fn.apply(scope || cs[i], args || [cs[i]]);
                    }
                }
            }
        }
    },

    
    findById : function(id){
        var m, ct = this;
        this.cascade(function(c){
            if(ct != c && c.id === id){
                m = c;
                return false;
            }
        });
        return m || null;
    },

    
    findByType : function(xtype, shallow){
        return this.findBy(function(c){
            return c.isXType(xtype, shallow);
        });
    },

    
    find : function(prop, value){
        return this.findBy(function(c){
            return c[prop] === value;
        });
    },

    
    findBy : function(fn, scope){
        var m = [], ct = this;
        this.cascade(function(c){
            if(ct != c && fn.call(scope || c, c, ct) === true){
                m.push(c);
            }
        });
        return m;
    }
});

Ext.Container.LAYOUTS = {};
Ext.reg('container', Ext.Container);

Ext.layout.ContainerLayout = function(config){
    Ext.apply(this, config);
};

Ext.layout.ContainerLayout.prototype = {
    
    

    

    // private
    monitorResize:false,
    // private
    activeItem : null,

    // private
    layout : function(){
        var target = this.container.getLayoutTarget();
        this.onLayout(this.container, target);
        this.container.fireEvent('afterlayout', this.container, this);
    },

    // private
    onLayout : function(ct, target){
        this.renderAll(ct, target);
    },

    // private
    isValidParent : function(c, target){
		var el = c.getPositionEl ? c.getPositionEl() : c.getEl();
		return el.dom.parentNode == target.dom;
    },

    // private
    renderAll : function(ct, target){
        var items = ct.items.items;
        for(var i = 0, len = items.length; i < len; i++) {
            var c = items[i];
            if(c && (!c.rendered || !this.isValidParent(c, target))){
                this.renderItem(c, i, target);
            }
        }
    },

    // private
    renderItem : function(c, position, target){
        if(c && !c.rendered){
            c.render(target, position);
            if(this.extraCls){
            	var t = c.getPositionEl ? c.getPositionEl() : c;
            	t.addClass(this.extraCls);
            }
            if (this.renderHidden && c != this.activeItem) {
                c.hide();
            }
        }else if(c && !this.isValidParent(c, target)){
            if(this.extraCls){
                var t = c.getPositionEl ? c.getPositionEl() : c;
            	t.addClass(this.extraCls);
            }
            if(typeof position == 'number'){
                position = target.dom.childNodes[position];
            }
            target.dom.insertBefore(c.getEl().dom, position || null);
            if (this.renderHidden && c != this.activeItem) {
                c.hide();
            }
        }
    },

    // private
    onResize: function(){
        if(this.container.collapsed){
            return;
        }
        var b = this.container.bufferResize;
        if(b){
            if(!this.resizeTask){
                this.resizeTask = new Ext.util.DelayedTask(this.layout, this);
                this.resizeBuffer = typeof b == 'number' ? b : 100;
            }
            this.resizeTask.delay(this.resizeBuffer);
        }else{
            this.layout();
        }
    },

    // private
    setContainer : function(ct){
        if(this.monitorResize && ct != this.container){
            if(this.container){
                this.container.un('resize', this.onResize, this);
            }
            if(ct){
                ct.on('resize', this.onResize, this);
            }
        }
        this.container = ct;
    },

    // private
    parseMargins : function(v){
        var ms = v.split(' ');
        var len = ms.length;
        if(len == 1){
            ms[1] = ms[0];
            ms[2] = ms[0];
            ms[3] = ms[0];
        }
        if(len == 2){
            ms[2] = ms[0];
            ms[3] = ms[1];
        }
        return {
            top:parseInt(ms[0], 10) || 0,
            right:parseInt(ms[1], 10) || 0,
            bottom:parseInt(ms[2], 10) || 0,
            left:parseInt(ms[3], 10) || 0
        };
    },

    
    destroy : Ext.emptyFn
};
Ext.Container.LAYOUTS['auto'] = Ext.layout.ContainerLayout;

Ext.layout.FitLayout = Ext.extend(Ext.layout.ContainerLayout, {
    // private
    monitorResize:true,

    // private
    onLayout : function(ct, target){
        Ext.layout.FitLayout.superclass.onLayout.call(this, ct, target);
        if(!this.container.collapsed){
            this.setItemSize(this.activeItem || ct.items.itemAt(0), target.getStyleSize());
        }
    },

    // private
    setItemSize : function(item, size){
        if(item && size.height > 0){ // display none?
            item.setSize(size);
        }
    }
});
Ext.Container.LAYOUTS['fit'] = Ext.layout.FitLayout;

Ext.layout.CardLayout = Ext.extend(Ext.layout.FitLayout, {
    
    deferredRender : false,

    // private
    renderHidden : true,

    
    setActiveItem : function(item){
        item = this.container.getComponent(item);
        if(this.activeItem != item){
            if(this.activeItem){
                this.activeItem.hide();
            }
            this.activeItem = item;
            item.show();
            this.layout();
        }
    },

    // private
    renderAll : function(ct, target){
        if(this.deferredRender){
            this.renderItem(this.activeItem, undefined, target);
        }else{
            Ext.layout.CardLayout.superclass.renderAll.call(this, ct, target);
        }
    }
});
Ext.Container.LAYOUTS['card'] = Ext.layout.CardLayout;

Ext.layout.AnchorLayout = Ext.extend(Ext.layout.ContainerLayout, {
    // private
    monitorResize:true,

    // private
    getAnchorViewSize : function(ct, target){
        return target.dom == document.body ?
                   target.getViewSize() : target.getStyleSize();
    },

    // private
    onLayout : function(ct, target){
        Ext.layout.AnchorLayout.superclass.onLayout.call(this, ct, target);

        var size = this.getAnchorViewSize(ct, target);

        var w = size.width, h = size.height;

        if(w < 20 || h < 20){
            return;
        }

        // find the container anchoring size
        var aw, ah;
        if(ct.anchorSize){
            if(typeof ct.anchorSize == 'number'){
                aw = ct.anchorSize;
            }else{
                aw = ct.anchorSize.width;
                ah = ct.anchorSize.height;
            }
        }else{
            aw = ct.initialConfig.width;
            ah = ct.initialConfig.height;
        }

        var cs = ct.items.items, len = cs.length, i, c, a, cw, ch;
        for(i = 0; i < len; i++){
            c = cs[i];
            if(c.anchor){
                a = c.anchorSpec;
                if(!a){ // cache all anchor values
                    var vs = c.anchor.split(' ');
                    c.anchorSpec = a = {
                        right: this.parseAnchor(vs[0], c.initialConfig.width, aw),
                        bottom: this.parseAnchor(vs[1], c.initialConfig.height, ah)
                    };
                }
                cw = a.right ? this.adjustWidthAnchor(a.right(w), c) : undefined;
                ch = a.bottom ? this.adjustHeightAnchor(a.bottom(h), c) : undefined;

                if(cw || ch){
                    c.setSize(cw || undefined, ch || undefined);
                }
            }
        }
    },

    // private
    parseAnchor : function(a, start, cstart){
        if(a && a != 'none'){
            var last;
            if(/^(r|right|b|bottom)$/i.test(a)){   // standard anchor
                var diff = cstart - start;
                return function(v){
                    if(v !== last){
                        last = v;
                        return v - diff;
                    }
                }
            }else if(a.indexOf('%') != -1){
                var ratio = parseFloat(a.replace('%', ''))*.01;   // percentage
                return function(v){
                    if(v !== last){
                        last = v;
                        return Math.floor(v*ratio);
                    }
                }
            }else{
                a = parseInt(a, 10);
                if(!isNaN(a)){                            // simple offset adjustment
                    return function(v){
                        if(v !== last){
                            last = v;
                            return v + a;
                        }
                    }
                }
            }
        }
        return false;
    },

    // private
    adjustWidthAnchor : function(value, comp){
        return value;
    },

    // private
    adjustHeightAnchor : function(value, comp){
        return value;
    }
    
    
});
Ext.Container.LAYOUTS['anchor'] = Ext.layout.AnchorLayout;

Ext.layout.ColumnLayout = Ext.extend(Ext.layout.ContainerLayout, {
    // private
    monitorResize:true,
    
    
    extraCls: 'x-column',

    scrollOffset : 0,

    // private
    isValidParent : function(c, target){
        return (c.getPositionEl ? c.getPositionEl() : c.getEl()).dom.parentNode == this.innerCt.dom;
    },

    // private
    onLayout : function(ct, target){
        var cs = ct.items.items, len = cs.length, c, i;

        if(!this.innerCt){
            target.addClass('x-column-layout-ct');

            // the innerCt prevents wrapping and shuffling while
            // the container is resizing
            this.innerCt = target.createChild({cls:'x-column-inner'});
            this.innerCt.createChild({cls:'x-clear'});
        }
        this.renderAll(ct, this.innerCt);

        var size = Ext.isIE && target.dom != Ext.getBody().dom ? target.getStyleSize() : target.getViewSize();

        if(size.width < 1 && size.height < 1){ // display none?
            return;
        }

        var w = size.width - target.getPadding('lr') - this.scrollOffset,
            h = size.height - target.getPadding('tb'),
            pw = w;

        this.innerCt.setWidth(w);
        
        // some columns can be percentages while others are fixed
        // so we need to make 2 passes

        for(i = 0; i < len; i++){
            c = cs[i];
            if(!c.columnWidth){
                pw -= (c.getSize().width + c.getEl().getMargins('lr'));
            }
        }

        pw = pw < 0 ? 0 : pw;

        for(i = 0; i < len; i++){
            c = cs[i];
            if(c.columnWidth){
                c.setSize(Math.floor(c.columnWidth*pw) - c.getEl().getMargins('lr'));
            }
        }
    }
    
    
});

Ext.Container.LAYOUTS['column'] = Ext.layout.ColumnLayout;

Ext.layout.BorderLayout = Ext.extend(Ext.layout.ContainerLayout, {
    // private
    monitorResize:true,
    // private
    rendered : false,

    // private
    onLayout : function(ct, target){
        var collapsed;
        if(!this.rendered){
            target.position();
            target.addClass('x-border-layout-ct');
            var items = ct.items.items;
            collapsed = [];
            for(var i = 0, len = items.length; i < len; i++) {
                var c = items[i];
                var pos = c.region;
                if(c.collapsed){
                    collapsed.push(c);
                }
                c.collapsed = false;
                if(!c.rendered){
                    c.cls = c.cls ? c.cls +' x-border-panel' : 'x-border-panel';
                    c.render(target, i);
                }
                this[pos] = pos != 'center' && c.split ?
                    new Ext.layout.BorderLayout.SplitRegion(this, c.initialConfig, pos) :
                    new Ext.layout.BorderLayout.Region(this, c.initialConfig, pos);
                this[pos].render(target, c);
            }
            this.rendered = true;
        }

        var size = target.getViewSize();
        if(size.width < 20 || size.height < 20){ // display none?
            if(collapsed){
                this.restoreCollapsed = collapsed;
            }
            return;
        }else if(this.restoreCollapsed){
            collapsed = this.restoreCollapsed;
            delete this.restoreCollapsed;
        }

        var w = size.width, h = size.height;
        var centerW = w, centerH = h, centerY = 0, centerX = 0;

        var n = this.north, s = this.south, west = this.west, e = this.east, c = this.center;
        if(!c && Ext.layout.BorderLayout.WARN !== false){
            throw 'No center region defined in BorderLayout ' + ct.id;
        }

        if(n && n.isVisible()){
            var b = n.getSize();
            var m = n.getMargins();
            b.width = w - (m.left+m.right);
            b.x = m.left;
            b.y = m.top;
            centerY = b.height + b.y + m.bottom;
            centerH -= centerY;
            n.applyLayout(b);
        }
        if(s && s.isVisible()){
            var b = s.getSize();
            var m = s.getMargins();
            b.width = w - (m.left+m.right);
            b.x = m.left;
            var totalHeight = (b.height + m.top + m.bottom);
            b.y = h - totalHeight + m.top;
            centerH -= totalHeight;
            s.applyLayout(b);
        }
        if(west && west.isVisible()){
            var b = west.getSize();
            var m = west.getMargins();
            b.height = centerH - (m.top+m.bottom);
            b.x = m.left;
            b.y = centerY + m.top;
            var totalWidth = (b.width + m.left + m.right);
            centerX += totalWidth;
            centerW -= totalWidth;
            west.applyLayout(b);
        }
        if(e && e.isVisible()){
            var b = e.getSize();
            var m = e.getMargins();
            b.height = centerH - (m.top+m.bottom);
            var totalWidth = (b.width + m.left + m.right);
            b.x = w - totalWidth + m.left;
            b.y = centerY + m.top;
            centerW -= totalWidth;
            e.applyLayout(b);
        }

        if(c){
            var m = c.getMargins();
            var centerBox = {
                x: centerX + m.left,
                y: centerY + m.top,
                width: centerW - (m.left+m.right),
                height: centerH - (m.top+m.bottom)
            };
            c.applyLayout(centerBox);
        }
        if(collapsed){
            for(var i = 0, len = collapsed.length; i < len; i++){
                collapsed[i].collapse(false);
            }
        }

        if(Ext.isIE && Ext.isStrict){ // workaround IE strict repainting issue
            target.repaint();
        }
    },

    // inherit docs
    destroy: function() {
        var r = ['north', 'south', 'east', 'west'];
        for (var i = 0; i < r.length; i++) {
            var region = this[r[i]];
            if(region){
                if(region.destroy){
	                region.destroy();
	            }else if (region.split){
	                region.split.destroy(true);
	            }
            }
        }
        Ext.layout.BorderLayout.superclass.destroy.call(this);
    }
    
    
});


Ext.layout.BorderLayout.Region = function(layout, config, pos){
    Ext.apply(this, config);
    this.layout = layout;
    this.position = pos;
    this.state = {};
    if(typeof this.margins == 'string'){
        this.margins = this.layout.parseMargins(this.margins);
    }
    this.margins = Ext.applyIf(this.margins || {}, this.defaultMargins);
    if(this.collapsible){
        if(typeof this.cmargins == 'string'){
            this.cmargins = this.layout.parseMargins(this.cmargins);
        }
        if(this.collapseMode == 'mini' && !this.cmargins){
            this.cmargins = {left:0,top:0,right:0,bottom:0};
        }else{
            this.cmargins = Ext.applyIf(this.cmargins || {},
                pos == 'north' || pos == 'south' ? this.defaultNSCMargins : this.defaultEWCMargins);
        }
    }
};

Ext.layout.BorderLayout.Region.prototype = {
    
    
	
    
    
    
    
    collapsible : false,
    
    split:false,
    
    floatable: true,
    
    minWidth:50,
    
    minHeight:50,

    // private
    defaultMargins : {left:0,top:0,right:0,bottom:0},
    // private
    defaultNSCMargins : {left:5,top:5,right:5,bottom:5},
    // private
    defaultEWCMargins : {left:5,top:0,right:5,bottom:0},

    
    isCollapsed : false,

    
    
    

    // private
    render : function(ct, p){
        this.panel = p;
        p.el.enableDisplayMode();
        this.targetEl = ct;
        this.el = p.el;

        var gs = p.getState, ps = this.position;
        p.getState = function(){
            return Ext.apply(gs.call(p) || {}, this.state);
        }.createDelegate(this);

        if(ps != 'center'){
            p.allowQueuedExpand = false;
            p.on({
                beforecollapse: this.beforeCollapse,
                collapse: this.onCollapse,
                beforeexpand: this.beforeExpand,
                expand: this.onExpand,
                hide: this.onHide,
                show: this.onShow,
                scope: this
            });
            if(this.collapsible){
                p.collapseEl = 'el';
                p.slideAnchor = this.getSlideAnchor();
            }
            if(p.tools && p.tools.toggle){
                p.tools.toggle.addClass('x-tool-collapse-'+ps);
                p.tools.toggle.addClassOnOver('x-tool-collapse-'+ps+'-over');
            }
        }
    },

    // private
    getCollapsedEl : function(){
        if(!this.collapsedEl){
            if(!this.toolTemplate){
                var tt = new Ext.Template(
                     '<div class="x-tool x-tool-{id}">&#160;</div>'
                );
                tt.disableFormats = true;
                tt.compile();
                Ext.layout.BorderLayout.Region.prototype.toolTemplate = tt;
            }
            this.collapsedEl = this.targetEl.createChild({
                cls: "x-layout-collapsed x-layout-collapsed-"+this.position,
                id: this.panel.id + '-xcollapsed'
            });
            this.collapsedEl.enableDisplayMode('block');

            if(this.collapseMode == 'mini'){
                this.collapsedEl.addClass('x-layout-cmini-'+this.position);
                this.miniCollapsedEl = this.collapsedEl.createChild({
                    cls: "x-layout-mini x-layout-mini-"+this.position, html: "&#160;"
                });
                this.miniCollapsedEl.addClassOnOver('x-layout-mini-over');
                this.collapsedEl.addClassOnOver("x-layout-collapsed-over");
                this.collapsedEl.on('click', this.onExpandClick, this, {stopEvent:true});
            }else {
                var t = this.toolTemplate.append(
                        this.collapsedEl.dom,
                        {id:'expand-'+this.position}, true);
                t.addClassOnOver('x-tool-expand-'+this.position+'-over');
                t.on('click', this.onExpandClick, this, {stopEvent:true});
                
                if(this.floatable !== false){
                   this.collapsedEl.addClassOnOver("x-layout-collapsed-over");
                   this.collapsedEl.on("click", this.collapseClick, this);
                }
            }
        }
        return this.collapsedEl;
    },

    // private
    onExpandClick : function(e){
        if(this.isSlid){
            this.afterSlideIn();
            this.panel.expand(false);
        }else{
            this.panel.expand();
        }
    },

    // private
    onCollapseClick : function(e){
        this.panel.collapse();
    },

    // private
    beforeCollapse : function(p, animate){
        this.lastAnim = animate;
        if(this.splitEl){
            this.splitEl.hide();
        }
        this.getCollapsedEl().show();
        this.panel.el.setStyle('z-index', 100);
        this.isCollapsed = true;
        this.layout.layout();
    },

    // private
    onCollapse : function(animate){
        this.panel.el.setStyle('z-index', 1);
        if(this.lastAnim === false || this.panel.animCollapse === false){
            this.getCollapsedEl().dom.style.visibility = 'visible';
        }else{
            this.getCollapsedEl().slideIn(this.panel.slideAnchor, {duration:.2});
        }
        this.state.collapsed = true;
        this.panel.saveState();
    },

    // private
    beforeExpand : function(animate){
        var c = this.getCollapsedEl();
        this.el.show();
        if(this.position == 'east' || this.position == 'west'){
            this.panel.setSize(undefined, c.getHeight());
        }else{
            this.panel.setSize(c.getWidth(), undefined);
        }
        c.hide();
        c.dom.style.visibility = 'hidden';
        this.panel.el.setStyle('z-index', 100);
    },

    // private
    onExpand : function(){
        this.isCollapsed = false;
        if(this.splitEl){
            this.splitEl.show();
        }
        this.layout.layout();
        this.panel.el.setStyle('z-index', 1);
        this.state.collapsed = false;
        this.panel.saveState();
    },

    // private
    collapseClick : function(e){
        if(this.isSlid){
           e.stopPropagation();
           this.slideIn();
        }else{
           e.stopPropagation();
           this.slideOut();
        }
    },

    // private
    onHide : function(){
        if(this.isCollapsed){
            this.getCollapsedEl().hide();
        }else if(this.splitEl){
            this.splitEl.hide();
        }
    },

    // private
    onShow : function(){
        if(this.isCollapsed){
            this.getCollapsedEl().show();
        }else if(this.splitEl){
            this.splitEl.show();
        }
    },

    
    isVisible : function(){
        return !this.panel.hidden;
    },

    
    getMargins : function(){
        return this.isCollapsed && this.cmargins ? this.cmargins : this.margins;
    },

    
    getSize : function(){
        return this.isCollapsed ? this.getCollapsedEl().getSize() : this.panel.getSize();
    },

    
    setPanel : function(panel){
        this.panel = panel;
    },

    
    getMinWidth: function(){
        return this.minWidth;
    },

    
    getMinHeight: function(){
        return this.minHeight;
    },

    // private
    applyLayoutCollapsed : function(box){
        var ce = this.getCollapsedEl();
        ce.setLeftTop(box.x, box.y);
        ce.setSize(box.width, box.height);
    },

    // private
    applyLayout : function(box){
        if(this.isCollapsed){
            this.applyLayoutCollapsed(box);
        }else{
            this.panel.setPosition(box.x, box.y);
            this.panel.setSize(box.width, box.height);
        }
    },

    // private
    beforeSlide: function(){
        this.panel.beforeEffect();
    },

    // private
    afterSlide : function(){
        this.panel.afterEffect();
    },

    // private
    initAutoHide : function(){
        if(this.autoHide !== false){
            if(!this.autoHideHd){
                var st = new Ext.util.DelayedTask(this.slideIn, this);
                this.autoHideHd = {
                    "mouseout": function(e){
                        if(!e.within(this.el, true)){
                            st.delay(500);
                        }
                    },
                    "mouseover" : function(e){
                        st.cancel();
                    },
                    scope : this
                };
            }
            this.el.on(this.autoHideHd);
        }
    },

    // private
    clearAutoHide : function(){
        if(this.autoHide !== false){
            this.el.un("mouseout", this.autoHideHd.mouseout);
            this.el.un("mouseover", this.autoHideHd.mouseover);
        }
    },

    // private
    clearMonitor : function(){
        Ext.getDoc().un("click", this.slideInIf, this);
    },

    // these names are backwards but not changed for compat
    // private
    slideOut : function(){
        if(this.isSlid || this.el.hasActiveFx()){
            return;
        }
        this.isSlid = true;
        var ts = this.panel.tools;
        if(ts && ts.toggle){
            ts.toggle.hide();
        }
        this.el.show();
        if(this.position == 'east' || this.position == 'west'){
            this.panel.setSize(undefined, this.collapsedEl.getHeight());
        }else{
            this.panel.setSize(this.collapsedEl.getWidth(), undefined);
        }
        this.restoreLT = [this.el.dom.style.left, this.el.dom.style.top];
        this.el.alignTo(this.collapsedEl, this.getCollapseAnchor());
        this.el.setStyle("z-index", 102);
        this.panel.el.replaceClass('x-panel-collapsed', 'x-panel-floating');
        if(this.animFloat !== false){
            this.beforeSlide();
            this.el.slideIn(this.getSlideAnchor(), {
                callback: function(){
                    this.afterSlide();
                    this.initAutoHide();
                    Ext.getDoc().on("click", this.slideInIf, this);
                },
                scope: this,
                block: true
            });
        }else{
            this.initAutoHide();
             Ext.getDoc().on("click", this.slideInIf, this);
        }
    },

    // private
    afterSlideIn : function(){
        this.clearAutoHide();
        this.isSlid = false;
        this.clearMonitor();
        this.el.setStyle("z-index", "");
        this.panel.el.replaceClass('x-panel-floating', 'x-panel-collapsed');
        this.el.dom.style.left = this.restoreLT[0];
        this.el.dom.style.top = this.restoreLT[1];

        var ts = this.panel.tools;
        if(ts && ts.toggle){
            ts.toggle.show();
        }
    },

    // private
    slideIn : function(cb){
        if(!this.isSlid || this.el.hasActiveFx()){
            Ext.callback(cb);
            return;
        }
        this.isSlid = false;
        if(this.animFloat !== false){
            this.beforeSlide();
            this.el.slideOut(this.getSlideAnchor(), {
                callback: function(){
                    this.el.hide();
                    this.afterSlide();
                    this.afterSlideIn();
                    Ext.callback(cb);
                },
                scope: this,
                block: true
            });
        }else{
            this.el.hide();
            this.afterSlideIn();
        }
    },

    // private
    slideInIf : function(e){
        if(!e.within(this.el)){
            this.slideIn();
        }
    },

    // private
    anchors : {
        "west" : "left",
        "east" : "right",
        "north" : "top",
        "south" : "bottom"
    },

    // private
    sanchors : {
        "west" : "l",
        "east" : "r",
        "north" : "t",
        "south" : "b"
    },

    // private
    canchors : {
        "west" : "tl-tr",
        "east" : "tr-tl",
        "north" : "tl-bl",
        "south" : "bl-tl"
    },

    // private
    getAnchor : function(){
        return this.anchors[this.position];
    },

    // private
    getCollapseAnchor : function(){
        return this.canchors[this.position];
    },

    // private
    getSlideAnchor : function(){
        return this.sanchors[this.position];
    },

    // private
    getAlignAdj : function(){
        var cm = this.cmargins;
        switch(this.position){
            case "west":
                return [0, 0];
            break;
            case "east":
                return [0, 0];
            break;
            case "north":
                return [0, 0];
            break;
            case "south":
                return [0, 0];
            break;
        }
    },

    // private
    getExpandAdj : function(){
        var c = this.collapsedEl, cm = this.cmargins;
        switch(this.position){
            case "west":
                return [-(cm.right+c.getWidth()+cm.left), 0];
            break;
            case "east":
                return [cm.right+c.getWidth()+cm.left, 0];
            break;
            case "north":
                return [0, -(cm.top+cm.bottom+c.getHeight())];
            break;
            case "south":
                return [0, cm.top+cm.bottom+c.getHeight()];
            break;
        }
    }
};


Ext.layout.BorderLayout.SplitRegion = function(layout, config, pos){
    Ext.layout.BorderLayout.SplitRegion.superclass.constructor.call(this, layout, config, pos);
    // prevent switch
    this.applyLayout = this.applyFns[pos];
};

Ext.extend(Ext.layout.BorderLayout.SplitRegion, Ext.layout.BorderLayout.Region, {
    
    splitTip : "Drag to resize.",
    
    collapsibleSplitTip : "Drag to resize. Double click to hide.",
    
    useSplitTips : false,

    // private
    splitSettings : {
        north : {
            orientation: Ext.SplitBar.VERTICAL,
            placement: Ext.SplitBar.TOP,
            maxFn : 'getVMaxSize',
            minProp: 'minHeight',
            maxProp: 'maxHeight'
        },
        south : {
            orientation: Ext.SplitBar.VERTICAL,
            placement: Ext.SplitBar.BOTTOM,
            maxFn : 'getVMaxSize',
            minProp: 'minHeight',
            maxProp: 'maxHeight'
        },
        east : {
            orientation: Ext.SplitBar.HORIZONTAL,
            placement: Ext.SplitBar.RIGHT,
            maxFn : 'getHMaxSize',
            minProp: 'minWidth',
            maxProp: 'maxWidth'
        },
        west : {
            orientation: Ext.SplitBar.HORIZONTAL,
            placement: Ext.SplitBar.LEFT,
            maxFn : 'getHMaxSize',
            minProp: 'minWidth',
            maxProp: 'maxWidth'
        }
    },

    // private
    applyFns : {
        west : function(box){
            if(this.isCollapsed){
                return this.applyLayoutCollapsed(box);
            }
            var sd = this.splitEl.dom, s = sd.style;
            this.panel.setPosition(box.x, box.y);
            var sw = sd.offsetWidth;
            s.left = (box.x+box.width-sw)+'px';
            s.top = (box.y)+'px';
            s.height = Math.max(0, box.height)+'px';
            this.panel.setSize(box.width-sw, box.height);
        },
        east : function(box){
            if(this.isCollapsed){
                return this.applyLayoutCollapsed(box);
            }
            var sd = this.splitEl.dom, s = sd.style;
            var sw = sd.offsetWidth;
            this.panel.setPosition(box.x+sw, box.y);
            s.left = (box.x)+'px';
            s.top = (box.y)+'px';
            s.height = Math.max(0, box.height)+'px';
            this.panel.setSize(box.width-sw, box.height);
        },
        north : function(box){
            if(this.isCollapsed){
                return this.applyLayoutCollapsed(box);
            }
            var sd = this.splitEl.dom, s = sd.style;
            var sh = sd.offsetHeight;
            this.panel.setPosition(box.x, box.y);
            s.left = (box.x)+'px';
            s.top = (box.y+box.height-sh)+'px';
            s.width = Math.max(0, box.width)+'px';
            this.panel.setSize(box.width, box.height-sh);
        },
        south : function(box){
            if(this.isCollapsed){
                return this.applyLayoutCollapsed(box);
            }
            var sd = this.splitEl.dom, s = sd.style;
            var sh = sd.offsetHeight;
            this.panel.setPosition(box.x, box.y+sh);
            s.left = (box.x)+'px';
            s.top = (box.y)+'px';
            s.width = Math.max(0, box.width)+'px';
            this.panel.setSize(box.width, box.height-sh);
        }
    },

    // private
    render : function(ct, p){
        Ext.layout.BorderLayout.SplitRegion.superclass.render.call(this, ct, p);

        var ps = this.position;

        this.splitEl = ct.createChild({
            cls: "x-layout-split x-layout-split-"+ps, html: "&#160;",
            id: this.panel.id + '-xsplit'
        });

        if(this.collapseMode == 'mini'){
            this.miniSplitEl = this.splitEl.createChild({
                cls: "x-layout-mini x-layout-mini-"+ps, html: "&#160;"
            });
            this.miniSplitEl.addClassOnOver('x-layout-mini-over');
            this.miniSplitEl.on('click', this.onCollapseClick, this, {stopEvent:true});
        }

        var s = this.splitSettings[ps];

        this.split = new Ext.SplitBar(this.splitEl.dom, p.el, s.orientation);
        this.split.placement = s.placement;
        this.split.getMaximumSize = this[s.maxFn].createDelegate(this);
        this.split.minSize = this.minSize || this[s.minProp];
        this.split.on("beforeapply", this.onSplitMove, this);
        this.split.useShim = this.useShim === true;
        this.maxSize = this.maxSize || this[s.maxProp];

        if(p.hidden){
            this.splitEl.hide();
        }

        if(this.useSplitTips){
            this.splitEl.dom.title = this.collapsible ? this.collapsibleSplitTip : this.splitTip;
        }
        if(this.collapsible){
            this.splitEl.on("dblclick", this.onCollapseClick,  this);
        }
    },

    //docs inherit from superclass
    getSize : function(){
        if(this.isCollapsed){
            return this.collapsedEl.getSize();
        }
        var s = this.panel.getSize();
        if(this.position == 'north' || this.position == 'south'){
            s.height += this.splitEl.dom.offsetHeight;
        }else{
            s.width += this.splitEl.dom.offsetWidth;
        }
        return s;
    },

    // private
    getHMaxSize : function(){
         var cmax = this.maxSize || 10000;
         var center = this.layout.center;
         return Math.min(cmax, (this.el.getWidth()+center.el.getWidth())-center.getMinWidth());
    },

    // private
    getVMaxSize : function(){
        var cmax = this.maxSize || 10000;
        var center = this.layout.center;
        return Math.min(cmax, (this.el.getHeight()+center.el.getHeight())-center.getMinHeight());
    },

    // private
    onSplitMove : function(split, newSize){
        var s = this.panel.getSize();
        this.lastSplitSize = newSize;
        if(this.position == 'north' || this.position == 'south'){
            this.panel.setSize(s.width, newSize);
            this.state.height = newSize;
        }else{
            this.panel.setSize(newSize, s.height);
            this.state.width = newSize;
        }
        this.layout.layout();
        this.panel.saveState();
        return false;
    },

    
    getSplitBar : function(){
        return this.split;
    },
    
    // inherit docs
    destroy : function() {
        Ext.destroy(
            this.miniSplitEl, 
            this.split, 
            this.splitEl
        );
    }
});

Ext.Container.LAYOUTS['border'] = Ext.layout.BorderLayout;

Ext.layout.FormLayout = Ext.extend(Ext.layout.AnchorLayout, {
    
    labelSeparator : ':',

    // private
    getAnchorViewSize : function(ct, target){
        return (ct.body||ct.el).getStyleSize();
    },

    // private
    setContainer : function(ct){
        Ext.layout.FormLayout.superclass.setContainer.call(this, ct);

        if(ct.labelAlign){
            ct.addClass('x-form-label-'+ct.labelAlign);
        }

        if(ct.hideLabels){
            this.labelStyle = "display:none";
            this.elementStyle = "padding-left:0;";
            this.labelAdjust = 0;
        }else{
            this.labelSeparator = ct.labelSeparator || this.labelSeparator;
            ct.labelWidth = ct.labelWidth || 100;
            if(typeof ct.labelWidth == 'number'){
                var pad = (typeof ct.labelPad == 'number' ? ct.labelPad : 5);
                this.labelAdjust = ct.labelWidth+pad;
                this.labelStyle = "width:"+ct.labelWidth+"px;";
                this.elementStyle = "padding-left:"+(ct.labelWidth+pad)+'px';
            }
            if(ct.labelAlign == 'top'){
                this.labelStyle = "width:auto;";
                this.labelAdjust = 0;
                this.elementStyle = "padding-left:0;";
            }
        }

        if(!this.fieldTpl){
            // the default field template used by all form layouts
            var t = new Ext.Template(
                '<div class="x-form-item {5}" tabIndex="-1">',
                    '<label for="{0}" style="{2}" class="x-form-item-label">{1}{4}</label>',
                    '<div class="x-form-element" id="x-form-el-{0}" style="{3}">',
                    '</div><div class="{6}"></div>',
                '</div>'
            );
            t.disableFormats = true;
            t.compile();
            Ext.layout.FormLayout.prototype.fieldTpl = t;
        }
    },
    
    //private
    getLabelStyle: function(s){
        var ls = '', items = [this.labelStyle, s];
        for (var i = 0, len = items.length; i < len; ++i){
            if (items[i]){
                ls += items[i];
                if (ls.substr(-1, 1) != ';'){
                    ls += ';'
                }
            }
        }
        return ls;
    },

    // private
    renderItem : function(c, position, target){
        if(c && !c.rendered && c.isFormField && c.inputType != 'hidden'){
            var args = [
                   c.id, c.fieldLabel,
                   this.getLabelStyle(c.labelStyle),
                   this.elementStyle||'',
                   typeof c.labelSeparator == 'undefined' ? this.labelSeparator : c.labelSeparator,
                   (c.itemCls||this.container.itemCls||'') + (c.hideLabel ? ' x-hide-label' : ''),
                   c.clearCls || 'x-form-clear-left' 
            ];
            if(typeof position == 'number'){
                position = target.dom.childNodes[position] || null;
            }
            if(position){
                this.fieldTpl.insertBefore(position, args);
            }else{
                this.fieldTpl.append(target, args);
            }
            c.render('x-form-el-'+c.id);
        }else {
            Ext.layout.FormLayout.superclass.renderItem.apply(this, arguments);
        }
    },

    // private
    adjustWidthAnchor : function(value, comp){
        return value - (comp.isFormField  ? (comp.hideLabel ? 0 : this.labelAdjust) : 0);
    },

    // private
    isValidParent : function(c, target){
        return true;
    }

    
});

Ext.Container.LAYOUTS['form'] = Ext.layout.FormLayout;

Ext.layout.Accordion = Ext.extend(Ext.layout.FitLayout, {
    
    fill : true,
    
    autoWidth : true,
    
    titleCollapse : true,
    
    hideCollapseTool : false,
    
    collapseFirst : false,
    
    animate : false,
    
    sequence : false,
    
    activeOnTop : false,

    renderItem : function(c){
        if(this.animate === false){
            c.animCollapse = false;
        }
        c.collapsible = true;
        if(this.autoWidth){
            c.autoWidth = true;
        }
        if(this.titleCollapse){
            c.titleCollapse = true;
        }
        if(this.hideCollapseTool){
            c.hideCollapseTool = true;
        }
        if(this.collapseFirst !== undefined){
            c.collapseFirst = this.collapseFirst;
        }
        if(!this.activeItem && !c.collapsed){
            this.activeItem = c;
        }else if(this.activeItem){
            c.collapsed = true;
        }
        Ext.layout.Accordion.superclass.renderItem.apply(this, arguments);
        c.header.addClass('x-accordion-hd');
        c.on('beforeexpand', this.beforeExpand, this);
    },

    // private
    beforeExpand : function(p, anim){
        var ai = this.activeItem;
        if(ai){
            if(this.sequence){
                delete this.activeItem;
                if (!ai.collapsed){
                    ai.collapse({callback:function(){
                        p.expand(anim || true);
                    }, scope: this});
                    return false;
                }
            }else{
                ai.collapse(this.animate);
            }
        }
        this.activeItem = p;
        if(this.activeOnTop){
            p.el.dom.parentNode.insertBefore(p.el.dom, p.el.dom.parentNode.firstChild);
        }
        this.layout();
    },

    // private
    setItemSize : function(item, size){
        if(this.fill && item){
            var items = this.container.items.items;
            var hh = 0;
            for(var i = 0, len = items.length; i < len; i++){
                var p = items[i];
                if(p != item){
                    hh += (p.getSize().height - p.bwrap.getHeight());
                }
            }
            size.height -= hh;
            item.setSize(size);
        }
    }
});
Ext.Container.LAYOUTS['accordion'] = Ext.layout.Accordion;

Ext.layout.TableLayout = Ext.extend(Ext.layout.ContainerLayout, {
    

    // private
    monitorResize:false,

    // private
    setContainer : function(ct){
        Ext.layout.TableLayout.superclass.setContainer.call(this, ct);

        this.currentRow = 0;
        this.currentColumn = 0;
        this.cells = [];
    },

    // private
    onLayout : function(ct, target){
        var cs = ct.items.items, len = cs.length, c, i;

        if(!this.table){
            target.addClass('x-table-layout-ct');

            this.table = target.createChild(
                {tag:'table', cls:'x-table-layout', cellspacing: 0, cn: {tag: 'tbody'}}, null, true);

            this.renderAll(ct, target);
        }
    },

    // private
    getRow : function(index){
        var row = this.table.tBodies[0].childNodes[index];
        if(!row){
            row = document.createElement('tr');
            this.table.tBodies[0].appendChild(row);
        }
        return row;
    },

    // private
	getNextCell : function(c){
		var cell = this.getNextNonSpan(this.currentColumn, this.currentRow);
		var curCol = this.currentColumn = cell[0], curRow = this.currentRow = cell[1];
		for(var rowIndex = curRow; rowIndex < curRow + (c.rowspan || 1); rowIndex++){
			if(!this.cells[rowIndex]){
				this.cells[rowIndex] = [];
			}
			for(var colIndex = curCol; colIndex < curCol + (c.colspan || 1); colIndex++){
				this.cells[rowIndex][colIndex] = true;
			}
		}
		var td = document.createElement('td');
		if(c.cellId){
			td.id = c.cellId;
		}
		var cls = 'x-table-layout-cell';
		if(c.cellCls){
			cls += ' ' + c.cellCls;
		}
		td.className = cls;
		if(c.colspan){
			td.colSpan = c.colspan;
		}
		if(c.rowspan){
			td.rowSpan = c.rowspan;
		}
		this.getRow(curRow).appendChild(td);
		return td;
	},
    
    // private
	getNextNonSpan: function(colIndex, rowIndex){
		var cols = this.columns;
		while((cols && colIndex >= cols) || (this.cells[rowIndex] && this.cells[rowIndex][colIndex])) {
			if(cols && colIndex >= cols){
				rowIndex++;
				colIndex = 0;
			}else{
				colIndex++;
			}
		}
		return [colIndex, rowIndex];
	},

    // private
    renderItem : function(c, position, target){
        if(c && !c.rendered){
            c.render(this.getNextCell(c));
            if(this.extraCls){
                var t = c.getPositionEl ? c.getPositionEl() : c;
                t.addClass(this.extraCls);
            }
        }
    },

    // private
    isValidParent : function(c, target){
        return true;
    }

    
});

Ext.Container.LAYOUTS['table'] = Ext.layout.TableLayout;

Ext.layout.AbsoluteLayout = Ext.extend(Ext.layout.AnchorLayout, {
    
    extraCls: 'x-abs-layout-item',
    isForm: false,
    // private
    setContainer : function(ct){
        Ext.layout.AbsoluteLayout.superclass.setContainer.call(this, ct);
        if(ct.isXType('form')){
            this.isForm = true;
        }
    },

    onLayout : function(ct, target){
        if(this.isForm){ ct.body.position(); } else { target.position(); }
        Ext.layout.AbsoluteLayout.superclass.onLayout.call(this, ct, target);
    },

    // private
    getAnchorViewSize : function(ct, target){
        return this.isForm ? ct.body.getStyleSize() : Ext.layout.AbsoluteLayout.superclass.getAnchorViewSize.call(this, ct, target);
    },

    // private
    isValidParent : function(c, target){
        return this.isForm ? true : Ext.layout.AbsoluteLayout.superclass.isValidParent.call(this, c, target);
    },

    // private
    adjustWidthAnchor : function(value, comp){
        return value ? value - comp.getPosition(true)[0] : value;
    },

    // private
    adjustHeightAnchor : function(value, comp){
        return  value ? value - comp.getPosition(true)[1] : value;
    }
    
});
Ext.Container.LAYOUTS['absolute'] = Ext.layout.AbsoluteLayout;

Ext.Viewport = Ext.extend(Ext.Container, {
	
    
    
    
    
    
    
    
    
    
    
    
    initComponent : function() {
        Ext.Viewport.superclass.initComponent.call(this);
        document.getElementsByTagName('html')[0].className += ' x-viewport';
        this.el = Ext.getBody();
        this.el.setHeight = Ext.emptyFn;
        this.el.setWidth = Ext.emptyFn;
        this.el.setSize = Ext.emptyFn;
        this.el.dom.scroll = 'no';
        this.allowDomMove = false;
        this.autoWidth = true;
        this.autoHeight = true;
        Ext.EventManager.onWindowResize(this.fireResize, this);
        this.renderTo = this.el;
    },

    fireResize : function(w, h){
        this.fireEvent('resize', this, w, h, w, h);
    }
});
Ext.reg('viewport', Ext.Viewport);

Ext.Panel = Ext.extend(Ext.Container, {
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
     
    
    
    
    

    
    baseCls : 'x-panel',
    
    collapsedCls : 'x-panel-collapsed',
    
    maskDisabled: true,
    
    animCollapse: Ext.enableFx,
    
    headerAsText: true,
    
    buttonAlign: 'right',
    
    collapsed : false,
    
    collapseFirst: true,
    
    minButtonWidth:75,
    
    elements : 'body',

    // protected - these could be used to customize the behavior of the window,
    // but changing them would not be useful without further mofifications and
    // could lead to unexpected or undesirable results.
    toolTarget : 'header',
    collapseEl : 'bwrap',
    slideAnchor : 't',
    disabledClass: '',

    // private, notify box this class will handle heights
    deferHeight: true,
    // private
    expandDefaults: {
        duration:.25
    },
    // private
    collapseDefaults: {
        duration:.25
    },

    // private
    initComponent : function(){
        Ext.Panel.superclass.initComponent.call(this);

        this.addEvents(
            
            'bodyresize',
            
            'titlechange',
            
            'iconchange',
            
            'collapse',
            
            'expand',
            
            'beforecollapse',
            
            'beforeexpand',
            
            'beforeclose',
            
            'close',
            
            'activate',
            
            'deactivate'
        );

        // shortcuts
        if(this.tbar){
            this.elements += ',tbar';
            if(typeof this.tbar == 'object'){
                this.topToolbar = this.tbar;
            }
            delete this.tbar;
        }
        if(this.bbar){
            this.elements += ',bbar';
            if(typeof this.bbar == 'object'){
                this.bottomToolbar = this.bbar;
            }
            delete this.bbar;
        }

        if(this.header === true){
            this.elements += ',header';
            delete this.header;
        }else if(this.title && this.header !== false){
            this.elements += ',header';
        }

        if(this.footer === true){
            this.elements += ',footer';
            delete this.footer;
        }

        if(this.buttons){
            var btns = this.buttons;
            
            this.buttons = [];
            for(var i = 0, len = btns.length; i < len; i++) {
                if(btns[i].render){ // button instance
                    btns[i].ownerCt = this;
                    this.buttons.push(btns[i]);
                }else{
                    this.addButton(btns[i]);
                }
            }
        }
        if(this.autoLoad){
            this.on('render', this.doAutoLoad, this, {delay:10});
        }
    },

    // private
    createElement : function(name, pnode){
        if(this[name]){
            pnode.appendChild(this[name].dom);
            return;
        }

        if(name === 'bwrap' || this.elements.indexOf(name) != -1){
            if(this[name+'Cfg']){
                this[name] = Ext.fly(pnode).createChild(this[name+'Cfg']);
            }else{
                var el = document.createElement('div');
                el.className = this[name+'Cls'];
                this[name] = Ext.get(pnode.appendChild(el));
            }
            if(this[name+'CssClass']){
                this[name].addClass(this[name+'CssClass']);
            }
            if(this[name+'Style']){
                this[name].applyStyles(this[name+'Style']);
            }
        }
    },

    // private
    onRender : function(ct, position){
        Ext.Panel.superclass.onRender.call(this, ct, position);

        this.createClasses();

        if(this.el){ // existing markup
            this.el.addClass(this.baseCls);
            this.header = this.el.down('.'+this.headerCls);
            this.bwrap = this.el.down('.'+this.bwrapCls);
            var cp = this.bwrap ? this.bwrap : this.el;
            this.tbar = cp.down('.'+this.tbarCls);
            this.body = cp.down('.'+this.bodyCls);
            this.bbar = cp.down('.'+this.bbarCls);
            this.footer = cp.down('.'+this.footerCls);
            this.fromMarkup = true;
        }else{
            this.el = ct.createChild({
                id: this.id,
                cls: this.baseCls
            }, position);
        }
        var el = this.el, d = el.dom;

        if(this.cls){
            this.el.addClass(this.cls);
        }

        if(this.buttons){
            this.elements += ',footer';
        }

        // This block allows for maximum flexibility and performance when using existing markup

        // framing requires special markup
        if(this.frame){
            el.insertHtml('afterBegin', String.format(Ext.Element.boxMarkup, this.baseCls));

            this.createElement('header', d.firstChild.firstChild.firstChild);
            this.createElement('bwrap', d);

            // append the mid and bottom frame to the bwrap
            var bw = this.bwrap.dom;
            var ml = d.childNodes[1], bl = d.childNodes[2];
            bw.appendChild(ml);
            bw.appendChild(bl);

            var mc = bw.firstChild.firstChild.firstChild;
            this.createElement('tbar', mc);
            this.createElement('body', mc);
            this.createElement('bbar', mc);
            this.createElement('footer', bw.lastChild.firstChild.firstChild);

            if(!this.footer){
                this.bwrap.dom.lastChild.className += ' x-panel-nofooter';
            }
        }else{
            this.createElement('header', d);
            this.createElement('bwrap', d);

            // append the mid and bottom frame to the bwrap
            var bw = this.bwrap.dom;
            this.createElement('tbar', bw);
            this.createElement('body', bw);
            this.createElement('bbar', bw);
            this.createElement('footer', bw);

            if(!this.header){
                this.body.addClass(this.bodyCls + '-noheader');
                if(this.tbar){
                    this.tbar.addClass(this.tbarCls + '-noheader');
                }
            }
        }

        if(this.border === false){
            this.el.addClass(this.baseCls + '-noborder');
            this.body.addClass(this.bodyCls + '-noborder');
            if(this.header){
                this.header.addClass(this.headerCls + '-noborder');
            }
            if(this.footer){
                this.footer.addClass(this.footerCls + '-noborder');
            }
            if(this.tbar){
                this.tbar.addClass(this.tbarCls + '-noborder');
            }
            if(this.bbar){
                this.bbar.addClass(this.bbarCls + '-noborder');
            }
        }

        if(this.bodyBorder === false){
           this.body.addClass(this.bodyCls + '-noborder');
        }

        this.bwrap.enableDisplayMode('block');

        if(this.header){
            this.header.unselectable();

            // for tools, we need to wrap any existing header markup
            if(this.headerAsText){
                this.header.dom.innerHTML =
                    '<span class="' + this.headerTextCls + '">'+this.header.dom.innerHTML+'</span>';

                if(this.iconCls){
                    this.setIconClass(this.iconCls);
                }
            }
        }

        if(this.floating){
            this.makeFloating(this.floating);
        }

        if(this.collapsible){
            this.tools = this.tools ? this.tools.slice(0) : [];
            if(!this.hideCollapseTool){
                this.tools[this.collapseFirst?'unshift':'push']({
                    id: 'toggle',
                    handler : this.toggleCollapse,
                    scope: this
                });
            }
            if(this.titleCollapse && this.header){
                this.header.on('click', this.toggleCollapse, this);
                this.header.setStyle('cursor', 'pointer');
            }
        }
        if(this.tools){
            var ts = this.tools;
            this.tools = {};
            this.addTool.apply(this, ts);
        }else{
            this.tools = {};
        }

        if(this.buttons && this.buttons.length > 0){
            // tables are required to maintain order and for correct IE layout
            var tb = this.footer.createChild({cls:'x-panel-btns-ct', cn: {
                cls:"x-panel-btns x-panel-btns-"+this.buttonAlign,
                html:'<table cellspacing="0"><tbody><tr></tr></tbody></table><div class="x-clear"></div>'
            }}, null, true);
            var tr = tb.getElementsByTagName('tr')[0];
            for(var i = 0, len = this.buttons.length; i < len; i++) {
                var b = this.buttons[i];
                var td = document.createElement('td');
                td.className = 'x-panel-btn-td';
                b.render(tr.appendChild(td));
            }
        }

        if(this.tbar && this.topToolbar){
            if(Ext.isArray(this.topToolbar)){
                this.topToolbar = new Ext.Toolbar(this.topToolbar);
            }
            this.topToolbar.render(this.tbar);
            this.topToolbar.ownerCt = this;
        }
        if(this.bbar && this.bottomToolbar){
            if(Ext.isArray(this.bottomToolbar)){
                this.bottomToolbar = new Ext.Toolbar(this.bottomToolbar);
            }
            this.bottomToolbar.render(this.bbar);
            this.bottomToolbar.ownerCt = this;
        }
    },

    
    setIconClass : function(cls){
        var old = this.iconCls;
        this.iconCls = cls;
        if(this.rendered && this.header){
            if(this.frame){
                this.header.addClass('x-panel-icon');
                this.header.replaceClass(old, this.iconCls);
            }else{
                var hd = this.header.dom;
                var img = hd.firstChild && String(hd.firstChild.tagName).toLowerCase() == 'img' ? hd.firstChild : null;
                if(img){
                    Ext.fly(img).replaceClass(old, this.iconCls);
                }else{
                    Ext.DomHelper.insertBefore(hd.firstChild, {
                        tag:'img', src: Ext.BLANK_IMAGE_URL, cls:'x-panel-inline-icon '+this.iconCls
                    });
                 }
            }
        }
        this.fireEvent('iconchange', this, cls, old);
    },

    // private
    makeFloating : function(cfg){
        this.floating = true;
        this.el = new Ext.Layer(
            typeof cfg == 'object' ? cfg : {
                shadow: this.shadow !== undefined ? this.shadow : 'sides',
                shadowOffset: this.shadowOffset,
                constrain:false,
                shim: this.shim === false ? false : undefined
            }, this.el
        );
    },

    
    getTopToolbar : function(){
        return this.topToolbar;
    },

    
    getBottomToolbar : function(){
        return this.bottomToolbar;
    },

    
    addButton : function(config, handler, scope){
        var bc = {
            handler: handler,
            scope: scope,
            minWidth: this.minButtonWidth,
            hideParent:true
        };
        if(typeof config == "string"){
            bc.text = config;
        }else{
            Ext.apply(bc, config);
        }
        var btn = new Ext.Button(bc);
        btn.ownerCt = this;
        if(!this.buttons){
            this.buttons = [];
        }
        this.buttons.push(btn);
        return btn;
    },

    // private
    addTool : function(){
        if(!this[this.toolTarget]) { // no where to render tools!
            return;
        }
        if(!this.toolTemplate){
            // initialize the global tool template on first use
            var tt = new Ext.Template(
                 '<div class="x-tool x-tool-{id}">&#160;</div>'
            );
            tt.disableFormats = true;
            tt.compile();
            Ext.Panel.prototype.toolTemplate = tt;
        }
        for(var i = 0, a = arguments, len = a.length; i < len; i++) {
            var tc = a[i];
            if(!this.tools[tc.id]){
	            var overCls = 'x-tool-'+tc.id+'-over';
	            var t = this.toolTemplate.insertFirst((tc.align !== 'left') ? this[this.toolTarget] : this[this.toolTarget].child('span'), tc, true);
	            this.tools[tc.id] = t;
	            t.enableDisplayMode('block');
	            t.on('click', this.createToolHandler(t, tc, overCls, this));
	            if(tc.on){
	                t.on(tc.on);
	            }
	            if(tc.hidden){
	                t.hide();
	            }
	            if(tc.qtip){
	                if(typeof tc.qtip == 'object'){
	                    Ext.QuickTips.register(Ext.apply({
	                          target: t.id
	                    }, tc.qtip));
	                } else {
	                    t.dom.qtip = tc.qtip;
	                }
	            }
	            t.addClassOnOver(overCls);
            }
        }
    },

    // private
    onShow : function(){
        if(this.floating){
            return this.el.show();
        }
        Ext.Panel.superclass.onShow.call(this);
    },

    // private
    onHide : function(){
        if(this.floating){
            return this.el.hide();
        }
        Ext.Panel.superclass.onHide.call(this);
    },

    // private
    createToolHandler : function(t, tc, overCls, panel){
        return function(e){
            t.removeClass(overCls);
            e.stopEvent();
            if(tc.handler){
                tc.handler.call(tc.scope || t, e, t, panel);
            }
        };
    },

    // private
    afterRender : function(){
        if(this.fromMarkup && this.height === undefined && !this.autoHeight){
            this.height = this.el.getHeight();
        }
        if(this.floating && !this.hidden && !this.initHidden){
            this.el.show();
        }
        if(this.title){
            this.setTitle(this.title);
        }
        this.setAutoScroll();
        if(this.html){
            this.body.update(typeof this.html == 'object' ?
                             Ext.DomHelper.markup(this.html) :
                             this.html);
            delete this.html;
        }
        if(this.contentEl){
            var ce = Ext.getDom(this.contentEl);
            Ext.fly(ce).removeClass(['x-hidden', 'x-hide-display']);
            this.body.dom.appendChild(ce);
        }
        if(this.collapsed){
            this.collapsed = false;
            this.collapse(false);
        }
        Ext.Panel.superclass.afterRender.call(this); // do sizing calcs last
        this.initEvents();
    },

    // private
    setAutoScroll : function(){
        if(this.rendered && this.autoScroll){
            var el = this.body || this.el;
            if(el){
                el.setOverflow('auto');
            }
        }
    },

    // private
    getKeyMap : function(){
        if(!this.keyMap){
            this.keyMap = new Ext.KeyMap(this.el, this.keys);
        }
        return this.keyMap;
    },

    // private
    initEvents : function(){
        if(this.keys){
            this.getKeyMap();
        }
        if(this.draggable){
            this.initDraggable();
        }
    },

    // private
    initDraggable : function(){
        
        this.dd = new Ext.Panel.DD(this, typeof this.draggable == 'boolean' ? null : this.draggable);
    },

    // private
    beforeEffect : function(){
        if(this.floating){
            this.el.beforeAction();
        }
        this.el.addClass('x-panel-animated');
    },

    // private
    afterEffect : function(){
        this.syncShadow();
        this.el.removeClass('x-panel-animated');
    },

    // private - wraps up an animation param with internal callbacks
    createEffect : function(a, cb, scope){
        var o = {
            scope:scope,
            block:true
        };
        if(a === true){
            o.callback = cb;
            return o;
        }else if(!a.callback){
            o.callback = cb;
        }else { // wrap it up
            o.callback = function(){
                cb.call(scope);
                Ext.callback(a.callback, a.scope);
            };
        }
        return Ext.applyIf(o, a);
    },

    
    collapse : function(animate){
        if(this.collapsed || this.el.hasFxBlock() || this.fireEvent('beforecollapse', this, animate) === false){
            return;
        }
        var doAnim = animate === true || (animate !== false && this.animCollapse);
        this.beforeEffect();
        this.onCollapse(doAnim, animate);
        return this;
    },

    // private
    onCollapse : function(doAnim, animArg){
        if(doAnim){
            this[this.collapseEl].slideOut(this.slideAnchor,
                    Ext.apply(this.createEffect(animArg||true, this.afterCollapse, this),
                        this.collapseDefaults));
        }else{
            this[this.collapseEl].hide();
            this.afterCollapse();
        }
    },

    // private
    afterCollapse : function(){
        this.collapsed = true;
        this.el.addClass(this.collapsedCls);
        this.afterEffect();
        this.fireEvent('collapse', this);
    },

    
    expand : function(animate){
        if(!this.collapsed || this.el.hasFxBlock() || this.fireEvent('beforeexpand', this, animate) === false){
            return;
        }
        var doAnim = animate === true || (animate !== false && this.animCollapse);
        this.el.removeClass(this.collapsedCls);
        this.beforeEffect();
        this.onExpand(doAnim, animate);
        return this;
    },

    // private
    onExpand : function(doAnim, animArg){
        if(doAnim){
            this[this.collapseEl].slideIn(this.slideAnchor,
                    Ext.apply(this.createEffect(animArg||true, this.afterExpand, this),
                        this.expandDefaults));
        }else{
            this[this.collapseEl].show();
            this.afterExpand();
        }
    },

    // private
    afterExpand : function(){
        this.collapsed = false;
        this.afterEffect();
        this.fireEvent('expand', this);
    },

    
    toggleCollapse : function(animate){
        this[this.collapsed ? 'expand' : 'collapse'](animate);
        return this;
    },

    // private
    onDisable : function(){
        if(this.rendered && this.maskDisabled){
            this.el.mask();
        }
        Ext.Panel.superclass.onDisable.call(this);
    },

    // private
    onEnable : function(){
        if(this.rendered && this.maskDisabled){
            this.el.unmask();
        }
        Ext.Panel.superclass.onEnable.call(this);
    },

    // private
    onResize : function(w, h){
        if(w !== undefined || h !== undefined){
            if(!this.collapsed){
                if(typeof w == 'number'){
                    this.body.setWidth(
                            this.adjustBodyWidth(w - this.getFrameWidth()));
                }else if(w == 'auto'){
                    this.body.setWidth(w);
                }

                if(typeof h == 'number'){
                    this.body.setHeight(
                            this.adjustBodyHeight(h - this.getFrameHeight()));
                }else if(h == 'auto'){
                    this.body.setHeight(h);
                }
                
                if(this.disabled && this.el._mask){
                    this.el._mask.setSize(this.el.dom.clientWidth, this.el.getHeight());
                }
            }else{
                this.queuedBodySize = {width: w, height: h};
                if(!this.queuedExpand && this.allowQueuedExpand !== false){
                    this.queuedExpand = true;
                    this.on('expand', function(){
                        delete this.queuedExpand;
                        this.onResize(this.queuedBodySize.width, this.queuedBodySize.height);
                        this.doLayout();
                    }, this, {single:true});
                }
            }
            this.fireEvent('bodyresize', this, w, h);
        }
        this.syncShadow();
    },

    // private
    adjustBodyHeight : function(h){
        return h;
    },

    // private
    adjustBodyWidth : function(w){
        return w;
    },

    // private
    onPosition : function(){
        this.syncShadow();
    },

    
    getFrameWidth : function(){
        var w = this.el.getFrameWidth('lr');

        if(this.frame){
            var l = this.bwrap.dom.firstChild;
            w += (Ext.fly(l).getFrameWidth('l') + Ext.fly(l.firstChild).getFrameWidth('r'));
            var mc = this.bwrap.dom.firstChild.firstChild.firstChild;
            w += Ext.fly(mc).getFrameWidth('lr');
        }
        return w;
    },

    
    getFrameHeight : function(){
        var h  = this.el.getFrameWidth('tb');
        h += (this.tbar ? this.tbar.getHeight() : 0) +
             (this.bbar ? this.bbar.getHeight() : 0);

        if(this.frame){
            var hd = this.el.dom.firstChild;
            var ft = this.bwrap.dom.lastChild;
            h += (hd.offsetHeight + ft.offsetHeight);
            var mc = this.bwrap.dom.firstChild.firstChild.firstChild;
            h += Ext.fly(mc).getFrameWidth('tb');
        }else{
            h += (this.header ? this.header.getHeight() : 0) +
                (this.footer ? this.footer.getHeight() : 0);
        }
        return h;
    },

    
    getInnerWidth : function(){
        return this.getSize().width - this.getFrameWidth();
    },

    
    getInnerHeight : function(){
        return this.getSize().height - this.getFrameHeight();
    },

    // private
    syncShadow : function(){
        if(this.floating){
            this.el.sync(true);
        }
    },

    // private
    getLayoutTarget : function(){
        return this.body;
    },

    
    setTitle : function(title, iconCls){
        this.title = title;
        if(this.header && this.headerAsText){
            this.header.child('span').update(title);
        }
        if(iconCls){
            this.setIconClass(iconCls);
        }
        this.fireEvent('titlechange', this, title);
        return this;
    },

    
    getUpdater : function(){
        return this.body.getUpdater();
    },

     
    load : function(){
        var um = this.body.getUpdater();
        um.update.apply(um, arguments);
        return this;
    },

    // private
    beforeDestroy : function(){
        if(this.header){
            this.header.removeAllListeners();
            if(this.headerAsText){
                Ext.Element.uncache(this.header.child('span'));
            }
        }
        Ext.Element.uncache(
            this.header,
            this.tbar,
            this.bbar,
            this.footer,
            this.body,
            this.bwrap
        );
        if(this.tools){
            for(var k in this.tools){
                Ext.destroy(this.tools[k]);
            }
        }
        if(this.buttons){
            for(var b in this.buttons){
                Ext.destroy(this.buttons[b]);
            }
        }
        Ext.destroy(
            this.topToolbar,
            this.bottomToolbar
        );
        Ext.Panel.superclass.beforeDestroy.call(this);
    },

    // private
    createClasses : function(){
        this.headerCls = this.baseCls + '-header';
        this.headerTextCls = this.baseCls + '-header-text';
        this.bwrapCls = this.baseCls + '-bwrap';
        this.tbarCls = this.baseCls + '-tbar';
        this.bodyCls = this.baseCls + '-body';
        this.bbarCls = this.baseCls + '-bbar';
        this.footerCls = this.baseCls + '-footer';
    },

    // private
    createGhost : function(cls, useShim, appendTo){
        var el = document.createElement('div');
        el.className = 'x-panel-ghost ' + (cls ? cls : '');
        if(this.header){
            el.appendChild(this.el.dom.firstChild.cloneNode(true));
        }
        Ext.fly(el.appendChild(document.createElement('ul'))).setHeight(this.bwrap.getHeight());
        el.style.width = this.el.dom.offsetWidth + 'px';;
        if(!appendTo){
            this.container.dom.appendChild(el);
        }else{
            Ext.getDom(appendTo).appendChild(el);
        }
        if(useShim !== false && this.el.useShim !== false){
            var layer = new Ext.Layer({shadow:false, useDisplay:true, constrain:false}, el);
            layer.show();
            return layer;
        }else{
            return new Ext.Element(el);
        }
    },

    // private
    doAutoLoad : function(){
        this.body.load(
            typeof this.autoLoad == 'object' ?
                this.autoLoad : {url: this.autoLoad});
    },
    
    
    getTool: function(id) {
        return this.tools[id];
    }


});
Ext.reg('panel', Ext.Panel);


Ext.Window = Ext.extend(Ext.Panel, {
    
    
    
    
    
    
    
    
    
    
    
    
    baseCls : 'x-window',
    
    resizable:true,
    
    draggable:true,
    
    closable : true,
    
    constrain:false,
    
    constrainHeader:false,
    
    plain:false,
    
    minimizable : false,
    
    maximizable : false,
    
    minHeight: 100,
    
    minWidth: 200,
    
    expandOnShow: true,
    
    closeAction: 'close',
    
    elements: 'header,body',

    // inherited docs, same default
    collapsible:false,

    // private
    initHidden : true,
    
    monitorResize : true,
    
    frame:true,
    
    floating:true,

    // private
    initComponent : function(){
        Ext.Window.superclass.initComponent.call(this);
        this.addEvents(
            
            
            
            'resize',
            
            'maximize',
            
            'minimize',
            
            'restore'
        );
    },

    // private
    getState : function(){
        return Ext.apply(Ext.Window.superclass.getState.call(this) || {}, this.getBox());
    },

    // private
    onRender : function(ct, position){
        Ext.Window.superclass.onRender.call(this, ct, position);

        if(this.plain){
            this.el.addClass('x-window-plain');
        }

        // this element allows the Window to be focused for keyboard events
        this.focusEl = this.el.createChild({
                    tag: "a", href:"#", cls:"x-dlg-focus",
                    tabIndex:"-1", html: "&#160;"});
        this.focusEl.swallowEvent('click', true);

        this.proxy = this.el.createProxy("x-window-proxy");
        this.proxy.enableDisplayMode('block');

        if(this.modal){
            this.mask = this.container.createChild({cls:"ext-el-mask"}, this.el.dom);
            this.mask.enableDisplayMode("block");
            this.mask.hide();
            this.mask.on('click', this.focus, this);
        }
    },

    // private
    initEvents : function(){
        Ext.Window.superclass.initEvents.call(this);
        if(this.animateTarget){
            this.setAnimateTarget(this.animateTarget);
        }

        if(this.resizable){
            this.resizer = new Ext.Resizable(this.el, {
                minWidth: this.minWidth,
                minHeight:this.minHeight,
                handles: this.resizeHandles || "all",
                pinned: true,
                resizeElement : this.resizerAction
            });
            this.resizer.window = this;
            this.resizer.on("beforeresize", this.beforeResize, this);
        }

        if(this.draggable){
            this.header.addClass("x-window-draggable");
        }
        this.initTools();

        this.el.on("mousedown", this.toFront, this);
        this.manager = this.manager || Ext.WindowMgr;
        this.manager.register(this);
        this.hidden = true;
        if(this.maximized){
            this.maximized = false;
            this.maximize();
        }
        if(this.closable){
            var km = this.getKeyMap();
            km.on(27, this.onEsc, this);
            km.disable();
        }
    },

    initDraggable : function(){
        
        this.dd = new Ext.Window.DD(this);
    },

   // private
    onEsc : function(){
        this[this.closeAction]();
    },

    // private
    beforeDestroy : function(){
        this.hide();
        if(this.doAnchor){
            Ext.EventManager.removeResizeListener(this.doAnchor, this);
            Ext.EventManager.un(window, 'scroll', this.doAnchor, this);
        }
        Ext.destroy(
            this.focusEl,
            this.resizer,
            this.dd,
            this.proxy,
            this.mask
        );
        Ext.Window.superclass.beforeDestroy.call(this);
    },

    // private
    onDestroy : function(){
        if(this.manager){
            this.manager.unregister(this);
        }
        Ext.Window.superclass.onDestroy.call(this);
    },

    // private
    initTools : function(){
        if(this.minimizable){
            this.addTool({
                id: 'minimize',
                handler: this.minimize.createDelegate(this, [])
            });
        }
        if(this.maximizable){
            this.addTool({
                id: 'maximize',
                handler: this.maximize.createDelegate(this, [])
            });
            this.addTool({
                id: 'restore',
                handler: this.restore.createDelegate(this, []),
                hidden:true
            });
            this.header.on('dblclick', this.toggleMaximize, this);
        }
        if(this.closable){
            this.addTool({
                id: 'close',
                handler: this[this.closeAction].createDelegate(this, [])
            });
        }
    },

    // private
    resizerAction : function(){
        var box = this.proxy.getBox();
        this.proxy.hide();
        this.window.handleResize(box);
        return box;
    },

    // private
    beforeResize : function(){
        this.resizer.minHeight = Math.max(this.minHeight, this.getFrameHeight() + 40); // 40 is a magic minimum content size?
        this.resizer.minWidth = Math.max(this.minWidth, this.getFrameWidth() + 40);
        this.resizeBox = this.el.getBox();
    },

    // private
    updateHandles : function(){
        if(Ext.isIE && this.resizer){
            this.resizer.syncHandleHeight();
            this.el.repaint();
        }
    },

    // private
    handleResize : function(box){
        var rz = this.resizeBox;
        if(rz.x != box.x || rz.y != box.y){
            this.updateBox(box);
        }else{
            this.setSize(box);
        }
        this.focus();
        this.updateHandles();
        this.saveState();
        if(this.layout){
            this.doLayout();
        }
        this.fireEvent("resize", this, box.width, box.height);
    },

    
    focus : function(){
        var f = this.focusEl, db = this.defaultButton, t = typeof db;
        if(t != 'undefined'){
            if(t == 'number'){
                f = this.buttons[db];
            }else if(t == 'string'){
                f = Ext.getCmp(db);
            }else{
                f = db;
            }
        }
        f.focus.defer(10, f);
    },

    
    setAnimateTarget : function(el){
        el = Ext.get(el);
        this.animateTarget = el;
    },

    // private
    beforeShow : function(){
        delete this.el.lastXY;
        delete this.el.lastLT;
        if(this.x === undefined || this.y === undefined){
            var xy = this.el.getAlignToXY(this.container, 'c-c');
            var pos = this.el.translatePoints(xy[0], xy[1]);
            this.x = this.x === undefined? pos.left : this.x;
            this.y = this.y === undefined? pos.top : this.y;
        }
        this.el.setLeftTop(this.x, this.y);

        if(this.expandOnShow){
            this.expand(false);
        }

        if(this.modal){
            Ext.getBody().addClass("x-body-masked");
            this.mask.setSize(Ext.lib.Dom.getViewWidth(true), Ext.lib.Dom.getViewHeight(true));
            this.mask.show();
        }
    },

    
    show : function(animateTarget, cb, scope){
        if(!this.rendered){
            this.render(Ext.getBody());
        }
        if(this.hidden === false){
            this.toFront();
            return;
        }
        if(this.fireEvent("beforeshow", this) === false){
            return;
        }
        if(cb){
            this.on('show', cb, scope, {single:true});
        }
        this.hidden = false;
        if(animateTarget !== undefined){
            this.setAnimateTarget(animateTarget);
        }
        this.beforeShow();
        if(this.animateTarget){
            this.animShow();
        }else{
            this.afterShow();
        }
    },

    // private
    afterShow : function(){
        this.proxy.hide();
        this.el.setStyle('display', 'block');
        this.el.show();
        if(this.maximized){
            this.fitContainer();
        }
        if(Ext.isMac && Ext.isGecko){ // work around stupid FF 2.0/Mac scroll bar bug
        	this.cascade(this.setAutoScroll);
        }

        if(this.monitorResize || this.modal || this.constrain || this.constrainHeader){
            Ext.EventManager.onWindowResize(this.onWindowResize, this);
        }
        this.doConstrain();
        if(this.layout){
            this.doLayout();
        }
        if(this.keyMap){
            this.keyMap.enable();
        }
        this.toFront();
        this.updateHandles();
        this.fireEvent("show", this);
    },

    // private
    animShow : function(){
        this.proxy.show();
        this.proxy.setBox(this.animateTarget.getBox());
        this.proxy.setOpacity(0);
        var b = this.getBox(false);
        b.callback = this.afterShow;
        b.scope = this;
        b.duration = .25;
        b.easing = 'easeNone';
        b.opacity = .5;
        b.block = true;
        this.el.setStyle('display', 'none');
        this.proxy.shift(b);
    },

    
    hide : function(animateTarget, cb, scope){
        if(this.activeGhost){ // drag active?
            this.hide.defer(100, this, [animateTarget, cb, scope]);
            return;
        }
        if(this.hidden || this.fireEvent("beforehide", this) === false){
            return;
        }
        if(cb){
            this.on('hide', cb, scope, {single:true});
        }
        this.hidden = true;
        if(animateTarget !== undefined){
            this.setAnimateTarget(animateTarget);
        }
        if(this.animateTarget){
            this.animHide();
        }else{
            this.el.hide();
            this.afterHide();
        }
    },

    // private
    afterHide : function(){
        this.proxy.hide();
        if(this.monitorResize || this.modal || this.constrain || this.constrainHeader){
            Ext.EventManager.removeResizeListener(this.onWindowResize, this);
        }
        if(this.modal){
            this.mask.hide();
            Ext.getBody().removeClass("x-body-masked");
        }
        if(this.keyMap){
            this.keyMap.disable();
        }
        this.fireEvent("hide", this);
    },

    // private
    animHide : function(){
        this.proxy.setOpacity(.5);
        this.proxy.show();
        var tb = this.getBox(false);
        this.proxy.setBox(tb);
        this.el.hide();
        var b = this.animateTarget.getBox();
        b.callback = this.afterHide;
        b.scope = this;
        b.duration = .25;
        b.easing = 'easeNone';
        b.block = true;
        b.opacity = 0;
        this.proxy.shift(b);
    },

    // private
    onWindowResize : function(){
        if(this.maximized){
            this.fitContainer();
        }
        if(this.modal){
            this.mask.setSize('100%', '100%');
            var force = this.mask.dom.offsetHeight;
            this.mask.setSize(Ext.lib.Dom.getViewWidth(true), Ext.lib.Dom.getViewHeight(true));
        }
        this.doConstrain();
    },

    // private
    doConstrain : function(){
        if(this.constrain || this.constrainHeader){
            var offsets;
            if(this.constrain){
                offsets = {
                    right:this.el.shadowOffset,
                    left:this.el.shadowOffset,
                    bottom:this.el.shadowOffset
                };
            }else {
                var s = this.getSize();
                offsets = {
                    right:-(s.width - 100),
                    bottom:-(s.height - 25)
                };
            }

            var xy = this.el.getConstrainToXY(this.container, true, offsets);
            if(xy){
                this.setPosition(xy[0], xy[1]);
            }
        }
    },

    // private - used for dragging
    ghost : function(cls){
        var ghost = this.createGhost(cls);
        var box = this.getBox(true);
        ghost.setLeftTop(box.x, box.y);
        ghost.setWidth(box.width);
        this.el.hide();
        this.activeGhost = ghost;
        return ghost;
    },

    // private
    unghost : function(show, matchPosition){
        if(show !== false){
            this.el.show();
            this.focus();
	        if(Ext.isMac && Ext.isGecko){ // work around stupid FF 2.0/Mac scroll bar bug
	        	this.cascade(this.setAutoScroll);
	        }
        }
        if(matchPosition !== false){
            this.setPosition(this.activeGhost.getLeft(true), this.activeGhost.getTop(true));
        }
        this.activeGhost.hide();
        this.activeGhost.remove();
        delete this.activeGhost;
    },

    
    minimize : function(){
        this.fireEvent('minimize', this);
    },

    
    close : function(){
        if(this.fireEvent("beforeclose", this) !== false){
            this.hide(null, function(){
                this.fireEvent('close', this);
                this.destroy();
            }, this);
        }
    },

    
    maximize : function(){
        if(!this.maximized){
            this.expand(false);
            this.restoreSize = this.getSize();
            this.restorePos = this.getPosition(true);
            if (this.maximizable){
                this.tools.maximize.hide();
                this.tools.restore.show();
            }
            this.maximized = true;
            this.el.disableShadow();

            if(this.dd){
                this.dd.lock();
            }
            if(this.collapsible){
                this.tools.toggle.hide();
            }
            this.el.addClass('x-window-maximized');
            this.container.addClass('x-window-maximized-ct');

            this.setPosition(0, 0);
            this.fitContainer();
            this.fireEvent('maximize', this);
        }
    },

    
    restore : function(){
        if(this.maximized){
            this.el.removeClass('x-window-maximized');
            this.tools.restore.hide();
            this.tools.maximize.show();
            this.setPosition(this.restorePos[0], this.restorePos[1]);
            this.setSize(this.restoreSize.width, this.restoreSize.height);
            delete this.restorePos;
            delete this.restoreSize;
            this.maximized = false;
            this.el.enableShadow(true);

            if(this.dd){
                this.dd.unlock();
            }
            if(this.collapsible){
                this.tools.toggle.show();
            }
            this.container.removeClass('x-window-maximized-ct');

            this.doConstrain();
            this.fireEvent('restore', this);
        }
    },

    
    toggleMaximize : function(){
        this[this.maximized ? 'restore' : 'maximize']();
    },

    // private
    fitContainer : function(){
        var vs = this.container.getViewSize();
        this.setSize(vs.width, vs.height);
    },

    // private
    // z-index is managed by the WindowManager and may be overwritten at any time
    setZIndex : function(index){
        if(this.modal){
            this.mask.setStyle("z-index", index);
        }
        this.el.setZIndex(++index);
        index += 5;

        if(this.resizer){
            this.resizer.proxy.setStyle("z-index", ++index);
        }

        this.lastZIndex = index;
    },

    
    alignTo : function(element, position, offsets){
        var xy = this.el.getAlignToXY(element, position, offsets);
        this.setPagePosition(xy[0], xy[1]);
        return this;
    },

    
    anchorTo : function(el, alignment, offsets, monitorScroll){
      if(this.doAnchor){
          Ext.EventManager.removeResizeListener(this.doAnchor, this);
          Ext.EventManager.un(window, 'scroll', this.doAnchor, this);
      }
      this.doAnchor = function(){
          this.alignTo(el, alignment, offsets);
      };
      Ext.EventManager.onWindowResize(this.doAnchor, this);
      
      var tm = typeof monitorScroll;
      if(tm != 'undefined'){
          Ext.EventManager.on(window, 'scroll', this.doAnchor, this,
              {buffer: tm == 'number' ? monitorScroll : 50});
      }
      this.doAnchor();
      return this;
    },

    
    toFront : function(e){
        if(this.manager.bringToFront(this)){
            if(!e || !e.getTarget().focus){
                this.focus();
            }
        }
        return this;
    },

    
    setActive : function(active){
        if(active){
            if(!this.maximized){
                this.el.enableShadow(true);
            }
            this.fireEvent('activate', this);
        }else{
            this.el.disableShadow();
            this.fireEvent('deactivate', this);
        }
    },

    
    toBack : function(){
        this.manager.sendToBack(this);
        return this;
    },

    
    center : function(){
        var xy = this.el.getAlignToXY(this.container, 'c-c');
        this.setPagePosition(xy[0], xy[1]);
        return this;
    }

    
});
Ext.reg('window', Ext.Window);

// private - custom Window DD implementation
Ext.Window.DD = function(win){
    this.win = win;
    Ext.Window.DD.superclass.constructor.call(this, win.el.id, 'WindowDD-'+win.id);
    this.setHandleElId(win.header.id);
    this.scroll = false;
};

Ext.extend(Ext.Window.DD, Ext.dd.DD, {
    moveOnly:true,
    headerOffsets:[100, 25],
    startDrag : function(){
        var w = this.win;
        this.proxy = w.ghost();
        if(w.constrain !== false){
            var so = w.el.shadowOffset;
            this.constrainTo(w.container, {right: so, left: so, bottom: so});
        }else if(w.constrainHeader !== false){
            var s = this.proxy.getSize();
            this.constrainTo(w.container, {right: -(s.width-this.headerOffsets[0]), bottom: -(s.height-this.headerOffsets[1])});
        }
    },
    b4Drag : Ext.emptyFn,

    onDrag : function(e){
        this.alignElWithMouse(this.proxy, e.getPageX(), e.getPageY());
    },

    endDrag : function(e){
        this.win.unghost();
        this.win.saveState();
    }
});


Ext.WindowGroup = function(){
    var list = {};
    var accessList = [];
    var front = null;

    // private
    var sortWindows = function(d1, d2){
        return (!d1._lastAccess || d1._lastAccess < d2._lastAccess) ? -1 : 1;
    };

    // private
    var orderWindows = function(){
        var a = accessList, len = a.length;
        if(len > 0){
            a.sort(sortWindows);
            var seed = a[0].manager.zseed;
            for(var i = 0; i < len; i++){
                var win = a[i];
                if(win && !win.hidden){
                    win.setZIndex(seed + (i*10));
                }
            }
        }
        activateLast();
    };

    // private
    var setActiveWin = function(win){
        if(win != front){
            if(front){
                front.setActive(false);
            }
            front = win;
            if(win){
                win.setActive(true);
            }
        }
    };

    // private
    var activateLast = function(){
        for(var i = accessList.length-1; i >=0; --i) {
            if(!accessList[i].hidden){
                setActiveWin(accessList[i]);
                return;
            }
        }
        // none to activate
        setActiveWin(null);
    };

    return {
        
        zseed : 9000,

        // private
        register : function(win){
            list[win.id] = win;
            accessList.push(win);
            win.on('hide', activateLast);
        },

        // private
        unregister : function(win){
            delete list[win.id];
            win.un('hide', activateLast);
            accessList.remove(win);
        },

        
        get : function(id){
            return typeof id == "object" ? id : list[id];
        },

        
        bringToFront : function(win){
            win = this.get(win);
            if(win != front){
                win._lastAccess = new Date().getTime();
                orderWindows();
                return true;
            }
            return false;
        },

        
        sendToBack : function(win){
            win = this.get(win);
            win._lastAccess = -(new Date().getTime());
            orderWindows();
            return win;
        },

        
        hideAll : function(){
            for(var id in list){
                if(list[id] && typeof list[id] != "function" && list[id].isVisible()){
                    list[id].hide();
                }
            }
        },

        
        getActive : function(){
            return front;
        },

        
        getBy : function(fn, scope){
            var r = [];
            for(var i = accessList.length-1; i >=0; --i) {
                var win = accessList[i];
                if(fn.call(scope||win, win) !== false){
                    r.push(win);
                }
            }
            return r;
        },

        
        each : function(fn, scope){
            for(var id in list){
                if(list[id] && typeof list[id] != "function"){
                    if(fn.call(scope || list[id], list[id]) === false){
                        return;
                    }
                }
            }
        }
    };
};



Ext.WindowMgr = new Ext.WindowGroup();

Ext.dd.PanelProxy = function(panel, config){
    this.panel = panel;
    this.id = this.panel.id +'-ddproxy';
    Ext.apply(this, config);
};

Ext.dd.PanelProxy.prototype = {
    
    insertProxy : true,

    // private overrides
    setStatus : Ext.emptyFn,
    reset : Ext.emptyFn,
    update : Ext.emptyFn,
    stop : Ext.emptyFn,
    sync: Ext.emptyFn,

    
    getEl : function(){
        return this.ghost;
    },

    
    getGhost : function(){
        return this.ghost;
    },

    
    getProxy : function(){
        return this.proxy;
    },

    
    hide : function(){
        if(this.ghost){
            if(this.proxy){
                this.proxy.remove();
                delete this.proxy;
            }
            this.panel.el.dom.style.display = '';
            this.ghost.remove();
            delete this.ghost;
        }
    },

    
    show : function(){
        if(!this.ghost){
            this.ghost = this.panel.createGhost(undefined, undefined, Ext.getBody());
            this.ghost.setXY(this.panel.el.getXY())
            if(this.insertProxy){
                this.proxy = this.panel.el.insertSibling({cls:'x-panel-dd-spacer'});
                this.proxy.setSize(this.panel.getSize());
            }
            this.panel.el.dom.style.display = 'none';
        }
    },

    // private
    repair : function(xy, callback, scope){
        this.hide();
        if(typeof callback == "function"){
            callback.call(scope || this);
        }
    },

    
    moveProxy : function(parentNode, before){
        if(this.proxy){
            parentNode.insertBefore(this.proxy.dom, before);
        }
    }
};

// private - DD implementation for Panels
Ext.Panel.DD = function(panel, cfg){
    this.panel = panel;
    this.dragData = {panel: panel};
    this.proxy = new Ext.dd.PanelProxy(panel, cfg);
    Ext.Panel.DD.superclass.constructor.call(this, panel.el, cfg);
    var h = panel.header;
    if(h){
        this.setHandleElId(h.id);
    }
    (h ? h : this.panel.body).setStyle('cursor', 'move');
    this.scroll = false;
};

Ext.extend(Ext.Panel.DD, Ext.dd.DragSource, {
    showFrame: Ext.emptyFn,
    startDrag: Ext.emptyFn,
    b4StartDrag: function(x, y) {
        this.proxy.show();
    },
    b4MouseDown: function(e) {
        var x = e.getPageX();
        var y = e.getPageY();
        this.autoOffset(x, y);
    },
    onInitDrag : function(x, y){
        this.onStartDrag(x, y);
        return true;
    },
    createFrame : Ext.emptyFn,
    getDragEl : function(e){
        return this.proxy.ghost.dom;
    },
    endDrag : function(e){
        this.proxy.hide();
        this.panel.saveState();
    },

    autoOffset : function(x, y) {
        x -= this.startPageX;
        y -= this.startPageY;
        this.setDelta(x, y);
    }
});

Ext.state.Provider = function(){
    
    this.addEvents("statechange");
    this.state = {};
    Ext.state.Provider.superclass.constructor.call(this);
};
Ext.extend(Ext.state.Provider, Ext.util.Observable, {
    
    get : function(name, defaultValue){
        return typeof this.state[name] == "undefined" ?
            defaultValue : this.state[name];
    },
    
    
    clear : function(name){
        delete this.state[name];
        this.fireEvent("statechange", this, name, null);
    },
    
    
    set : function(name, value){
        this.state[name] = value;
        this.fireEvent("statechange", this, name, value);
    },
    
    
    decodeValue : function(cookie){
        var re = /^(a|n|d|b|s|o)\:(.*)$/;
        var matches = re.exec(unescape(cookie));
        if(!matches || !matches[1]) return; // non state cookie
        var type = matches[1];
        var v = matches[2];
        switch(type){
            case "n":
                return parseFloat(v);
            case "d":
                return new Date(Date.parse(v));
            case "b":
                return (v == "1");
            case "a":
                var all = [];
                var values = v.split("^");
                for(var i = 0, len = values.length; i < len; i++){
                    all.push(this.decodeValue(values[i]));
                }
                return all;
           case "o":
                var all = {};
                var values = v.split("^");
                for(var i = 0, len = values.length; i < len; i++){
                    var kv = values[i].split("=");
                    all[kv[0]] = this.decodeValue(kv[1]);
                }
                return all;
           default:
                return v;
        }
    },
    
    
    encodeValue : function(v){
        var enc;
        if(typeof v == "number"){
            enc = "n:" + v;
        }else if(typeof v == "boolean"){
            enc = "b:" + (v ? "1" : "0");
        }else if(Ext.isDate(v)){
            enc = "d:" + v.toGMTString();
        }else if(Ext.isArray(v)){
            var flat = "";
            for(var i = 0, len = v.length; i < len; i++){
                flat += this.encodeValue(v[i]);
                if(i != len-1) flat += "^";
            }
            enc = "a:" + flat;
        }else if(typeof v == "object"){
            var flat = "";
            for(var key in v){
                if(typeof v[key] != "function" && v[key] !== undefined){
                    flat += key + "=" + this.encodeValue(v[key]) + "^";
                }
            }
            enc = "o:" + flat.substring(0, flat.length-1);
        }else{
            enc = "s:" + v;
        }
        return escape(enc);        
    }
});


Ext.state.Manager = function(){
    var provider = new Ext.state.Provider();

    return {
        
        setProvider : function(stateProvider){
            provider = stateProvider;
        },

        
        get : function(key, defaultValue){
            return provider.get(key, defaultValue);
        },

        
         set : function(key, value){
            provider.set(key, value);
        },

        
        clear : function(key){
            provider.clear(key);
        },

        
        getProvider : function(){
            return provider;
        }
    };
}();


Ext.state.CookieProvider = function(config){
    Ext.state.CookieProvider.superclass.constructor.call(this);
    this.path = "/";
    this.expires = new Date(new Date().getTime()+(1000*60*60*24*7)); //7 days
    this.domain = null;
    this.secure = false;
    Ext.apply(this, config);
    this.state = this.readCookies();
};

Ext.extend(Ext.state.CookieProvider, Ext.state.Provider, {
    // private
    set : function(name, value){
        if(typeof value == "undefined" || value === null){
            this.clear(name);
            return;
        }
        this.setCookie(name, value);
        Ext.state.CookieProvider.superclass.set.call(this, name, value);
    },

    // private
    clear : function(name){
        this.clearCookie(name);
        Ext.state.CookieProvider.superclass.clear.call(this, name);
    },

    // private
    readCookies : function(){
        var cookies = {};
        var c = document.cookie + ";";
        var re = /\s?(.*?)=(.*?);/g;
    	var matches;
    	while((matches = re.exec(c)) != null){
            var name = matches[1];
            var value = matches[2];
            if(name && name.substring(0,3) == "ys-"){
                cookies[name.substr(3)] = this.decodeValue(value);
            }
        }
        return cookies;
    },

    // private
    setCookie : function(name, value){
        document.cookie = "ys-"+ name + "=" + this.encodeValue(value) +
           ((this.expires == null) ? "" : ("; expires=" + this.expires.toGMTString())) +
           ((this.path == null) ? "" : ("; path=" + this.path)) +
           ((this.domain == null) ? "" : ("; domain=" + this.domain)) +
           ((this.secure == true) ? "; secure" : "");
    },

    // private
    clearCookie : function(name){
        document.cookie = "ys-" + name + "=null; expires=Thu, 01-Jan-70 00:00:01 GMT" +
           ((this.path == null) ? "" : ("; path=" + this.path)) +
           ((this.domain == null) ? "" : ("; domain=" + this.domain)) +
           ((this.secure == true) ? "; secure" : "");
    }
});

Ext.DataView = Ext.extend(Ext.BoxComponent, {
    
    
    
    
    
    
    
    
    
    selectedClass : "x-view-selected",
    
    emptyText : "",

    
    deferEmptyText: true,
    
    trackOver: false,

    //private
    last: false,


    // private
    initComponent : function(){
        Ext.DataView.superclass.initComponent.call(this);
        if(typeof this.tpl == "string"){
            this.tpl = new Ext.XTemplate(this.tpl);
        }

        this.addEvents(
            
            "beforeclick",
            
            "click",
            
            "mouseenter",
            
            "mouseleave",
            
            "containerclick",
            
            "dblclick",
            
            "contextmenu",
            
            "selectionchange",

            
            "beforeselect"
        );

        this.all = new Ext.CompositeElementLite();
        this.selected = new Ext.CompositeElementLite();
    },

    // private
    onRender : function(){
        if(!this.el){
            this.el = document.createElement('div');
            this.el.id = this.id;
        }
        Ext.DataView.superclass.onRender.apply(this, arguments);
    },

    // private
    afterRender : function(){
        Ext.DataView.superclass.afterRender.call(this);

        this.el.on({
            "click": this.onClick,
            "dblclick": this.onDblClick,
            "contextmenu": this.onContextMenu,
            scope:this
        });

        if(this.overClass || this.trackOver){
            this.el.on({
                "mouseover": this.onMouseOver,
                "mouseout": this.onMouseOut,
                scope:this
            });
        }

        if(this.store){
            this.setStore(this.store, true);
        }
    },

    
    refresh : function(){
        this.clearSelections(false, true);
        this.el.update("");
        var records = this.store.getRange();
        if(records.length < 1){
            if(!this.deferEmptyText || this.hasSkippedEmptyText){
                this.el.update(this.emptyText);
            }
            this.hasSkippedEmptyText = true;
            this.all.clear();
            return;
        }
        this.tpl.overwrite(this.el, this.collectData(records, 0));
        this.all.fill(Ext.query(this.itemSelector, this.el.dom));
        this.updateIndexes(0);
    },

    
    prepareData : function(data){
        return data;
    },

    
    collectData : function(records, startIndex){
        var r = [];
        for(var i = 0, len = records.length; i < len; i++){
            r[r.length] = this.prepareData(records[i].data, startIndex+i, records[i]);
        }
        return r;
    },

    // private
    bufferRender : function(records){
        var div = document.createElement('div');
        this.tpl.overwrite(div, this.collectData(records));
        return Ext.query(this.itemSelector, div);
    },

    // private
    onUpdate : function(ds, record){
        var index = this.store.indexOf(record);
        var sel = this.isSelected(index);
        var original = this.all.elements[index];
        var node = this.bufferRender([record], index)[0];

        this.all.replaceElement(index, node, true);
        if(sel){
            this.selected.replaceElement(original, node);
            this.all.item(index).addClass(this.selectedClass);
        }
        this.updateIndexes(index, index);
    },

    // private
    onAdd : function(ds, records, index){
        if(this.all.getCount() == 0){
            this.refresh();
            return;
        }
        var nodes = this.bufferRender(records, index), n, a = this.all.elements;
        if(index < this.all.getCount()){
            n = this.all.item(index).insertSibling(nodes, 'before', true);
            a.splice.apply(a, [index, 0].concat(nodes));
        }else{
            n = this.all.last().insertSibling(nodes, 'after', true);
            a.push.apply(a, nodes);
        }
        this.updateIndexes(index);
    },

    // private
    onRemove : function(ds, record, index){
        this.deselect(index);
        this.all.removeElement(index, true);
        this.updateIndexes(index);
    },

    
    refreshNode : function(index){
        this.onUpdate(this.store, this.store.getAt(index));
    },

    // private
    updateIndexes : function(startIndex, endIndex){
        var ns = this.all.elements;
        startIndex = startIndex || 0;
        endIndex = endIndex || ((endIndex === 0) ? 0 : (ns.length - 1));
        for(var i = startIndex; i <= endIndex; i++){
            ns[i].viewIndex = i;
        }
    },
    
    
    getStore : function(){
        return this.store;
    },

    
    setStore : function(store, initial){
        if(!initial && this.store){
            this.store.un("beforeload", this.onBeforeLoad, this);
            this.store.un("datachanged", this.refresh, this);
            this.store.un("add", this.onAdd, this);
            this.store.un("remove", this.onRemove, this);
            this.store.un("update", this.onUpdate, this);
            this.store.un("clear", this.refresh, this);
        }
        if(store){
            store = Ext.StoreMgr.lookup(store);
            store.on("beforeload", this.onBeforeLoad, this);
            store.on("datachanged", this.refresh, this);
            store.on("add", this.onAdd, this);
            store.on("remove", this.onRemove, this);
            store.on("update", this.onUpdate, this);
            store.on("clear", this.refresh, this);
        }
        this.store = store;
        if(store){
            this.refresh();
        }
    },

    
    findItemFromChild : function(node){
        return Ext.fly(node).findParent(this.itemSelector, this.el);
    },

    // private
    onClick : function(e){
        var item = e.getTarget(this.itemSelector, this.el);
        if(item){
            var index = this.indexOf(item);
            if(this.onItemClick(item, index, e) !== false){
                this.fireEvent("click", this, index, item, e);
            }
        }else{
            if(this.fireEvent("containerclick", this, e) !== false){
                this.clearSelections();
            }
        }
    },

    // private
    onContextMenu : function(e){
        var item = e.getTarget(this.itemSelector, this.el);
        if(item){
            this.fireEvent("contextmenu", this, this.indexOf(item), item, e);
        }
    },

    // private
    onDblClick : function(e){
        var item = e.getTarget(this.itemSelector, this.el);
        if(item){
            this.fireEvent("dblclick", this, this.indexOf(item), item, e);
        }
    },

    // private
    onMouseOver : function(e){
        var item = e.getTarget(this.itemSelector, this.el);
        if(item && item !== this.lastItem){
            this.lastItem = item;
            Ext.fly(item).addClass(this.overClass);
            this.fireEvent("mouseenter", this, this.indexOf(item), item, e);
        }
    },

    // private
    onMouseOut : function(e){
        if(this.lastItem){
            if(!e.within(this.lastItem, true, true)){
                Ext.fly(this.lastItem).removeClass(this.overClass);
                this.fireEvent("mouseleave", this, this.indexOf(this.lastItem), this.lastItem, e);
                delete this.lastItem;
            }
        }
    },

    // private
    onItemClick : function(item, index, e){
        if(this.fireEvent("beforeclick", this, index, item, e) === false){
            return false;
        }
        if(this.multiSelect){
            this.doMultiSelection(item, index, e);
            e.preventDefault();
        }else if(this.singleSelect){
            this.doSingleSelection(item, index, e);
            e.preventDefault();
        }
        return true;
    },

    // private
    doSingleSelection : function(item, index, e){
        if(e.ctrlKey && this.isSelected(index)){
            this.deselect(index);
        }else{
            this.select(index, false);
        }
    },

    // private
    doMultiSelection : function(item, index, e){
        if(e.shiftKey && this.last !== false){
            var last = this.last;
            this.selectRange(last, index, e.ctrlKey);
            this.last = last; // reset the last
        }else{
            if((e.ctrlKey||this.simpleSelect) && this.isSelected(index)){
                this.deselect(index);
            }else{
                this.select(index, e.ctrlKey || e.shiftKey || this.simpleSelect);
            }
        }
    },

    
    getSelectionCount : function(){
        return this.selected.getCount()
    },

    
    getSelectedNodes : function(){
        return this.selected.elements;
    },

    
    getSelectedIndexes : function(){
        var indexes = [], s = this.selected.elements;
        for(var i = 0, len = s.length; i < len; i++){
            indexes.push(s[i].viewIndex);
        }
        return indexes;
    },

    
    getSelectedRecords : function(){
        var r = [], s = this.selected.elements;
        for(var i = 0, len = s.length; i < len; i++){
            r[r.length] = this.store.getAt(s[i].viewIndex);
        }
        return r;
    },

    
    getRecords : function(nodes){
        var r = [], s = nodes;
        for(var i = 0, len = s.length; i < len; i++){
            r[r.length] = this.store.getAt(s[i].viewIndex);
        }
        return r;
    },

    
    getRecord : function(node){
        return this.store.getAt(node.viewIndex);
    },

    
    clearSelections : function(suppressEvent, skipUpdate){
        if((this.multiSelect || this.singleSelect) && this.selected.getCount() > 0){
            if(!skipUpdate){
                this.selected.removeClass(this.selectedClass);
            }
            this.selected.clear();
            this.last = false;
            if(!suppressEvent){
                this.fireEvent("selectionchange", this, this.selected.elements);
            }
        }
    },

    
    isSelected : function(node){
        return this.selected.contains(this.getNode(node));
    },

    
    deselect : function(node){
        if(this.isSelected(node)){
            node = this.getNode(node);
            this.selected.removeElement(node);
            if(this.last == node.viewIndex){
                this.last = false;
            }
            Ext.fly(node).removeClass(this.selectedClass);
            this.fireEvent("selectionchange", this, this.selected.elements);
        }
    },

    
    select : function(nodeInfo, keepExisting, suppressEvent){
        if(Ext.isArray(nodeInfo)){
            if(!keepExisting){
                this.clearSelections(true);
            }
            for(var i = 0, len = nodeInfo.length; i < len; i++){
                this.select(nodeInfo[i], true, true);
            }
	        if(!suppressEvent){
	            this.fireEvent("selectionchange", this, this.selected.elements);
	        }
        } else{
            var node = this.getNode(nodeInfo);
            if(!keepExisting){
                this.clearSelections(true);
            }
            if(node && !this.isSelected(node)){
                if(this.fireEvent("beforeselect", this, node, this.selected.elements) !== false){
                    Ext.fly(node).addClass(this.selectedClass);
                    this.selected.add(node);
                    this.last = node.viewIndex;
                    if(!suppressEvent){
                        this.fireEvent("selectionchange", this, this.selected.elements);
                    }
                }
            }
        }
    },

    
    selectRange : function(start, end, keepExisting){
        if(!keepExisting){
            this.clearSelections(true);
        }
        this.select(this.getNodes(start, end), true);
    },

    
    getNode : function(nodeInfo){
        if(typeof nodeInfo == "string"){
            return document.getElementById(nodeInfo);
        }else if(typeof nodeInfo == "number"){
            return this.all.elements[nodeInfo];
        }
        return nodeInfo;
    },

    
    getNodes : function(start, end){
        var ns = this.all.elements;
        start = start || 0;
        end = typeof end == "undefined" ? Math.max(ns.length - 1, 0) : end;
        var nodes = [], i;
        if(start <= end){
            for(i = start; i <= end && ns[i]; i++){
                nodes.push(ns[i]);
            }
        } else{
            for(i = start; i >= end && ns[i]; i--){
                nodes.push(ns[i]);
            }
        }
        return nodes;
    },

    
    indexOf : function(node){
        node = this.getNode(node);
        if(typeof node.viewIndex == "number"){
            return node.viewIndex;
        }
        return this.all.indexOf(node);
    },

    // private
    onBeforeLoad : function(){
        if(this.loadingText){
            this.clearSelections(false, true);
            this.el.update('<div class="loading-indicator">'+this.loadingText+'</div>');
            this.all.clear();
        }
    },

    onDestroy : function(){
        Ext.DataView.superclass.onDestroy.call(this);
        this.setStore(null);
    }
});

Ext.reg('dataview', Ext.DataView);

Ext.ColorPalette = function(config){
    Ext.ColorPalette.superclass.constructor.call(this, config);
    this.addEvents(
        
        'select'
    );

    if(this.handler){
        this.on("select", this.handler, this.scope, true);
    }
};
Ext.extend(Ext.ColorPalette, Ext.Component, {
	
    
    itemCls : "x-color-palette",
    
    value : null,
    clickEvent:'click',
    // private
    ctype: "Ext.ColorPalette",

    
    allowReselect : false,

    
    colors : [
        "000000", "993300", "333300", "003300", "003366", "000080", "333399", "333333",
        "800000", "FF6600", "808000", "008000", "008080", "0000FF", "666699", "808080",
        "FF0000", "FF9900", "99CC00", "339966", "33CCCC", "3366FF", "800080", "969696",
        "FF00FF", "FFCC00", "FFFF00", "00FF00", "00FFFF", "00CCFF", "993366", "C0C0C0",
        "FF99CC", "FFCC99", "FFFF99", "CCFFCC", "CCFFFF", "99CCFF", "CC99FF", "FFFFFF"
    ],

    // private
    onRender : function(container, position){
        var t = this.tpl || new Ext.XTemplate(
            '<tpl for="."><a href="#" class="color-{.}" hidefocus="on"><em><span style="background:#{.}" unselectable="on">&#160;</span></em></a></tpl>'
        );
        var el = document.createElement("div");
        el.id = this.getId();
        el.className = this.itemCls;
        t.overwrite(el, this.colors);
        container.dom.insertBefore(el, position);
        this.el = Ext.get(el);
        this.el.on(this.clickEvent, this.handleClick,  this, {delegate: "a"});
        if(this.clickEvent != 'click'){
            this.el.on('click', Ext.emptyFn,  this, {delegate: "a", preventDefault:true});
        }
    },

    // private
    afterRender : function(){
        Ext.ColorPalette.superclass.afterRender.call(this);
        if(this.value){
            var s = this.value;
            this.value = null;
            this.select(s);
        }
    },

    // private
    handleClick : function(e, t){
        e.preventDefault();
        if(!this.disabled){
            var c = t.className.match(/(?:^|\s)color-(.{6})(?:\s|$)/)[1];
            this.select(c.toUpperCase());
        }
    },

    
    select : function(color){
        color = color.replace("#", "");
        if(color != this.value || this.allowReselect){
            var el = this.el;
            if(this.value){
                el.child("a.color-"+this.value).removeClass("x-color-palette-sel");
            }
            el.child("a.color-"+color).addClass("x-color-palette-sel");
            this.value = color;
            this.fireEvent("select", this, color);
        }
    }

    
});
Ext.reg('colorpalette', Ext.ColorPalette);

Ext.DatePicker = Ext.extend(Ext.Component, {
    
    todayText : "Today",
    
    okText : "&#160;OK&#160;", // &#160; to give the user extra clicking room
    
    cancelText : "Cancel",
    
    todayTip : "{0} (Spacebar)",
    
    minText : "This date is before the minimum date",
    
    maxText : "This date is after the maximum date",
    
    format : "m/d/y",
    
    disabledDaysText : "Disabled",
    
    disabledDatesText : "Disabled",
    
    constrainToViewport : true,
    
    monthNames : Date.monthNames,
    
    dayNames : Date.dayNames,
    
    nextText: 'Next Month (Control+Right)',
    
    prevText: 'Previous Month (Control+Left)',
    
    monthYearText: 'Choose a month (Control+Up/Down to move years)',
    
    startDay : 0,
    
    showToday : true,
    
    
    
    
    

    // private
    initComponent : function(){
        Ext.DatePicker.superclass.initComponent.call(this);

        this.value = this.value ?
                 this.value.clearTime() : new Date().clearTime();

        this.addEvents(
            
            'select'
        );

        if(this.handler){
            this.on("select", this.handler,  this.scope || this);
        }

        this.initDisabledDays();
    },

    // private
    initDisabledDays : function(){
        if(!this.disabledDatesRE && this.disabledDates){
            var dd = this.disabledDates;
            var re = "(?:";
            for(var i = 0; i < dd.length; i++){
                re += dd[i];
                if(i != dd.length-1) re += "|";
            }
            this.disabledDatesRE = new RegExp(re + ")");
        }
    },
    
    
    setDisabledDates : function(dd){
        if(Ext.isArray(dd)){
            this.disabledDates = dd;
            this.disabledDatesRE = null;
        }else{
            this.disabledDatesRE = dd;
        }
        this.initDisabledDays();
        this.update(this.value, true);
    },
    
    
    setDisabledDays : function(dd){
        this.disabledDays = dd;
        this.update(this.value, true);
    },
    
    
    setMinDate : function(dt){
        this.minDate = dt;
        this.update(this.value, true);
    },
    
    
    setMaxDate : function(dt){
        this.maxDate = dt;
        this.update(this.value, true);
    },

    
    setValue : function(value){
        var old = this.value;
        this.value = value.clearTime(true);
        if(this.el){
            this.update(this.value);
        }
    },

    
    getValue : function(){
        return this.value;
    },

    // private
    focus : function(){
        if(this.el){
            this.update(this.activeDate);
        }
    },

    // private
    onRender : function(container, position){
        var m = [
             '<table cellspacing="0">',
                '<tr><td class="x-date-left"><a href="#" title="', this.prevText ,'">&#160;</a></td><td class="x-date-middle" align="center"></td><td class="x-date-right"><a href="#" title="', this.nextText ,'">&#160;</a></td></tr>',
                '<tr><td colspan="3"><table class="x-date-inner" cellspacing="0"><thead><tr>'];
        var dn = this.dayNames;
        for(var i = 0; i < 7; i++){
            var d = this.startDay+i;
            if(d > 6){
                d = d-7;
            }
            m.push("<th><span>", dn[d].substr(0,1), "</span></th>");
        }
        m[m.length] = "</tr></thead><tbody><tr>";
        for(var i = 0; i < 42; i++) {
            if(i % 7 == 0 && i != 0){
                m[m.length] = "</tr><tr>";
            }
            m[m.length] = '<td><a href="#" hidefocus="on" class="x-date-date" tabIndex="1"><em><span></span></em></a></td>';
        }
        m.push('</tr></tbody></table></td></tr>', 
                this.showToday ? '<tr><td colspan="3" class="x-date-bottom" align="center"></td></tr>' : '', 
                '</table><div class="x-date-mp"></div>');

        var el = document.createElement("div");
        el.className = "x-date-picker";
        el.innerHTML = m.join("");

        container.dom.insertBefore(el, position);

        this.el = Ext.get(el);
        this.eventEl = Ext.get(el.firstChild);

        this.leftClickRpt = new Ext.util.ClickRepeater(this.el.child("td.x-date-left a"), {
            handler: this.showPrevMonth,
            scope: this,
            preventDefault:true,
            stopDefault:true
        });

        this.rightClickRpt = new Ext.util.ClickRepeater(this.el.child("td.x-date-right a"), {
            handler: this.showNextMonth,
            scope: this,
            preventDefault:true,
            stopDefault:true
        });

        this.eventEl.on("mousewheel", this.handleMouseWheel,  this);

        this.monthPicker = this.el.down('div.x-date-mp');
        this.monthPicker.enableDisplayMode('block');
        
        var kn = new Ext.KeyNav(this.eventEl, {
            "left" : function(e){
                e.ctrlKey ?
                    this.showPrevMonth() :
                    this.update(this.activeDate.add("d", -1));
            },

            "right" : function(e){
                e.ctrlKey ?
                    this.showNextMonth() :
                    this.update(this.activeDate.add("d", 1));
            },

            "up" : function(e){
                e.ctrlKey ?
                    this.showNextYear() :
                    this.update(this.activeDate.add("d", -7));
            },

            "down" : function(e){
                e.ctrlKey ?
                    this.showPrevYear() :
                    this.update(this.activeDate.add("d", 7));
            },

            "pageUp" : function(e){
                this.showNextMonth();
            },

            "pageDown" : function(e){
                this.showPrevMonth();
            },

            "enter" : function(e){
                e.stopPropagation();
                return true;
            },

            scope : this
        });

        this.eventEl.on("click", this.handleDateClick,  this, {delegate: "a.x-date-date"});

        this.el.unselectable();
        
        this.cells = this.el.select("table.x-date-inner tbody td");
        this.textNodes = this.el.query("table.x-date-inner tbody span");

        this.mbtn = new Ext.Button({
            text: "&#160;",
            tooltip: this.monthYearText,
            renderTo: this.el.child("td.x-date-middle", true)
        });

        this.mbtn.on('click', this.showMonthPicker, this);
        this.mbtn.el.child(this.mbtn.menuClassTarget).addClass("x-btn-with-menu");

        if(this.showToday){
            this.todayKeyListener = this.eventEl.addKeyListener(Ext.EventObject.SPACE, this.selectToday,  this);
            var today = (new Date()).dateFormat(this.format);
            this.todayBtn = new Ext.Button({
                renderTo: this.el.child("td.x-date-bottom", true),
                text: String.format(this.todayText, today),
                tooltip: String.format(this.todayTip, today),
                handler: this.selectToday,
                scope: this
            });
        }
        
        if(Ext.isIE){
            this.el.repaint();
        }
        this.update(this.value);
    },

    // private
    createMonthPicker : function(){
        if(!this.monthPicker.dom.firstChild){
            var buf = ['<table border="0" cellspacing="0">'];
            for(var i = 0; i < 6; i++){
                buf.push(
                    '<tr><td class="x-date-mp-month"><a href="#">', this.monthNames[i].substr(0, 3), '</a></td>',
                    '<td class="x-date-mp-month x-date-mp-sep"><a href="#">', this.monthNames[i+6].substr(0, 3), '</a></td>',
                    i == 0 ?
                    '<td class="x-date-mp-ybtn" align="center"><a class="x-date-mp-prev"></a></td><td class="x-date-mp-ybtn" align="center"><a class="x-date-mp-next"></a></td></tr>' :
                    '<td class="x-date-mp-year"><a href="#"></a></td><td class="x-date-mp-year"><a href="#"></a></td></tr>'
                );
            }
            buf.push(
                '<tr class="x-date-mp-btns"><td colspan="4"><button type="button" class="x-date-mp-ok">',
                    this.okText,
                    '</button><button type="button" class="x-date-mp-cancel">',
                    this.cancelText,
                    '</button></td></tr>',
                '</table>'
            );
            this.monthPicker.update(buf.join(''));
            this.monthPicker.on('click', this.onMonthClick, this);
            this.monthPicker.on('dblclick', this.onMonthDblClick, this);

            this.mpMonths = this.monthPicker.select('td.x-date-mp-month');
            this.mpYears = this.monthPicker.select('td.x-date-mp-year');

            this.mpMonths.each(function(m, a, i){
                i += 1;
                if((i%2) == 0){
                    m.dom.xmonth = 5 + Math.round(i * .5);
                }else{
                    m.dom.xmonth = Math.round((i-1) * .5);
                }
            });
        }
    },

    // private
    showMonthPicker : function(){
        this.createMonthPicker();
        var size = this.el.getSize();
        this.monthPicker.setSize(size);
        this.monthPicker.child('table').setSize(size);

        this.mpSelMonth = (this.activeDate || this.value).getMonth();
        this.updateMPMonth(this.mpSelMonth);
        this.mpSelYear = (this.activeDate || this.value).getFullYear();
        this.updateMPYear(this.mpSelYear);

        this.monthPicker.slideIn('t', {duration:.2});
    },

    // private
    updateMPYear : function(y){
        this.mpyear = y;
        var ys = this.mpYears.elements;
        for(var i = 1; i <= 10; i++){
            var td = ys[i-1], y2;
            if((i%2) == 0){
                y2 = y + Math.round(i * .5);
                td.firstChild.innerHTML = y2;
                td.xyear = y2;
            }else{
                y2 = y - (5-Math.round(i * .5));
                td.firstChild.innerHTML = y2;
                td.xyear = y2;
            }
            this.mpYears.item(i-1)[y2 == this.mpSelYear ? 'addClass' : 'removeClass']('x-date-mp-sel');
        }
    },

    // private
    updateMPMonth : function(sm){
        this.mpMonths.each(function(m, a, i){
            m[m.dom.xmonth == sm ? 'addClass' : 'removeClass']('x-date-mp-sel');
        });
    },

    // private
    selectMPMonth: function(m){
        
    },

    // private
    onMonthClick : function(e, t){
        e.stopEvent();
        var el = new Ext.Element(t), pn;
        if(el.is('button.x-date-mp-cancel')){
            this.hideMonthPicker();
        }
        else if(el.is('button.x-date-mp-ok')){
            var d = new Date(this.mpSelYear, this.mpSelMonth, (this.activeDate || this.value).getDate());
            if(d.getMonth() != this.mpSelMonth){
                // "fix" the JS rolling date conversion if needed
                d = new Date(this.mpSelYear, this.mpSelMonth, 1).getLastDateOfMonth();
            }
            this.update(d);
            this.hideMonthPicker();
        }
        else if(pn = el.up('td.x-date-mp-month', 2)){
            this.mpMonths.removeClass('x-date-mp-sel');
            pn.addClass('x-date-mp-sel');
            this.mpSelMonth = pn.dom.xmonth;
        }
        else if(pn = el.up('td.x-date-mp-year', 2)){
            this.mpYears.removeClass('x-date-mp-sel');
            pn.addClass('x-date-mp-sel');
            this.mpSelYear = pn.dom.xyear;
        }
        else if(el.is('a.x-date-mp-prev')){
            this.updateMPYear(this.mpyear-10);
        }
        else if(el.is('a.x-date-mp-next')){
            this.updateMPYear(this.mpyear+10);
        }
    },

    // private
    onMonthDblClick : function(e, t){
        e.stopEvent();
        var el = new Ext.Element(t), pn;
        if(pn = el.up('td.x-date-mp-month', 2)){
            this.update(new Date(this.mpSelYear, pn.dom.xmonth, (this.activeDate || this.value).getDate()));
            this.hideMonthPicker();
        }
        else if(pn = el.up('td.x-date-mp-year', 2)){
            this.update(new Date(pn.dom.xyear, this.mpSelMonth, (this.activeDate || this.value).getDate()));
            this.hideMonthPicker();
        }
    },

    // private
    hideMonthPicker : function(disableAnim){
        if(this.monthPicker){
            if(disableAnim === true){
                this.monthPicker.hide();
            }else{
                this.monthPicker.slideOut('t', {duration:.2});
            }
        }
    },

    // private
    showPrevMonth : function(e){
        this.update(this.activeDate.add("mo", -1));
    },

    // private
    showNextMonth : function(e){
        this.update(this.activeDate.add("mo", 1));
    },

    // private
    showPrevYear : function(){
        this.update(this.activeDate.add("y", -1));
    },

    // private
    showNextYear : function(){
        this.update(this.activeDate.add("y", 1));
    },

    // private
    handleMouseWheel : function(e){
        var delta = e.getWheelDelta();
        if(delta > 0){
            this.showPrevMonth();
            e.stopEvent();
        } else if(delta < 0){
            this.showNextMonth();
            e.stopEvent();
        }
    },

    // private
    handleDateClick : function(e, t){
        e.stopEvent();
        if(t.dateValue && !Ext.fly(t.parentNode).hasClass("x-date-disabled")){
            this.setValue(new Date(t.dateValue));
            this.fireEvent("select", this, this.value);
        }
    },

    // private
    selectToday : function(){
        if(this.todayBtn && !this.todayBtn.disabled){
	        this.setValue(new Date().clearTime());
	        this.fireEvent("select", this, this.value);
        }
    },

    // private
    update : function(date, forceRefresh){
        var vd = this.activeDate;
        this.activeDate = date;
        if(!forceRefresh && vd && this.el){
            var t = date.getTime();
            if(vd.getMonth() == date.getMonth() && vd.getFullYear() == date.getFullYear()){
                this.cells.removeClass("x-date-selected");
                this.cells.each(function(c){
                   if(c.dom.firstChild.dateValue == t){
                       c.addClass("x-date-selected");
                       setTimeout(function(){
                            try{c.dom.firstChild.focus();}catch(e){}
                       }, 50);
                       return false;
                   }
                });
                return;
            }
        }
        var days = date.getDaysInMonth();
        var firstOfMonth = date.getFirstDateOfMonth();
        var startingPos = firstOfMonth.getDay()-this.startDay;

        if(startingPos <= this.startDay){
            startingPos += 7;
        }

        var pm = date.add("mo", -1);
        var prevStart = pm.getDaysInMonth()-startingPos;

        var cells = this.cells.elements;
        var textEls = this.textNodes;
        days += startingPos;

        // convert everything to numbers so it's fast
        var day = 86400000;
        var d = (new Date(pm.getFullYear(), pm.getMonth(), prevStart)).clearTime();
        var today = new Date().clearTime().getTime();
        var sel = date.clearTime().getTime();
        var min = this.minDate ? this.minDate.clearTime() : Number.NEGATIVE_INFINITY;
        var max = this.maxDate ? this.maxDate.clearTime() : Number.POSITIVE_INFINITY;
        var ddMatch = this.disabledDatesRE;
        var ddText = this.disabledDatesText;
        var ddays = this.disabledDays ? this.disabledDays.join("") : false;
        var ddaysText = this.disabledDaysText;
        var format = this.format;
        
        if(this.showToday){
            var td = new Date().clearTime();
            var disable = (td < min || td > max || 
                (ddMatch && format && ddMatch.test(td.dateFormat(format))) || 
                (ddays && ddays.indexOf(td.getDay()) != -1));
                        
            this.todayBtn.setDisabled(disable);
            this.todayKeyListener[disable ? 'disable' : 'enable']();
        }

        var setCellClass = function(cal, cell){
            cell.title = "";
            var t = d.getTime();
            cell.firstChild.dateValue = t;
            if(t == today){
                cell.className += " x-date-today";
                cell.title = cal.todayText;
            }
            if(t == sel){
                cell.className += " x-date-selected";
                setTimeout(function(){
                    try{cell.firstChild.focus();}catch(e){}
                }, 50);
            }
            // disabling
            if(t < min) {
                cell.className = " x-date-disabled";
                cell.title = cal.minText;
                return;
            }
            if(t > max) {
                cell.className = " x-date-disabled";
                cell.title = cal.maxText;
                return;
            }
            if(ddays){
                if(ddays.indexOf(d.getDay()) != -1){
                    cell.title = ddaysText;
                    cell.className = " x-date-disabled";
                }
            }
            if(ddMatch && format){
                var fvalue = d.dateFormat(format);
                if(ddMatch.test(fvalue)){
                    cell.title = ddText.replace("%0", fvalue);
                    cell.className = " x-date-disabled";
                }
            }
        };

        var i = 0;
        for(; i < startingPos; i++) {
            textEls[i].innerHTML = (++prevStart);
            d.setDate(d.getDate()+1);
            cells[i].className = "x-date-prevday";
            setCellClass(this, cells[i]);
        }
        for(; i < days; i++){
            var intDay = i - startingPos + 1;
            textEls[i].innerHTML = (intDay);
            d.setDate(d.getDate()+1);
            cells[i].className = "x-date-active";
            setCellClass(this, cells[i]);
        }
        var extraDays = 0;
        for(; i < 42; i++) {
             textEls[i].innerHTML = (++extraDays);
             d.setDate(d.getDate()+1);
             cells[i].className = "x-date-nextday";
             setCellClass(this, cells[i]);
        }

        this.mbtn.setText(this.monthNames[date.getMonth()] + " " + date.getFullYear());

        if(!this.internalRender){
            var main = this.el.dom.firstChild;
            var w = main.offsetWidth;
            this.el.setWidth(w + this.el.getBorderWidth("lr"));
            Ext.fly(main).setWidth(w);
            this.internalRender = true;
            // opera does not respect the auto grow header center column
            // then, after it gets a width opera refuses to recalculate
            // without a second pass
            if(Ext.isOpera && !this.secondPass){
                main.rows[0].cells[1].style.width = (w - (main.rows[0].cells[0].offsetWidth+main.rows[0].cells[2].offsetWidth)) + "px";
                this.secondPass = true;
                this.update.defer(10, this, [date]);
            }
        }
    },

    // private
    beforeDestroy : function() {
        if(this.rendered){
            Ext.destroy(
                this.leftClickRpt,
                this.rightClickRpt,
                this.monthPicker,
                this.eventEl,
                this.mbtn,
                this.todayBtn
            );
        }
    }

    
});
Ext.reg('datepicker', Ext.DatePicker);

Ext.TabPanel = Ext.extend(Ext.Panel,  {
    
    
    
    monitorResize : true,
    
    deferredRender : true,
    
    tabWidth: 120,
    
    minTabWidth: 30,
    
    resizeTabs:false,
    
    enableTabScroll: false,
    
    scrollIncrement : 0,
    
    scrollRepeatInterval : 400,
    
    scrollDuration : .35,
    
    animScroll : true,
    
    tabPosition: 'top',
    
    baseCls: 'x-tab-panel',
    
    autoTabs : false,
    
    autoTabSelector:'div.x-tab',
    
    activeTab : null,
    
    tabMargin : 2,
    
    plain: false,
    
    wheelIncrement : 20,

    
    idDelimiter : '__',

    // private
    itemCls : 'x-tab-item',

    // private config overrides
    elements: 'body',
    headerAsText: false,
    frame: false,
    hideBorders:true,

    // private
    initComponent : function(){
        this.frame = false;
        Ext.TabPanel.superclass.initComponent.call(this);
        this.addEvents(
            
            'beforetabchange',
            
            'tabchange',
            
            'contextmenu'
        );
        this.setLayout(new Ext.layout.CardLayout({
            deferredRender: this.deferredRender
        }));
        if(this.tabPosition == 'top'){
            this.elements += ',header';
            this.stripTarget = 'header';
        }else {
            this.elements += ',footer';
            this.stripTarget = 'footer';
        }
        if(!this.stack){
            this.stack = Ext.TabPanel.AccessStack();
        }
        this.initItems();
    },

    // private
    render : function(){
        Ext.TabPanel.superclass.render.apply(this, arguments);
        if(this.activeTab !== undefined){
            var item = this.activeTab;
            delete this.activeTab;
            this.setActiveTab(item);
        }
    },

    // private
    onRender : function(ct, position){
        Ext.TabPanel.superclass.onRender.call(this, ct, position);

        if(this.plain){
            var pos = this.tabPosition == 'top' ? 'header' : 'footer';
            this[pos].addClass('x-tab-panel-'+pos+'-plain');
        }

        var st = this[this.stripTarget];

        this.stripWrap = st.createChild({cls:'x-tab-strip-wrap', cn:{
            tag:'ul', cls:'x-tab-strip x-tab-strip-'+this.tabPosition}});

        var beforeEl = (this.tabPosition=='bottom' ? this.stripWrap : null);
        this.stripSpacer = st.createChild({cls:'x-tab-strip-spacer'}, beforeEl);
        this.strip = new Ext.Element(this.stripWrap.dom.firstChild);

        this.edge = this.strip.createChild({tag:'li', cls:'x-tab-edge'});
        this.strip.createChild({cls:'x-clear'});

        this.body.addClass('x-tab-panel-body-'+this.tabPosition);

        if(!this.itemTpl){
            var tt = new Ext.Template(
                 '<li class="{cls}" id="{id}"><a class="x-tab-strip-close" onclick="return false;"></a>',
                 '<a class="x-tab-right" href="#" onclick="return false;"><em class="x-tab-left">',
                 '<span class="x-tab-strip-inner"><span class="x-tab-strip-text {iconCls}">{text}</span></span>',
                 '</em></a></li>'
            );
            tt.disableFormats = true;
            tt.compile();
            Ext.TabPanel.prototype.itemTpl = tt;
        }

        this.items.each(this.initTab, this);
    },

    // private
    afterRender : function(){
        Ext.TabPanel.superclass.afterRender.call(this);
        if(this.autoTabs){
            this.readTabs(false);
        }
    },

    // private
    initEvents : function(){
        Ext.TabPanel.superclass.initEvents.call(this);
        this.on('add', this.onAdd, this);
        this.on('remove', this.onRemove, this);

        this.strip.on('mousedown', this.onStripMouseDown, this);
        this.strip.on('contextmenu', this.onStripContextMenu, this);
        if(this.enableTabScroll){
            this.strip.on('mousewheel', this.onWheel, this);
        }
    },

    // private
    findTargets : function(e){
        var item = null;
        var itemEl = e.getTarget('li', this.strip);
        if(itemEl){
            item = this.getComponent(itemEl.id.split(this.idDelimiter)[1]);
            if(item.disabled){
                return {
                    close : null,
                    item : null,
                    el : null
                };
            }
        }
        return {
            close : e.getTarget('.x-tab-strip-close', this.strip),
            item : item,
            el : itemEl
        };
    },

    // private
    onStripMouseDown : function(e){
        if(e.button != 0){
            return;
        }
        e.preventDefault();
        var t = this.findTargets(e);
        if(t.close){
            this.remove(t.item);
            return;
        }
        if(t.item && t.item != this.activeTab){
            this.setActiveTab(t.item);
        }
    },

    // private
    onStripContextMenu : function(e){
        e.preventDefault();
        var t = this.findTargets(e);
        if(t.item){
            this.fireEvent('contextmenu', this, t.item, e);
        }
    },

    
    readTabs : function(removeExisting){
        if(removeExisting === true){
            this.items.each(function(item){
                this.remove(item);
            }, this);
        }
        var tabs = this.el.query(this.autoTabSelector);
        for(var i = 0, len = tabs.length; i < len; i++){
            var tab = tabs[i];
            var title = tab.getAttribute('title');
            tab.removeAttribute('title');
            this.add({
                title: title,
                el: tab
            });
        }
    },

    // private
    initTab : function(item, index){
        var before = this.strip.dom.childNodes[index];
        var cls = item.closable ? 'x-tab-strip-closable' : '';
        if(item.disabled){
            cls += ' x-item-disabled';
        }
        if(item.iconCls){
            cls += ' x-tab-with-icon';
        }
        if(item.tabCls){
            cls += ' ' + item.tabCls;
        }

        var p = {
            id: this.id + this.idDelimiter + item.getItemId(),
            text: item.title,
            cls: cls,
            iconCls: item.iconCls || ''
        };
        var el = before ?
                 this.itemTpl.insertBefore(before, p) :
                 this.itemTpl.append(this.strip, p);

        Ext.fly(el).addClassOnOver('x-tab-strip-over');

        if(item.tabTip){
            Ext.fly(el).child('span.x-tab-strip-text', true).qtip = item.tabTip;
        }
        item.tabEl = el;

        item.on('disable', this.onItemDisabled, this);
        item.on('enable', this.onItemEnabled, this);
        item.on('titlechange', this.onItemTitleChanged, this);
        item.on('iconchange', this.onItemIconChanged, this);
        item.on('beforeshow', this.onBeforeShowItem, this);
    },

    // private
    onAdd : function(tp, item, index){
        this.initTab(item, index);
        if(this.items.getCount() == 1){
            this.syncSize();
        }
        this.delegateUpdates();
    },

    // private
    onBeforeAdd : function(item){
        var existing = item.events ? (this.items.containsKey(item.getItemId()) ? item : null) : this.items.get(item);
        if(existing){
            this.setActiveTab(item);
            return false;
        }
        Ext.TabPanel.superclass.onBeforeAdd.apply(this, arguments);
        var es = item.elements;
        item.elements = es ? es.replace(',header', '') : es;
        item.border = (item.border === true);
    },

    // private
    onRemove : function(tp, item){
        Ext.destroy(Ext.get(this.getTabEl(item)));
        this.stack.remove(item);
        item.un('disable', this.onItemDisabled, this);
        item.un('enable', this.onItemEnabled, this);
        item.un('titlechange', this.onItemTitleChanged, this);
        item.un('iconchange', this.onItemIconChanged, this);
        item.un('beforeshow', this.onBeforeShowItem, this);
        if(item == this.activeTab){
            var next = this.stack.next();
            if(next){
                this.setActiveTab(next);
            }else if(this.items.getCount() > 0){
                this.setActiveTab(0);
            }else{
                this.activeTab = null;
            }
        }
        this.delegateUpdates();
    },

    // private
    onBeforeShowItem : function(item){
        if(item != this.activeTab){
            this.setActiveTab(item);
            return false;
        }
    },

    // private
    onItemDisabled : function(item){
        var el = this.getTabEl(item);
        if(el){
            Ext.fly(el).addClass('x-item-disabled');
        }
        this.stack.remove(item);
    },

    // private
    onItemEnabled : function(item){
        var el = this.getTabEl(item);
        if(el){
            Ext.fly(el).removeClass('x-item-disabled');
        }
    },

    // private
    onItemTitleChanged : function(item){
        var el = this.getTabEl(item);
        if(el){
            Ext.fly(el).child('span.x-tab-strip-text', true).innerHTML = item.title;
        }
    },
    
    //private
    onItemIconChanged: function(item, iconCls, oldCls){
        var el = this.getTabEl(item);
        if(el){
            Ext.fly(el).child('span.x-tab-strip-text').replaceClass(oldCls, iconCls);
        }
    },

    
    getTabEl : function(item){
        var itemId = (typeof item === 'number')?this.items.items[item].getItemId() : item.getItemId();
        return document.getElementById(this.id+this.idDelimiter+itemId);
    },

    // private
    onResize : function(){
        Ext.TabPanel.superclass.onResize.apply(this, arguments);
        this.delegateUpdates();
    },

    
    beginUpdate : function(){
        this.suspendUpdates = true;
    },

    
    endUpdate : function(){
        this.suspendUpdates = false;
        this.delegateUpdates();
    },

    
    hideTabStripItem : function(item){
        item = this.getComponent(item);
        var el = this.getTabEl(item);
        if(el){
            el.style.display = 'none';
            this.delegateUpdates();
        }
        this.stack.remove(item);
    },

    
    unhideTabStripItem : function(item){
        item = this.getComponent(item);
        var el = this.getTabEl(item);
        if(el){
            el.style.display = '';
            this.delegateUpdates();
        }
    },

    // private
    delegateUpdates : function(){
        if(this.suspendUpdates){
            return;
        }
        if(this.resizeTabs && this.rendered){
            this.autoSizeTabs();
        }
        if(this.enableTabScroll && this.rendered){
            this.autoScrollTabs();
        }
    },

    // private
    autoSizeTabs : function(){
        var count = this.items.length;
        var ce = this.tabPosition != 'bottom' ? 'header' : 'footer';
        var ow = this[ce].dom.offsetWidth;
        var aw = this[ce].dom.clientWidth;

        if(!this.resizeTabs || count < 1 || !aw){ // !aw for display:none
            return;
        }

        var each = Math.max(Math.min(Math.floor((aw-4) / count) - this.tabMargin, this.tabWidth), this.minTabWidth); // -4 for float errors in IE
        this.lastTabWidth = each;
        var lis = this.stripWrap.dom.getElementsByTagName('li');
        for(var i = 0, len = lis.length-1; i < len; i++) { // -1 for the "edge" li
            var li = lis[i];
            var inner = li.childNodes[1].firstChild.firstChild;
            var tw = li.offsetWidth;
            var iw = inner.offsetWidth;
            inner.style.width = (each - (tw-iw)) + 'px';
        }
    },

    // private
    adjustBodyWidth : function(w){
        if(this.header){
            this.header.setWidth(w);
        }
        if(this.footer){
            this.footer.setWidth(w);
        }
        return w;
    },

    
    setActiveTab : function(item){
        item = this.getComponent(item);
        if(!item || this.fireEvent('beforetabchange', this, item, this.activeTab) === false){
            return;
        }
        if(!this.rendered){
            this.activeTab = item;
            return;
        }
        if(this.activeTab != item){
            if(this.activeTab){
                var oldEl = this.getTabEl(this.activeTab);
                if(oldEl){
                    Ext.fly(oldEl).removeClass('x-tab-strip-active');
                }
                this.activeTab.fireEvent('deactivate', this.activeTab);
            }
            var el = this.getTabEl(item);
            Ext.fly(el).addClass('x-tab-strip-active');
            this.activeTab = item;
            this.stack.add(item);

            this.layout.setActiveItem(item);
            if(this.layoutOnTabChange && item.doLayout){
                item.doLayout();
            }
            if(this.scrolling){
                this.scrollToTab(item, this.animScroll);
            }

            item.fireEvent('activate', item);
            this.fireEvent('tabchange', this, item);
        }
    },

    
    getActiveTab : function(){
        return this.activeTab || null;
    },

    
    getItem : function(item){
        return this.getComponent(item);
    },

    // private
    autoScrollTabs : function(){
        this.pos = this.tabPosition=='bottom' ? this.footer : this.header;
        var count = this.items.length;
        var ow = this.pos.dom.offsetWidth;
        var tw = this.pos.dom.clientWidth;

        var wrap = this.stripWrap;
        var wd = wrap.dom;
        var cw = wd.offsetWidth;
        var pos = this.getScrollPos();
        var l = this.edge.getOffsetsTo(this.stripWrap)[0] + pos;

        if(!this.enableTabScroll || count < 1 || cw < 20){ // 20 to prevent display:none issues
            return;
        }
        if(l <= tw){
            wd.scrollLeft = 0;
            wrap.setWidth(tw);
            if(this.scrolling){
                this.scrolling = false;
                this.pos.removeClass('x-tab-scrolling');
                this.scrollLeft.hide();
                this.scrollRight.hide();
                if(Ext.isAir || Ext.isSafari){
                    wd.style.marginLeft = '';
                    wd.style.marginRight = '';
                }
            }
        }else{
            if(!this.scrolling){
                this.pos.addClass('x-tab-scrolling');
                if(Ext.isAir || Ext.isSafari){
                    wd.style.marginLeft = '18px';
                    wd.style.marginRight = '18px';
                }
            }
            tw -= wrap.getMargins('lr');
            wrap.setWidth(tw > 20 ? tw : 20);
            if(!this.scrolling){
                if(!this.scrollLeft){
                    this.createScrollers();
                }else{
                    this.scrollLeft.show();
                    this.scrollRight.show();
                }
            }
            this.scrolling = true;
            if(pos > (l-tw)){ // ensure it stays within bounds
                wd.scrollLeft = l-tw;
            }else{ // otherwise, make sure the active tab is still visible
                this.scrollToTab(this.activeTab, false);
            }
            this.updateScrollButtons();
        }
    },

    // private
    createScrollers : function(){
        this.pos.addClass('x-tab-scrolling-' + this.tabPosition);
        var h = this.stripWrap.dom.offsetHeight;

        // left
        var sl = this.pos.insertFirst({
            cls:'x-tab-scroller-left'
        });
        sl.setHeight(h);
        sl.addClassOnOver('x-tab-scroller-left-over');
        this.leftRepeater = new Ext.util.ClickRepeater(sl, {
            interval : this.scrollRepeatInterval,
            handler: this.onScrollLeft,
            scope: this
        });
        this.scrollLeft = sl;

        // right
        var sr = this.pos.insertFirst({
            cls:'x-tab-scroller-right'
        });
        sr.setHeight(h);
        sr.addClassOnOver('x-tab-scroller-right-over');
        this.rightRepeater = new Ext.util.ClickRepeater(sr, {
            interval : this.scrollRepeatInterval,
            handler: this.onScrollRight,
            scope: this
        });
        this.scrollRight = sr;
    },

    // private
    getScrollWidth : function(){
        return this.edge.getOffsetsTo(this.stripWrap)[0] + this.getScrollPos();
    },

    // private
    getScrollPos : function(){
        return parseInt(this.stripWrap.dom.scrollLeft, 10) || 0;
    },

    // private
    getScrollArea : function(){
        return parseInt(this.stripWrap.dom.clientWidth, 10) || 0;
    },

    // private
    getScrollAnim : function(){
        return {duration:this.scrollDuration, callback: this.updateScrollButtons, scope: this};
    },

    // private
    getScrollIncrement : function(){
        return this.scrollIncrement || (this.resizeTabs ? this.lastTabWidth+2 : 100);
    },

    

    scrollToTab : function(item, animate){
        if(!item){ return; }
        var el = this.getTabEl(item);
        var pos = this.getScrollPos(), area = this.getScrollArea();
        var left = Ext.fly(el).getOffsetsTo(this.stripWrap)[0] + pos;
        var right = left + el.offsetWidth;
        if(left < pos){
            this.scrollTo(left, animate);
        }else if(right > (pos + area)){
            this.scrollTo(right - area, animate);
        }
    },

    // private
    scrollTo : function(pos, animate){
        this.stripWrap.scrollTo('left', pos, animate ? this.getScrollAnim() : false);
        if(!animate){
            this.updateScrollButtons();
        }
    },

    onWheel : function(e){
        var d = e.getWheelDelta()*this.wheelIncrement*-1;
        e.stopEvent();

        var pos = this.getScrollPos();
        var newpos = pos + d;
        var sw = this.getScrollWidth()-this.getScrollArea();

        var s = Math.max(0, Math.min(sw, newpos));
        if(s != pos){
            this.scrollTo(s, false);
        }
    },

    // private
    onScrollRight : function(){
        var sw = this.getScrollWidth()-this.getScrollArea();
        var pos = this.getScrollPos();
        var s = Math.min(sw, pos + this.getScrollIncrement());
        if(s != pos){
            this.scrollTo(s, this.animScroll);
        }
    },

    // private
    onScrollLeft : function(){
        var pos = this.getScrollPos();
        var s = Math.max(0, pos - this.getScrollIncrement());
        if(s != pos){
            this.scrollTo(s, this.animScroll);
        }
    },

    // private
    updateScrollButtons : function(){
        var pos = this.getScrollPos();
        this.scrollLeft[pos == 0 ? 'addClass' : 'removeClass']('x-tab-scroller-left-disabled');
        this.scrollRight[pos >= (this.getScrollWidth()-this.getScrollArea()) ? 'addClass' : 'removeClass']('x-tab-scroller-right-disabled');
    },

    // private
    beforeDestroy : function() {
        if(this.items){
            this.items.each(function(item){
                if(item && item.tabEl){
                    Ext.get(item.tabEl).removeAllListeners();
                    item.tabEl = null;
                }
            }, this);
        }
        if(this.strip){
            this.strip.removeAllListeners();
        }
        Ext.TabPanel.superclass.beforeDestroy.apply(this);
    }

    
    
    
    
    
    
    
    
    
    
    

});
Ext.reg('tabpanel', Ext.TabPanel);


Ext.TabPanel.prototype.activate = Ext.TabPanel.prototype.setActiveTab;

// private utility class used by TabPanel
Ext.TabPanel.AccessStack = function(){
    var items = [];
    return {
        add : function(item){
            items.push(item);
            if(items.length > 10){
                items.shift();
            }
        },

        remove : function(item){
            var s = [];
            for(var i = 0, len = items.length; i < len; i++) {
                if(items[i] != item){
                    s.push(items[i]);
                }
            }
            items = s;
        },

        next : function(){
            return items.pop();
        }
    };
};




Ext.Button = Ext.extend(Ext.Component, {
    
    hidden : false,
    
    disabled : false,
    
    pressed : false,
    

    

    

    
    enableToggle: false,
    
    
    
    menuAlign : "tl-bl?",

    
    
    type : 'button',

    // private
    menuClassTarget: 'tr',

    
    clickEvent : 'click',

    
    handleMouseEvents : true,

    
    tooltipType : 'qtip',

    
    buttonSelector : "button:first-child",

    
    

    initComponent : function(){
        Ext.Button.superclass.initComponent.call(this);

        this.addEvents(
            
            "click",
            
            "toggle",
            
            'mouseover',
            
            'mouseout',
            
            'menushow',
            
            'menuhide',
            
            'menutriggerover',
            
            'menutriggerout'
        );
        if(this.menu){
            this.menu = Ext.menu.MenuMgr.get(this.menu);
        }
        if(typeof this.toggleGroup === 'string'){
            this.enableToggle = true;
        }
    },

    // private
    onRender : function(ct, position){
        if(!this.template){
            if(!Ext.Button.buttonTemplate){
                // hideous table template
                Ext.Button.buttonTemplate = new Ext.Template(
                    '<table border="0" cellpadding="0" cellspacing="0" class="x-btn-wrap"><tbody><tr>',
                    '<td class="x-btn-left"><i>&#160;</i></td><td class="x-btn-center"><em unselectable="on"><button class="x-btn-text" type="{1}">{0}</button></em></td><td class="x-btn-right"><i>&#160;</i></td>',
                    "</tr></tbody></table>");
            }
            this.template = Ext.Button.buttonTemplate;
        }
        var btn, targs = [this.text || '&#160;', this.type];

        if(position){
            btn = this.template.insertBefore(position, targs, true);
        }else{
            btn = this.template.append(ct, targs, true);
        }
        var btnEl = btn.child(this.buttonSelector);
        btnEl.on('focus', this.onFocus, this);
        btnEl.on('blur', this.onBlur, this);

        this.initButtonEl(btn, btnEl);

        if(this.menu){
            this.el.child(this.menuClassTarget).addClass("x-btn-with-menu");
        }
        Ext.ButtonToggleMgr.register(this);
    },

    // private
    initButtonEl : function(btn, btnEl){

        this.el = btn;
        btn.addClass("x-btn");

        if(this.id){
            this.el.dom.id = this.el.id = this.id;
        }
        if(this.icon){
            btnEl.setStyle('background-image', 'url(' +this.icon +')');
        }
        if(this.iconCls){
            btnEl.addClass(this.iconCls);
            if(!this.cls){
                btn.addClass(this.text ? 'x-btn-text-icon' : 'x-btn-icon');
            }
        }
        if(this.tabIndex !== undefined){
            btnEl.dom.tabIndex = this.tabIndex;
        }
        if(this.tooltip){
            if(typeof this.tooltip == 'object'){
                Ext.QuickTips.register(Ext.apply({
                      target: btnEl.id
                }, this.tooltip));
            } else {
                btnEl.dom[this.tooltipType] = this.tooltip;
            }
        }

        if(this.pressed){
            this.el.addClass("x-btn-pressed");
        }

        if(this.handleMouseEvents){
            btn.on("mouseover", this.onMouseOver, this);
            // new functionality for monitoring on the document level
            //btn.on("mouseout", this.onMouseOut, this);
            btn.on("mousedown", this.onMouseDown, this);
        }

        if(this.menu){
            this.menu.on("show", this.onMenuShow, this);
            this.menu.on("hide", this.onMenuHide, this);
        }

        if(this.repeat){
            var repeater = new Ext.util.ClickRepeater(btn,
                typeof this.repeat == "object" ? this.repeat : {}
            );
            repeater.on("click", this.onClick,  this);
        }

        btn.on(this.clickEvent, this.onClick, this);
    },

    // private
    afterRender : function(){
        Ext.Button.superclass.afterRender.call(this);
        if(Ext.isIE6){
            this.autoWidth.defer(1, this);
        }else{
            this.autoWidth();
        }
    },

    
    setIconClass : function(cls){
        if(this.el){
            this.el.child(this.buttonSelector).replaceClass(this.iconCls, cls);
        }
        this.iconCls = cls;
    },

    // private
    beforeDestroy: function(){
    	if(this.rendered){
            var btnEl = this.el.child(this.buttonSelector);
            if(btnEl){
//                if(this.tooltip){
                if(typeof this.tooltip == 'object'){
                    Ext.QuickTips.unregister(btnEl);
                }
                btnEl.removeAllListeners();
            }
	    }
        if(this.menu){
            Ext.destroy(this.menu);
        }
    },

    // private
    onDestroy : function(){
        if(this.rendered){
            Ext.ButtonToggleMgr.unregister(this);
        }
    },

    // private
    autoWidth : function(){
        if(this.el){
            this.el.setWidth("auto");
            if(Ext.isIE7 && Ext.isStrict){
                var ib = this.el.child(this.buttonSelector);
                if(ib && ib.getWidth() > 20){
                    ib.clip();
                    ib.setWidth(Ext.util.TextMetrics.measure(ib, this.text).width+ib.getFrameWidth('lr'));
                }
            }
            if(this.minWidth){
                if(this.el.getWidth() < this.minWidth){
                    this.el.setWidth(this.minWidth);
                }
            }
        }
    },

    
    setHandler : function(handler, scope){
        this.handler = handler;
        this.scope = scope;
    },

    
    setText : function(text){
        this.text = text;
        if(this.el){
            this.el.child("td.x-btn-center " + this.buttonSelector).update(text);
        }
        this.autoWidth();
    },

    
    getText : function(){
        return this.text;
    },

    
    toggle : function(state){
        state = state === undefined ? !this.pressed : state;
        if(state != this.pressed){
            if(state){
                this.el.addClass("x-btn-pressed");
                this.pressed = true;
                this.fireEvent("toggle", this, true);
            }else{
                this.el.removeClass("x-btn-pressed");
                this.pressed = false;
                this.fireEvent("toggle", this, false);
            }
            if(this.toggleHandler){
                this.toggleHandler.call(this.scope || this, this, state);
            }
        }
    },

    
    focus : function(){
        this.el.child(this.buttonSelector).focus();
    },

    // private
    onDisable : function(){
        if(this.el){
            if(!Ext.isIE6 || !this.text){
                this.el.addClass(this.disabledClass);
            }
            this.el.dom.disabled = true;
        }
        this.disabled = true;
    },

    // private
    onEnable : function(){
        if(this.el){
            if(!Ext.isIE6 || !this.text){
                this.el.removeClass(this.disabledClass);
            }
            this.el.dom.disabled = false;
        }
        this.disabled = false;
    },

    
    showMenu : function(){
        if(this.menu){
            this.menu.show(this.el, this.menuAlign);
        }
        return this;
    },

    
    hideMenu : function(){
        if(this.menu){
            this.menu.hide();
        }
        return this;
    },

    
    hasVisibleMenu : function(){
        return this.menu && this.menu.isVisible();
    },

    // private
    onClick : function(e){
        if(e){
            e.preventDefault();
        }
        if(e.button != 0){
            return;
        }
        if(!this.disabled){
            if(this.enableToggle && (this.allowDepress !== false || !this.pressed)){
                this.toggle();
            }
            if(this.menu && !this.menu.isVisible() && !this.ignoreNextClick){
                this.showMenu();
            }
            this.fireEvent("click", this, e);
            if(this.handler){
                //this.el.removeClass("x-btn-over");
                this.handler.call(this.scope || this, this, e);
            }
        }
    },

    // private
    isMenuTriggerOver : function(e, internal){
        return this.menu && !internal;
    },

    // private
    isMenuTriggerOut : function(e, internal){
        return this.menu && !internal;
    },

    // private
    onMouseOver : function(e){
        if(!this.disabled){
            var internal = e.within(this.el,  true);
            if(!internal){
                this.el.addClass("x-btn-over");
                if(!this.monitoringMouseOver){
                    Ext.getDoc().on('mouseover', this.monitorMouseOver, this);
                    this.monitoringMouseOver = true;
                }
                this.fireEvent('mouseover', this, e);
            }
            if(this.isMenuTriggerOver(e, internal)){
                this.fireEvent('menutriggerover', this, this.menu, e);
            }
        }
    },

    // private
    monitorMouseOver : function(e){
        if(e.target != this.el.dom && !e.within(this.el)){
            if(this.monitoringMouseOver){
                Ext.getDoc().un('mouseover', this.monitorMouseOver, this);
                this.monitoringMouseOver = false;
            }
            this.onMouseOut(e);
        }
    },

    // private
    onMouseOut : function(e){
        var internal = e.within(this.el) && e.target != this.el.dom;
        this.el.removeClass("x-btn-over");
        this.fireEvent('mouseout', this, e);
        if(this.isMenuTriggerOut(e, internal)){
            this.fireEvent('menutriggerout', this, this.menu, e);
        }
    },
    // private
    onFocus : function(e){
        if(!this.disabled){
            this.el.addClass("x-btn-focus");
        }
    },
    // private
    onBlur : function(e){
        this.el.removeClass("x-btn-focus");
    },

    // private
    getClickEl : function(e, isUp){
       return this.el;
    },

    // private
    onMouseDown : function(e){
        if(!this.disabled && e.button == 0){
            this.getClickEl(e).addClass("x-btn-click");
            Ext.getDoc().on('mouseup', this.onMouseUp, this);
        }
    },
    // private
    onMouseUp : function(e){
        if(e.button == 0){
            this.getClickEl(e, true).removeClass("x-btn-click");
            Ext.getDoc().un('mouseup', this.onMouseUp, this);
        }
    },
    // private
    onMenuShow : function(e){
        this.ignoreNextClick = 0;
        this.el.addClass("x-btn-menu-active");
        this.fireEvent('menushow', this, this.menu);
    },
    // private
    onMenuHide : function(e){
        this.el.removeClass("x-btn-menu-active");
        this.ignoreNextClick = this.restoreClick.defer(250, this);
        this.fireEvent('menuhide', this, this.menu);
    },

    // private
    restoreClick : function(){
        this.ignoreNextClick = 0;
    }



    
});
Ext.reg('button', Ext.Button);

// Private utility class used by Button
Ext.ButtonToggleMgr = function(){
   var groups = {};

   function toggleGroup(btn, state){
       if(state){
           var g = groups[btn.toggleGroup];
           for(var i = 0, l = g.length; i < l; i++){
               if(g[i] != btn){
                   g[i].toggle(false);
               }
           }
       }
   }

   return {
       register : function(btn){
           if(!btn.toggleGroup){
               return;
           }
           var g = groups[btn.toggleGroup];
           if(!g){
               g = groups[btn.toggleGroup] = [];
           }
           g.push(btn);
           btn.on("toggle", toggleGroup);
       },

       unregister : function(btn){
           if(!btn.toggleGroup){
               return;
           }
           var g = groups[btn.toggleGroup];
           if(g){
               g.remove(btn);
               btn.un("toggle", toggleGroup);
           }
       }
   };
}();

Ext.SplitButton = Ext.extend(Ext.Button, {
	// private
    arrowSelector : 'button:last',

    // private
    initComponent : function(){
        Ext.SplitButton.superclass.initComponent.call(this);
        
        this.addEvents("arrowclick");
    },

    // private
    onRender : function(ct, position){
        // this is one sweet looking template!
        var tpl = new Ext.Template(
            '<table cellspacing="0" class="x-btn-menu-wrap x-btn"><tr><td>',
            '<table cellspacing="0" class="x-btn-wrap x-btn-menu-text-wrap"><tbody>',
            '<tr><td class="x-btn-left"><i>&#160;</i></td><td class="x-btn-center"><button class="x-btn-text" type="{1}">{0}</button></td></tr>',
            "</tbody></table></td><td>",
            '<table cellspacing="0" class="x-btn-wrap x-btn-menu-arrow-wrap"><tbody>',
            '<tr><td class="x-btn-center"><button class="x-btn-menu-arrow-el" type="button">&#160;</button></td><td class="x-btn-right"><i>&#160;</i></td></tr>',
            "</tbody></table></td></tr></table>"
        );
        var btn, targs = [this.text || '&#160;', this.type];
        if(position){
            btn = tpl.insertBefore(position, targs, true);
        }else{
            btn = tpl.append(ct, targs, true);
        }
        var btnEl = btn.child(this.buttonSelector);

        this.initButtonEl(btn, btnEl);
        this.arrowBtnTable = btn.child("table:last");
        if(this.arrowTooltip){
            btn.child(this.arrowSelector).dom[this.tooltipType] = this.arrowTooltip;
        }
    },

    // private
    autoWidth : function(){
        if(this.el){
            var tbl = this.el.child("table:first");
            var tbl2 = this.el.child("table:last");
            this.el.setWidth("auto");
            tbl.setWidth("auto");
            if(Ext.isIE7 && Ext.isStrict){
                var ib = this.el.child(this.buttonSelector);
                if(ib && ib.getWidth() > 20){
                    ib.clip();
                    ib.setWidth(Ext.util.TextMetrics.measure(ib, this.text).width+ib.getFrameWidth('lr'));
                }
            }
            if(this.minWidth){
                if((tbl.getWidth()+tbl2.getWidth()) < this.minWidth){
                    tbl.setWidth(this.minWidth-tbl2.getWidth());
                }
            }
            this.el.setWidth(tbl.getWidth()+tbl2.getWidth());
        } 
    },

    
    setArrowHandler : function(handler, scope){
        this.arrowHandler = handler;
        this.scope = scope;  
    },

    // private
    onClick : function(e){
        e.preventDefault();
        if(!this.disabled){
            if(e.getTarget(".x-btn-menu-arrow-wrap")){
                if(this.menu && !this.menu.isVisible() && !this.ignoreNextClick){
                    this.showMenu();
                }
                this.fireEvent("arrowclick", this, e);
                if(this.arrowHandler){
                    this.arrowHandler.call(this.scope || this, this, e);
                }
            }else{
                if(this.enableToggle){
                    this.toggle();
                }
                this.fireEvent("click", this, e);
                if(this.handler){
                    this.handler.call(this.scope || this, this, e);
                }
            }
        }
    },

    // private
    getClickEl : function(e, isUp){
        if(!isUp){
            return (this.lastClickEl = e.getTarget("table", 10, true));
        }
        return this.lastClickEl;
    },

    // private
    onDisable : function(){
        if(this.el){
            if(!Ext.isIE6){
                this.el.addClass("x-item-disabled");
            }
            this.el.child(this.buttonSelector).dom.disabled = true;
            this.el.child(this.arrowSelector).dom.disabled = true;
        }
        this.disabled = true;
    },

    // private
    onEnable : function(){
        if(this.el){
            if(!Ext.isIE6){
                this.el.removeClass("x-item-disabled");
            }
            this.el.child(this.buttonSelector).dom.disabled = false;
            this.el.child(this.arrowSelector).dom.disabled = false;
        }
        this.disabled = false;
    },

    // private
    isMenuTriggerOver : function(e){
        return this.menu && e.within(this.arrowBtnTable) && !e.within(this.arrowBtnTable, true);
    },

    // private
    isMenuTriggerOut : function(e, internal){
        return this.menu && !e.within(this.arrowBtnTable);
    },

    // private
    onDestroy : function(){
        Ext.destroy(this.arrowBtnTable);
        Ext.SplitButton.superclass.onDestroy.call(this);
    }
});

// backwards compat
Ext.MenuButton = Ext.SplitButton;


Ext.reg('splitbutton', Ext.SplitButton);

Ext.CycleButton = Ext.extend(Ext.SplitButton, {
    
    
    
    
	

    // private
    getItemText : function(item){
        if(item && this.showText === true){
            var text = '';
            if(this.prependText){
                text += this.prependText;
            }
            text += item.text;
            return text;
        }
        return undefined;
    },

    
    setActiveItem : function(item, suppressEvent){
        if(typeof item != 'object'){
            item = this.menu.items.get(item);
        }
        if(item){
            if(!this.rendered){
                this.text = this.getItemText(item);
                this.iconCls = item.iconCls;
            }else{
                var t = this.getItemText(item);
                if(t){
                    this.setText(t);
                }
                this.setIconClass(item.iconCls);
            }
            this.activeItem = item;
            if(!item.checked){
                item.setChecked(true, true);
            }
            if(this.forceIcon){
                this.setIconClass(this.forceIcon);
            }
            if(!suppressEvent){
                this.fireEvent('change', this, item);
            }
        }
    },

    
    getActiveItem : function(){
        return this.activeItem;
    },

    // private
    initComponent : function(){
        this.addEvents(
            
            "change"
        );

        if(this.changeHandler){
            this.on('change', this.changeHandler, this.scope||this);
            delete this.changeHandler;
        }

        this.itemCount = this.items.length;

        this.menu = {cls:'x-cycle-menu', items:[]};
        var checked;
        for(var i = 0, len = this.itemCount; i < len; i++){
            var item = this.items[i];
            item.group = item.group || this.id;
            item.itemIndex = i;
            item.checkHandler = this.checkHandler;
            item.scope = this;
            item.checked = item.checked || false;
            this.menu.items.push(item);
            if(item.checked){
                checked = item;
            }
        }
        this.setActiveItem(checked, true);
        Ext.CycleButton.superclass.initComponent.call(this);

        this.on('click', this.toggleSelected, this);
    },

    // private
    checkHandler : function(item, pressed){
        if(pressed){
            this.setActiveItem(item);
        }
    },

    
    toggleSelected : function(){
        this.menu.render();
		
		var nextIdx, checkItem;
		for (var i = 1; i < this.itemCount; i++) {
			nextIdx = (this.activeItem.itemIndex + i) % this.itemCount;
			// check the potential item
			checkItem = this.menu.items.itemAt(nextIdx);
			// if its not disabled then check it.
			if (!checkItem.disabled) {
				checkItem.setChecked(true);
				break;
			}
		}
    }
});
Ext.reg('cycle', Ext.CycleButton);
 
 Ext.Toolbar = function(config){
    if(Ext.isArray(config)){
        config = {buttons:config};
    }
    Ext.Toolbar.superclass.constructor.call(this, config);
};

(function(){

var T = Ext.Toolbar;

Ext.extend(T, Ext.BoxComponent, {

    trackMenus : true,

    // private
    initComponent : function(){
        T.superclass.initComponent.call(this);

        if(this.items){
            this.buttons = this.items;
        }
        
        this.items = new Ext.util.MixedCollection(false, function(o){
            return o.itemId || o.id || Ext.id();
        });
    },

    // private
    autoCreate: {
        cls:'x-toolbar x-small-editor',
        html:'<table cellspacing="0"><tr></tr></table>'
    },

    // private
    onRender : function(ct, position){
        this.el = ct.createChild(Ext.apply({ id: this.id },this.autoCreate), position);
        this.tr = this.el.child("tr", true);
    },

    // private
    afterRender : function(){
        T.superclass.afterRender.call(this);
        if(this.buttons){
            this.add.apply(this, this.buttons);
            delete this.buttons;
        }
    },

    
    add : function(){
        var a = arguments, l = a.length;
        for(var i = 0; i < l; i++){
            var el = a[i];
/*
            if(el.isFormField){ // some kind of form field
                this.addField(el);
            }else if(el.render){ // some kind of Toolbar.Item
                this.addItem(el);
            }else if(typeof el == "string"){ // string
                if(el == "separator" || el == "-"){
                    this.addSeparator();
                }else if(el == " "){
                    this.addSpacer();
                }else if(el == "->"){
                    this.addFill();
                }else{
                    this.addText(el);
                }
            }else if(el.tagName){ // element
                this.addElement(el);
            }else if(typeof el == "object"){ // must be button config?
                if(el.xtype){
                    this.addField(Ext.ComponentMgr.create(el, 'button'));
                }else{
                    this.addButton(el);
                }
            }
*/
            if(!el) continue;
            if(typeof el == "string"){ // string
                if(el == "separator" || el == "-"){
                    this.addSeparator();
                }else if(el == " "){
                    this.addSpacer();
                }else if(el == "->"){
                    this.addFill();
                }else{
                    this.addText(el);
                }
            }else if(el.isFormField){ // some kind of form field
                this.addField(el);
            }else if(el.render){ // some kind of Toolbar.Item
                this.addItem(el);
            }else if(el.tagName){ // element
                this.addElement(el);
            }else if(typeof el == "object"){ // must be button config?
                if(el.xtype){
                    this.addField(Ext.ComponentMgr.create(el, 'button'));
                }else{
                    this.addButton(el);
                }
            }
        }
    },
    
    
    addSeparator : function(){
        return this.addItem(new T.Separator());
    },

    
    addSpacer : function(){
        return this.addItem(new T.Spacer());
    },

    
    addFill : function(){
        return this.addItem(new T.Fill());
    },

    
    addElement : function(el){
        return this.addItem(new T.Item(el));
    },
    
    
    addItem : function(item){
        var td = this.nextBlock();
        this.initMenuTracking(item);
        item.render(td);
        this.items.add(item);
        return item;
    },
    
    
    addButton : function(config){
        if(Ext.isArray(config)){
            var buttons = [];
            for(var i = 0, len = config.length; i < len; i++) {
                buttons.push(this.addButton(config[i]));
            }
            return buttons;
        }
        var b = config;
        if(!(config instanceof T.Button)){
            b = config.split ? 
                new T.SplitButton(config) :
                new T.Button(config);
        }
        var td = this.nextBlock();
        this.initMenuTracking(b);
        b.render(td);
        this.items.add(b);
        return b;
    },

    // private
    initMenuTracking : function(item){
        if(this.trackMenus && item.menu){
            item.on({
                'menutriggerover' : this.onButtonTriggerOver,
                'menushow' : this.onButtonMenuShow,
                'menuhide' : this.onButtonMenuHide,
                scope: this
            })
        }
    },

    
    addText : function(text){
        return this.addItem(new T.TextItem(text));
    },
    
    
    insertButton : function(index, item){
        if(Ext.isArray(item)){
            var buttons = [];
            for(var i = 0, len = item.length; i < len; i++) {
               buttons.push(this.insertButton(index + i, item[i]));
            }
            return buttons;
        }
        if (!(item instanceof T.Button)){
           item = new T.Button(item);
        }
        var td = document.createElement("td");
        this.tr.insertBefore(td, this.tr.childNodes[index]);
        this.initMenuTracking(item);
        item.render(td);
        this.items.insert(index, item);
        return item;
    },
    
    
    addDom : function(config, returnEl){
        var td = this.nextBlock();
        Ext.DomHelper.overwrite(td, config);
        var ti = new T.Item(td.firstChild);
        ti.render(td);
        this.items.add(ti);
        return ti;
    },

    
    addField : function(field){
        var td = this.nextBlock();
        field.render(td);
        var ti = new T.Item(td.firstChild);
        ti.render(td);
        this.items.add(field);
        return ti;
    },

    // private
    nextBlock : function(){
        var td = document.createElement("td");
        this.tr.appendChild(td);
        return td;
    },

    // private
    onDestroy : function(){
        Ext.Toolbar.superclass.onDestroy.call(this);
        if(this.rendered){
            if(this.items){ // rendered?
                Ext.destroy.apply(Ext, this.items.items);
            }
            Ext.Element.uncache(this.tr);
        }
    },

    // private
    onDisable : function(){
        this.items.each(function(item){
             if(item.disable){
                 item.disable();
             }
        });
    },

    // private
    onEnable : function(){
        this.items.each(function(item){
             if(item.enable){
                 item.enable();
             }
        });
    },

    // private
    onButtonTriggerOver : function(btn){
        if(this.activeMenuBtn && this.activeMenuBtn != btn){
            this.activeMenuBtn.hideMenu();
            btn.showMenu();
            this.activeMenuBtn = btn;
        }
    },

    // private
    onButtonMenuShow : function(btn){
        this.activeMenuBtn = btn;
    },

    // private
    onButtonMenuHide : function(btn){
        delete this.activeMenuBtn;
    }

    
});
Ext.reg('toolbar', Ext.Toolbar);


T.Item = function(el){
    this.el = Ext.getDom(el);
    this.id = Ext.id(this.el);
    this.hidden = false;
};

T.Item.prototype = {
    
    
    getEl : function(){
       return this.el;  
    },

    // private
    render : function(td){
        this.td = td;
        td.appendChild(this.el);
    },
    
    
    destroy : function(){
        if(this.el){
            var el = Ext.get(this.el);
            Ext.destroy(el);
        }
        Ext.removeNode(this.td);
    },
    
    
    show: function(){
        this.hidden = false;
        this.td.style.display = "";
    },
    
    
    hide: function(){
        this.hidden = true;
        this.td.style.display = "none";
    },
    
    
    setVisible: function(visible){
        if(visible) {
            this.show();
        }else{
            this.hide();
        }
    },
    
    
    focus : function(){
        Ext.fly(this.el).focus();
    },
    
    
    disable : function(){
        Ext.fly(this.td).addClass("x-item-disabled");
        this.disabled = true;
        this.el.disabled = true;
    },
    
    
    enable : function(){
        Ext.fly(this.td).removeClass("x-item-disabled");
        this.disabled = false;
        this.el.disabled = false;
    }
};
Ext.reg('tbitem', T.Item);



T.Separator = function(){
    var s = document.createElement("span");
    s.className = "ytb-sep";
    T.Separator.superclass.constructor.call(this, s);
};
Ext.extend(T.Separator, T.Item, {
    enable:Ext.emptyFn,
    disable:Ext.emptyFn,
    focus:Ext.emptyFn
});
Ext.reg('tbseparator', T.Separator);


T.Spacer = function(){
    var s = document.createElement("div");
    s.className = "ytb-spacer";
    T.Spacer.superclass.constructor.call(this, s);
};
Ext.extend(T.Spacer, T.Item, {
    enable:Ext.emptyFn,
    disable:Ext.emptyFn,
    focus:Ext.emptyFn
});

Ext.reg('tbspacer', T.Spacer);


T.Fill = Ext.extend(T.Spacer, {
    // private
    render : function(td){
        td.style.width = '100%';
        T.Fill.superclass.render.call(this, td);
    }
});
Ext.reg('tbfill', T.Fill);


T.TextItem = function(t){
    var s = document.createElement("span");
    s.className = "ytb-text";
    s.innerHTML = t.text ? t.text : t;
    T.TextItem.superclass.constructor.call(this, s);
};
Ext.extend(T.TextItem, T.Item, {
    enable:Ext.emptyFn,
    disable:Ext.emptyFn,
    focus:Ext.emptyFn
});
Ext.reg('tbtext', T.TextItem);



T.Button = Ext.extend(Ext.Button, {
    hideParent : true,

    onDestroy : function(){
        T.Button.superclass.onDestroy.call(this);
        if(this.container){
            this.container.remove();
        }
    }
});
Ext.reg('tbbutton', T.Button);


T.SplitButton = Ext.extend(Ext.SplitButton, {
    hideParent : true,

    onDestroy : function(){
        T.SplitButton.superclass.onDestroy.call(this);
        if(this.container){
            this.container.remove();
        }
    }
});

Ext.reg('tbsplit', T.SplitButton);
// backwards compat
T.MenuButton = T.SplitButton;

})();


Ext.PagingToolbar = Ext.extend(Ext.Toolbar, {
    
    
    
    pageSize: 20,
    
    displayMsg : 'Displaying {0} - {1} of {2}',
    
    emptyMsg : 'No data to display',
    
    beforePageText : "Page",
    
    afterPageText : "of {0}",
    
    firstText : "First Page",
    
    prevText : "Previous Page",
    
    nextText : "Next Page",
    
    lastText : "Last Page",
    
    refreshText : "Refresh",

    
    paramNames : {start: 'start', limit: 'limit'},

    // private
    initComponent : function(){
        this.addEvents(
            
            'change',
            
            'beforechange'
        );
        Ext.PagingToolbar.superclass.initComponent.call(this);
        this.cursor = 0;
        this.bind(this.store);
    },

    // private
    onRender : function(ct, position){
        Ext.PagingToolbar.superclass.onRender.call(this, ct, position);
        this.first = this.addButton({
            tooltip: this.firstText,
            iconCls: "x-tbar-page-first",
            disabled: true,
            handler: this.onClick.createDelegate(this, ["first"])
        });
        this.prev = this.addButton({
            tooltip: this.prevText,
            iconCls: "x-tbar-page-prev",
            disabled: true,
            handler: this.onClick.createDelegate(this, ["prev"])
        });
        this.addSeparator();
        this.add(this.beforePageText);
        this.field = Ext.get(this.addDom({
           tag: "input",
           type: "text",
           size: "3",
           value: "1",
           cls: "x-tbar-page-number"
        }).el);
        this.field.on("keydown", this.onPagingKeydown, this);
        this.field.on("focus", function(){this.dom.select();});
        this.field.on("blur", this.onPagingBlur, this);
        this.afterTextEl = this.addText(String.format(this.afterPageText, 1));
        this.field.setHeight(18);
        this.addSeparator();
        this.next = this.addButton({
            tooltip: this.nextText,
            iconCls: "x-tbar-page-next",
            disabled: true,
            handler: this.onClick.createDelegate(this, ["next"])
        });
        this.last = this.addButton({
            tooltip: this.lastText,
            iconCls: "x-tbar-page-last",
            disabled: true,
            handler: this.onClick.createDelegate(this, ["last"])
        });
        this.addSeparator();
        this.loading = this.addButton({
            tooltip: this.refreshText,
            iconCls: "x-tbar-loading",
            handler: this.onClick.createDelegate(this, ["refresh"])
        });

        if(this.displayInfo){
            this.displayEl = Ext.fly(this.el.dom).createChild({cls:'x-paging-info'});
        }
        if(this.dsLoaded){
            this.onLoad.apply(this, this.dsLoaded);
        }
    },

    // private
    updateInfo : function(){
        if(this.displayEl){
            var count = this.store.getCount();
            var msg = count == 0 ?
                this.emptyMsg :
                String.format(
                    this.displayMsg,
                    this.cursor+1, this.cursor+count, this.store.getTotalCount()
                );
            this.displayEl.update(msg);
        }
    },

    // private
    onLoad : function(store, r, o){
        if(!this.rendered){
            this.dsLoaded = [store, r, o];
            return;
        }
       this.cursor = o.params ? o.params[this.paramNames.start] : 0;
       var d = this.getPageData(), ap = d.activePage, ps = d.pages;

        this.afterTextEl.el.innerHTML = String.format(this.afterPageText, d.pages);
        this.field.dom.value = ap;
        this.first.setDisabled(ap == 1);
        this.prev.setDisabled(ap == 1);
        this.next.setDisabled(ap == ps);
        this.last.setDisabled(ap == ps);
        this.loading.enable();
        this.updateInfo();
        this.fireEvent('change', this, d);
    },

    // private
    getPageData : function(){
        var total = this.store.getTotalCount();
        return {
            total : total,
            activePage : Math.ceil((this.cursor+this.pageSize)/this.pageSize),
            pages :  total < this.pageSize ? 1 : Math.ceil(total/this.pageSize)
        };
    },

    // private
    onLoadError : function(){
        if(!this.rendered){
            return;
        }
        this.loading.enable();
    },

    // private
    readPage : function(d){
        var v = this.field.dom.value, pageNum;
        if (!v || isNaN(pageNum = parseInt(v, 10))) {
            this.field.dom.value = d.activePage;
            return false;
        }
        return pageNum;
    },

    //private
    onPagingBlur: function(e){
        this.field.dom.value = this.getPageData().activePage;
    },

    // private
    onPagingKeydown : function(e){
        var k = e.getKey(), d = this.getPageData(), pageNum;
        if (k == e.RETURN) {
            e.stopEvent();
            pageNum = this.readPage(d);
            if(pageNum !== false){
                pageNum = Math.min(Math.max(1, pageNum), d.pages) - 1;
                this.doLoad(pageNum * this.pageSize);
            }
        }else if (k == e.HOME || k == e.END){
            e.stopEvent();
            pageNum = k == e.HOME ? 1 : d.pages;
            this.field.dom.value = pageNum;
        }else if (k == e.UP || k == e.PAGEUP || k == e.DOWN || k == e.PAGEDOWN){
            e.stopEvent();
            if(pageNum = this.readPage(d)){
                var increment = e.shiftKey ? 10 : 1;
                if(k == e.DOWN || k == e.PAGEDOWN){
                    increment *= -1;
                }
                pageNum += increment;
                if(pageNum >= 1 & pageNum <= d.pages){
                    this.field.dom.value = pageNum;
                }
            }
        }
    },

    // private
    beforeLoad : function(){
        if(this.rendered && this.loading){
            this.loading.disable();
        }
    },

    // private
    doLoad : function(start){
        var o = {}, pn = this.paramNames;
        o[pn.start] = start;
        o[pn.limit] = this.pageSize;
        if(this.fireEvent('beforechange', this, o) !== false){
            this.store.load({params:o});
        }
    },

    
    changePage: function(page){
        this.doLoad(((page-1) * this.pageSize).constrain(0, this.store.getTotalCount()));
    },

    // private
    onClick : function(which){
        var store = this.store;
        switch(which){
            case "first":
                this.doLoad(0);
            break;
            case "prev":
                this.doLoad(Math.max(0, this.cursor-this.pageSize));
            break;
            case "next":
                this.doLoad(this.cursor+this.pageSize);
            break;
            case "last":
                var total = store.getTotalCount();
                var extra = total % this.pageSize;
                var lastStart = extra ? (total - extra) : total-this.pageSize;
                this.doLoad(lastStart);
            break;
            case "refresh":
                this.doLoad(this.cursor);
            break;
        }
    },

    
    unbind : function(store){
        store = Ext.StoreMgr.lookup(store);
        store.un("beforeload", this.beforeLoad, this);
        store.un("load", this.onLoad, this);
        store.un("loadexception", this.onLoadError, this);
        this.store = undefined;
    },

    
    bind : function(store){
        store = Ext.StoreMgr.lookup(store);
        store.on("beforeload", this.beforeLoad, this);
        store.on("load", this.onLoad, this);
        store.on("loadexception", this.onLoadError, this);
        this.store = store;
    },

    // private
    onDestroy : function(){
        if(this.store){
            this.unbind(this.store);
        }
        Ext.PagingToolbar.superclass.onDestroy.call(this);
    }
});
Ext.reg('paging', Ext.PagingToolbar);

Ext.Resizable = function(el, config){
    this.el = Ext.get(el);
    
    if(config && config.wrap){
        config.resizeChild = this.el;
        this.el = this.el.wrap(typeof config.wrap == "object" ? config.wrap : {cls:"xresizable-wrap"});
        this.el.id = this.el.dom.id = config.resizeChild.id + "-rzwrap";
        this.el.setStyle("overflow", "hidden");
        this.el.setPositioning(config.resizeChild.getPositioning());
        config.resizeChild.clearPositioning();
        if(!config.width || !config.height){
            var csize = config.resizeChild.getSize();
            this.el.setSize(csize.width, csize.height);
        }
        if(config.pinned && !config.adjustments){
            config.adjustments = "auto";
        }
    }

    
    this.proxy = this.el.createProxy({tag: "div", cls: "x-resizable-proxy", id: this.el.id + "-rzproxy"}, Ext.getBody());
    this.proxy.unselectable();
    this.proxy.enableDisplayMode('block');

    Ext.apply(this, config);
    
    if(this.pinned){
        this.disableTrackOver = true;
        this.el.addClass("x-resizable-pinned");
    }
    // if the element isn't positioned, make it relative
    var position = this.el.getStyle("position");
    if(position != "absolute" && position != "fixed"){
        this.el.setStyle("position", "relative");
    }
    if(!this.handles){ // no handles passed, must be legacy style
        this.handles = 's,e,se';
        if(this.multiDirectional){
            this.handles += ',n,w';
        }
    }
    if(this.handles == "all"){
        this.handles = "n s e w ne nw se sw";
    }
    var hs = this.handles.split(/\s*?[,;]\s*?| /);
    var ps = Ext.Resizable.positions;
    for(var i = 0, len = hs.length; i < len; i++){
        if(hs[i] && ps[hs[i]]){
            var pos = ps[hs[i]];
            this[pos] = new Ext.Resizable.Handle(this, pos, this.disableTrackOver, this.transparent);
        }
    }
    // legacy
    this.corner = this.southeast;
    
    if(this.handles.indexOf("n") != -1 || this.handles.indexOf("w") != -1){
        this.updateBox = true;
    }   
   
    this.activeHandle = null;
    
    if(this.resizeChild){
        if(typeof this.resizeChild == "boolean"){
            this.resizeChild = Ext.get(this.el.dom.firstChild, true);
        }else{
            this.resizeChild = Ext.get(this.resizeChild, true);
        }
    }
    
    if(this.adjustments == "auto"){
        var rc = this.resizeChild;
        var hw = this.west, he = this.east, hn = this.north, hs = this.south;
        if(rc && (hw || hn)){
            rc.position("relative");
            rc.setLeft(hw ? hw.el.getWidth() : 0);
            rc.setTop(hn ? hn.el.getHeight() : 0);
        }
        this.adjustments = [
            (he ? -he.el.getWidth() : 0) + (hw ? -hw.el.getWidth() : 0),
            (hn ? -hn.el.getHeight() : 0) + (hs ? -hs.el.getHeight() : 0) -1 
        ];
    }
    
    if(this.draggable){
        this.dd = this.dynamic ? 
            this.el.initDD(null) : this.el.initDDProxy(null, {dragElId: this.proxy.id});
        this.dd.setHandleElId(this.resizeChild ? this.resizeChild.id : this.el.id);
    }
    
    // public events
    this.addEvents(
        "beforeresize",
        "resize"
    );
    
    if(this.width !== null && this.height !== null){
        this.resizeTo(this.width, this.height);
    }else{
        this.updateChildSize();
    }
    if(Ext.isIE){
        this.el.dom.style.zoom = 1;
    }
    Ext.Resizable.superclass.constructor.call(this);
};

Ext.extend(Ext.Resizable, Ext.util.Observable, {
        resizeChild : false,
        adjustments : [0, 0],
        minWidth : 5,
        minHeight : 5,
        maxWidth : 10000,
        maxHeight : 10000,
        enabled : true,
        animate : false,
        duration : .35,
        dynamic : false,
        handles : false,
        multiDirectional : false,
        disableTrackOver : false,
        easing : 'easeOutStrong',
        widthIncrement : 0,
        heightIncrement : 0,
        pinned : false,
        width : null,
        height : null,
        preserveRatio : false,
        transparent: false,
        minX: 0,
        minY: 0,
        draggable: false,

        
        

        
        
    
    
    resizeTo : function(width, height){
        this.el.setSize(width, height);
        this.updateChildSize();
        this.fireEvent("resize", this, width, height, null);
    },

    // private
    startSizing : function(e, handle){
        this.fireEvent("beforeresize", this, e);
        if(this.enabled){ // 2nd enabled check in case disabled before beforeresize handler

            if(!this.overlay){
                this.overlay = this.el.createProxy({tag: "div", cls: "x-resizable-overlay", html: "&#160;"}, Ext.getBody());
                this.overlay.unselectable();
                this.overlay.enableDisplayMode("block");
                this.overlay.on("mousemove", this.onMouseMove, this);
                this.overlay.on("mouseup", this.onMouseUp, this);
            }
            this.overlay.setStyle("cursor", handle.el.getStyle("cursor"));

            this.resizing = true;
            this.startBox = this.el.getBox();
            this.startPoint = e.getXY();
            this.offsets = [(this.startBox.x + this.startBox.width) - this.startPoint[0],
                            (this.startBox.y + this.startBox.height) - this.startPoint[1]];

            this.overlay.setSize(Ext.lib.Dom.getViewWidth(true), Ext.lib.Dom.getViewHeight(true));
            this.overlay.show();

            if(this.constrainTo) {
                var ct = Ext.get(this.constrainTo);
                this.resizeRegion = ct.getRegion().adjust(
                    ct.getFrameWidth('t'),
                    ct.getFrameWidth('l'),
                    -ct.getFrameWidth('b'),
                    -ct.getFrameWidth('r')
                );
            }

            this.proxy.setStyle('visibility', 'hidden'); // workaround display none
            this.proxy.show();
            this.proxy.setBox(this.startBox);
            if(!this.dynamic){
                this.proxy.setStyle('visibility', 'visible');
            }
        }
    },

    // private
    onMouseDown : function(handle, e){
        if(this.enabled){
            e.stopEvent();
            this.activeHandle = handle;
            this.startSizing(e, handle);
        }          
    },

    // private
    onMouseUp : function(e){
        var size = this.resizeElement();
        this.resizing = false;
        this.handleOut();
        this.overlay.hide();
        this.proxy.hide();
        this.fireEvent("resize", this, size.width, size.height, e);
    },

    // private
    updateChildSize : function(){
        if(this.resizeChild){
            var el = this.el;
            var child = this.resizeChild;
            var adj = this.adjustments;
            if(el.dom.offsetWidth){
                var b = el.getSize(true);
                child.setSize(b.width+adj[0], b.height+adj[1]);
            }
            // Second call here for IE
            // The first call enables instant resizing and
            // the second call corrects scroll bars if they
            // exist
            if(Ext.isIE){
                setTimeout(function(){
                    if(el.dom.offsetWidth){
                        var b = el.getSize(true);
                        child.setSize(b.width+adj[0], b.height+adj[1]);
                    }
                }, 10);
            }
        }
    },

    // private
    snap : function(value, inc, min){
        if(!inc || !value) return value;
        var newValue = value;
        var m = value % inc;
        if(m > 0){
            if(m > (inc/2)){
                newValue = value + (inc-m);
            }else{
                newValue = value - m;
            }
        }
        return Math.max(min, newValue);
    },

    
    resizeElement : function(){
        var box = this.proxy.getBox();
        if(this.updateBox){
            this.el.setBox(box, false, this.animate, this.duration, null, this.easing);
        }else{
            this.el.setSize(box.width, box.height, this.animate, this.duration, null, this.easing);
        }
        this.updateChildSize();
        if(!this.dynamic){
            this.proxy.hide();
        }
        return box;
    },

    // private
    constrain : function(v, diff, m, mx){
        if(v - diff < m){
            diff = v - m;    
        }else if(v - diff > mx){
            diff = mx - v; 
        }
        return diff;                
    },

    // private
    onMouseMove : function(e){
        if(this.enabled){
            try{// try catch so if something goes wrong the user doesn't get hung

            if(this.resizeRegion && !this.resizeRegion.contains(e.getPoint())) {
                return;
            }

            //var curXY = this.startPoint;
            var curSize = this.curSize || this.startBox;
            var x = this.startBox.x, y = this.startBox.y;
            var ox = x, oy = y;
            var w = curSize.width, h = curSize.height;
            var ow = w, oh = h;
            var mw = this.minWidth, mh = this.minHeight;
            var mxw = this.maxWidth, mxh = this.maxHeight;
            var wi = this.widthIncrement;
            var hi = this.heightIncrement;
            
            var eventXY = e.getXY();
            var diffX = -(this.startPoint[0] - Math.max(this.minX, eventXY[0]));
            var diffY = -(this.startPoint[1] - Math.max(this.minY, eventXY[1]));
            
            var pos = this.activeHandle.position;
            
            switch(pos){
                case "east":
                    w += diffX; 
                    w = Math.min(Math.max(mw, w), mxw);
                    break;
                case "south":
                    h += diffY;
                    h = Math.min(Math.max(mh, h), mxh);
                    break;
                case "southeast":
                    w += diffX; 
                    h += diffY;
                    w = Math.min(Math.max(mw, w), mxw);
                    h = Math.min(Math.max(mh, h), mxh);
                    break;
                case "north":
                    diffY = this.constrain(h, diffY, mh, mxh);
                    y += diffY;
                    h -= diffY;
                    break;
                case "west":
                    diffX = this.constrain(w, diffX, mw, mxw);
                    x += diffX;
                    w -= diffX;
                    break;
                case "northeast":
                    w += diffX; 
                    w = Math.min(Math.max(mw, w), mxw);
                    diffY = this.constrain(h, diffY, mh, mxh);
                    y += diffY;
                    h -= diffY;
                    break;
                case "northwest":
                    diffX = this.constrain(w, diffX, mw, mxw);
                    diffY = this.constrain(h, diffY, mh, mxh);
                    y += diffY;
                    h -= diffY;
                    x += diffX;
                    w -= diffX;
                    break;
               case "southwest":
                    diffX = this.constrain(w, diffX, mw, mxw);
                    h += diffY;
                    h = Math.min(Math.max(mh, h), mxh);
                    x += diffX;
                    w -= diffX;
                    break;
            }
            
            var sw = this.snap(w, wi, mw);
            var sh = this.snap(h, hi, mh);
            if(sw != w || sh != h){
                switch(pos){
                    case "northeast":
                        y -= sh - h;
                    break;
                    case "north":
                        y -= sh - h;
                        break;
                    case "southwest":
                        x -= sw - w;
                    break;
                    case "west":
                        x -= sw - w;
                        break;
                    case "northwest":
                        x -= sw - w;
                        y -= sh - h;
                    break;
                }
                w = sw;
                h = sh;
            }
            
            if(this.preserveRatio){
                switch(pos){
                    case "southeast":
                    case "east":
                        h = oh * (w/ow);
                        h = Math.min(Math.max(mh, h), mxh);
                        w = ow * (h/oh);
                       break;
                    case "south":
                        w = ow * (h/oh);
                        w = Math.min(Math.max(mw, w), mxw);
                        h = oh * (w/ow);
                        break;
                    case "northeast":
                        w = ow * (h/oh);
                        w = Math.min(Math.max(mw, w), mxw);
                        h = oh * (w/ow);
                    break;
                    case "north":
                        var tw = w;
                        w = ow * (h/oh);
                        w = Math.min(Math.max(mw, w), mxw);
                        h = oh * (w/ow);
                        x += (tw - w) / 2;
                        break;
                    case "southwest":
                        h = oh * (w/ow);
                        h = Math.min(Math.max(mh, h), mxh);
                        var tw = w;
                        w = ow * (h/oh);
                        x += tw - w;
                        break;
                    case "west":
                        var th = h;
                        h = oh * (w/ow);
                        h = Math.min(Math.max(mh, h), mxh);
                        y += (th - h) / 2;
                        var tw = w;
                        w = ow * (h/oh);
                        x += tw - w;
                       break;
                    case "northwest":
                        var tw = w;
                        var th = h;
                        h = oh * (w/ow);
                        h = Math.min(Math.max(mh, h), mxh);
                        w = ow * (h/oh);
                        y += th - h;
                         x += tw - w;
                       break;
                        
                }
            }
            this.proxy.setBounds(x, y, w, h);
            if(this.dynamic){
                this.resizeElement();
            }
            }catch(e){}
        }
    },

    // private
    handleOver : function(){
        if(this.enabled){
            this.el.addClass("x-resizable-over");
        }
    },

    // private
    handleOut : function(){
        if(!this.resizing){
            this.el.removeClass("x-resizable-over");
        }
    },
    
    
    getEl : function(){
        return this.el;
    },
    
    
    getResizeChild : function(){
        return this.resizeChild;
    },
    
    
    destroy : function(removeEl){
        if(this.dd){
            this.dd.destroy();
        }
        if(this.overlay){
            Ext.destroy(this.overlay);
            this.overlay = null;
        }
        Ext.destroy(this.proxy);
        this.proxy = null;
        
        var ps = Ext.Resizable.positions;
        for(var k in ps){
            if(typeof ps[k] != "function" && this[ps[k]]){
                this[ps[k]].destroy();
            }
        }
        if(removeEl){
            this.el.update("");
            Ext.destroy(this.el);
            this.el = null;
        }
    },

    syncHandleHeight : function(){
        var h = this.el.getHeight(true);
        if(this.west){
            this.west.el.setHeight(h);
        }
        if(this.east){
            this.east.el.setHeight(h);
        }
    }
});

// private
// hash to map config positions to true positions
Ext.Resizable.positions = {
    n: "north", s: "south", e: "east", w: "west", se: "southeast", sw: "southwest", nw: "northwest", ne: "northeast"
};

// private
Ext.Resizable.Handle = function(rz, pos, disableTrackOver, transparent){
    if(!this.tpl){
        // only initialize the template if resizable is used
        var tpl = Ext.DomHelper.createTemplate(
            {tag: "div", cls: "x-resizable-handle x-resizable-handle-{0}"}
        );
        tpl.compile();
        Ext.Resizable.Handle.prototype.tpl = tpl;
    }
    this.position = pos;
    this.rz = rz;
    this.el = this.tpl.append(rz.el.dom, [this.position], true);
    this.el.unselectable();
    if(transparent){
        this.el.setOpacity(0);
    }
    this.el.on("mousedown", this.onMouseDown, this);
    if(!disableTrackOver){
        this.el.on("mouseover", this.onMouseOver, this);
        this.el.on("mouseout", this.onMouseOut, this);
    }
};

// private
Ext.Resizable.Handle.prototype = {
    // private
    afterResize : function(rz){
        // do nothing    
    },
    // private
    onMouseDown : function(e){
        this.rz.onMouseDown(this, e);
    },
    // private
    onMouseOver : function(e){
        this.rz.handleOver(this, e);
    },
    // private
    onMouseOut : function(e){
        this.rz.handleOut(this, e);
    },
    // private
    destroy : function(){
        Ext.destroy(this.el);
        this.el = null;
    }
};





Ext.Editor = function(field, config){
    this.field = field;
    Ext.Editor.superclass.constructor.call(this, config);
};

Ext.extend(Ext.Editor, Ext.Component, {
    
    
    
    
    
    value : "",
    
    alignment: "c-c?",
    
    shadow : "frame",
    
    constrain : false,
    
    swallowKeys : true,
    
    completeOnEnter : false,
    
    cancelOnEsc : false,
    
    updateEl : false,

    initComponent : function(){
        Ext.Editor.superclass.initComponent.call(this);
        this.addEvents(
            
            "beforestartedit",
            
            "startedit",
            
            "beforecomplete",
            
            "complete",
            
            "canceledit",
            
            "specialkey"
        );
    },

    // private
    onRender : function(ct, position){
        this.el = new Ext.Layer({
            shadow: this.shadow,
            cls: "x-editor",
            parentEl : ct,
            shim : this.shim,
            shadowOffset:4,
            id: this.id,
            constrain: this.constrain
        });
        this.el.setStyle("overflow", Ext.isGecko ? "auto" : "hidden");
        if(this.field.msgTarget != 'title'){
            this.field.msgTarget = 'qtip';
        }
        this.field.inEditor = true;
        this.field.render(this.el);
        if(Ext.isGecko){
            this.field.el.dom.setAttribute('autocomplete', 'off');
        }
        this.field.on("specialkey", this.onSpecialKey, this);
        if(this.swallowKeys){
            this.field.el.swallowEvent(['keydown','keypress']);
        }
        this.field.show();
        this.field.on("blur", this.onBlur, this);
        if(this.field.grow){
            this.field.on("autosize", this.el.sync,  this.el, {delay:1});
        }
    },

    // private
    onSpecialKey : function(field, e){
        var key = e.getKey();
        if(this.completeOnEnter && key == e.ENTER){
            e.stopEvent();
            this.completeEdit();
        }else if(this.cancelOnEsc && key == e.ESC){
            this.cancelEdit();
        }else{
            this.fireEvent('specialkey', field, e);
        }
        if(this.field.triggerBlur && (key == e.ENTER || key == e.ESC || key == e.TAB)){
            this.field.triggerBlur();
        }
    },

    
    startEdit : function(el, value){
        if(this.editing){
            this.completeEdit();
        }
        this.boundEl = Ext.get(el);
        var v = value !== undefined ? value : this.boundEl.dom.innerHTML;
        if(!this.rendered){
            this.render(this.parentEl || document.body);
        }
        if(this.fireEvent("beforestartedit", this, this.boundEl, v) === false){
            return;
        }
        this.startValue = v;
        this.field.setValue(v);
        this.doAutoSize();
        this.el.alignTo(this.boundEl, this.alignment);
        this.editing = true;
        this.show();
    },

    // private
    doAutoSize : function(){
        if(this.autoSize){
            var sz = this.boundEl.getSize();
            switch(this.autoSize){
                case "width":
                    this.setSize(sz.width,  "");
                break;
                case "height":
                    this.setSize("",  sz.height);
                break;
                default:
                    this.setSize(sz.width,  sz.height);
            }
        }
    },

    
    setSize : function(w, h){
        delete this.field.lastSize;
        this.field.setSize(w, h);
        if(this.el){
	        if(Ext.isGecko2 || Ext.isOpera){
	            // prevent layer scrollbars
	            this.el.setSize(w, h);
	        }
            this.el.sync();
        }
    },

    
    realign : function(){
        this.el.alignTo(this.boundEl, this.alignment);
    },

    
    completeEdit : function(remainVisible){
        if(!this.editing){
            return;
        }
        var v = this.getValue();
        if(this.revertInvalid !== false && !this.field.isValid()){
            v = this.startValue;
            this.cancelEdit(true);
        }
        if(String(v) === String(this.startValue) && this.ignoreNoChange){
            this.editing = false;
            this.hide();
            return;
        }
        if(this.fireEvent("beforecomplete", this, v, this.startValue) !== false){
            this.editing = false;
            if(this.updateEl && this.boundEl){
                this.boundEl.update(v);
            }
            if(remainVisible !== true){
                this.hide();
            }
            this.fireEvent("complete", this, v, this.startValue);
        }
    },

    // private
    onShow : function(){
        this.el.show();
        if(this.hideEl !== false){
            this.boundEl.hide();
        }
        this.field.show();
        if(Ext.isIE && !this.fixIEFocus){ // IE has problems with focusing the first time
            this.fixIEFocus = true;
            this.deferredFocus.defer(50, this);
        }else{
            this.field.focus();
        }
        this.fireEvent("startedit", this.boundEl, this.startValue);
    },

    deferredFocus : function(){
        if(this.editing){
            this.field.focus();
        }
    },

    
    cancelEdit : function(remainVisible){
        if(this.editing){
            var v = this.getValue();
            this.setValue(this.startValue);
            if(remainVisible !== true){
                this.hide();
            }
            this.fireEvent("canceledit", this, v, this.startValue);
        }
    },

    // private
    onBlur : function(){
        if(this.allowBlur !== true && this.editing){
            this.completeEdit();
        }
    },

    // private
    onHide : function(){
        if(this.editing){
            this.completeEdit();
            return;
        }
        this.field.blur();
        if(this.field.collapse){
            this.field.collapse();
        }
        this.el.hide();
        if(this.hideEl !== false){
            this.boundEl.show();
        }
    },

    
    setValue : function(v){
        this.field.setValue(v);
    },

    
    getValue : function(){
        return this.field.getValue();
    },

    beforeDestroy : function(){
        Ext.destroy(this.field);
        this.field = null;
    }
});
Ext.reg('editor', Ext.Editor);

Ext.MessageBox = function(){
    var dlg, opt, mask, waitTimer;
    var bodyEl, msgEl, textboxEl, textareaEl, progressBar, pp, iconEl, spacerEl;
    var buttons, activeTextEl, bwidth, iconCls = '';

    // private
    var handleButton = function(button){
        if(dlg.isVisible()){
            dlg.hide();
            Ext.callback(opt.fn, opt.scope||window, [button, activeTextEl.dom.value, opt], 1);
        }
    };

    // private
    var handleHide = function(){
        if(opt && opt.cls){
            dlg.el.removeClass(opt.cls);
        }
        progressBar.reset();
    };

    // private
    var handleEsc = function(d, k, e){
        if(opt && opt.closable !== false){
            dlg.hide();
        }
        if(e){
            e.stopEvent();
        }
    };

    // private
    var updateButtons = function(b){
        var width = 0;
        if(!b){
            buttons["ok"].hide();
            buttons["cancel"].hide();
            buttons["yes"].hide();
            buttons["no"].hide();
            return width;
        }
        dlg.footer.dom.style.display = '';
        for(var k in buttons){
            if(typeof buttons[k] != "function"){
                if(b[k]){
                    buttons[k].show();
                    buttons[k].setText(typeof b[k] == "string" ? b[k] : Ext.MessageBox.buttonText[k]);
                    width += buttons[k].el.getWidth()+15;
                }else{
                    buttons[k].hide();
                }
            }
        }
        return width;
    };

    return {
        
        getDialog : function(titleText){
           if(!dlg){
                dlg = new Ext.Window({
                    autoCreate : true,
                    title:titleText,
                    resizable:false,
                    constrain:true,
                    constrainHeader:true,
                    minimizable : false,
                    maximizable : false,
                    stateful: false,
                    modal: true,
                    shim:true,
                    buttonAlign:"center",
                    width:400,
                    height:100,
                    minHeight: 80,
                    plain:true,
                    footer:true,
                    closable:true,
                    close : function(){
                        if(opt && opt.buttons && opt.buttons.no && !opt.buttons.cancel){
                            handleButton("no");
                        }else{
                            handleButton("cancel");
                        }
                    }
                });
                buttons = {};
                var bt = this.buttonText;
                //TODO: refactor this block into a buttons config to pass into the Window constructor
                buttons["ok"] = dlg.addButton(bt["ok"], handleButton.createCallback("ok"));
                buttons["yes"] = dlg.addButton(bt["yes"], handleButton.createCallback("yes"));
                buttons["no"] = dlg.addButton(bt["no"], handleButton.createCallback("no"));
                buttons["cancel"] = dlg.addButton(bt["cancel"], handleButton.createCallback("cancel"));
                buttons["ok"].hideMode = buttons["yes"].hideMode = buttons["no"].hideMode = buttons["cancel"].hideMode = 'offsets';
                dlg.render(document.body);
                dlg.getEl().addClass('x-window-dlg');
                mask = dlg.mask;
                bodyEl = dlg.body.createChild({
                    html:'<div class="ext-mb-icon"></div><div class="ext-mb-content"><span class="ext-mb-text"></span><br /><div class="ext-mb-fix-cursor"><input type="text" class="ext-mb-input" /><textarea class="ext-mb-textarea"></textarea></div></div>'
                });
                iconEl = Ext.get(bodyEl.dom.firstChild);
                var contentEl = bodyEl.dom.childNodes[1];
                msgEl = Ext.get(contentEl.firstChild);
                textboxEl = Ext.get(contentEl.childNodes[2].firstChild);
                textboxEl.enableDisplayMode();
                textboxEl.addKeyListener([10,13], function(){
                    if(dlg.isVisible() && opt && opt.buttons){
                        if(opt.buttons.ok){
                            handleButton("ok");
                        }else if(opt.buttons.yes){
                            handleButton("yes");
                        }
                    }
                });
                textareaEl = Ext.get(contentEl.childNodes[2].childNodes[1]);
                textareaEl.enableDisplayMode();
                progressBar = new Ext.ProgressBar({
                    renderTo:bodyEl
                });
               bodyEl.createChild({cls:'x-clear'});
            }
            return dlg;
        },

        
        updateText : function(text){
            if(!dlg.isVisible() && !opt.width){
                dlg.setSize(this.maxWidth, 100); // resize first so content is never clipped from previous shows
            }
            msgEl.update(text || '&#160;');

            var iw = iconCls != '' ? (iconEl.getWidth() + iconEl.getMargins('lr')) : 0;
            var mw = msgEl.getWidth() + msgEl.getMargins('lr');
            var fw = dlg.getFrameWidth('lr');
            var bw = dlg.body.getFrameWidth('lr');
            if (Ext.isIE && iw > 0){
                //3 pixels get subtracted in the icon CSS for an IE margin issue,
                //so we have to add it back here for the overall width to be consistent
                iw += 3;
            }
            var w = Math.max(Math.min(opt.width || iw+mw+fw+bw, this.maxWidth),
                        Math.max(opt.minWidth || this.minWidth, bwidth || 0));

            if(opt.prompt === true){
                activeTextEl.setWidth(w-iw-fw-bw);
            }
            if(opt.progress === true || opt.wait === true){
                progressBar.setSize(w-iw-fw-bw);
            }
            if(Ext.isIE && w == bwidth){
                w += 4; //Add offset when the content width is smaller than the buttons.    
            }
            dlg.setSize(w, 'auto').center();
            return this;
        },

        
        updateProgress : function(value, progressText, msg){
            progressBar.updateProgress(value, progressText);
            if(msg){
                this.updateText(msg);
            }
            return this;
        },

        
        isVisible : function(){
            return dlg && dlg.isVisible();
        },

        
        hide : function(){
            var proxy = dlg.activeGhost;
            if(this.isVisible() || proxy) {
                dlg.hide();
                handleHide();
                if (proxy) {
                    proxy.hide();
                } 
            }
            return this;
        },

        
        show : function(options){
            if(this.isVisible()){
                this.hide();
            }
            opt = options;
            var d = this.getDialog(opt.title || "&#160;");

            d.setTitle(opt.title || "&#160;");
            var allowClose = (opt.closable !== false && opt.progress !== true && opt.wait !== true);
            d.tools.close.setDisplayed(allowClose);
            activeTextEl = textboxEl;
            opt.prompt = opt.prompt || (opt.multiline ? true : false);
            if(opt.prompt){
                if(opt.multiline){
                    textboxEl.hide();
                    textareaEl.show();
                    textareaEl.setHeight(typeof opt.multiline == "number" ?
                        opt.multiline : this.defaultTextHeight);
                    activeTextEl = textareaEl;
                }else{
                    textboxEl.show();
                    textareaEl.hide();
                }
            }else{
                textboxEl.hide();
                textareaEl.hide();
            }
            activeTextEl.dom.value = opt.value || "";
            if(opt.prompt){
                d.focusEl = activeTextEl;
            }else{
                var bs = opt.buttons;
                var db = null;
                if(bs && bs.ok){
                    db = buttons["ok"];
                }else if(bs && bs.yes){
                    db = buttons["yes"];
                }
                if (db){
                    d.focusEl = db;
                }
            }
            if(opt.iconCls){
              d.setIconClass(opt.iconCls);
            }
            this.setIcon(opt.icon);
            bwidth = updateButtons(opt.buttons);
            progressBar.setVisible(opt.progress === true || opt.wait === true);
            this.updateProgress(0, opt.progressText);
            this.updateText(opt.msg);
            if(opt.cls){
                d.el.addClass(opt.cls);
            }
            d.proxyDrag = opt.proxyDrag === true;
            d.modal = opt.modal !== false;
            d.mask = opt.modal !== false ? mask : false;
            if(!d.isVisible()){
                // force it to the end of the z-index stack so it gets a cursor in FF
                document.body.appendChild(dlg.el.dom);
                d.setAnimateTarget(opt.animEl);
                d.show(opt.animEl);
            }

            //workaround for window internally enabling keymap in afterShow
            d.on('show', function(){
                if(allowClose === true){
                    d.keyMap.enable();
                }else{
                    d.keyMap.disable();
                }
            }, this, {single:true});

            if(opt.wait === true){
                progressBar.wait(opt.waitConfig);
            }
            return this;
        },

        
        setIcon : function(icon){
            if(icon && icon != ''){
                iconEl.removeClass('x-hidden');
                iconEl.replaceClass(iconCls, icon);
                iconCls = icon;
            }else{
                iconEl.replaceClass(iconCls, 'x-hidden');
                iconCls = '';
            }
            return this;
        },

        
        progress : function(title, msg, progressText){
            this.show({
                title : title,
                msg : msg,
                buttons: false,
                progress:true,
                closable:false,
                minWidth: this.minProgressWidth,
                progressText: progressText
            });
            return this;
        },

        
        wait : function(msg, title, config){
            this.show({
                title : title,
                msg : msg,
                buttons: false,
                closable:false,
                wait:true,
                modal:true,
                minWidth: this.minProgressWidth,
                waitConfig: config
            });
            return this;
        },

        
        alert : function(title, msg, fn, scope){
            this.show({
                title : title,
                msg : msg,
                buttons: this.OK,
                fn: fn,
                scope : scope
            });
            return this;
        },

        
        confirm : function(title, msg, fn, scope){
            this.show({
                title : title,
                msg : msg,
                buttons: this.YESNO,
                fn: fn,
                scope : scope,
                icon: this.QUESTION
            });
            return this;
        },

        
        prompt : function(title, msg, fn, scope, multiline, value){
            this.show({
                title : title,
                msg : msg,
                buttons: this.OKCANCEL,
                fn: fn,
                minWidth:250,
                scope : scope,
                prompt:true,
                multiline: multiline,
                value: value
            });
            return this;
        },

        
        OK : {ok:true},
        
        CANCEL : {cancel:true},
        
        OKCANCEL : {ok:true, cancel:true},
        
        YESNO : {yes:true, no:true},
        
        YESNOCANCEL : {yes:true, no:true, cancel:true},
        
        INFO : 'ext-mb-info',
        
        WARNING : 'ext-mb-warning',
        
        QUESTION : 'ext-mb-question',
        
        ERROR : 'ext-mb-error',

        
        defaultTextHeight : 75,
        
        maxWidth : 600,
        
        minWidth : 100,
        
        minProgressWidth : 250,
        
        buttonText : {
            ok : "OK",
            cancel : "Cancel",
            yes : "Yes",
            no : "No"
        }
    };
}();


Ext.Msg = Ext.MessageBox;

Ext.Tip = Ext.extend(Ext.Panel, {
    
    
    
    minWidth : 40,
    
    maxWidth : 300,
    
    shadow : "sides",
    
    defaultAlign : "tl-bl?",
    autoRender: true,
    quickShowInterval : 250,

    // private panel overrides
    frame:true,
    hidden:true,
    baseCls: 'x-tip',
    floating:{shadow:true,shim:true,useDisplay:true,constrain:false},
    autoHeight:true,

    // private
    initComponent : function(){
        Ext.Tip.superclass.initComponent.call(this);
        if(this.closable && !this.title){
            this.elements += ',header';
        }
    },

    // private
    afterRender : function(){
        Ext.Tip.superclass.afterRender.call(this);
        if(this.closable){
            this.addTool({
                id: 'close',
                handler: this.hide,
                scope: this
            });
        }
    },

    
    showAt : function(xy){
        Ext.Tip.superclass.show.call(this);
        if(this.measureWidth !== false && (!this.initialConfig || typeof this.initialConfig.width != 'number')){
            this.doAutoWidth();
        }
        if(this.constrainPosition){
            xy = this.el.adjustForConstraints(xy);
        }
        this.setPagePosition(xy[0], xy[1]);
    },

    // protected
    doAutoWidth : function(){
        var bw = this.body.getTextWidth();
        if(this.title){
            bw = Math.max(bw, this.header.child('span').getTextWidth(this.title));
        }
        bw += this.getFrameWidth() + (this.closable ? 20 : 0) + this.body.getPadding("lr");
        this.setWidth(bw.constrain(this.minWidth, this.maxWidth));
        
        // IE7 repaint bug on initial show
        if(Ext.isIE7 && !this.repainted){
            this.el.repaint();
            this.repainted = true;
        }
    },

    
    showBy : function(el, pos){
        if(!this.rendered){
            this.render(Ext.getBody());
        }
        this.showAt(this.el.getAlignToXY(el, pos || this.defaultAlign));
    },

    initDraggable : function(){
        this.dd = new Ext.Tip.DD(this, typeof this.draggable == 'boolean' ? null : this.draggable);
        this.header.addClass('x-tip-draggable');
    }
});

// private - custom Tip DD implementation
Ext.Tip.DD = function(tip, config){
    Ext.apply(this, config);
    this.tip = tip;
    Ext.Tip.DD.superclass.constructor.call(this, tip.el.id, 'WindowDD-'+tip.id);
    this.setHandleElId(tip.header.id);
    this.scroll = false;
};

Ext.extend(Ext.Tip.DD, Ext.dd.DD, {
    moveOnly:true,
    scroll:false,
    headerOffsets:[100, 25],
    startDrag : function(){
        this.tip.el.disableShadow();
    },
    endDrag : function(e){
        this.tip.el.enableShadow(true);
    }
});

Ext.ToolTip = Ext.extend(Ext.Tip, {
    
    
    
    showDelay: 500,
    
    hideDelay: 200,
    
    dismissDelay: 5000,
    
    mouseOffset: [15,18],
    
    trackMouse : false,
    constrainPosition: true,

    // private
    initComponent: function(){
        Ext.ToolTip.superclass.initComponent.call(this);
        this.lastActive = new Date();
        this.initTarget();
    },

    // private
    initTarget : function(){
        if(this.target){
            this.target = Ext.get(this.target);
            this.target.on('mouseover', this.onTargetOver, this);
            this.target.on('mouseout', this.onTargetOut, this);
            this.target.on('mousemove', this.onMouseMove, this);
        }
    },

    // private
    onMouseMove : function(e){
        this.targetXY = e.getXY();
        if(!this.hidden && this.trackMouse){
            this.setPagePosition(this.getTargetXY());
        }
    },

    // private
    getTargetXY : function(){
        return [this.targetXY[0]+this.mouseOffset[0], this.targetXY[1]+this.mouseOffset[1]];
    },

    // private
    onTargetOver : function(e){
        if(this.disabled || e.within(this.target.dom, true)){
            return;
        }
        this.clearTimer('hide');
        this.targetXY = e.getXY();
        this.delayShow();
    },

    // private
    delayShow : function(){
        if(this.hidden && !this.showTimer){
            if(this.lastActive.getElapsed() < this.quickShowInterval){
                this.show();
            }else{
                this.showTimer = this.show.defer(this.showDelay, this);
            }
        }else if(!this.hidden && this.autoHide !== false){
            this.show();
        }
    },

    // private
    onTargetOut : function(e){
        if(this.disabled || e.within(this.target.dom, true)){
            return;
        }
        this.clearTimer('show');
        if(this.autoHide !== false){
            this.delayHide();
        }
    },

    // private
    delayHide : function(){
        if(!this.hidden && !this.hideTimer){
            this.hideTimer = this.hide.defer(this.hideDelay, this);
        }
    },

    
    hide: function(){
        this.clearTimer('dismiss');
        this.lastActive = new Date();
        Ext.ToolTip.superclass.hide.call(this);
    },

    
    show : function(){
        this.showAt(this.getTargetXY());
    },

    // inherit docs
    showAt : function(xy){
        this.lastActive = new Date();
        this.clearTimers();
        Ext.ToolTip.superclass.showAt.call(this, xy);
        if(this.dismissDelay && this.autoHide !== false){
            this.dismissTimer = this.hide.defer(this.dismissDelay, this);
        }
    },

    // private
    clearTimer : function(name){
        name = name + 'Timer';
        clearTimeout(this[name]);
        delete this[name];
    },

    // private
    clearTimers : function(){
        this.clearTimer('show');
        this.clearTimer('dismiss');
        this.clearTimer('hide');
    },

    // private
    onShow : function(){
        Ext.ToolTip.superclass.onShow.call(this);
        Ext.getDoc().on('mousedown', this.onDocMouseDown, this);
    },

    // private
    onHide : function(){
        Ext.ToolTip.superclass.onHide.call(this);
        Ext.getDoc().un('mousedown', this.onDocMouseDown, this);
    },

    // private
    onDocMouseDown : function(e){
        if(this.autoHide !== false && !e.within(this.el.dom)){
            this.disable();
            this.enable.defer(100, this);
        }
    },

    // private
    onDisable : function(){
        this.clearTimers();
        this.hide();
    },

    // private
    adjustPosition : function(x, y){
        // keep the position from being under the mouse
        var ay = this.targetXY[1], h = this.getSize().height;
        if(this.constrainPosition && y <= ay && (y+h) >= ay){
            y = ay-h-5;
        }
        return {x : x, y: y};
    },

    // private
    onDestroy : function(){
        Ext.ToolTip.superclass.onDestroy.call(this);
        if(this.target){
            this.target.un('mouseover', this.onTargetOver, this);
            this.target.un('mouseout', this.onTargetOut, this);
            this.target.un('mousemove', this.onMouseMove, this);
        }
    }
});

Ext.QuickTip = Ext.extend(Ext.ToolTip, {
    
    
    interceptTitles : false,

    // private
    tagConfig : {
        namespace : "ext",
        attribute : "qtip",
        width : "qwidth",
        target : "target",
        title : "qtitle",
        hide : "hide",
        cls : "qclass",
        align : "qalign"
    },

    // private
    initComponent : function(){
        this.target = this.target || Ext.getDoc();
        this.targets = this.targets || {};
        Ext.QuickTip.superclass.initComponent.call(this);
    },

    
    register : function(config){
        var cs = Ext.isArray(config) ? config : arguments;
        for(var i = 0, len = cs.length; i < len; i++){
            var c = cs[i];
            var target = c.target;
            if(target){
                if(Ext.isArray(target)){
                    for(var j = 0, jlen = target.length; j < jlen; j++){
                        this.targets[Ext.id(target[j])] = c;
                    }
                } else{
                    this.targets[Ext.id(target)] = c;
                }
            }
        }
    },

    
    unregister : function(el){
        delete this.targets[Ext.id(el)];
    },

    // private
    onTargetOver : function(e){
        if(this.disabled){
            return;
        }
        this.targetXY = e.getXY();
        var t = e.getTarget();
        if(!t || t.nodeType !== 1 || t == document || t == document.body){
            return;
        }
        if(this.activeTarget && t == this.activeTarget.el){
            this.clearTimer('hide');
            this.show();
            return;
        }
        if(t && this.targets[t.id]){
            this.activeTarget = this.targets[t.id];
            this.activeTarget.el = t;
            this.delayShow();
            return;
        }
        var ttp, et = Ext.fly(t), cfg = this.tagConfig;
        var ns = cfg.namespace;
        if(this.interceptTitles && t.title){
            ttp = t.title;
            t.qtip = ttp;
            t.removeAttribute("title");
            e.preventDefault();
        } else{
            ttp = t.qtip || et.getAttributeNS(ns, cfg.attribute);
        }
        if(ttp){
            var autoHide = et.getAttributeNS(ns, cfg.hide);
            this.activeTarget = {
                el: t,
                text: ttp,
                width: et.getAttributeNS(ns, cfg.width),
                autoHide: autoHide != "user" && autoHide !== 'false',
                title: et.getAttributeNS(ns, cfg.title),
                cls: et.getAttributeNS(ns, cfg.cls),
                align: et.getAttributeNS(ns, cfg.align)
            };
            this.delayShow();
        }
    },

    // private
    onTargetOut : function(e){
        this.clearTimer('show');
        if(this.autoHide !== false){
            this.delayHide();
        }
    },

    // inherit docs
    showAt : function(xy){
        var t = this.activeTarget;
        if(t){
            if(!this.rendered){
                this.render(Ext.getBody());
                this.activeTarget = t;
            }
            if(t.width){
                this.setWidth(t.width);
                this.body.setWidth(this.adjustBodyWidth(t.width - this.getFrameWidth()));
                this.measureWidth = false;
            } else{
                this.measureWidth = true;
            }
            this.setTitle(t.title || '');
            this.body.update(t.text);
            this.autoHide = t.autoHide;
            this.dismissDelay = t.dismissDelay || this.dismissDelay;
            if(this.lastCls){
                this.el.removeClass(this.lastCls);
                delete this.lastCls;
            }
            if(t.cls){
                this.el.addClass(t.cls);
                this.lastCls = t.cls;
            }
            if(t.align){ // TODO: this doesn't seem to work consistently
                xy = this.el.getAlignToXY(t.el, t.align);
                this.constrainPosition = false;
            } else{
                this.constrainPosition = true;
            }
        }
        Ext.QuickTip.superclass.showAt.call(this, xy);
    },

    // inherit docs
    hide: function(){
        delete this.activeTarget;
        Ext.QuickTip.superclass.hide.call(this);
    }
});

Ext.QuickTips = function(){
    var tip, locks = [];
    return {
        
        init : function(autoRender){
		    if(!tip){
		        if(!Ext.isReady){
		            Ext.onReady(function(){
		                Ext.QuickTips.init(autoRender);
		            });
		            return;
		        }
		        tip = new Ext.QuickTip({elements:'header,body'});
		        if(autoRender !== false){
		            tip.render(Ext.getBody());
		        }
		    }
        },

        
        enable : function(){
            if(tip){
                locks.pop();
                if(locks.length < 1){
                    tip.enable();
                }
            }
        },

        
        disable : function(){
            if(tip){
                tip.disable();
            }
            locks.push(1);
        },

        
        isEnabled : function(){
            return tip !== undefined && !tip.disabled;
        },

        
        getQuickTip : function(){
            return tip;
        },

        
        register : function(){
            tip.register.apply(tip, arguments);
        },

        
        unregister : function(){
            tip.unregister.apply(tip, arguments);
        },

        
        tips :function(){
            tip.register.apply(tip, arguments);
        }
    }
}();

Ext.tree.TreePanel = Ext.extend(Ext.Panel, {
    rootVisible : true,
    animate: Ext.enableFx,
    lines : true,
    enableDD : false,
    hlDrop : Ext.enableFx,
    pathSeparator: "/",

    initComponent : function(){
        Ext.tree.TreePanel.superclass.initComponent.call(this);

        if(!this.eventModel){
            this.eventModel = new Ext.tree.TreeEventModel(this);
        }
        
        // initialize the loader
        var l = this.loader;
        if(!l){
            l = new Ext.tree.TreeLoader({
                dataUrl: this.dataUrl
            });
        }else if(typeof l == 'object' && !l.load){
            l = new Ext.tree.TreeLoader(l);
        }
        this.loader = l;
        
        this.nodeHash = {};

        
        if(this.root){
           this.setRootNode(this.root);
        }

        this.addEvents(

            
           "append",
           
           "remove",
           
           "movenode",
           
           "insert",
           
           "beforeappend",
           
           "beforeremove",
           
           "beforemovenode",
           
            "beforeinsert",

            
            "beforeload",
            
            "load",
            
            "textchange",
            
            "beforeexpandnode",
            
            "beforecollapsenode",
            
            "expandnode",
            
            "disabledchange",
            
            "collapsenode",
            
            "beforeclick",
            
            "click",
            
            "checkchange",
            
            "dblclick",
            
            "contextmenu",
            
            "beforechildrenrendered",
           
            "startdrag",
            
            "enddrag",
            
            "dragdrop",
            
            "beforenodedrop",
            
            "nodedrop",
             
            "nodedragover"
        );
        if(this.singleExpand){
            this.on("beforeexpandnode", this.restrictExpand, this);
        }
    },

    // private
    proxyNodeEvent : function(ename, a1, a2, a3, a4, a5, a6){
        if(ename == 'collapse' || ename == 'expand' || ename == 'beforecollapse' || ename == 'beforeexpand' || ename == 'move' || ename == 'beforemove'){
            ename = ename+'node';
        }
        // args inline for performance while bubbling events
        return this.fireEvent(ename, a1, a2, a3, a4, a5, a6);
    },


    
    getRootNode : function(){
        return this.root;
    },

    
    setRootNode : function(node){
        if(!node.render){ // attributes passed
            node = this.loader.createNode(node);
        }
        this.root = node;
        node.ownerTree = this;
        node.isRoot = true;
        this.registerNode(node);
        if(!this.rootVisible){
        	var uiP = node.attributes.uiProvider;
        	node.ui = uiP ? new uiP(node) : new Ext.tree.RootTreeNodeUI(node); 
        }
        return node;
    },

    
    getNodeById : function(id){
        return this.nodeHash[id];
    },

    // private
    registerNode : function(node){
        this.nodeHash[node.id] = node;
    },

    // private
    unregisterNode : function(node){
        delete this.nodeHash[node.id];
    },

    // private
    toString : function(){
        return "[Tree"+(this.id?" "+this.id:"")+"]";
    },

    // private
    restrictExpand : function(node){
        var p = node.parentNode;
        if(p){
            if(p.expandedChild && p.expandedChild.parentNode == p){
                p.expandedChild.collapse();
            }
            p.expandedChild = node;
        }
    },

    
    getChecked : function(a, startNode){
        startNode = startNode || this.root;
        var r = [];
        var f = function(){
            if(this.attributes.checked){
                r.push(!a ? this : (a == 'id' ? this.id : this.attributes[a]));
            }
        }
        startNode.cascade(f);
        return r;
    },

    
    getEl : function(){
        return this.el;
    },

    
    getLoader : function(){
        return this.loader;
    },

    
    expandAll : function(){
        this.root.expand(true);
    },

    
    collapseAll : function(){
        this.root.collapse(true);
    },

    
    getSelectionModel : function(){
        if(!this.selModel){
            this.selModel = new Ext.tree.DefaultSelectionModel();
        }
        return this.selModel;
    },

    
    expandPath : function(path, attr, callback){
        attr = attr || "id";
        var keys = path.split(this.pathSeparator);
        var curNode = this.root;
        if(curNode.attributes[attr] != keys[1]){ // invalid root
            if(callback){
                callback(false, null);
            }
            return;
        }
        var index = 1;
        var f = function(){
            if(++index == keys.length){
                if(callback){
                    callback(true, curNode);
                }
                return;
            }
            var c = curNode.findChild(attr, keys[index]);
            if(!c){
                if(callback){
                    callback(false, curNode);
                }
                return;
            }
            curNode = c;
            c.expand(false, false, f);
        };
        curNode.expand(false, false, f);
    },

    
    selectPath : function(path, attr, callback){
        attr = attr || "id";
        var keys = path.split(this.pathSeparator);
        var v = keys.pop();
        if(keys.length > 0){
            var f = function(success, node){
                if(success && node){
                    var n = node.findChild(attr, v);
                    if(n){
                        n.select();
                        if(callback){
                            callback(true, n);
                        }
                    }else if(callback){
                        callback(false, n);
                    }
                }else{
                    if(callback){
                        callback(false, n);
                    }
                }
            };
            this.expandPath(keys.join(this.pathSeparator), attr, f);
        }else{
            this.root.select();
            if(callback){
                callback(true, this.root);
            }
        }
    },

    
    getTreeEl : function(){
        return this.body;
    },

    // private
    onRender : function(ct, position){
        Ext.tree.TreePanel.superclass.onRender.call(this, ct, position);
        this.el.addClass('x-tree');
        this.innerCt = this.body.createChild({tag:"ul",
               cls:"x-tree-root-ct " +
               (this.useArrows ? 'x-tree-arrows' : this.lines ? "x-tree-lines" : "x-tree-no-lines")});
    },

    // private
    initEvents : function(){
        Ext.tree.TreePanel.superclass.initEvents.call(this);

        if(this.containerScroll){
            Ext.dd.ScrollManager.register(this.body);
        }
        if((this.enableDD || this.enableDrop) && !this.dropZone){
           
             this.dropZone = new Ext.tree.TreeDropZone(this, this.dropConfig || {
               ddGroup: this.ddGroup || "TreeDD", appendOnly: this.ddAppendOnly === true
           });
        }
        if((this.enableDD || this.enableDrag) && !this.dragZone){
           
            this.dragZone = new Ext.tree.TreeDragZone(this, this.dragConfig || {
               ddGroup: this.ddGroup || "TreeDD",
               scroll: this.ddScroll
           });
        }
        this.getSelectionModel().init(this);
    },

    // private
    afterRender : function(){
        Ext.tree.TreePanel.superclass.afterRender.call(this);
        this.root.render();
        if(!this.rootVisible){
            this.root.renderChildren();
        }
    },

    onDestroy : function(){
        if(this.rendered){
            this.body.removeAllListeners();
            Ext.dd.ScrollManager.unregister(this.body);
            if(this.dropZone){
                this.dropZone.unreg();
            }
            if(this.dragZone){
               this.dragZone.unreg();
            }
        }
        this.root.destroy();
        this.nodeHash = null;
        Ext.tree.TreePanel.superclass.onDestroy.call(this);
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    



    
    
    
    
    
    
    
    
    
    
    
    
});

Ext.tree.TreePanel.nodeTypes = {};

Ext.reg('treepanel', Ext.tree.TreePanel);
Ext.tree.TreeEventModel = function(tree){
    this.tree = tree;
    this.tree.on('render', this.initEvents, this);
}

Ext.tree.TreeEventModel.prototype = {
    initEvents : function(){
        var el = this.tree.getTreeEl();
        el.on('click', this.delegateClick, this);
        if(this.tree.trackMouseOver !== false){
            el.on('mouseover', this.delegateOver, this);
            el.on('mouseout', this.delegateOut, this);
        }
        el.on('dblclick', this.delegateDblClick, this);
        el.on('contextmenu', this.delegateContextMenu, this);
    },

    getNode : function(e){
        var t;
        if(t = e.getTarget('.x-tree-node-el', 10)){
            var id = Ext.fly(t, '_treeEvents').getAttributeNS('ext', 'tree-node-id');
            if(id){
                return this.tree.getNodeById(id);
            }
        }
        return null;
    },

    getNodeTarget : function(e){
        var t = e.getTarget('.x-tree-node-icon', 1);
        if(!t){
            t = e.getTarget('.x-tree-node-el', 6);
        }
        return t;
    },

    delegateOut : function(e, t){
        if(!this.beforeEvent(e)){
            return;
        }
        if(e.getTarget('.x-tree-ec-icon', 1)){
            var n = this.getNode(e);
            this.onIconOut(e, n);
            if(n == this.lastEcOver){
                delete this.lastEcOver;
            }
        }
        if((t = this.getNodeTarget(e)) && !e.within(t, true)){
            this.onNodeOut(e, this.getNode(e));
        }
    },

    delegateOver : function(e, t){
        if(!this.beforeEvent(e)){
            return;
        }
        if(this.lastEcOver){ // prevent hung highlight
            this.onIconOut(e, this.lastEcOver);
            delete this.lastEcOver;
        }
        if(e.getTarget('.x-tree-ec-icon', 1)){
            this.lastEcOver = this.getNode(e);
            this.onIconOver(e, this.lastEcOver);
        }
        if(t = this.getNodeTarget(e)){
            this.onNodeOver(e, this.getNode(e));
        }
    },

    delegateClick : function(e, t){
        if(!this.beforeEvent(e)){
            return;
        }

        if(e.getTarget('input[type=checkbox]', 1)){
            this.onCheckboxClick(e, this.getNode(e));
        }
        else if(e.getTarget('.x-tree-ec-icon', 1)){
            this.onIconClick(e, this.getNode(e));
        }
        else if(this.getNodeTarget(e)){
            this.onNodeClick(e, this.getNode(e));
        }
    },

    delegateDblClick : function(e, t){
        if(this.beforeEvent(e) && this.getNodeTarget(e)){
            this.onNodeDblClick(e, this.getNode(e));
        }
    },

    delegateContextMenu : function(e, t){
        if(this.beforeEvent(e) && this.getNodeTarget(e)){
            this.onNodeContextMenu(e, this.getNode(e));
        }
    },

    onNodeClick : function(e, node){
        node.ui.onClick(e);
    },

    onNodeOver : function(e, node){
        node.ui.onOver(e);
    },

    onNodeOut : function(e, node){
        node.ui.onOut(e);
    },

    onIconOver : function(e, node){
        node.ui.addClass('x-tree-ec-over');
    },

    onIconOut : function(e, node){
        node.ui.removeClass('x-tree-ec-over');
    },

    onIconClick : function(e, node){
        node.ui.ecClick(e);
    },

    onCheckboxClick : function(e, node){
        node.ui.onCheckChange(e);
    },

    onNodeDblClick : function(e, node){
        node.ui.onDblClick(e);
    },

    onNodeContextMenu : function(e, node){
        node.ui.onContextMenu(e);
    },

    beforeEvent : function(e){
        if(this.disabled){
            e.stopEvent();
            return false;
        }
        return true;
    },

    disable: function(){
        this.disabled = true;
    },

    enable: function(){
        this.disabled = false;
    }
};

Ext.tree.DefaultSelectionModel = function(config){
   this.selNode = null;
   
   this.addEvents(
       
       "selectionchange",

       
       "beforeselect"
   );

    Ext.apply(this, config);
    Ext.tree.DefaultSelectionModel.superclass.constructor.call(this);
};

Ext.extend(Ext.tree.DefaultSelectionModel, Ext.util.Observable, {
    init : function(tree){
        this.tree = tree;
        tree.getTreeEl().on("keydown", this.onKeyDown, this);
        tree.on("click", this.onNodeClick, this);
    },
    
    onNodeClick : function(node, e){
        this.select(node);
    },
    
    
    select : function(node){
        var last = this.selNode;
        if(last != node && this.fireEvent('beforeselect', this, node, last) !== false){
            if(last){
                last.ui.onSelectedChange(false);
            }
            this.selNode = node;
            node.ui.onSelectedChange(true);
            this.fireEvent("selectionchange", this, node, last);
        }
        return node;
    },
    
    
    unselect : function(node){
        if(this.selNode == node){
            this.clearSelections();
        }    
    },
    
    
    clearSelections : function(){
        var n = this.selNode;
        if(n){
            n.ui.onSelectedChange(false);
            this.selNode = null;
            this.fireEvent("selectionchange", this, null);
        }
        return n;
    },
    
    
    getSelectedNode : function(){
        return this.selNode;    
    },
    
    
    isSelected : function(node){
        return this.selNode == node;  
    },

    
    selectPrevious : function(){
        var s = this.selNode || this.lastSelNode;
        if(!s){
            return null;
        }
        var ps = s.previousSibling;
        if(ps){
            if(!ps.isExpanded() || ps.childNodes.length < 1){
                return this.select(ps);
            } else{
                var lc = ps.lastChild;
                while(lc && lc.isExpanded() && lc.childNodes.length > 0){
                    lc = lc.lastChild;
                }
                return this.select(lc);
            }
        } else if(s.parentNode && (this.tree.rootVisible || !s.parentNode.isRoot)){
            return this.select(s.parentNode);
        }
        return null;
    },

    
    selectNext : function(){
        var s = this.selNode || this.lastSelNode;
        if(!s){
            return null;
        }
        if(s.firstChild && s.isExpanded()){
             return this.select(s.firstChild);
         }else if(s.nextSibling){
             return this.select(s.nextSibling);
         }else if(s.parentNode){
            var newS = null;
            s.parentNode.bubble(function(){
                if(this.nextSibling){
                    newS = this.getOwnerTree().selModel.select(this.nextSibling);
                    return false;
                }
            });
            return newS;
         }
        return null;
    },

    onKeyDown : function(e){
        var s = this.selNode || this.lastSelNode;
        // undesirable, but required
        var sm = this;
        if(!s){
            return;
        }
        var k = e.getKey();
        switch(k){
             case e.DOWN:
                 e.stopEvent();
                 this.selectNext();
             break;
             case e.UP:
                 e.stopEvent();
                 this.selectPrevious();
             break;
             case e.RIGHT:
                 e.preventDefault();
                 if(s.hasChildNodes()){
                     if(!s.isExpanded()){
                         s.expand();
                     }else if(s.firstChild){
                         this.select(s.firstChild, e);
                     }
                 }
             break;
             case e.LEFT:
                 e.preventDefault();
                 if(s.hasChildNodes() && s.isExpanded()){
                     s.collapse();
                 }else if(s.parentNode && (this.tree.rootVisible || s.parentNode != this.tree.getRootNode())){
                     this.select(s.parentNode, e);
                 }
             break;
        };
    }
});


Ext.tree.MultiSelectionModel = function(config){
   this.selNodes = [];
   this.selMap = {};
   this.addEvents(
       
       "selectionchange"
   );
    Ext.apply(this, config);
    Ext.tree.MultiSelectionModel.superclass.constructor.call(this);
};

Ext.extend(Ext.tree.MultiSelectionModel, Ext.util.Observable, {
    init : function(tree){
        this.tree = tree;
        tree.getTreeEl().on("keydown", this.onKeyDown, this);
        tree.on("click", this.onNodeClick, this);
    },
    
    onNodeClick : function(node, e){
        this.select(node, e, e.ctrlKey);
    },
    
    
    select : function(node, e, keepExisting){
        if(keepExisting !== true){
            this.clearSelections(true);
        }
        if(this.isSelected(node)){
            this.lastSelNode = node;
            return node;
        }
        this.selNodes.push(node);
        this.selMap[node.id] = node;
        this.lastSelNode = node;
        node.ui.onSelectedChange(true);
        this.fireEvent("selectionchange", this, this.selNodes);
        return node;
    },
    
    
    unselect : function(node){
        if(this.selMap[node.id]){
            node.ui.onSelectedChange(false);
            var sn = this.selNodes;
            var index = sn.indexOf(node);
            if(index != -1){
                this.selNodes.splice(index, 1);
            }
            delete this.selMap[node.id];
            this.fireEvent("selectionchange", this, this.selNodes);
        }
    },
    
    
    clearSelections : function(suppressEvent){
        var sn = this.selNodes;
        if(sn.length > 0){
            for(var i = 0, len = sn.length; i < len; i++){
                sn[i].ui.onSelectedChange(false);
            }
            this.selNodes = [];
            this.selMap = {};
            if(suppressEvent !== true){
                this.fireEvent("selectionchange", this, this.selNodes);
            }
        }
    },
    
    
    isSelected : function(node){
        return this.selMap[node.id] ? true : false;  
    },
    
    
    getSelectedNodes : function(){
        return this.selNodes;    
    },

    onKeyDown : Ext.tree.DefaultSelectionModel.prototype.onKeyDown,

    selectNext : Ext.tree.DefaultSelectionModel.prototype.selectNext,

    selectPrevious : Ext.tree.DefaultSelectionModel.prototype.selectPrevious
});

Ext.tree.TreeNode = function(attributes){
    attributes = attributes || {};
    if(typeof attributes == "string"){
        attributes = {text: attributes};
    }
    this.childrenRendered = false;
    this.rendered = false;
    Ext.tree.TreeNode.superclass.constructor.call(this, attributes);
    this.expanded = attributes.expanded === true;
    this.isTarget = attributes.isTarget !== false;
    this.draggable = attributes.draggable !== false && attributes.allowDrag !== false;
    this.allowChildren = attributes.allowChildren !== false && attributes.allowDrop !== false;

    
    this.text = attributes.text;
    
    this.disabled = attributes.disabled === true;

    this.addEvents(
        
        "textchange",
        
        "beforeexpand",
        
        "beforecollapse",
        
        "expand",
        
        "disabledchange",
        
        "collapse",
        
        "beforeclick",
        
        "click",
        
        "checkchange",
        
        "dblclick",
        
        "contextmenu",
        
        "beforechildrenrendered"
    );

    var uiClass = this.attributes.uiProvider || this.defaultUI || Ext.tree.TreeNodeUI;

    
    this.ui = new uiClass(this);
};
Ext.extend(Ext.tree.TreeNode, Ext.data.Node, {
    preventHScroll: true,
    
    isExpanded : function(){
        return this.expanded;
    },


    getUI : function(){
        return this.ui;
    },

    getLoader : function(){
        var owner;
        return this.loader || ((owner = this.getOwnerTree()) && owner.loader ? owner.loader : new Ext.tree.TreeLoader());
    },

    // private override
    setFirstChild : function(node){
        var of = this.firstChild;
        Ext.tree.TreeNode.superclass.setFirstChild.call(this, node);
        if(this.childrenRendered && of && node != of){
            of.renderIndent(true, true);
        }
        if(this.rendered){
            this.renderIndent(true, true);
        }
    },

    // private override
    setLastChild : function(node){
        var ol = this.lastChild;
        Ext.tree.TreeNode.superclass.setLastChild.call(this, node);
        if(this.childrenRendered && ol && node != ol){
            ol.renderIndent(true, true);
        }
        if(this.rendered){
            this.renderIndent(true, true);
        }
    },

    // these methods are overridden to provide lazy rendering support
    // private override
    appendChild : function(n){
        if(!n.render && !Ext.isArray(n)){
            n = this.getLoader().createNode(n);
        }
        var node = Ext.tree.TreeNode.superclass.appendChild.call(this, n);
        if(node && this.childrenRendered){
            node.render();
        }
        this.ui.updateExpandIcon();
        return node;
    },

    // private override
    removeChild : function(node){
        this.ownerTree.getSelectionModel().unselect(node);
        Ext.tree.TreeNode.superclass.removeChild.apply(this, arguments);
        // if it's been rendered remove dom node
        if(this.childrenRendered){
            node.ui.remove();
        }
        if(this.childNodes.length < 1){
            this.collapse(false, false);
        }else{
            this.ui.updateExpandIcon();
        }
        if(!this.firstChild && !this.isHiddenRoot()) {
            this.childrenRendered = false;
        }
        return node;
    },

    // private override
    insertBefore : function(node, refNode){
        if(!node.render){ 
            node = this.getLoader().createNode(node);
        }
        var newNode = Ext.tree.TreeNode.superclass.insertBefore.apply(this, arguments);
        if(newNode && refNode && this.childrenRendered){
            node.render();
        }
        this.ui.updateExpandIcon();
        return newNode;
    },

    
    setText : function(text){
        var oldText = this.text;
        this.text = text;
        this.attributes.text = text;
        if(this.rendered){ // event without subscribing
            this.ui.onTextChange(this, text, oldText);
        }
        this.fireEvent("textchange", this, text, oldText);
    },

    
    select : function(){
        this.getOwnerTree().getSelectionModel().select(this);
    },

    
    unselect : function(){
        this.getOwnerTree().getSelectionModel().unselect(this);
    },

    
    isSelected : function(){
        return this.getOwnerTree().getSelectionModel().isSelected(this);
    },

    
    expand : function(deep, anim, callback){
        if(!this.expanded){
            if(this.fireEvent("beforeexpand", this, deep, anim) === false){
                return;
            }
            if(!this.childrenRendered){
                this.renderChildren();
            }
            this.expanded = true;
            if(!this.isHiddenRoot() && (this.getOwnerTree().animate && anim !== false) || anim){
                this.ui.animExpand(function(){
                    this.fireEvent("expand", this);
                    if(typeof callback == "function"){
                        callback(this);
                    }
                    if(deep === true){
                        this.expandChildNodes(true);
                    }
                }.createDelegate(this));
                return;
            }else{
                this.ui.expand();
                this.fireEvent("expand", this);
                if(typeof callback == "function"){
                    callback(this);
                }
            }
        }else{
           if(typeof callback == "function"){
               callback(this);
           }
        }
        if(deep === true){
            this.expandChildNodes(true);
        }
    },

    isHiddenRoot : function(){
        return this.isRoot && !this.getOwnerTree().rootVisible;
    },

    
    collapse : function(deep, anim){
        if(this.expanded && !this.isHiddenRoot()){
            if(this.fireEvent("beforecollapse", this, deep, anim) === false){
                return;
            }
            this.expanded = false;
            if((this.getOwnerTree().animate && anim !== false) || anim){
                this.ui.animCollapse(function(){
                    this.fireEvent("collapse", this);
                    if(deep === true){
                        this.collapseChildNodes(true);
                    }
                }.createDelegate(this));
                return;
            }else{
                this.ui.collapse();
                this.fireEvent("collapse", this);
            }
        }
        if(deep === true){
            var cs = this.childNodes;
            for(var i = 0, len = cs.length; i < len; i++) {
            	cs[i].collapse(true, false);
            }
        }
    },

    // private
    delayedExpand : function(delay){
        if(!this.expandProcId){
            this.expandProcId = this.expand.defer(delay, this);
        }
    },

    // private
    cancelExpand : function(){
        if(this.expandProcId){
            clearTimeout(this.expandProcId);
        }
        this.expandProcId = false;
    },

    
    toggle : function(){
        if(this.expanded){
            this.collapse();
        }else{
            this.expand();
        }
    },

    
    ensureVisible : function(callback){
        var tree = this.getOwnerTree();
        tree.expandPath(this.parentNode ? this.parentNode.getPath() : this.getPath(), false, function(){
            var node = tree.getNodeById(this.id);  // Somehow if we don't do this, we lose changes that happened to node in the meantime
            tree.getTreeEl().scrollChildIntoView(node.ui.anchor);
            Ext.callback(callback);
        }.createDelegate(this));
    },

    
    expandChildNodes : function(deep){
        var cs = this.childNodes;
        for(var i = 0, len = cs.length; i < len; i++) {
        	cs[i].expand(deep);
        }
    },

    
    collapseChildNodes : function(deep){
        var cs = this.childNodes;
        for(var i = 0, len = cs.length; i < len; i++) {
        	cs[i].collapse(deep);
        }
    },

    
    disable : function(){
        this.disabled = true;
        this.unselect();
        if(this.rendered && this.ui.onDisableChange){ // event without subscribing
            this.ui.onDisableChange(this, true);
        }
        this.fireEvent("disabledchange", this, true);
    },

    
    enable : function(){
        this.disabled = false;
        if(this.rendered && this.ui.onDisableChange){ // event without subscribing
            this.ui.onDisableChange(this, false);
        }
        this.fireEvent("disabledchange", this, false);
    },

    // private
    renderChildren : function(suppressEvent){
        if(suppressEvent !== false){
            this.fireEvent("beforechildrenrendered", this);
        }
        var cs = this.childNodes;
        for(var i = 0, len = cs.length; i < len; i++){
            cs[i].render(true);
        }
        this.childrenRendered = true;
    },

    // private
    sort : function(fn, scope){
        Ext.tree.TreeNode.superclass.sort.apply(this, arguments);
        if(this.childrenRendered){
            var cs = this.childNodes;
            for(var i = 0, len = cs.length; i < len; i++){
                cs[i].render(true);
            }
        }
    },

    // private
    render : function(bulkRender){
        this.ui.render(bulkRender);
        if(!this.rendered){
            // make sure it is registered
            this.getOwnerTree().registerNode(this);
            this.rendered = true;
            if(this.expanded){
                this.expanded = false;
                this.expand(false, false);
            }
        }
    },

    // private
    renderIndent : function(deep, refresh){
        if(refresh){
            this.ui.childIndent = null;
        }
        this.ui.renderIndent();
        if(deep === true && this.childrenRendered){
            var cs = this.childNodes;
            for(var i = 0, len = cs.length; i < len; i++){
                cs[i].renderIndent(true, refresh);
            }
        }
    },

    beginUpdate : function(){
        this.childrenRendered = false;
    },

    endUpdate : function(){
        if(this.expanded && this.rendered){
            this.renderChildren();
        }
    },

    destroy : function(){
        if(this.childNodes){
	        for(var i = 0,l = this.childNodes.length; i < l; i++){
	            this.childNodes[i].destroy();
	        }
            this.childNodes = null;
        }
        if(this.ui.destroy){
            this.ui.destroy();
        }
    }
});

Ext.tree.TreePanel.nodeTypes.node = Ext.tree.TreeNode;

 Ext.tree.AsyncTreeNode = function(config){
    this.loaded = config && config.loaded === true;
    this.loading = false;
    Ext.tree.AsyncTreeNode.superclass.constructor.apply(this, arguments);
    
    this.addEvents('beforeload', 'load');
    
    
};
Ext.extend(Ext.tree.AsyncTreeNode, Ext.tree.TreeNode, {
    expand : function(deep, anim, callback){
        if(this.loading){ // if an async load is already running, waiting til it's done
            var timer;
            var f = function(){
                if(!this.loading){ // done loading
                    clearInterval(timer);
                    this.expand(deep, anim, callback);
                }
            }.createDelegate(this);
            timer = setInterval(f, 200);
            return;
        }
        if(!this.loaded){
            if(this.fireEvent("beforeload", this) === false){
                return;
            }
            this.loading = true;
            this.ui.beforeLoad(this);
            var loader = this.loader || this.attributes.loader || this.getOwnerTree().getLoader();
            if(loader){
                loader.load(this, this.loadComplete.createDelegate(this, [deep, anim, callback]));
                return;
            }
        }
        Ext.tree.AsyncTreeNode.superclass.expand.call(this, deep, anim, callback);
    },
    
    
    isLoading : function(){
        return this.loading;  
    },
    
    loadComplete : function(deep, anim, callback){
        this.loading = false;
        this.loaded = true;
        this.ui.afterLoad(this);
        this.fireEvent("load", this);
        this.expand(deep, anim, callback);
    },
    
    
    isLoaded : function(){
        return this.loaded;
    },
    
    hasChildNodes : function(){
        if(!this.isLeaf() && !this.loaded){
            return true;
        }else{
            return Ext.tree.AsyncTreeNode.superclass.hasChildNodes.call(this);
        }
    },

    
    reload : function(callback){
        this.collapse(false, false);
        while(this.firstChild){
            this.removeChild(this.firstChild).destroy();
        }
        this.childrenRendered = false;
        this.loaded = false;
        if(this.isHiddenRoot()){
            this.expanded = false;
        }
        this.expand(false, false, callback);
    }
});

Ext.tree.TreePanel.nodeTypes.async = Ext.tree.AsyncTreeNode;

Ext.tree.TreeNodeUI = function(node){
    this.node = node;
    this.rendered = false;
    this.animating = false;
    this.wasLeaf = true;
    this.ecc = 'x-tree-ec-icon x-tree-elbow';
    this.emptyIcon = Ext.BLANK_IMAGE_URL;
};

Ext.tree.TreeNodeUI.prototype = {
    // private
    removeChild : function(node){
        if(this.rendered){
            this.ctNode.removeChild(node.ui.getEl());
        } 
    },

    // private
    beforeLoad : function(){
         this.addClass("x-tree-node-loading");
    },

    // private
    afterLoad : function(){
         this.removeClass("x-tree-node-loading");
    },

    // private
    onTextChange : function(node, text, oldText){
        if(this.rendered){
            this.textNode.innerHTML = text;
        }
    },

    // private
    onDisableChange : function(node, state){
        this.disabled = state;
		if (this.checkbox) {
			this.checkbox.disabled = state;
		}        
        if(state){
            this.addClass("x-tree-node-disabled");
        }else{
            this.removeClass("x-tree-node-disabled");
        } 
    },

    // private
    onSelectedChange : function(state){
        if(state){
            this.focus();
            this.addClass("x-tree-selected");
        }else{
            //this.blur();
            this.removeClass("x-tree-selected");
        }
    },

    // private
    onMove : function(tree, node, oldParent, newParent, index, refNode){
        this.childIndent = null;
        if(this.rendered){
            var targetNode = newParent.ui.getContainer();
            if(!targetNode){//target not rendered
                this.holder = document.createElement("div");
                this.holder.appendChild(this.wrap);
                return;
            }
            var insertBefore = refNode ? refNode.ui.getEl() : null;
            if(insertBefore){
                targetNode.insertBefore(this.wrap, insertBefore);
            }else{
                targetNode.appendChild(this.wrap);
            }
            this.node.renderIndent(true);
        }
    },


    addClass : function(cls){
        if(this.elNode){
            Ext.fly(this.elNode).addClass(cls);
        }
    },


    removeClass : function(cls){
        if(this.elNode){
            Ext.fly(this.elNode).removeClass(cls);  
        }
    },

    // private
    remove : function(){
        if(this.rendered){
            this.holder = document.createElement("div");
            this.holder.appendChild(this.wrap);
        }  
    },

    // private
    fireEvent : function(){
        return this.node.fireEvent.apply(this.node, arguments);  
    },

    // private
    initEvents : function(){
        this.node.on("move", this.onMove, this);

        if(this.node.disabled){
            this.addClass("x-tree-node-disabled");
			if (this.checkbox) {
				this.checkbox.disabled = true;
			}            
        }
        if(this.node.hidden){
            this.hide();
        }
        var ot = this.node.getOwnerTree();
        var dd = ot.enableDD || ot.enableDrag || ot.enableDrop;
        if(dd && (!this.node.isRoot || ot.rootVisible)){
            Ext.dd.Registry.register(this.elNode, {
                node: this.node,
                handles: this.getDDHandles(),
                isHandle: false
            });
        }
    },

    // private
    getDDHandles : function(){
        return [this.iconNode, this.textNode, this.elNode];
    },


    hide : function(){
        this.node.hidden = true;
        if(this.wrap){
            this.wrap.style.display = "none";
        }
    },


    show : function(){
        this.node.hidden = false;
        if(this.wrap){
            this.wrap.style.display = "";
        } 
    },

    // private
    onContextMenu : function(e){
        if (this.node.hasListener("contextmenu") || this.node.getOwnerTree().hasListener("contextmenu")) {
            e.preventDefault();
            this.focus();
            this.fireEvent("contextmenu", this.node, e);
        }
    },

    // private
    onClick : function(e){
        if(this.dropping){
            e.stopEvent();
            return;
        }
        if(this.fireEvent("beforeclick", this.node, e) !== false){
            var a = e.getTarget('a');
            if(!this.disabled && this.node.attributes.href && a){
                this.fireEvent("click", this.node, e);
                return;
            }else if(a && e.ctrlKey){
                e.stopEvent();
            }
            e.preventDefault();
            if(this.disabled){
                return;
            }

            if(this.node.attributes.singleClickExpand && !this.animating && this.node.isExpandable()){
                this.node.toggle();
            }

            this.fireEvent("click", this.node, e);
        }else{
            e.stopEvent();
        }
    },

    // private
    onDblClick : function(e){
        e.preventDefault();
        if(this.disabled){
            return;
        }
        if(this.checkbox){
            this.toggleCheck();
        }
        if(!this.animating && this.node.isExpandable()){
            this.node.toggle();
        }
        this.fireEvent("dblclick", this.node, e);
    },

    onOver : function(e){
        this.addClass('x-tree-node-over');
    },

    onOut : function(e){
        this.removeClass('x-tree-node-over');
    },

    // private
    onCheckChange : function(){
        var checked = this.checkbox.checked;
		// fix for IE6
		this.checkbox.defaultChecked = checked;
        this.node.attributes.checked = checked;
        this.fireEvent('checkchange', this.node, checked);
    },

    // private
    ecClick : function(e){
        if(!this.animating && this.node.isExpandable()){
            this.node.toggle();
        }
    },

    // private
    startDrop : function(){
        this.dropping = true;
    },
    
    // delayed drop so the click event doesn't get fired on a drop
    endDrop : function(){ 
       setTimeout(function(){
           this.dropping = false;
       }.createDelegate(this), 50); 
    },

    // private
    expand : function(){
        this.updateExpandIcon();
        this.ctNode.style.display = "";
    },

    // private
    focus : function(){
        if(!this.node.preventHScroll){
            try{this.anchor.focus();
            }catch(e){}
        }else{
            try{
                var noscroll = this.node.getOwnerTree().getTreeEl().dom;
                var l = noscroll.scrollLeft;
                this.anchor.focus();
                noscroll.scrollLeft = l;
            }catch(e){}
        }
    },


    toggleCheck : function(value){
        var cb = this.checkbox;
        if(cb){
            cb.checked = (value === undefined ? !cb.checked : value);
            this.onCheckChange();
        }
    },

    // private
    blur : function(){
        try{
            this.anchor.blur();
        }catch(e){} 
    },

    // private
    animExpand : function(callback){
        var ct = Ext.get(this.ctNode);
        ct.stopFx();
        if(!this.node.isExpandable()){
            this.updateExpandIcon();
            this.ctNode.style.display = "";
            Ext.callback(callback);
            return;
        }
        this.animating = true;
        this.updateExpandIcon();
        
        ct.slideIn('t', {
           callback : function(){
               this.animating = false;
               Ext.callback(callback);
            },
            scope: this,
            duration: this.node.ownerTree.duration || .25
        });
    },

    // private
    highlight : function(){
        var tree = this.node.getOwnerTree();
        Ext.fly(this.wrap).highlight(
            tree.hlColor || "C3DAF9",
            {endColor: tree.hlBaseColor}
        );
    },

    // private
    collapse : function(){
        this.updateExpandIcon();
        this.ctNode.style.display = "none";
    },

    // private
    animCollapse : function(callback){
        var ct = Ext.get(this.ctNode);
        ct.enableDisplayMode('block');
        ct.stopFx();

        this.animating = true;
        this.updateExpandIcon();

        ct.slideOut('t', {
            callback : function(){
               this.animating = false;
               Ext.callback(callback);
            },
            scope: this,
            duration: this.node.ownerTree.duration || .25
        });
    },

    // private
    getContainer : function(){
        return this.ctNode;  
    },

    // private
    getEl : function(){
        return this.wrap;  
    },

    // private
    appendDDGhost : function(ghostNode){
        ghostNode.appendChild(this.elNode.cloneNode(true));
    },

    // private
    getDDRepairXY : function(){
        return Ext.lib.Dom.getXY(this.iconNode);
    },

    // private
    onRender : function(){
        this.render();    
    },

    // private
    render : function(bulkRender){
        var n = this.node, a = n.attributes;
        var targetNode = n.parentNode ? 
              n.parentNode.ui.getContainer() : n.ownerTree.innerCt.dom;
        
        if(!this.rendered){
            this.rendered = true;

            this.renderElements(n, a, targetNode, bulkRender);

            if(a.qtip){
               if(this.textNode.setAttributeNS){
                   this.textNode.setAttributeNS("ext", "qtip", a.qtip);
                   if(a.qtipTitle){
                       this.textNode.setAttributeNS("ext", "qtitle", a.qtipTitle);
                   }
               }else{
                   this.textNode.setAttribute("ext:qtip", a.qtip);
                   if(a.qtipTitle){
                       this.textNode.setAttribute("ext:qtitle", a.qtipTitle);
                   }
               } 
            }else if(a.qtipCfg){
                a.qtipCfg.target = Ext.id(this.textNode);
                Ext.QuickTips.register(a.qtipCfg);
            }
            this.initEvents();
            if(!this.node.expanded){
                this.updateExpandIcon(true);
            }
        }else{
            if(bulkRender === true) {
                targetNode.appendChild(this.wrap);
            }
        }
    },

    // private
    renderElements : function(n, a, targetNode, bulkRender){
        // add some indent caching, this helps performance when rendering a large tree
        this.indentMarkup = n.parentNode ? n.parentNode.ui.getChildIndent() : '';

        var cb = typeof a.checked == 'boolean';

        var href = a.href ? a.href : Ext.isGecko ? "" : "#";
        var buf = ['<li class="x-tree-node"><div ext:tree-node-id="',n.id,'" class="x-tree-node-el x-tree-node-leaf x-unselectable ', a.cls,'" unselectable="on">',
            '<span class="x-tree-node-indent">',this.indentMarkup,"</span>",
            '<img src="', this.emptyIcon, '" class="x-tree-ec-icon x-tree-elbow" />',
            '<img src="', a.icon || this.emptyIcon, '" class="x-tree-node-icon',(a.icon ? " x-tree-node-inline-icon" : ""),(a.iconCls ? " "+a.iconCls : ""),'" unselectable="on" />',
            cb ? ('<input class="x-tree-node-cb" type="checkbox" ' + (a.checked ? 'checked="checked" />' : '/>')) : '',
            '<a hidefocus="on" class="x-tree-node-anchor" href="',href,'" tabIndex="1" ',
             a.hrefTarget ? ' target="'+a.hrefTarget+'"' : "", '><span unselectable="on">',n.text,"</span></a></div>",
            '<ul class="x-tree-node-ct" style="display:none;"></ul>',
            "</li>"].join('');

        var nel;
        if(bulkRender !== true && n.nextSibling && (nel = n.nextSibling.ui.getEl())){
            this.wrap = Ext.DomHelper.insertHtml("beforeBegin", nel, buf);
        }else{
            this.wrap = Ext.DomHelper.insertHtml("beforeEnd", targetNode, buf);
        }
        
        this.elNode = this.wrap.childNodes[0];
        this.ctNode = this.wrap.childNodes[1];
        var cs = this.elNode.childNodes;
        this.indentNode = cs[0];
        this.ecNode = cs[1];
        this.iconNode = cs[2];
        var index = 3;
        if(cb){
            this.checkbox = cs[3];
			// fix for IE6
			this.checkbox.defaultChecked = this.checkbox.checked;			
            index++;
        }
        this.anchor = cs[index];
        this.textNode = cs[index].firstChild;
    },


    getAnchor : function(){
        return this.anchor;
    },
    

    getTextEl : function(){
        return this.textNode;
    },
    

    getIconEl : function(){
        return this.iconNode;
    },


    isChecked : function(){
        return this.checkbox ? this.checkbox.checked : false; 
    },

    // private
    updateExpandIcon : function(){
        if(this.rendered){
            var n = this.node, c1, c2;
            var cls = n.isLast() ? "x-tree-elbow-end" : "x-tree-elbow";
            if(n.isExpandable()){
                if(n.expanded){
                    cls += "-minus";
                    c1 = "x-tree-node-collapsed";
                    c2 = "x-tree-node-expanded";
                }else{
                    cls += "-plus";
                    c1 = "x-tree-node-expanded";
                    c2 = "x-tree-node-collapsed";
                }
                if(this.wasLeaf){
                    this.removeClass("x-tree-node-leaf");
                    this.wasLeaf = false;
                }
                if(this.c1 != c1 || this.c2 != c2){
                    Ext.fly(this.elNode).replaceClass(c1, c2);
                    this.c1 = c1; this.c2 = c2;
                }
            }else{
                if(!this.wasLeaf){
                    Ext.fly(this.elNode).replaceClass("x-tree-node-expanded", "x-tree-node-leaf");
                    delete this.c1;
                    delete this.c2;
                    this.wasLeaf = true;
                }
            }
            var ecc = "x-tree-ec-icon "+cls;
            if(this.ecc != ecc){
                this.ecNode.className = ecc;
                this.ecc = ecc;
            }
        }
    },

    // private
    getChildIndent : function(){
        if(!this.childIndent){
            var buf = [];
            var p = this.node;
            while(p){
                if(!p.isRoot || (p.isRoot && p.ownerTree.rootVisible)){
                    if(!p.isLast()) {
                        buf.unshift('<img src="'+this.emptyIcon+'" class="x-tree-elbow-line" />');
                    } else {
                        buf.unshift('<img src="'+this.emptyIcon+'" class="x-tree-icon" />');
                    }
                }
                p = p.parentNode;
            }
            this.childIndent = buf.join("");
        }
        return this.childIndent;
    },

    // private
    renderIndent : function(){
        if(this.rendered){
            var indent = "";
            var p = this.node.parentNode;
            if(p){
                indent = p.ui.getChildIndent();
            }
            if(this.indentMarkup != indent){ // don't rerender if not required
                this.indentNode.innerHTML = indent;
                this.indentMarkup = indent;
            }
            this.updateExpandIcon();
        }
    },

    destroy : function(){
        if(this.elNode){
            Ext.dd.Registry.unregister(this.elNode.id);
        }
        delete this.elNode;
        delete this.ctNode;
        delete this.indentNode;
        delete this.ecNode;
        delete this.iconNode;
        delete this.checkbox;
        delete this.anchor;
        delete this.textNode;
        
        if (this.holder){
             delete this.wrap;
             Ext.removeNode(this.holder);
             delete this.holder;
        }else{
            Ext.removeNode(this.wrap);
            delete this.wrap;
        }
    }
};


Ext.tree.RootTreeNodeUI = Ext.extend(Ext.tree.TreeNodeUI, {
    // private
    render : function(){
        if(!this.rendered){
            var targetNode = this.node.ownerTree.innerCt.dom;
            this.node.expanded = true;
            targetNode.innerHTML = '<div class="x-tree-root-node"></div>';
            this.wrap = this.ctNode = targetNode.firstChild;
        }
    },
    collapse : Ext.emptyFn,
    expand : Ext.emptyFn
});

Ext.tree.TreeLoader = function(config){
    this.baseParams = {};
    Ext.apply(this, config);

    this.addEvents(
        
        "beforeload",
        
        "load",
        
        "loadexception"
    );

    Ext.tree.TreeLoader.superclass.constructor.call(this);
};

Ext.extend(Ext.tree.TreeLoader, Ext.util.Observable, {
    
    
    
    
    
    
    
    uiProviders : {},

    
    clearOnLoad : true,

    
    load : function(node, callback){
        if(this.clearOnLoad){
            while(node.firstChild){
                node.removeChild(node.firstChild);
            }
        }
        if(this.doPreload(node)){ // preloaded json children
            if(typeof callback == "function"){
                callback();
            }
        }else if(this.dataUrl||this.url){
            this.requestData(node, callback);
        }
    },

    doPreload : function(node){
        if(node.attributes.children){
            if(node.childNodes.length < 1){ // preloaded?
                var cs = node.attributes.children;
                node.beginUpdate();
                for(var i = 0, len = cs.length; i < len; i++){
                    var cn = node.appendChild(this.createNode(cs[i]));
                    if(this.preloadChildren){
                        this.doPreload(cn);
                    }
                }
                node.endUpdate();
            }
            return true;
        }else {
            return false;
        }
    },

    getParams: function(node){
        var buf = [], bp = this.baseParams;
        for(var key in bp){
            if(typeof bp[key] != "function"){
                buf.push(encodeURIComponent(key), "=", encodeURIComponent(bp[key]), "&");
            }
        }
        buf.push("node=", encodeURIComponent(node.id));
        return buf.join("");
    },

    requestData : function(node, callback){
        if(this.fireEvent("beforeload", this, node, callback) !== false){
            this.transId = Ext.Ajax.request({
                method:this.requestMethod,
                url: this.dataUrl||this.url,
                success: this.handleResponse,
                failure: this.handleFailure,
                scope: this,
                argument: {callback: callback, node: node},
                params: this.getParams(node)
            });
        }else{
            // if the load is cancelled, make sure we notify
            // the node that we are done
            if(typeof callback == "function"){
                callback();
            }
        }
    },

    isLoading : function(){
        return !!this.transId;
    },

    abort : function(){
        if(this.isLoading()){
            Ext.Ajax.abort(this.transId);
        }
    },

    
    createNode : function(attr){
        // apply baseAttrs, nice idea Corey!
        if(this.baseAttrs){
            Ext.applyIf(attr, this.baseAttrs);
        }
        if(this.applyLoader !== false){
            attr.loader = this;
        }
        if(typeof attr.uiProvider == 'string'){
           attr.uiProvider = this.uiProviders[attr.uiProvider] || eval(attr.uiProvider);
        }
        if(attr.nodeType){
            return new Ext.tree.TreePanel.nodeTypes[attr.nodeType](attr);
        }else{
            return attr.leaf ?
                        new Ext.tree.TreeNode(attr) :
                        new Ext.tree.AsyncTreeNode(attr);
        }
    },

    processResponse : function(response, node, callback){
        var json = response.responseText;
        try {
            var o = eval("("+json+")");
            node.beginUpdate();
            for(var i = 0, len = o.length; i < len; i++){
                var n = this.createNode(o[i]);
                if(n){
                    node.appendChild(n);
                }
            }
            node.endUpdate();
            if(typeof callback == "function"){
                callback(this, node);
            }
        }catch(e){
            this.handleFailure(response);
        }
    },

    handleResponse : function(response){
        this.transId = false;
        var a = response.argument;
        this.processResponse(response, a.node, a.callback);
        this.fireEvent("load", this, a.node, response);
    },

    handleFailure : function(response){
        this.transId = false;
        var a = response.argument;
        this.fireEvent("loadexception", this, a.node, response);
        if(typeof a.callback == "function"){
            a.callback(this, a.node);
        }
    }
});

Ext.tree.TreeFilter = function(tree, config){
    this.tree = tree;
    this.filtered = {};
    Ext.apply(this, config);
};

Ext.tree.TreeFilter.prototype = {
    clearBlank:false,
    reverse:false,
    autoClear:false,
    remove:false,

     
    filter : function(value, attr, startNode){
        attr = attr || "text";
        var f;
        if(typeof value == "string"){
            var vlen = value.length;
            // auto clear empty filter
            if(vlen == 0 && this.clearBlank){
                this.clear();
                return;
            }
            value = value.toLowerCase();
            f = function(n){
                return n.attributes[attr].substr(0, vlen).toLowerCase() == value;
            };
        }else if(value.exec){ // regex?
            f = function(n){
                return value.test(n.attributes[attr]);
            };
        }else{
            throw 'Illegal filter type, must be string or regex';
        }
        this.filterBy(f, null, startNode);
	},
    
    
    filterBy : function(fn, scope, startNode){
        startNode = startNode || this.tree.root;
        if(this.autoClear){
            this.clear();
        }
        var af = this.filtered, rv = this.reverse;
        var f = function(n){
            if(n == startNode){
                return true;
            }
            if(af[n.id]){
                return false;
            }
            var m = fn.call(scope || n, n);
            if(!m || rv){
                af[n.id] = n;
                n.ui.hide();
                return false;
            }
            return true;
        };
        startNode.cascade(f);
        if(this.remove){
           for(var id in af){
               if(typeof id != "function"){
                   var n = af[id];
                   if(n && n.parentNode){
                       n.parentNode.removeChild(n);
                   }
               }
           } 
        }
    },
    
    
    clear : function(){
        var t = this.tree;
        var af = this.filtered;
        for(var id in af){
            if(typeof id != "function"){
                var n = af[id];
                if(n){
                    n.ui.show();
                }
            }
        }
        this.filtered = {}; 
    }
};


Ext.tree.TreeSorter = function(tree, config){
    
	
    
    
    
    
    
    Ext.apply(this, config);
    tree.on("beforechildrenrendered", this.doSort, this);
    tree.on("append", this.updateSort, this);
    tree.on("insert", this.updateSort, this);
    tree.on("textchange", this.updateSortParent, this);
    
    var dsc = this.dir && this.dir.toLowerCase() == "desc";
    var p = this.property || "text";
    var sortType = this.sortType;
    var fs = this.folderSort;
    var cs = this.caseSensitive === true;
    var leafAttr = this.leafAttr || 'leaf';

    this.sortFn = function(n1, n2){
        if(fs){
            if(n1.attributes[leafAttr] && !n2.attributes[leafAttr]){
                return 1;
            }
            if(!n1.attributes[leafAttr] && n2.attributes[leafAttr]){
                return -1;
            }
        }
    	var v1 = sortType ? sortType(n1) : (cs ? n1.attributes[p] : n1.attributes[p].toUpperCase());
    	var v2 = sortType ? sortType(n2) : (cs ? n2.attributes[p] : n2.attributes[p].toUpperCase());
    	if(v1 < v2){
			return dsc ? +1 : -1;
		}else if(v1 > v2){
			return dsc ? -1 : +1;
        }else{
	    	return 0;
        }
    };
};

Ext.tree.TreeSorter.prototype = {
    doSort : function(node){
        node.sort(this.sortFn);
    },
    
    compareNodes : function(n1, n2){
        return (n1.text.toUpperCase() > n2.text.toUpperCase() ? 1 : -1);
    },
    
    updateSort : function(tree, node){
        if(node.childrenRendered){
            this.doSort.defer(1, this, [node]);
        }
    },
    
    updateSortParent : function(node){
		var p = node.parentNode;
		if(p && p.childrenRendered){
            this.doSort.defer(1, this, [p]);
        }
    }
};

if(Ext.dd.DropZone){
    
Ext.tree.TreeDropZone = function(tree, config){
    
    this.allowParentInsert = false;
    
    this.allowContainerDrop = false;
    
    this.appendOnly = false;
    Ext.tree.TreeDropZone.superclass.constructor.call(this, tree.innerCt, config);
    
    this.tree = tree;
    
    this.dragOverData = {};
    // private
    this.lastInsertClass = "x-tree-no-status";
};

Ext.extend(Ext.tree.TreeDropZone, Ext.dd.DropZone, {
    
    ddGroup : "TreeDD",

    
    expandDelay : 1000,

    // private
    expandNode : function(node){
        if(node.hasChildNodes() && !node.isExpanded()){
            node.expand(false, null, this.triggerCacheRefresh.createDelegate(this));
        }
    },

    // private
    queueExpand : function(node){
        this.expandProcId = this.expandNode.defer(this.expandDelay, this, [node]);
    },

    // private
    cancelExpand : function(){
        if(this.expandProcId){
            clearTimeout(this.expandProcId);
            this.expandProcId = false;
        }
    },

    // private
    isValidDropPoint : function(n, pt, dd, e, data){
        if(!n || !data){ return false; }
        var targetNode = n.node;
        var dropNode = data.node;
        // default drop rules
        if(!(targetNode && targetNode.isTarget && pt)){
            return false;
        }
        if(pt == "append" && targetNode.allowChildren === false){
            return false;
        }
        if((pt == "above" || pt == "below") && (targetNode.parentNode && targetNode.parentNode.allowChildren === false)){
            return false;
        }
        if(dropNode && (targetNode == dropNode || dropNode.contains(targetNode))){
            return false;
        }
        // reuse the object
        var overEvent = this.dragOverData;
        overEvent.tree = this.tree;
        overEvent.target = targetNode;
        overEvent.data = data;
        overEvent.point = pt;
        overEvent.source = dd;
        overEvent.rawEvent = e;
        overEvent.dropNode = dropNode;
        overEvent.cancel = false;  
        var result = this.tree.fireEvent("nodedragover", overEvent);
        return overEvent.cancel === false && result !== false;
    },

    // private
    getDropPoint : function(e, n, dd){
        var tn = n.node;
        if(tn.isRoot){
            return tn.allowChildren !== false ? "append" : false; // always append for root
        }
        var dragEl = n.ddel;
        var t = Ext.lib.Dom.getY(dragEl), b = t + dragEl.offsetHeight;
        var y = Ext.lib.Event.getPageY(e);
        var noAppend = tn.allowChildren === false || tn.isLeaf();
        if(this.appendOnly || tn.parentNode.allowChildren === false){
            return noAppend ? false : "append";
        }
        var noBelow = false;
        if(!this.allowParentInsert){
            noBelow = tn.hasChildNodes() && tn.isExpanded();
        }
        var q = (b - t) / (noAppend ? 2 : 3);
        if(y >= t && y < (t + q)){
            return "above";
        }else if(!noBelow && (noAppend || y >= b-q && y <= b)){
            return "below";
        }else{
            return "append";
        }
    },

    // private
    onNodeEnter : function(n, dd, e, data){
        this.cancelExpand();
    },

    // private
    onNodeOver : function(n, dd, e, data){
        var pt = this.getDropPoint(e, n, dd);
        var node = n.node;
        
        // auto node expand check
        if(!this.expandProcId && pt == "append" && node.hasChildNodes() && !n.node.isExpanded()){
            this.queueExpand(node);
        }else if(pt != "append"){
            this.cancelExpand();
        }
        
        // set the insert point style on the target node
        var returnCls = this.dropNotAllowed;
        if(this.isValidDropPoint(n, pt, dd, e, data)){
           if(pt){
               var el = n.ddel;
               var cls;
               if(pt == "above"){
                   returnCls = n.node.isFirst() ? "x-tree-drop-ok-above" : "x-tree-drop-ok-between";
                   cls = "x-tree-drag-insert-above";
               }else if(pt == "below"){
                   returnCls = n.node.isLast() ? "x-tree-drop-ok-below" : "x-tree-drop-ok-between";
                   cls = "x-tree-drag-insert-below";
               }else{
                   returnCls = "x-tree-drop-ok-append";
                   cls = "x-tree-drag-append";
               }
               if(this.lastInsertClass != cls){
                   Ext.fly(el).replaceClass(this.lastInsertClass, cls);
                   this.lastInsertClass = cls;
               }
           }
       }
       return returnCls;
    },

    // private
    onNodeOut : function(n, dd, e, data){
        this.cancelExpand();
        this.removeDropIndicators(n);
    },

    // private
    onNodeDrop : function(n, dd, e, data){
        var point = this.getDropPoint(e, n, dd);
        var targetNode = n.node;
        targetNode.ui.startDrop();
        if(!this.isValidDropPoint(n, point, dd, e, data)){
            targetNode.ui.endDrop();
            return false;
        }
        // first try to find the drop node
        var dropNode = data.node || (dd.getTreeNode ? dd.getTreeNode(data, targetNode, point, e) : null);
        var dropEvent = {
            tree : this.tree,
            target: targetNode,
            data: data,
            point: point,
            source: dd,
            rawEvent: e,
            dropNode: dropNode,
            cancel: !dropNode,
            dropStatus: false
        };
        var retval = this.tree.fireEvent("beforenodedrop", dropEvent);
        if(retval === false || dropEvent.cancel === true || !dropEvent.dropNode){
            targetNode.ui.endDrop();
            return dropEvent.dropStatus;
        }
        // allow target changing
        targetNode = dropEvent.target;
        if(point == "append" && !targetNode.isExpanded()){
            targetNode.expand(false, null, function(){
                this.completeDrop(dropEvent);
            }.createDelegate(this));
        }else{
            this.completeDrop(dropEvent);
        }
        return true;
    },

    // private
    completeDrop : function(de){
        var ns = de.dropNode, p = de.point, t = de.target;
        if(!Ext.isArray(ns)){
            ns = [ns];
        }
        var n;
        for(var i = 0, len = ns.length; i < len; i++){
            n = ns[i];
            if(p == "above"){
                t.parentNode.insertBefore(n, t);
            }else if(p == "below"){
                t.parentNode.insertBefore(n, t.nextSibling);
            }else{
                t.appendChild(n);
            }
        }
        n.ui.focus();
        if(Ext.enableFx && this.tree.hlDrop){
            n.ui.highlight();
        }
        t.ui.endDrop();
        this.tree.fireEvent("nodedrop", de);
    },

    // private
    afterNodeMoved : function(dd, data, e, targetNode, dropNode){
        if(Ext.enableFx && this.tree.hlDrop){
            dropNode.ui.focus();
            dropNode.ui.highlight();
        }
        this.tree.fireEvent("nodedrop", this.tree, targetNode, data, dd, e);
    },

    // private
    getTree : function(){
        return this.tree;
    },

    // private
    removeDropIndicators : function(n){
        if(n && n.ddel){
            var el = n.ddel;
            Ext.fly(el).removeClass([
                    "x-tree-drag-insert-above",
                    "x-tree-drag-insert-below",
                    "x-tree-drag-append"]);
            this.lastInsertClass = "_noclass";
        }
    },

    // private
    beforeDragDrop : function(target, e, id){
        this.cancelExpand();
        return true;
    },

    // private
    afterRepair : function(data){
        if(data && Ext.enableFx){
            data.node.ui.highlight();
        }
        this.hideProxy();
    }    
});

}

if(Ext.dd.DragZone){
Ext.tree.TreeDragZone = function(tree, config){
    Ext.tree.TreeDragZone.superclass.constructor.call(this, tree.getTreeEl(), config);
    
    this.tree = tree;
};

Ext.extend(Ext.tree.TreeDragZone, Ext.dd.DragZone, {
    
    ddGroup : "TreeDD",

    // private
    onBeforeDrag : function(data, e){
        var n = data.node;
        return n && n.draggable && !n.disabled;
    },

    // private
    onInitDrag : function(e){
        var data = this.dragData;
        this.tree.getSelectionModel().select(data.node);
        this.tree.eventModel.disable();
        this.proxy.update("");
        data.node.ui.appendDDGhost(this.proxy.ghost.dom);
        this.tree.fireEvent("startdrag", this.tree, data.node, e);
    },

    // private
    getRepairXY : function(e, data){
        return data.node.ui.getDDRepairXY();
    },

    // private
    onEndDrag : function(data, e){
        this.tree.eventModel.enable.defer(100, this.tree.eventModel);
        this.tree.fireEvent("enddrag", this.tree, data.node, e);
    },

    // private
    onValidDrop : function(dd, e, id){
        this.tree.fireEvent("dragdrop", this.tree, this.dragData.node, dd, e);
        this.hideProxy();
    },

    // private
    beforeInvalidDrop : function(e, id){
        // this scrolls the original position back into view
        var sm = this.tree.getSelectionModel();
        sm.clearSelections();
        sm.select(this.dragData.node);
    },
    
    // private
    afterRepair : function(){
        if (Ext.enableFx && this.tree.hlDrop) {
            Ext.Element.fly(this.dragData.ddel).highlight(this.hlColor || "c3daf9");
        }
        this.dragging = false;
    }
});
}

Ext.tree.TreeEditor = function(tree, fc, config){
    fc = fc || {};
    var field = fc.events ? fc : new Ext.form.TextField(fc);
    Ext.tree.TreeEditor.superclass.constructor.call(this, field, config);

    this.tree = tree;

    if(!tree.rendered){
        tree.on('render', this.initEditor, this);
    }else{
        this.initEditor(tree);
    }
};

Ext.extend(Ext.tree.TreeEditor, Ext.Editor, {
    
    alignment: "l-l",
    // inherit
    autoSize: false,
    
    hideEl : false,
    
    cls: "x-small-editor x-tree-editor",
    
    shim:false,
    // inherit
    shadow:"frame",
    
    maxWidth: 250,
    
    editDelay : 350,

    initEditor : function(tree){
        tree.on('beforeclick', this.beforeNodeClick, this);
        tree.on('dblclick', this.onNodeDblClick, this);
        this.on('complete', this.updateNode, this);
        this.on('beforestartedit', this.fitToTree, this);
        this.on('startedit', this.bindScroll, this, {delay:10});
        this.on('specialkey', this.onSpecialKey, this);
    },

    // private
    fitToTree : function(ed, el){
        var td = this.tree.getTreeEl().dom, nd = el.dom;
        if(td.scrollLeft >  nd.offsetLeft){ // ensure the node left point is visible
            td.scrollLeft = nd.offsetLeft;
        }
        var w = Math.min(
                this.maxWidth,
                (td.clientWidth > 20 ? td.clientWidth : td.offsetWidth) - Math.max(0, nd.offsetLeft-td.scrollLeft) - 5);
        this.setSize(w, '');
    },

    // private
    triggerEdit : function(node, defer){
        this.completeEdit();
		if(node.attributes.editable !== false){
	       
			this.editNode = node;
            if(this.tree.autoScroll){
                node.ui.getEl().scrollIntoView(this.tree.body);
            }
            this.autoEditTimer = this.startEdit.defer(this.editDelay, this, [node.ui.textNode, node.text]);
            return false;
        }
    },

    // private
    bindScroll : function(){
        this.tree.getTreeEl().on('scroll', this.cancelEdit, this);
    },

    // private
    beforeNodeClick : function(node, e){
        clearTimeout(this.autoEditTimer);
        if(this.tree.getSelectionModel().isSelected(node)){
            e.stopEvent();
            return this.triggerEdit(node);
        }
    },

    onNodeDblClick : function(node, e){
        clearTimeout(this.autoEditTimer);
    },

    // private
    updateNode : function(ed, value){
        this.tree.getTreeEl().un('scroll', this.cancelEdit, this);
        this.editNode.setText(value);
    },

    // private
    onHide : function(){
        Ext.tree.TreeEditor.superclass.onHide.call(this);
        if(this.editNode){
            this.editNode.ui.focus.defer(50, this.editNode.ui);
        }
    },

    // private
    onSpecialKey : function(field, e){
        var k = e.getKey();
        if(k == e.ESC){
            e.stopEvent();
            this.cancelEdit();
        }else if(k == e.ENTER && !e.hasModifier()){
            e.stopEvent();
            this.completeEdit();
        }
    }
});

Ext.menu.Menu = function(config){
    if(Ext.isArray(config)){
        config = {items:config};
    }
    Ext.apply(this, config);
    this.id = this.id || Ext.id();
    this.addEvents(
        
        'beforeshow',
        
        'beforehide',
        
        'show',
        
        'hide',
        
        'click',
        
        'mouseover',
        
        'mouseout',
        
        'itemclick'
    );
    Ext.menu.MenuMgr.register(this);
    Ext.menu.Menu.superclass.constructor.call(this);
    var mis = this.items;
    

    this.items = new Ext.util.MixedCollection();
    if(mis){
        this.add.apply(this, mis);
    }
};

Ext.extend(Ext.menu.Menu, Ext.util.Observable, {
    
    
    
    minWidth : 120,
    
    shadow : "sides",
    
    subMenuAlign : "tl-tr?",
    
    defaultAlign : "tl-bl?",
    
    allowOtherMenus : false,
    
    ignoreParentClicks : false,

    // private
    hidden:true,

    // private
    createEl : function(){
        return new Ext.Layer({
            cls: "x-menu",
            shadow:this.shadow,
            constrain: false,
            parentEl: this.parentEl || document.body,
            zindex:15000
        });
    },

    // private
    render : function(){
        if(this.el){
            return;
        }
        var el = this.el = this.createEl();

        if(!this.keyNav){
            this.keyNav = new Ext.menu.MenuNav(this);
        }
        if(this.plain){
            el.addClass("x-menu-plain");
        }
        if(this.cls){
            el.addClass(this.cls);
        }
        // generic focus element
        this.focusEl = el.createChild({
            tag: "a", cls: "x-menu-focus", href: "#", onclick: "return false;", tabIndex:"-1"
        });
        var ul = el.createChild({tag: "ul", cls: "x-menu-list"});
        ul.on("click", this.onClick, this);
        ul.on("mouseover", this.onMouseOver, this);
        ul.on("mouseout", this.onMouseOut, this);
        this.items.each(function(item){
            var li = document.createElement("li");
            li.className = "x-menu-list-item";
            ul.dom.appendChild(li);
            item.render(li, this);
        }, this);
        this.ul = ul;
        this.autoWidth();
    },

    // private
    autoWidth : function(){
        var el = this.el, ul = this.ul;
        if(!el){
            return;
        }
        var w = this.width;
        if(w){
            el.setWidth(w);
        }else if(Ext.isIE){
            el.setWidth(this.minWidth);
            var t = el.dom.offsetWidth; // force recalc
            el.setWidth(ul.getWidth()+el.getFrameWidth("lr"));
        }
    },

    // private
    delayAutoWidth : function(){
        if(this.el){
            if(!this.awTask){
                this.awTask = new Ext.util.DelayedTask(this.autoWidth, this);
            }
            this.awTask.delay(20);
        }
    },

    // private
    findTargetItem : function(e){
        var t = e.getTarget(".x-menu-list-item", this.ul,  true);
        if(t && t.menuItemId){
            return this.items.get(t.menuItemId);
        }
    },

    // private
    onClick : function(e){
        var t;
        if(t = this.findTargetItem(e)){
            if(t.menu && this.ignoreParentClicks){
                t.expandMenu();
            }else{
                t.onClick(e);
                this.fireEvent("click", this, t, e);
            }
        }
    },

    // private
    setActiveItem : function(item, autoExpand){
        if(item != this.activeItem){
            if(this.activeItem){
                this.activeItem.deactivate();
            }
            this.activeItem = item;
            item.activate(autoExpand);
        }else if(autoExpand){
            item.expandMenu();
        }
    },

    // private
    tryActivate : function(start, step){
        var items = this.items;
        for(var i = start, len = items.length; i >= 0 && i < len; i+= step){
            var item = items.get(i);
            if(!item.disabled && item.canActivate){
                this.setActiveItem(item, false);
                return item;
            }
        }
        return false;
    },

    // private
    onMouseOver : function(e){
        var t;
        if(t = this.findTargetItem(e)){
            if(t.canActivate && !t.disabled){
                this.setActiveItem(t, true);
            }
        }
        this.over = true;
        this.fireEvent("mouseover", this, e, t);
    },

    // private
    onMouseOut : function(e){
        var t;
        if(t = this.findTargetItem(e)){
            if(t == this.activeItem && t.shouldDeactivate(e)){
                this.activeItem.deactivate();
                delete this.activeItem;
            }
        }
        this.over = false;
        this.fireEvent("mouseout", this, e, t);
    },

    
    isVisible : function(){
        return this.el && !this.hidden;
    },

    
    show : function(el, pos, parentMenu){
        this.parentMenu = parentMenu;
        if(!this.el){
            this.render();
        }
        this.fireEvent("beforeshow", this);
        this.showAt(this.el.getAlignToXY(el, pos || this.defaultAlign), parentMenu, false);
    },

    
    showAt : function(xy, parentMenu, _e){
        this.parentMenu = parentMenu;
        if(!this.el){
            this.render();
        }
        if(_e !== false){
            this.fireEvent("beforeshow", this);
            xy = this.el.adjustForConstraints(xy);
        }
        this.el.setXY(xy);
        this.el.show();
        this.hidden = false;
        this.focus();
        this.fireEvent("show", this);
    },



    focus : function(){
        if(!this.hidden){
            this.doFocus.defer(50, this);
        }
    },

    doFocus : function(){
        if(!this.hidden){
            this.focusEl.focus();
        }
    },

    
    hide : function(deep){
        if(this.el && this.isVisible()){
            this.fireEvent("beforehide", this);
            if(this.activeItem){
                this.activeItem.deactivate();
                this.activeItem = null;
            }
            this.el.hide();
            this.hidden = true;
            this.fireEvent("hide", this);
        }
        if(deep === true && this.parentMenu){
            this.parentMenu.hide(true);
        }
    },

    
    add : function(){
        var a = arguments, l = a.length, item;
        for(var i = 0; i < l; i++){
            var el = a[i];
            if(el.render){ // some kind of Item
                item = this.addItem(el);
            }else if(typeof el == "string"){ // string
                if(el == "separator" || el == "-"){
                    item = this.addSeparator();
                }else{
                    item = this.addText(el);
                }
            }else if(el.tagName || el.el){ // element
                item = this.addElement(el);
            }else if(typeof el == "object"){ // must be menu item config?
                Ext.applyIf(el, this.defaults);
                item = this.addMenuItem(el);
            }
        }
        return item;
    },

    
    getEl : function(){
        if(!this.el){
            this.render();
        }
        return this.el;
    },

    
    addSeparator : function(){
        return this.addItem(new Ext.menu.Separator());
    },

    
    addElement : function(el){
        return this.addItem(new Ext.menu.BaseItem(el));
    },

    
    addItem : function(item){
        this.items.add(item);
        if(this.ul){
            var li = document.createElement("li");
            li.className = "x-menu-list-item";
            this.ul.dom.appendChild(li);
            item.render(li, this);
            this.delayAutoWidth();
        }
        return item;
    },

    
    addMenuItem : function(config){
        if(!(config instanceof Ext.menu.Item)){
            if(typeof config.checked == "boolean"){ // must be check menu item config?
                config = new Ext.menu.CheckItem(config);
            }else{
                config = new Ext.menu.Item(config);
            }
        }
        return this.addItem(config);
    },

    
    addText : function(text){
        return this.addItem(new Ext.menu.TextItem(text));
    },

    
    insert : function(index, item){
        this.items.insert(index, item);
        if(this.ul){
            var li = document.createElement("li");
            li.className = "x-menu-list-item";
            this.ul.dom.insertBefore(li, this.ul.dom.childNodes[index]);
            item.render(li, this);
            this.delayAutoWidth();
        }
        return item;
    },

    
    remove : function(item){
        this.items.removeKey(item.id);
        item.destroy();
    },

    
    removeAll : function(){
    	if(this.items){
	        var f;
	        while(f = this.items.first()){
	            this.remove(f);
	        }
    	}
    },

    
    destroy : function(){
        this.beforeDestroy();
        Ext.menu.MenuMgr.unregister(this);
        if (this.keyNav) {
        	this.keyNav.disable();
        }
        this.removeAll();
        if (this.ul) {
        	this.ul.removeAllListeners();
        }
        if (this.el) {
        	this.el.destroy();
        }
    },

	// private
    beforeDestroy : Ext.emptyFn

});

// MenuNav is a private utility class used internally by the Menu
Ext.menu.MenuNav = function(menu){
    Ext.menu.MenuNav.superclass.constructor.call(this, menu.el);
    this.scope = this.menu = menu;
};

Ext.extend(Ext.menu.MenuNav, Ext.KeyNav, {
    doRelay : function(e, h){
        var k = e.getKey();
        if(!this.menu.activeItem && e.isNavKeyPress() && k != e.SPACE && k != e.RETURN){
            this.menu.tryActivate(0, 1);
            return false;
        }
        return h.call(this.scope || this, e, this.menu);
    },

    up : function(e, m){
        if(!m.tryActivate(m.items.indexOf(m.activeItem)-1, -1)){
            m.tryActivate(m.items.length-1, -1);
        }
    },

    down : function(e, m){
        if(!m.tryActivate(m.items.indexOf(m.activeItem)+1, 1)){
            m.tryActivate(0, 1);
        }
    },

    right : function(e, m){
        if(m.activeItem){
            m.activeItem.expandMenu(true);
        }
    },

    left : function(e, m){
        m.hide();
        if(m.parentMenu && m.parentMenu.activeItem){
            m.parentMenu.activeItem.activate();
        }
    },

    enter : function(e, m){
        if(m.activeItem){
            e.stopPropagation();
            m.activeItem.onClick(e);
            m.fireEvent("click", this, m.activeItem);
            return true;
        }
    }
});

Ext.menu.MenuMgr = function(){
   var menus, active, groups = {}, attached = false, lastShow = new Date();

   // private - called when first menu is created
   function init(){
       menus = {};
       active = new Ext.util.MixedCollection();
       Ext.getDoc().addKeyListener(27, function(){
           if(active.length > 0){
               hideAll();
           }
       });
   }

   // private
   function hideAll(){
       if(active && active.length > 0){
           var c = active.clone();
           c.each(function(m){
               m.hide();
           });
       }
   }

   // private
   function onHide(m){
       active.remove(m);
       if(active.length < 1){
           Ext.getDoc().un("mousedown", onMouseDown);
           attached = false;
       }
   }

   // private
   function onShow(m){
       var last = active.last();
       lastShow = new Date();
       active.add(m);
       if(!attached){
           Ext.getDoc().on("mousedown", onMouseDown);
           attached = true;
       }
       if(m.parentMenu){
          m.getEl().setZIndex(parseInt(m.parentMenu.getEl().getStyle("z-index"), 10) + 3);
          m.parentMenu.activeChild = m;
       }else if(last && last.isVisible()){
          m.getEl().setZIndex(parseInt(last.getEl().getStyle("z-index"), 10) + 3);
       }
   }

   // private
   function onBeforeHide(m){
       if(m.activeChild){
           m.activeChild.hide();
       }
       if(m.autoHideTimer){
           clearTimeout(m.autoHideTimer);
           delete m.autoHideTimer;
       }
   }

   // private
   function onBeforeShow(m){
       var pm = m.parentMenu;
       if(!pm && !m.allowOtherMenus){
           hideAll();
       }else if(pm && pm.activeChild){
           pm.activeChild.hide();
       }
   }

   // private
   function onMouseDown(e){
       if(lastShow.getElapsed() > 50 && active.length > 0 && !e.getTarget(".x-menu")){
           hideAll();
       }
   }

   // private
   function onBeforeCheck(mi, state){
       if(state){
           var g = groups[mi.group];
           for(var i = 0, l = g.length; i < l; i++){
               if(g[i] != mi){
                   g[i].setChecked(false);
               }
           }
       }
   }

   return {

       
       hideAll : function(){
            hideAll();  
       },

       // private
       register : function(menu){
           if(!menus){
               init();
           }
           menus[menu.id] = menu;
           menu.on("beforehide", onBeforeHide);
           menu.on("hide", onHide);
           menu.on("beforeshow", onBeforeShow);
           menu.on("show", onShow);
           var g = menu.group;
           if(g && menu.events["checkchange"]){
               if(!groups[g]){
                   groups[g] = [];
               }
               groups[g].push(menu);
               menu.on("checkchange", onCheck);
           }
       },

        
       get : function(menu){
           if(typeof menu == "string"){ // menu id
               if(!menus){  // not initialized, no menus to return
                   return null;
               }
               return menus[menu];
           }else if(menu.events){  // menu instance
               return menu;
           }else if(typeof menu.length == 'number'){ // array of menu items?
               return new Ext.menu.Menu({items:menu});
           }else{ // otherwise, must be a config
               return new Ext.menu.Menu(menu);
           }
       },

       // private
       unregister : function(menu){
           delete menus[menu.id];
           menu.un("beforehide", onBeforeHide);
           menu.un("hide", onHide);
           menu.un("beforeshow", onBeforeShow);
           menu.un("show", onShow);
           var g = menu.group;
           if(g && menu.events["checkchange"]){
               groups[g].remove(menu);
               menu.un("checkchange", onCheck);
           }
       },

       // private
       registerCheckable : function(menuItem){
           var g = menuItem.group;
           if(g){
               if(!groups[g]){
                   groups[g] = [];
               }
               groups[g].push(menuItem);
               menuItem.on("beforecheckchange", onBeforeCheck);
           }
       },

       // private
       unregisterCheckable : function(menuItem){
           var g = menuItem.group;
           if(g){
               groups[g].remove(menuItem);
               menuItem.un("beforecheckchange", onBeforeCheck);
           }
       },

       getCheckedItem : function(groupId){
           var g = groups[groupId];
           if(g){
               for(var i = 0, l = g.length; i < l; i++){
                   if(g[i].checked){
                       return g[i];
                   }
               }
           }
           return null;
       },

       setCheckedItem : function(groupId, itemId){
           var g = groups[groupId];
           if(g){
               for(var i = 0, l = g.length; i < l; i++){
                   if(g[i].id == itemId){
                       g[i].setChecked(true);
                   }
               }
           }
           return null;
       }
   };
}();


Ext.menu.BaseItem = function(config){
    Ext.menu.BaseItem.superclass.constructor.call(this, config);

    this.addEvents(
        
        'click',
        
        'activate',
        
        'deactivate'
    );

    if(this.handler){
        this.on("click", this.handler, this.scope);
    }
};

Ext.extend(Ext.menu.BaseItem, Ext.Component, {
    
    
    
    canActivate : false,
    
    activeClass : "x-menu-item-active",
    
    hideOnClick : true,
    
    hideDelay : 100,

    // private
    ctype: "Ext.menu.BaseItem",

    // private
    actionMode : "container",

    // private
    render : function(container, parentMenu){
        
        this.parentMenu = parentMenu;
        Ext.menu.BaseItem.superclass.render.call(this, container);
        this.container.menuItemId = this.id;
    },

    // private
    onRender : function(container, position){
        this.el = Ext.get(this.el);
        if(this.id){
            this.el.id = this.id;
        }
        container.dom.appendChild(this.el.dom);
    },

    
    setHandler : function(handler, scope){
        if(this.handler){
            this.un("click", this.handler, this.scope);
        }
        this.on("click", this.handler = handler, this.scope = scope);
    },

    // private
    onClick : function(e){
        if(!this.disabled && this.fireEvent("click", this, e) !== false
                && this.parentMenu.fireEvent("itemclick", this, e) !== false){
            this.handleClick(e);
        }else{
            e.stopEvent();
        }
    },

    // private
    activate : function(){
        if(this.disabled){
            return false;
        }
        var li = this.container;
        li.addClass(this.activeClass);
        this.region = li.getRegion().adjust(2, 2, -2, -2);
        this.fireEvent("activate", this);
        return true;
    },

    // private
    deactivate : function(){
        this.container.removeClass(this.activeClass);
        this.fireEvent("deactivate", this);
    },

    // private
    shouldDeactivate : function(e){
        return !this.region || !this.region.contains(e.getPoint());
    },

    // private
    handleClick : function(e){
        if(this.hideOnClick){
            this.parentMenu.hide.defer(this.hideDelay, this.parentMenu, [true]);
        }
    },

    // private
    expandMenu : function(autoActivate){
        // do nothing
    },

    // private
    hideMenu : function(){
        // do nothing
    }
});

Ext.menu.TextItem = function(cfg){
    if(typeof cfg == 'string'){
        cfg = {text: cfg}
    }
    Ext.menu.TextItem.superclass.constructor.call(this, cfg);
};

Ext.extend(Ext.menu.TextItem, Ext.menu.BaseItem, {
    
    
    hideOnClick : false,
    
    itemCls : "x-menu-text",

    // private
    onRender : function(){
        var s = document.createElement("span");
        s.className = this.itemCls;
        s.innerHTML = this.text;
        this.el = s;
        Ext.menu.TextItem.superclass.onRender.apply(this, arguments);
    }
});

Ext.menu.Separator = function(config){
    Ext.menu.Separator.superclass.constructor.call(this, config);
};

Ext.extend(Ext.menu.Separator, Ext.menu.BaseItem, {
    
    itemCls : "x-menu-sep",
    
    hideOnClick : false,

    // private
    onRender : function(li){
        var s = document.createElement("span");
        s.className = this.itemCls;
        s.innerHTML = "&#160;";
        this.el = s;
        li.addClass("x-menu-sep-li");
        Ext.menu.Separator.superclass.onRender.apply(this, arguments);
    }
});

Ext.menu.Item = function(config){
    Ext.menu.Item.superclass.constructor.call(this, config);
    if(this.menu){
        this.menu = Ext.menu.MenuMgr.get(this.menu);
    }
};
Ext.extend(Ext.menu.Item, Ext.menu.BaseItem, {
    
    
    
    
    
    
    
    itemCls : "x-menu-item",
    
    canActivate : true,
    
    showDelay: 200,
    // doc'd in BaseItem
    hideDelay: 200,

    // private
    ctype: "Ext.menu.Item",

    // private
    onRender : function(container, position){
        var el = document.createElement("a");
        el.hideFocus = true;
        el.unselectable = "on";
        el.href = this.href || "#";
        if(this.hrefTarget){
            el.target = this.hrefTarget;
        }
        el.className = this.itemCls + (this.menu ?  " x-menu-item-arrow" : "") + (this.cls ?  " " + this.cls : "");
        el.innerHTML = String.format(
                '<img src="{0}" class="x-menu-item-icon {2}" />{1}',
                this.icon || Ext.BLANK_IMAGE_URL, this.itemText||this.text, this.iconCls || '');
        this.el = el;
        Ext.menu.Item.superclass.onRender.call(this, container, position);
    },

    
    setText : function(text){
        this.text = text;
        if(this.rendered){
            this.el.update(String.format(
                '<img src="{0}" class="x-menu-item-icon {2}">{1}',
                this.icon || Ext.BLANK_IMAGE_URL, this.text, this.iconCls || ''));
            this.parentMenu.autoWidth();
        }
    },

    
    setIconClass : function(cls){
        var oldCls = this.iconCls;
        this.iconCls = cls;
        if(this.rendered){
            this.el.child('img.x-menu-item-icon').replaceClass(oldCls, this.iconCls);
        }
    },
    
    //private
    beforeDestroy: function(){
        if (this.menu){
            this.menu.destroy();
        }
        Ext.menu.Item.superclass.beforeDestroy.call(this);
    },

    // private
    handleClick : function(e){
        if(!this.href){ // if no link defined, stop the event automatically
            e.stopEvent();
        }
        Ext.menu.Item.superclass.handleClick.apply(this, arguments);
    },

    // private
    activate : function(autoExpand){
        if(Ext.menu.Item.superclass.activate.apply(this, arguments)){
            this.focus();
            if(autoExpand){
                this.expandMenu();
            }
        }
        return true;
    },

    // private
    shouldDeactivate : function(e){
        if(Ext.menu.Item.superclass.shouldDeactivate.call(this, e)){
            if(this.menu && this.menu.isVisible()){
                return !this.menu.getEl().getRegion().contains(e.getPoint());
            }
            return true;
        }
        return false;
    },

    // private
    deactivate : function(){
        Ext.menu.Item.superclass.deactivate.apply(this, arguments);
        this.hideMenu();
    },

    // private
    expandMenu : function(autoActivate){
        if(!this.disabled && this.menu){
            clearTimeout(this.hideTimer);
            delete this.hideTimer;
            if(!this.menu.isVisible() && !this.showTimer){
                this.showTimer = this.deferExpand.defer(this.showDelay, this, [autoActivate]);
            }else if (this.menu.isVisible() && autoActivate){
                this.menu.tryActivate(0, 1);
            }
        }
    },

    // private
    deferExpand : function(autoActivate){
        delete this.showTimer;
        this.menu.show(this.container, this.parentMenu.subMenuAlign || "tl-tr?", this.parentMenu);
        if(autoActivate){
            this.menu.tryActivate(0, 1);
        }
    },

    // private
    hideMenu : function(){
        clearTimeout(this.showTimer);
        delete this.showTimer;
        if(!this.hideTimer && this.menu && this.menu.isVisible()){
            this.hideTimer = this.deferHide.defer(this.hideDelay, this);
        }
    },

    // private
    deferHide : function(){
        delete this.hideTimer;
        if(this.menu.over){
            this.parentMenu.setActiveItem(this, false);
        }else{
            this.menu.hide();
        }
    }
});

Ext.menu.CheckItem = function(config){
    Ext.menu.CheckItem.superclass.constructor.call(this, config);
    this.addEvents(
        
        "beforecheckchange" ,
        
        "checkchange"
    );
    
    if(this.checkHandler){
        this.on('checkchange', this.checkHandler, this.scope);
    }
    Ext.menu.MenuMgr.registerCheckable(this);
};
Ext.extend(Ext.menu.CheckItem, Ext.menu.Item, {
    
    
    itemCls : "x-menu-item x-menu-check-item",
    
    groupClass : "x-menu-group-item",

    
    checked: false,

    // private
    ctype: "Ext.menu.CheckItem",

    // private
    onRender : function(c){
        Ext.menu.CheckItem.superclass.onRender.apply(this, arguments);
        if(this.group){
            this.el.addClass(this.groupClass);
        }
        if(this.checked){
            this.checked = false;
            this.setChecked(true, true);
        }
    },

    // private
    destroy : function(){
        Ext.menu.MenuMgr.unregisterCheckable(this);
        Ext.menu.CheckItem.superclass.destroy.apply(this, arguments);
    },

    
    setChecked : function(state, suppressEvent){
        if(this.checked != state && this.fireEvent("beforecheckchange", this, state) !== false){
            if(this.container){
                this.container[state ? "addClass" : "removeClass"]("x-menu-item-checked");
            }
            this.checked = state;
            if(suppressEvent !== true){
                this.fireEvent("checkchange", this, state);
            }
        }
    },

    // private
    handleClick : function(e){
       if(!this.disabled && !(this.checked && this.group)){// disable unselect on radio item
           this.setChecked(!this.checked);
       }
       Ext.menu.CheckItem.superclass.handleClick.apply(this, arguments);
    }
});

Ext.menu.Adapter = function(component, config){
    Ext.menu.Adapter.superclass.constructor.call(this, config);
    this.component = component;
};
Ext.extend(Ext.menu.Adapter, Ext.menu.BaseItem, {
    // private
    canActivate : true,

    // private
    onRender : function(container, position){
        this.component.render(container);
        this.el = this.component.getEl();
    },

    // private
    activate : function(){
        if(this.disabled){
            return false;
        }
        this.component.focus();
        this.fireEvent("activate", this);
        return true;
    },

    // private
    deactivate : function(){
        this.fireEvent("deactivate", this);
    },

    // private
    disable : function(){
        this.component.disable();
        Ext.menu.Adapter.superclass.disable.call(this);
    },

    // private
    enable : function(){
        this.component.enable();
        Ext.menu.Adapter.superclass.enable.call(this);
    }
});

Ext.menu.DateItem = function(config){
    Ext.menu.DateItem.superclass.constructor.call(this, new Ext.DatePicker(config), config);
    
    this.picker = this.component;
    this.addEvents('select');
    
    this.picker.on("render", function(picker){
        picker.getEl().swallowEvent("click");
        picker.container.addClass("x-menu-date-item");
    });

    this.picker.on("select", this.onSelect, this);
};

Ext.extend(Ext.menu.DateItem, Ext.menu.Adapter, {
    // private
    onSelect : function(picker, date){
        this.fireEvent("select", this, date, picker);
        Ext.menu.DateItem.superclass.handleClick.call(this);
    }
});

Ext.menu.ColorItem = function(config){
    Ext.menu.ColorItem.superclass.constructor.call(this, new Ext.ColorPalette(config), config);
    
    this.palette = this.component;
    this.relayEvents(this.palette, ["select"]);
    if(this.selectHandler){
        this.on('select', this.selectHandler, this.scope);
    }
};
Ext.extend(Ext.menu.ColorItem, Ext.menu.Adapter);

Ext.menu.DateMenu = function(config){
    Ext.menu.DateMenu.superclass.constructor.call(this, config);
    this.plain = true;
    var di = new Ext.menu.DateItem(config);
    this.add(di);
    
    this.picker = di.picker;
    
    this.relayEvents(di, ["select"]);

    this.on('beforeshow', function(){
        if(this.picker){
            this.picker.hideMonthPicker(true);
        }
    }, this);
};
Ext.extend(Ext.menu.DateMenu, Ext.menu.Menu, {
    cls:'x-date-menu',

    // private
    beforeDestroy : function() {
        this.picker.destroy();
    }
});

Ext.menu.ColorMenu = function(config){
    Ext.menu.ColorMenu.superclass.constructor.call(this, config);
    this.plain = true;
    var ci = new Ext.menu.ColorItem(config);
    this.add(ci);
    
    this.palette = ci.palette;
    
    this.relayEvents(ci, ["select"]);
};
Ext.extend(Ext.menu.ColorMenu, Ext.menu.Menu, {
    //private
    beforeDestroy: function(){
        this.palette.destroy();
    }
});

Ext.form.Field = Ext.extend(Ext.BoxComponent,  {
    
    
    
    
    
    
    
    
    
    
    

    
    invalidClass : "x-form-invalid",
    
    invalidText : "The value in this field is invalid",
    
    focusClass : "x-form-focus",
    
    validationEvent : "keyup",
    
    validateOnBlur : true,
    
    validationDelay : 250,
    
    defaultAutoCreate : {tag: "input", type: "text", size: "20", autocomplete: "off"},
    
    fieldClass : "x-form-field",
    
    msgTarget : 'qtip',
    
    msgFx : 'normal',
    
    readOnly : false,
    
    disabled : false,

    // private
    isFormField : true,

    // private
    hasFocus : false,

	// private
	initComponent : function(){
        Ext.form.Field.superclass.initComponent.call(this);
        this.addEvents(
            
            'focus',
            
            'blur',
            
            'specialkey',
            
            'change',
            
            'invalid',
            
            'valid'
        );
    },

    
    getName: function(){
         return this.rendered && this.el.dom.name ? this.el.dom.name : (this.hiddenName || '');
    },

    // private
    onRender : function(ct, position){
        Ext.form.Field.superclass.onRender.call(this, ct, position);
        if(!this.el){
            var cfg = this.getAutoCreate();
            if(!cfg.name){
                cfg.name = this.name || this.id;
            }
            if(this.inputType){
                cfg.type = this.inputType;
            }
            this.el = ct.createChild(cfg, position);
        }
        var type = this.el.dom.type;
        if(type){
            if(type == 'password'){
                type = 'text';
            }
            this.el.addClass('x-form-'+type);
        }
        if(this.readOnly){
            this.el.dom.readOnly = true;
        }
        if(this.tabIndex !== undefined){
            this.el.dom.setAttribute('tabIndex', this.tabIndex);
        }

        this.el.addClass([this.fieldClass, this.cls]);
    },

    // private
    initValue : function(){
        if(this.value !== undefined){
            this.setValue(this.value);
        }else if(this.el.dom.value.length > 0 && this.el.dom.value != this.emptyText){
            this.setValue(this.el.dom.value);
        }
        // reference to original value for reset
        this.originalValue = this.getValue();
    },

    
    isDirty : function() {
        if(this.disabled) {
            return false;
        }
        return String(this.getValue()) !== String(this.originalValue);
    },

    // private
    afterRender : function(){
        Ext.form.Field.superclass.afterRender.call(this);
        this.initEvents();
        this.initValue();
    },

    // private
    fireKey : function(e){
        if(e.isSpecialKey()){
            this.fireEvent("specialkey", this, e);
        }
    },

    
    reset : function(){
        this.setValue(this.originalValue);
        this.clearInvalid();
    },

    // private
    initEvents : function(){
        this.el.on(Ext.isIE || Ext.isSafari3 ? "keydown" : "keypress", this.fireKey,  this);
        this.el.on("focus", this.onFocus,  this);

        // fix weird FF/Win editor issue when changing OS window focus
        var o = this.inEditor && Ext.isWindows && Ext.isGecko ? {buffer:10} : null;
        this.el.on("blur", this.onBlur,  this, o);
    },

    // private
    onFocus : function(){
        if(this.focusClass){
            this.el.addClass(this.focusClass);
        }
        if(!this.hasFocus){
            this.hasFocus = true;
            this.startValue = this.getValue();
            this.fireEvent("focus", this);
        }
    },

    // private
    beforeBlur : Ext.emptyFn,

    // private
    onBlur : function(){
        this.beforeBlur();
        if(this.focusClass){
            this.el.removeClass(this.focusClass);
        }
        this.hasFocus = false;
        if(this.validationEvent !== false && this.validateOnBlur && this.validationEvent != "blur"){
            this.validate();
        }
        var v = this.getValue();
        if(String(v) !== String(this.startValue)){
            this.fireEvent('change', this, v, this.startValue);
        }
        this.fireEvent("blur", this);
    },

    
    isValid : function(preventMark){
        if(this.disabled){
            return true;
        }
        var restore = this.preventMark;
        this.preventMark = preventMark === true;
        var v = this.validateValue(this.processValue(this.getRawValue()));
        this.preventMark = restore;
        return v;
    },

    
    validate : function(){
        if(this.disabled || this.validateValue(this.processValue(this.getRawValue()))){
            this.clearInvalid();
            return true;
        }
        return false;
    },

    // protected - should be overridden by subclasses if necessary to prepare raw values for validation
    processValue : function(value){
        return value;
    },

    // private
    // Subclasses should provide the validation implementation by overriding this
    validateValue : function(value){
        return true;
    },

    
    markInvalid : function(msg){
        if(!this.rendered || this.preventMark){ // not rendered
            return;
        }
        this.el.addClass(this.invalidClass);
        msg = msg || this.invalidText;

        switch(this.msgTarget){
            case 'qtip':
                this.el.dom.qtip = msg;
                this.el.dom.qclass = 'x-form-invalid-tip';
                if(Ext.QuickTips){ // fix for floating editors interacting with DND
                    Ext.QuickTips.enable();
                }
                break;
            case 'title':
                this.el.dom.title = msg;
                break;
            case 'under':
                if(!this.errorEl){
                    var elp = this.getErrorCt();
                    if(!elp){ // field has no container el
                        this.el.dom.title = msg;
                        break;
                    }
                    this.errorEl = elp.createChild({cls:'x-form-invalid-msg'});
                    this.errorEl.setWidth(elp.getWidth(true)-20);
                }
                this.errorEl.update(msg);
                Ext.form.Field.msgFx[this.msgFx].show(this.errorEl, this);
                break;
            case 'side':
                if(!this.errorIcon){
                    var elp = this.getErrorCt();
                    if(!elp){ // field has no container el
                        this.el.dom.title = msg;
                        break;
                    }
                    this.errorIcon = elp.createChild({cls:'x-form-invalid-icon'});
                }
                this.alignErrorIcon();
                this.errorIcon.dom.qtip = msg;
                this.errorIcon.dom.qclass = 'x-form-invalid-tip';
                this.errorIcon.show();
                this.on('resize', this.alignErrorIcon, this);
                break;
            default:
                var t = Ext.getDom(this.msgTarget);
                t.innerHTML = msg;
                t.style.display = this.msgDisplay;
                break;
        }
        this.fireEvent('invalid', this, msg);
    },

    // private
    getErrorCt : function(){
        return this.el.findParent('.x-form-element', 5, true) || // use form element wrap if available
            this.el.findParent('.x-form-field-wrap', 5, true);   // else direct field wrap
    },

    // private
    alignErrorIcon : function(){
        this.errorIcon.alignTo(this.el, 'tl-tr', [2, 0]);
    },

    
    clearInvalid : function(){
        if(!this.rendered || this.preventMark){ // not rendered
            return;
        }
        this.el.removeClass(this.invalidClass);
        switch(this.msgTarget){
            case 'qtip':
                this.el.dom.qtip = '';
                break;
            case 'title':
                this.el.dom.title = '';
                break;
            case 'under':
                if(this.errorEl){
                    Ext.form.Field.msgFx[this.msgFx].hide(this.errorEl, this);
                }
                break;
            case 'side':
                if(this.errorIcon){
                    this.errorIcon.dom.qtip = '';
                    this.errorIcon.hide();
                    this.un('resize', this.alignErrorIcon, this);
                }
                break;
            default:
                var t = Ext.getDom(this.msgTarget);
                t.innerHTML = '';
                t.style.display = 'none';
                break;
        }
        this.fireEvent('valid', this);
    },

    
    getRawValue : function(){
        var v = this.rendered ? this.el.getValue() : Ext.value(this.value, '');
        if(v === this.emptyText){
            v = '';
        }
        return v;
    },

    
    getValue : function(){
        if(!this.rendered) {
            return this.value;
        }
        var v = this.el.getValue();
        if(v === this.emptyText || v === undefined){
            v = '';
        }
        return v;
    },

    
    setRawValue : function(v){
        return this.el.dom.value = (v === null || v === undefined ? '' : v);
    },

    
    setValue : function(v){
        this.value = v;
        if(this.rendered){
            this.el.dom.value = (v === null || v === undefined ? '' : v);
            this.validate();
        }
    },

    // private
    adjustSize : function(w, h){
        var s = Ext.form.Field.superclass.adjustSize.call(this, w, h);
        s.width = this.adjustWidth(this.el.dom.tagName, s.width);
        return s;
    },

    // private
    adjustWidth : function(tag, w){
        tag = tag.toLowerCase();
        if(typeof w == 'number' && !Ext.isSafari){
            if(Ext.isIE && (tag == 'input' || tag == 'textarea')){
                if(tag == 'input' && !Ext.isStrict){
                    return this.inEditor ? w : w - 3;
                }
                if(tag == 'input' && Ext.isStrict){
                    return w - (Ext.isIE6 ? 4 : 1);
                }
                if(tag == 'textarea' && Ext.isStrict){
                    return w-2;
                }
            }else if(Ext.isOpera && Ext.isStrict){
                if(tag == 'input'){
                    return w + 2;
                }
                if(tag == 'textarea'){
                    return w-2;
                }
            }
        }
        return w;
    }

    
    

    
});

Ext.form.MessageTargets = {
    'qtip' : {
        mark: function(f){
            this.el.dom.qtip = msg;
            this.el.dom.qclass = 'x-form-invalid-tip';
            if(Ext.QuickTips){ // fix for floating editors interacting with DND
                Ext.QuickTips.enable();
            }
        },
        clear: function(f){
            this.el.dom.qtip = '';
        }
    },
    'title' : {
        mark: function(f){
            this.el.dom.title = msg;
        },
        clear: function(f){
            this.el.dom.title = '';
        }
    },
    'under' : {
        mark: function(f){
            if(!this.errorEl){
                var elp = this.getErrorCt();
                if(!elp){ // field has no container el
                    this.el.dom.title = msg;
                    return;
                }
                this.errorEl = elp.createChild({cls:'x-form-invalid-msg'});
                this.errorEl.setWidth(elp.getWidth(true)-20);
            }
            this.errorEl.update(msg);
            Ext.form.Field.msgFx[this.msgFx].show(this.errorEl, this);
        },
        clear: function(f){
            if(this.errorEl){
                Ext.form.Field.msgFx[this.msgFx].hide(this.errorEl, this);
            }else{
                this.el.dom.title = '';
            }
        }
    },
    'side' : {
        mark: function(f){
            if(!this.errorIcon){
                var elp = this.getErrorCt();
                if(!elp){ // field has no container el
                    this.el.dom.title = msg;
                    return;
                }
                this.errorIcon = elp.createChild({cls:'x-form-invalid-icon'});
            }
            this.alignErrorIcon();
            this.errorIcon.dom.qtip = msg;
            this.errorIcon.dom.qclass = 'x-form-invalid-tip';
            this.errorIcon.show();
            this.on('resize', this.alignErrorIcon, this);
        },
        clear: function(f){
            if(this.errorIcon){
                this.errorIcon.dom.qtip = '';
                this.errorIcon.hide();
                this.un('resize', this.alignErrorIcon, this);
            }else{
                this.el.dom.title = '';
            }
        }
    },
    'around' : {
        mark: function(f){

        },
        clear: function(f){

        }
    }
};


// anything other than normal should be considered experimental
Ext.form.Field.msgFx = {
    normal : {
        show: function(msgEl, f){
            msgEl.setDisplayed('block');
        },

        hide : function(msgEl, f){
            msgEl.setDisplayed(false).update('');
        }
    },

    slide : {
        show: function(msgEl, f){
            msgEl.slideIn('t', {stopFx:true});
        },

        hide : function(msgEl, f){
            msgEl.slideOut('t', {stopFx:true,useDisplay:true});
        }
    },

    slideRight : {
        show: function(msgEl, f){
            msgEl.fixDisplay();
            msgEl.alignTo(f.el, 'tl-tr');
            msgEl.slideIn('l', {stopFx:true});
        },

        hide : function(msgEl, f){
            msgEl.slideOut('l', {stopFx:true,useDisplay:true});
        }
    }
};
Ext.reg('field', Ext.form.Field);


Ext.form.TextField = Ext.extend(Ext.form.Field,  {
    
    
    
    grow : false,
    
    growMin : 30,
    
    growMax : 800,
    
    vtype : null,
    
    maskRe : null,
    
    disableKeyFilter : false,
    
    allowBlank : true,
    
    minLength : 0,
    
    maxLength : Number.MAX_VALUE,
    
    minLengthText : "The minimum length for this field is {0}",
    
    maxLengthText : "The maximum length for this field is {0}",
    
    selectOnFocus : false,
    
    blankText : "This field is required",
    
    validator : null,
    
    regex : null,
    
    regexText : "",
    
    emptyText : null,
    
    emptyClass : 'x-form-empty-field',

    

    initComponent : function(){
        Ext.form.TextField.superclass.initComponent.call(this);
        this.addEvents(
            
            'autosize',

            
            'keydown',
            
            'keyup',
            
            'keypress'
        );
    },

    // private
    initEvents : function(){
        Ext.form.TextField.superclass.initEvents.call(this);
        if(this.validationEvent == 'keyup'){
            this.validationTask = new Ext.util.DelayedTask(this.validate, this);
            this.el.on('keyup', this.filterValidation, this);
        }
        else if(this.validationEvent !== false){
            this.el.on(this.validationEvent, this.validate, this, {buffer: this.validationDelay});
        }
        if(this.selectOnFocus || this.emptyText){
            this.on("focus", this.preFocus, this);
            this.el.on('mousedown', function(){
                if(!this.hasFocus){
                    this.el.on('mouseup', function(e){
                        e.preventDefault();
                    }, this, {single:true});
                }
            }, this);
            if(this.emptyText){
                this.on('blur', this.postBlur, this);
                this.applyEmptyText();
            }
        }
        if(this.maskRe || (this.vtype && this.disableKeyFilter !== true && (this.maskRe = Ext.form.VTypes[this.vtype+'Mask']))){
            this.el.on("keypress", this.filterKeys, this);
        }
        if(this.grow){
            this.el.on("keyup", this.onKeyUpBuffered,  this, {buffer:50});
            this.el.on("click", this.autoSize,  this);
        }

        if(this.enableKeyEvents){
            this.el.on("keyup", this.onKeyUp, this);
            this.el.on("keydown", this.onKeyDown, this);
            this.el.on("keypress", this.onKeyPress, this);
        }
    },

    processValue : function(value){
        if(this.stripCharsRe){
            var newValue = value.replace(this.stripCharsRe, '');
            if(newValue !== value){
                this.setRawValue(newValue);
                return newValue;
            }
        }
        return value;
    },

    filterValidation : function(e){
        if(!e.isNavKeyPress()){
            this.validationTask.delay(this.validationDelay);
        }
    },
    
    //private
    onDisable: function(){
        Ext.form.TextField.superclass.onDisable.call(this);
        if(Ext.isIE){
            this.el.dom.unselectable = 'on';
        }
    },
    
    //private
    onEnable: function(){
        Ext.form.TextField.superclass.onEnable.call(this);
        if(Ext.isIE){
            this.el.dom.unselectable = '';
        }
    },

    // private
    onKeyUpBuffered : function(e){
        if(!e.isNavKeyPress()){
            this.autoSize();
        }
    },

    // private
    onKeyUp : function(e){
        this.fireEvent('keyup', this, e);
    },

    // private
    onKeyDown : function(e){
        this.fireEvent('keydown', this, e);
    },

    // private
    onKeyPress : function(e){
        this.fireEvent('keypress', this, e);
    },

    
    reset : function(){
        Ext.form.TextField.superclass.reset.call(this);
        this.applyEmptyText();
    },

    applyEmptyText : function(){
        if(this.rendered && this.emptyText && this.getRawValue().length < 1 && !this.hasFocus){
            this.setRawValue(this.emptyText);
            this.el.addClass(this.emptyClass);
        }
    },

    // private
    preFocus : function(){
        if(this.emptyText){
            if(this.el.dom.value == this.emptyText){
                this.setRawValue('');
            }
            this.el.removeClass(this.emptyClass);
        }
        if(this.selectOnFocus){
            this.el.dom.select();
        }
    },

    // private
    postBlur : function(){
        this.applyEmptyText();
    },

    // private
    filterKeys : function(e){
        if(e.ctrlKey){
            return;
        }
        var k = e.getKey();
        if(Ext.isGecko && (e.isNavKeyPress() || k == e.BACKSPACE || (k == e.DELETE && e.button == -1))){
            return;
        }
        var c = e.getCharCode(), cc = String.fromCharCode(c);
        if(!Ext.isGecko && e.isSpecialKey() && !cc){
            return;
        }
        if(!this.maskRe.test(cc)){
            e.stopEvent();
        }
    },

    setValue : function(v){
        if(this.emptyText && this.el && v !== undefined && v !== null && v !== ''){
            this.el.removeClass(this.emptyClass);
        }
        Ext.form.TextField.superclass.setValue.apply(this, arguments);
        this.applyEmptyText();
        this.autoSize();
    },

    
    validateValue : function(value){
        if(value.length < 1 || value === this.emptyText){ // if it's blank
             if(this.allowBlank){
                 this.clearInvalid();
                 return true;
             }else{
                 this.markInvalid(this.blankText);
                 return false;
             }
        }
        if(value.length < this.minLength){
            this.markInvalid(String.format(this.minLengthText, this.minLength));
            return false;
        }
        if(value.length > this.maxLength){
            this.markInvalid(String.format(this.maxLengthText, this.maxLength));
            return false;
        }
        if(this.vtype){
            var vt = Ext.form.VTypes;
            if(!vt[this.vtype](value, this)){
                this.markInvalid(this.vtypeText || vt[this.vtype +'Text']);
                return false;
            }
        }
        if(typeof this.validator == "function"){
            var msg = this.validator(value);
            if(msg !== true){
                this.markInvalid(msg);
                return false;
            }
        }
        if(this.regex && !this.regex.test(value)){
            this.markInvalid(this.regexText);
            return false;
        }
        return true;
    },

    
    selectText : function(start, end){
        var v = this.getRawValue();
        var doFocus = false;
        if(v.length > 0){
            start = start === undefined ? 0 : start;
            end = end === undefined ? v.length : end;
            var d = this.el.dom;
            if(d.setSelectionRange){
                d.setSelectionRange(start, end);
            }else if(d.createTextRange){
                var range = d.createTextRange();
                range.moveStart("character", start);
                range.moveEnd("character", end-v.length);
                range.select();
            }
            doFocus = Ext.isGecko || Ext.isOpera;
        }else{
            doFocus = true;
        }
        if(doFocus){
            this.focus();
        }
    },

    
    autoSize : function(){
        if(!this.grow || !this.rendered){
            return;
        }
        if(!this.metrics){
            this.metrics = Ext.util.TextMetrics.createInstance(this.el);
        }
        var el = this.el;
        var v = el.dom.value;
        var d = document.createElement('div');
        d.appendChild(document.createTextNode(v));
        v = d.innerHTML;
        Ext.removeNode(d);
        d = null;
        v += "&#160;";
        var w = Math.min(this.growMax, Math.max(this.metrics.getWidth(v) +  10, this.growMin));
        this.el.setWidth(w);
        this.fireEvent("autosize", this, w);
    }
});
Ext.reg('textfield', Ext.form.TextField);


Ext.form.TriggerField = Ext.extend(Ext.form.TextField,  {
    
    
    defaultAutoCreate : {tag: "input", type: "text", size: "16", autocomplete: "off"},
    
    hideTrigger:false,

    
    autoSize: Ext.emptyFn,
    // private
    monitorTab : true,
    // private
    deferHeight : true,
    // private
    mimicing : false,

    // private
    onResize : function(w, h){
        Ext.form.TriggerField.superclass.onResize.call(this, w, h);
        if(typeof w == 'number'){
            this.el.setWidth(this.adjustWidth('input', w - this.trigger.getWidth()));
        }
        this.wrap.setWidth(this.el.getWidth()+this.trigger.getWidth());
    },

    // private
    adjustSize : Ext.BoxComponent.prototype.adjustSize,

    // private
    getResizeEl : function(){
        return this.wrap;
    },

    // private
    getPositionEl : function(){
        return this.wrap;
    },

    // private
    alignErrorIcon : function(){
        if(this.wrap){
            this.errorIcon.alignTo(this.wrap, 'tl-tr', [2, 0]);
        }
    },

    // private
    onRender : function(ct, position){
        Ext.form.TriggerField.superclass.onRender.call(this, ct, position);
        this.wrap = this.el.wrap({cls: "x-form-field-wrap"});
        this.trigger = this.wrap.createChild(this.triggerConfig ||
                {tag: "img", src: Ext.BLANK_IMAGE_URL, cls: "x-form-trigger " + this.triggerClass});
        if(this.hideTrigger){
            this.trigger.setDisplayed(false);
        }
        this.initTrigger();
        if(!this.width){
            this.wrap.setWidth(this.el.getWidth()+this.trigger.getWidth());
        }
    },

    afterRender : function(){
        Ext.form.TriggerField.superclass.afterRender.call(this);
        var y;
        if(Ext.isIE && !this.hideTrigger && this.el.getY() != (y = this.trigger.getY())){
            this.el.position();
            this.el.setY(y);
        }
    },

    // private
    initTrigger : function(){
        this.trigger.on("click", this.onTriggerClick, this, {preventDefault:true});
        this.trigger.addClassOnOver('x-form-trigger-over');
        this.trigger.addClassOnClick('x-form-trigger-click');
    },

    // private
    onDestroy : function(){
        if(this.trigger){
            this.trigger.removeAllListeners();
            this.trigger.remove();
        }
        if(this.wrap){
            this.wrap.remove();
        }
        Ext.form.TriggerField.superclass.onDestroy.call(this);
    },

    // private
    onFocus : function(){
        Ext.form.TriggerField.superclass.onFocus.call(this);
        if(!this.mimicing){
            this.wrap.addClass('x-trigger-wrap-focus');
            this.mimicing = true;
            Ext.get(Ext.isIE ? document.body : document).on("mousedown", this.mimicBlur, this, {delay: 10});
            if(this.monitorTab){
                this.el.on("keydown", this.checkTab, this);
            }
        }
    },

    // private
    checkTab : function(e){
        if(e.getKey() == e.TAB){
            this.triggerBlur();
        }
    },

    // private
    onBlur : function(){
        // do nothing
    },

    // private
    mimicBlur : function(e){
        if(!this.wrap.contains(e.target) && this.validateBlur(e)){
            this.triggerBlur();
        }
    },

    // private
    triggerBlur : function(){
        this.mimicing = false;
        Ext.get(Ext.isIE ? document.body : document).un("mousedown", this.mimicBlur, this);
        if(this.monitorTab && this.el){
            this.el.un("keydown", this.checkTab, this);
        }
        this.beforeBlur();
        if(this.wrap){
            this.wrap.removeClass('x-trigger-wrap-focus');
        }
        Ext.form.TriggerField.superclass.onBlur.call(this);
    },

    beforeBlur : Ext.emptyFn, 

    // private
    // This should be overriden by any subclass that needs to check whether or not the field can be blurred.
    validateBlur : function(e){
        return true;
    },

    // private
    onDisable : function(){
        Ext.form.TriggerField.superclass.onDisable.call(this);
        if(this.wrap){
            this.wrap.addClass(this.disabledClass);
            this.el.removeClass(this.disabledClass);
        }
    },

    // private
    onEnable : function(){
        Ext.form.TriggerField.superclass.onEnable.call(this);
        if(this.wrap){
            this.wrap.removeClass(this.disabledClass);
        }
    },

    // private
    onShow : function(){
        if(this.wrap){
            this.wrap.dom.style.display = '';
            this.wrap.dom.style.visibility = 'visible';
        }
    },

    // private
    onHide : function(){
        this.wrap.dom.style.display = 'none';
    },

    
    onTriggerClick : Ext.emptyFn

    
    
    
});

// TwinTriggerField is not a public class to be used directly.  It is meant as an abstract base class
// to be extended by an implementing class.  For an example of implementing this class, see the custom
// SearchField implementation here: http://extjs.com/deploy/ext/examples/form/custom.html
Ext.form.TwinTriggerField = Ext.extend(Ext.form.TriggerField, {
    initComponent : function(){
        Ext.form.TwinTriggerField.superclass.initComponent.call(this);

        this.triggerConfig = {
            tag:'span', cls:'x-form-twin-triggers', cn:[
            {tag: "img", src: Ext.BLANK_IMAGE_URL, cls: "x-form-trigger " + this.trigger1Class},
            {tag: "img", src: Ext.BLANK_IMAGE_URL, cls: "x-form-trigger " + this.trigger2Class}
        ]};
    },

    getTrigger : function(index){
        return this.triggers[index];
    },

    initTrigger : function(){
        var ts = this.trigger.select('.x-form-trigger', true);
        this.wrap.setStyle('overflow', 'hidden');
        var triggerField = this;
        ts.each(function(t, all, index){
            t.hide = function(){
                var w = triggerField.wrap.getWidth();
                this.dom.style.display = 'none';
                triggerField.el.setWidth(w-triggerField.trigger.getWidth());
            };
            t.show = function(){
                var w = triggerField.wrap.getWidth();
                this.dom.style.display = '';
                triggerField.el.setWidth(w-triggerField.trigger.getWidth());
            };
            var triggerIndex = 'Trigger'+(index+1);

            if(this['hide'+triggerIndex]){
                t.dom.style.display = 'none';
            }
            t.on("click", this['on'+triggerIndex+'Click'], this, {preventDefault:true});
            t.addClassOnOver('x-form-trigger-over');
            t.addClassOnClick('x-form-trigger-click');
        }, this);
        this.triggers = ts.elements;
    },

    onTrigger1Click : Ext.emptyFn,
    onTrigger2Click : Ext.emptyFn
});
Ext.reg('trigger', Ext.form.TriggerField);

Ext.form.TextArea = Ext.extend(Ext.form.TextField,  {
    
    growMin : 60,
    
    growMax: 1000,
    growAppend : '&#160;\n&#160;',
    growPad : 0,

    enterIsSpecial : false,

    
    preventScrollbars: false,
    

    // private
    onRender : function(ct, position){
        if(!this.el){
            this.defaultAutoCreate = {
                tag: "textarea",
                style:"width:100px;height:60px;",
                autocomplete: "off"
            };
        }
        Ext.form.TextArea.superclass.onRender.call(this, ct, position);
        if(this.grow){
            this.textSizeEl = Ext.DomHelper.append(document.body, {
                tag: "pre", cls: "x-form-grow-sizer"
            });
            if(this.preventScrollbars){
                this.el.setStyle("overflow", "hidden");
            }
            this.el.setHeight(this.growMin);
        }
    },

    onDestroy : function(){
        if(this.textSizeEl){
            Ext.removeNode(this.textSizeEl);
        }
        Ext.form.TextArea.superclass.onDestroy.call(this);
    },

    fireKey : function(e){
        if(e.isSpecialKey() && (this.enterIsSpecial || (e.getKey() != e.ENTER || e.hasModifier()))){
            this.fireEvent("specialkey", this, e);
        }
    },

    // private
    onKeyUp : function(e){
        if(!e.isNavKeyPress() || e.getKey() == e.ENTER){
            this.autoSize();
        }
        Ext.form.TextArea.superclass.onKeyUp.call(this, e);
    },

    
    autoSize : function(){
        if(!this.grow || !this.textSizeEl){
            return;
        }
        var el = this.el;
        var v = el.dom.value;
        var ts = this.textSizeEl;
        ts.innerHTML = '';
        ts.appendChild(document.createTextNode(v));
        v = ts.innerHTML;

        Ext.fly(ts).setWidth(this.el.getWidth());
        if(v.length < 1){
            v = "&#160;&#160;";
        }else{
            if(Ext.isIE){
                v = v.replace(/\n/g, '<p>&#160;</p>');
            }
            v += this.growAppend;
        }
        ts.innerHTML = v;
        var h = Math.min(this.growMax, Math.max(ts.offsetHeight, this.growMin)+this.growPad);
        if(h != this.lastHeight){
            this.lastHeight = h;
            this.el.setHeight(h);
            this.fireEvent("autosize", this, h);
        }
    }
});
Ext.reg('textarea', Ext.form.TextArea);

Ext.form.NumberField = Ext.extend(Ext.form.TextField,  {
    
    
    fieldClass: "x-form-field x-form-num-field",
    
    allowDecimals : true,
    
    decimalSeparator : ".",
    
    decimalPrecision : 2,
    
    allowNegative : true,
    
    minValue : Number.NEGATIVE_INFINITY,
    
    maxValue : Number.MAX_VALUE,
    
    minText : "The minimum value for this field is {0}",
    
    maxText : "The maximum value for this field is {0}",
    
    nanText : "{0} is not a valid number",
    
    baseChars : "0123456789",

    // private
    initEvents : function(){
        Ext.form.NumberField.superclass.initEvents.call(this);
        var allowed = this.baseChars+'';
        if(this.allowDecimals){
            allowed += this.decimalSeparator;
        }
        if(this.allowNegative){
            allowed += "-";
        }
        this.stripCharsRe = new RegExp('[^'+allowed+']', 'gi');
        var keyPress = function(e){
            var k = e.getKey();
            if(!Ext.isIE && (e.isSpecialKey() || k == e.BACKSPACE || k == e.DELETE)){
                return;
            }
            var c = e.getCharCode();
            if(allowed.indexOf(String.fromCharCode(c)) === -1){
                e.stopEvent();
            }
        };
        this.el.on("keypress", keyPress, this);
    },

    // private
    validateValue : function(value){
        if(!Ext.form.NumberField.superclass.validateValue.call(this, value)){
            return false;
        }
        if(value.length < 1){ // if it's blank and textfield didn't flag it then it's valid
             return true;
        }
        value = String(value).replace(this.decimalSeparator, ".");
        if(isNaN(value)){
            this.markInvalid(String.format(this.nanText, value));
            return false;
        }
        var num = this.parseValue(value);
        if(num < this.minValue){
            this.markInvalid(String.format(this.minText, this.minValue));
            return false;
        }
        if(num > this.maxValue){
            this.markInvalid(String.format(this.maxText, this.maxValue));
            return false;
        }
        return true;
    },

    getValue : function(){
        return this.fixPrecision(this.parseValue(Ext.form.NumberField.superclass.getValue.call(this)));
    },

    setValue : function(v){
    	v = typeof v == 'number' ? v : parseFloat(String(v).replace(this.decimalSeparator, "."));
        v = isNaN(v) ? '' : String(v).replace(".", this.decimalSeparator);
        Ext.form.NumberField.superclass.setValue.call(this, v);
    },

    // private
    parseValue : function(value){
        value = parseFloat(String(value).replace(this.decimalSeparator, "."));
        return isNaN(value) ? '' : value;
    },

    // private
    fixPrecision : function(value){
        var nan = isNaN(value);
        if(!this.allowDecimals || this.decimalPrecision == -1 || nan || !value){
           return nan ? '' : value;
        }
        return parseFloat(parseFloat(value).toFixed(this.decimalPrecision));
    },

    beforeBlur : function(){
        var v = this.parseValue(this.getRawValue());
        if(v || v === 0){
            this.setValue(this.fixPrecision(v));
        }
    }
});
Ext.reg('numberfield', Ext.form.NumberField);

Ext.form.DateField = Ext.extend(Ext.form.TriggerField,  {
    
    format : "m/d/Y",
    
    altFormats : "m/d/Y|n/j/Y|n/j/y|m/j/y|n/d/y|m/j/Y|n/d/Y|m-d-y|m-d-Y|m/d|m-d|md|mdy|mdY|d|Y-m-d",
    
    disabledDaysText : "Disabled",
    
    disabledDatesText : "Disabled",
    
    minText : "The date in this field must be equal to or after {0}",
    
    maxText : "The date in this field must be equal to or before {0}",
    
    invalidText : "{0} is not a valid date - it must be in the format {1}",
    
    triggerClass : 'x-form-date-trigger',
    
    showToday : true,
    
    
    
    
    

    // private
    defaultAutoCreate : {tag: "input", type: "text", size: "10", autocomplete: "off"},

    initComponent : function(){
        Ext.form.DateField.superclass.initComponent.call(this);
        
        this.addEvents(
            
            'select'
        );
        
        if(typeof this.minValue == "string"){
            this.minValue = this.parseDate(this.minValue);
        }
        if(typeof this.maxValue == "string"){
            this.maxValue = this.parseDate(this.maxValue);
        }
        this.disabledDatesRE = null;
        this.initDisabledDays();
    },

    // private
    initDisabledDays : function(){
        if(this.disabledDates){
            var dd = this.disabledDates;
            var re = "(?:";
            for(var i = 0; i < dd.length; i++){
                re += dd[i];
                if(i != dd.length-1) re += "|";
            }
            this.disabledDatesRE = new RegExp(re + ")");
        }
    },

    
    setDisabledDates : function(dd){
        this.disabledDates = dd;
        this.initDisabledDays();
        if(this.menu){
            this.menu.picker.setDisabledDates(this.disabledDatesRE);
        }
    },

    
    setDisabledDays : function(dd){
        this.disabledDays = dd;
        if(this.menu){
            this.menu.picker.setDisabledDays(dd);
        }
    },

    
    setMinValue : function(dt){
        this.minValue = (typeof dt == "string" ? this.parseDate(dt) : dt);
        if(this.menu){
            this.menu.picker.setMinDate(this.minValue);
        }
    },

    
    setMaxValue : function(dt){
        this.maxValue = (typeof dt == "string" ? this.parseDate(dt) : dt);
        if(this.menu){
            this.menu.picker.setMaxDate(this.maxValue);
        }
    },

    // private
    validateValue : function(value){
        value = this.formatDate(value);
        if(!Ext.form.DateField.superclass.validateValue.call(this, value)){
            return false;
        }
        if(value.length < 1){ // if it's blank and textfield didn't flag it then it's valid
             return true;
        }
        var svalue = value;
        value = this.parseDate(value);
        if(!value){
            this.markInvalid(String.format(this.invalidText, svalue, this.format));
            return false;
        }
        var time = value.getTime();
        if(this.minValue && time < this.minValue.getTime()){
            this.markInvalid(String.format(this.minText, this.formatDate(this.minValue)));
            return false;
        }
        if(this.maxValue && time > this.maxValue.getTime()){
            this.markInvalid(String.format(this.maxText, this.formatDate(this.maxValue)));
            return false;
        }
        if(this.disabledDays){
            var day = value.getDay();
            for(var i = 0; i < this.disabledDays.length; i++) {
            	if(day === this.disabledDays[i]){
            	    this.markInvalid(this.disabledDaysText);
                    return false;
            	}
            }
        }
        var fvalue = this.formatDate(value);
        if(this.disabledDatesRE && this.disabledDatesRE.test(fvalue)){
            this.markInvalid(String.format(this.disabledDatesText, fvalue));
            return false;
        }
        return true;
    },

    // private
    // Provides logic to override the default TriggerField.validateBlur which just returns true
    validateBlur : function(){
        return !this.menu || !this.menu.isVisible();
    },

    
    getValue : function(){
        return this.parseDate(Ext.form.DateField.superclass.getValue.call(this)) || "";
    },

    
    setValue : function(date){
        Ext.form.DateField.superclass.setValue.call(this, this.formatDate(this.parseDate(date)));
    },

    // private
    parseDate : function(value){
        if(!value || Ext.isDate(value)){
            return value;
        }
        var v = Date.parseDate(value, this.format);
        if(!v && this.altFormats){
            if(!this.altFormatsArray){
                this.altFormatsArray = this.altFormats.split("|");
            }
            for(var i = 0, len = this.altFormatsArray.length; i < len && !v; i++){
                v = Date.parseDate(value, this.altFormatsArray[i]);
            }
        }
        return v;
    },

    // private
    onDestroy : function(){
        if(this.menu) {
            this.menu.destroy();
        }
        if(this.wrap){
            this.wrap.remove();
        }
        Ext.form.DateField.superclass.onDestroy.call(this);
    },

    // private
    formatDate : function(date){
        return Ext.isDate(date) ? date.dateFormat(this.format) : date;
    },

    // private
    menuListeners : {
        select: function(m, d){
            this.setValue(d);
            this.fireEvent('select', this, d);
        },
        show : function(){ // retain focus styling
            this.onFocus();
        },
        hide : function(){
            this.focus.defer(10, this);
            var ml = this.menuListeners;
            this.menu.un("select", ml.select,  this);
            this.menu.un("show", ml.show,  this);
            this.menu.un("hide", ml.hide,  this);
        }
    },

    
    // private
    // Implements the default empty TriggerField.onTriggerClick function to display the DatePicker
    onTriggerClick : function(){
        if(this.disabled){
            return;
        }
        if(this.menu == null){
            this.menu = new Ext.menu.DateMenu();
        }
        Ext.apply(this.menu.picker,  {
            minDate : this.minValue,
            maxDate : this.maxValue,
            disabledDatesRE : this.disabledDatesRE,
            disabledDatesText : this.disabledDatesText,
            disabledDays : this.disabledDays,
            disabledDaysText : this.disabledDaysText,
            format : this.format,
            showToday : this.showToday,
            minText : String.format(this.minText, this.formatDate(this.minValue)),
            maxText : String.format(this.maxText, this.formatDate(this.maxValue))
        });
        this.menu.on(Ext.apply({}, this.menuListeners, {
            scope:this
        }));
        this.menu.picker.setValue(this.getValue() || new Date());
        this.menu.show(this.el, "tl-bl?");
    },

    // private
    beforeBlur : function(){
        var v = this.parseDate(this.getRawValue());
        if(v){
            this.setValue(v);
        }
    }

    
    
    
    
});
Ext.reg('datefield', Ext.form.DateField);

Ext.form.ComboBox = Ext.extend(Ext.form.TriggerField, {
    
    
    
    
    

    // private
    defaultAutoCreate : {tag: "input", type: "text", size: "24", autocomplete: "off"},
    
    
    
    
    
    
    listClass: '',
    
    selectedClass: 'x-combo-selected',
    
    triggerClass : 'x-form-arrow-trigger',
    
    shadow:'sides',
    
    listAlign: 'tl-bl?',
    
    maxHeight: 300,
    
    minHeight: 90,
    
    triggerAction: 'query',
    
    minChars : 4,
    
    typeAhead: false,
    
    queryDelay: 500,
    
    pageSize: 0,
    
    selectOnFocus:false,
    
    queryParam: 'query',
    
    loadingText: 'Loading...',
    
    resizable: false,
    
    handleHeight : 8,
    
    editable: true,
    
    allQuery: '',
    
    mode: 'remote',
    
    minListWidth : 70,
    
    forceSelection:false,
    
    typeAheadDelay : 250,
    

    
    lazyInit : true,

    

    // private
    initComponent : function(){
        Ext.form.ComboBox.superclass.initComponent.call(this);
        this.addEvents(
            
            'expand',
            
            'collapse',
            
            'beforeselect',
            
            'select',
            
            'beforequery'
        );
        if(this.transform){
            this.allowDomMove = false;
            var s = Ext.getDom(this.transform);
            if(!this.hiddenName){
                this.hiddenName = s.name;
            }
            if(!this.store){
                this.mode = 'local';
                var d = [], opts = s.options;
                for(var i = 0, len = opts.length;i < len; i++){
                    var o = opts[i];
                    var value = (Ext.isIE ? o.getAttributeNode('value').specified : o.hasAttribute('value')) ? o.value : o.text;
                    if(o.selected) {
                        this.value = value;
                    }
                    d.push([value, o.text]);
                }
                this.store = new Ext.data.SimpleStore({
                    'id': 0,
                    fields: ['value', 'text'],
                    data : d
                });
                this.valueField = 'value';
                this.displayField = 'text';
            }
            s.name = Ext.id(); // wipe out the name in case somewhere else they have a reference
            if(!this.lazyRender){
                this.target = true;
                this.el = Ext.DomHelper.insertBefore(s, this.autoCreate || this.defaultAutoCreate);
                Ext.removeNode(s); // remove it
                this.render(this.el.parentNode);
            }else{
                Ext.removeNode(s); // remove it
            }
        }
        //auto-configure store from local array data
        else if(Ext.isArray(this.store)){
            if (Ext.isArray(this.store[0])){
                this.store = new Ext.data.SimpleStore({
                    fields: ['value','text'],
                    data: this.store
                });
                this.valueField = 'value';
            }else{
                this.store = new Ext.data.SimpleStore({
                    fields: ['text'],
                    data: this.store,
                    expandData: true
                });
                this.valueField = 'text';
            }
            this.displayField = 'text';
            this.mode = 'local';
        }

        this.selectedIndex = -1;
        if(this.mode == 'local'){
            if(this.initialConfig.queryDelay === undefined){
                this.queryDelay = 10;
            }
            if(this.initialConfig.minChars === undefined){
                this.minChars = 0;
            }
        }
    },

    // private
    onRender : function(ct, position){
        Ext.form.ComboBox.superclass.onRender.call(this, ct, position);
        if(this.hiddenName){
            this.hiddenField = this.el.insertSibling({tag:'input', type:'hidden', name: this.hiddenName,
                    id: (this.hiddenId||this.hiddenName)}, 'before', true);

            // prevent input submission
            this.el.dom.removeAttribute('name');
        }
        if(Ext.isGecko){
            this.el.dom.setAttribute('autocomplete', 'off');
        }

        if(!this.lazyInit){
            this.initList();
        }else{
            this.on('focus', this.initList, this, {single: true});
        }

        if(!this.editable){
            this.editable = true;
            this.setEditable(false);
        }
    },

    // private
    initValue : function(){
        Ext.form.ComboBox.superclass.initValue.call(this);
        if(this.hiddenField){
            this.hiddenField.value =
                this.hiddenValue !== undefined ? this.hiddenValue :
                this.value !== undefined ? this.value : '';
        }
    },

    // private
    initList : function(){
        if(!this.list){
            var cls = 'x-combo-list';

            this.list = new Ext.Layer({
                shadow: this.shadow, cls: [cls, this.listClass].join(' '), constrain:false
            });

            var lw = this.listWidth || Math.max(this.wrap.getWidth(), this.minListWidth);
            this.list.setWidth(lw);
            this.list.swallowEvent('mousewheel');
            this.assetHeight = 0;

            if(this.title){
                this.header = this.list.createChild({cls:cls+'-hd', html: this.title});
                this.assetHeight += this.header.getHeight();
            }

            this.innerList = this.list.createChild({cls:cls+'-inner'});
            this.innerList.on('mouseover', this.onViewOver, this);
            this.innerList.on('mousemove', this.onViewMove, this);
            this.innerList.setWidth(lw - this.list.getFrameWidth('lr'));

            if(this.pageSize){
                this.footer = this.list.createChild({cls:cls+'-ft'});
                this.pageTb = new Ext.PagingToolbar({
                    store:this.store,
                    pageSize: this.pageSize,
                    renderTo:this.footer
                });
                this.assetHeight += this.footer.getHeight();
            }

            if(!this.tpl){
                
                this.tpl = '<tpl for="."><div class="'+cls+'-item">{' + this.displayField + '}</div></tpl>';
                
            }

            
            this.view = new Ext.DataView({
                applyTo: this.innerList,
                tpl: this.tpl,
                singleSelect: true,
                selectedClass: this.selectedClass,
                itemSelector: this.itemSelector || '.' + cls + '-item'
            });

            this.view.on('click', this.onViewClick, this);

            this.bindStore(this.store, true);

            if(this.resizable){
                this.resizer = new Ext.Resizable(this.list,  {
                   pinned:true, handles:'se'
                });
                this.resizer.on('resize', function(r, w, h){
                    this.maxHeight = h-this.handleHeight-this.list.getFrameWidth('tb')-this.assetHeight;
                    this.listWidth = w;
                    this.innerList.setWidth(w - this.list.getFrameWidth('lr'));
                    this.restrictHeight();
                }, this);
                this[this.pageSize?'footer':'innerList'].setStyle('margin-bottom', this.handleHeight+'px');
            }
        }
    },
    
    
    getStore : function(){
        return this.store;
    },

    // private
    bindStore : function(store, initial){
        if(this.store && !initial){
            this.store.un('beforeload', this.onBeforeLoad, this);
            this.store.un('load', this.onLoad, this);
            this.store.un('loadexception', this.collapse, this);
            if(!store){
                this.store = null;
                if(this.view){
                    this.view.setStore(null);
                }
            }
        }
        if(store){
            this.store = Ext.StoreMgr.lookup(store);

            this.store.on('beforeload', this.onBeforeLoad, this);
            this.store.on('load', this.onLoad, this);
            this.store.on('loadexception', this.collapse, this);

            if(this.view){
                this.view.setStore(store);
            }
        }
    },

    // private
    initEvents : function(){
        Ext.form.ComboBox.superclass.initEvents.call(this);

        this.keyNav = new Ext.KeyNav(this.el, {
            "up" : function(e){
                this.inKeyMode = true;
                this.selectPrev();
            },

            "down" : function(e){
                if(!this.isExpanded()){
                    this.onTriggerClick();
                }else{
                    this.inKeyMode = true;
                    this.selectNext();
                }
            },

            "enter" : function(e){
                this.onViewClick();
                this.delayedCheck = true;
                this.unsetDelayCheck.defer(10, this);
            },

            "esc" : function(e){
                this.collapse();
            },

            "tab" : function(e){
                this.onViewClick(false);
                return true;
            },

            scope : this,

            doRelay : function(foo, bar, hname){
                if(hname == 'down' || this.scope.isExpanded()){
                   return Ext.KeyNav.prototype.doRelay.apply(this, arguments);
                }
                return true;
            },

            forceKeyDown : true
        });
        this.queryDelay = Math.max(this.queryDelay || 10,
                this.mode == 'local' ? 10 : 250);
        this.dqTask = new Ext.util.DelayedTask(this.initQuery, this);
        if(this.typeAhead){
            this.taTask = new Ext.util.DelayedTask(this.onTypeAhead, this);
        }
        if(this.editable !== false){
            this.el.on("keyup", this.onKeyUp, this);
        }
        if(this.forceSelection){
            this.on('blur', this.doForce, this);
        }
    },

    // private
    onDestroy : function(){
        if(this.view){
            Ext.destroy(this.view);
        }
        if(this.list){
            if(this.innerList){
                this.innerList.un('mouseover', this.onViewOver, this);
                this.innerList.un('mousemove', this.onViewMove, this);
            }
            this.list.destroy();
        }
        if (this.dqTask){
            this.dqTask.cancel();
            this.dqTask = null;
        }
        this.bindStore(null);
        Ext.form.ComboBox.superclass.onDestroy.call(this);
    },

    // private
    unsetDelayCheck : function(){
        delete this.delayedCheck;
    },

    // private
    fireKey : function(e){
        if(e.isNavKeyPress() && !this.isExpanded() && !this.delayedCheck){
            this.fireEvent("specialkey", this, e);
        }
    },

    // private
    onResize: function(w, h){
        Ext.form.ComboBox.superclass.onResize.apply(this, arguments);
        if(this.list && this.listWidth === undefined){
            var lw = Math.max(w, this.minListWidth);
            this.list.setWidth(lw);
            this.innerList.setWidth(lw - this.list.getFrameWidth('lr'));
        }
    },

    // private
    onEnable: function(){
        Ext.form.ComboBox.superclass.onEnable.apply(this, arguments);
        if(this.hiddenField){
            this.hiddenField.disabled = false;
        }
    },

    // private
    onDisable: function(){
        Ext.form.ComboBox.superclass.onDisable.apply(this, arguments);
        if(this.hiddenField){
            this.hiddenField.disabled = true;
        }
    },

    
    setEditable : function(value){
        if(value == this.editable){
            return;
        }
        this.editable = value;
        if(!value){
            this.el.dom.setAttribute('readOnly', true);
            this.el.on('mousedown', this.onTriggerClick,  this);
            this.el.addClass('x-combo-noedit');
        }else{
            this.el.dom.removeAttribute('readOnly');
            this.el.un('mousedown', this.onTriggerClick,  this);
            this.el.removeClass('x-combo-noedit');
        }
    },

    // private
    onBeforeLoad : function(){
        if(!this.hasFocus){
            return;
        }
        this.innerList.update(this.loadingText ?
               '<div class="loading-indicator">'+this.loadingText+'</div>' : '');
        this.restrictHeight();
        this.selectedIndex = -1;
    },

    // private
    onLoad : function(){
        if(!this.hasFocus){
            return;
        }
        if(this.store.getCount() > 0){
            this.expand();
            this.restrictHeight();
            if(this.lastQuery == this.allQuery){
                if(this.editable){
                    this.el.dom.select();
                }
                if(!this.selectByValue(this.value, true)){
                    this.select(0, true);
                }
            }else{
                this.selectNext();
                if(this.typeAhead && this.lastKey != Ext.EventObject.BACKSPACE && this.lastKey != Ext.EventObject.DELETE){
                    this.taTask.delay(this.typeAheadDelay);
                }
            }
        }else{
            this.onEmptyResults();
        }
        //this.el.focus();
    },

    // private
    onTypeAhead : function(){
        if(this.store.getCount() > 0){
            var r = this.store.getAt(0);
            var newValue = r.data[this.displayField];
            var len = newValue.length;
            var selStart = this.getRawValue().length;
            if(selStart != len){
                this.setRawValue(newValue);
                this.selectText(selStart, newValue.length);
            }
        }
    },

    // private
    onSelect : function(record, index){
        if(this.fireEvent('beforeselect', this, record, index) !== false){
            this.setValue(record.data[this.valueField || this.displayField]);
            this.collapse();
            this.fireEvent('select', this, record, index);
        }
    },

    
    getValue : function(){
        if(this.valueField){
            return typeof this.value != 'undefined' ? this.value : '';
        }else{
            return Ext.form.ComboBox.superclass.getValue.call(this);
        }
    },

    
    clearValue : function(){
        if(this.hiddenField){
            this.hiddenField.value = '';
        }
        this.setRawValue('');
        this.lastSelectionText = '';
        this.applyEmptyText();
        this.value = '';
    },

    
    setValue : function(v){
        var text = v;
        if(this.valueField){
            var r = this.findRecord(this.valueField, v);
            if(r){
                text = r.data[this.displayField];
            }else if(this.valueNotFoundText !== undefined){
                text = this.valueNotFoundText;
            }
        }
        this.lastSelectionText = text;
        if(this.hiddenField){
            this.hiddenField.value = v;
        }
        Ext.form.ComboBox.superclass.setValue.call(this, text);
        this.value = v;
    },

    // private
    findRecord : function(prop, value){
        var record;
        if(this.store.getCount() > 0){
            this.store.each(function(r){
                if(r.data[prop] == value){
                    record = r;
                    return false;
                }
            });
        }
        return record;
    },

    // private
    onViewMove : function(e, t){
        this.inKeyMode = false;
    },

    // private
    onViewOver : function(e, t){
        if(this.inKeyMode){ // prevent key nav and mouse over conflicts
            return;
        }
        var item = this.view.findItemFromChild(t);
        if(item){
            var index = this.view.indexOf(item);
            this.select(index, false);
        }
    },

    // private
    onViewClick : function(doFocus){
        var index = this.view.getSelectedIndexes()[0];
        var r = this.store.getAt(index);
        if(r){
            this.onSelect(r, index);
        }
        if(doFocus !== false){
            this.el.focus();
        }
    },

    // private
    restrictHeight : function(){
        this.innerList.dom.style.height = '';
        var inner = this.innerList.dom;
        var pad = this.list.getFrameWidth('tb')+(this.resizable?this.handleHeight:0)+this.assetHeight;
        var h = Math.max(inner.clientHeight, inner.offsetHeight, inner.scrollHeight);
        var ha = this.getPosition()[1]-Ext.getBody().getScroll().top;
        var hb = Ext.lib.Dom.getViewHeight()-ha-this.getSize().height;
        var space = Math.max(ha, hb, this.minHeight || 0)-this.list.shadowOffset-pad-5;
        h = Math.min(h, space, this.maxHeight);

        this.innerList.setHeight(h);
        this.list.beginUpdate();
        this.list.setHeight(h+pad);
        this.list.alignTo(this.wrap, this.listAlign);
        this.list.endUpdate();
    },

    // private
    onEmptyResults : function(){
        this.collapse();
    },

    
    isExpanded : function(){
        return this.list && this.list.isVisible();
    },

    
    selectByValue : function(v, scrollIntoView){
        if(v !== undefined && v !== null){
            var r = this.findRecord(this.valueField || this.displayField, v);
            if(r){
                this.select(this.store.indexOf(r), scrollIntoView);
                return true;
            }
        }
        return false;
    },

    
    select : function(index, scrollIntoView){
        this.selectedIndex = index;
        this.view.select(index);
        if(scrollIntoView !== false){
            var el = this.view.getNode(index);
            if(el){
                this.innerList.scrollChildIntoView(el, false);
            }
        }
    },

    // private
    selectNext : function(){
        var ct = this.store.getCount();
        if(ct > 0){
            if(this.selectedIndex == -1){
                this.select(0);
            }else if(this.selectedIndex < ct-1){
                this.select(this.selectedIndex+1);
            }
        }
    },

    // private
    selectPrev : function(){
        var ct = this.store.getCount();
        if(ct > 0){
            if(this.selectedIndex == -1){
                this.select(0);
            }else if(this.selectedIndex != 0){
                this.select(this.selectedIndex-1);
            }
        }
    },

    // private
    onKeyUp : function(e){
        if(this.editable !== false && !e.isSpecialKey()){
            this.lastKey = e.getKey();
            this.dqTask.delay(this.queryDelay);
        }
    },

    // private
    validateBlur : function(){
        return !this.list || !this.list.isVisible();
    },

    // private
    initQuery : function(){
        this.doQuery(this.getRawValue());
    },

    // private
    doForce : function(){
        if(this.el.dom.value.length > 0){
            this.el.dom.value =
                this.lastSelectionText === undefined ? '' : this.lastSelectionText;
            this.applyEmptyText();
        }
    },

    
    doQuery : function(q, forceAll){
        if(q === undefined || q === null){
            q = '';
        }
        var qe = {
            query: q,
            forceAll: forceAll,
            combo: this,
            cancel:false
        };
        if(this.fireEvent('beforequery', qe)===false || qe.cancel){
            return false;
        }
        q = qe.query;
        forceAll = qe.forceAll;
        if(forceAll === true || (q.length >= this.minChars)){
            if(this.lastQuery !== q){
                this.lastQuery = q;
                if(this.mode == 'local'){
                    this.selectedIndex = -1;
                    if(forceAll){
                        this.store.clearFilter();
                    }else{
                        this.store.filter(this.displayField, q);
                    }
                    this.onLoad();
                }else{
                    this.store.baseParams[this.queryParam] = q;
                    this.store.load({
                        params: this.getParams(q)
                    });
                    this.expand();
                }
            }else{
                this.selectedIndex = -1;
                this.onLoad();
            }
        }
    },

    // private
    getParams : function(q){
        var p = {};
        //p[this.queryParam] = q;
        if(this.pageSize){
            p.start = 0;
            p.limit = this.pageSize;
        }
        return p;
    },

    
    collapse : function(){
        if(!this.isExpanded()){
            return;
        }
        this.list.hide();
        Ext.getDoc().un('mousewheel', this.collapseIf, this);
        Ext.getDoc().un('mousedown', this.collapseIf, this);
        this.fireEvent('collapse', this);
    },

    // private
    collapseIf : function(e){
        if(!e.within(this.wrap) && !e.within(this.list)){
            this.collapse();
        }
    },

    
    expand : function(){
        if(this.isExpanded() || !this.hasFocus){
            return;
        }
        this.list.alignTo(this.wrap, this.listAlign);
        this.list.show();
        this.innerList.setOverflow('auto'); // necessary for FF 2.0/Mac
        Ext.getDoc().on('mousewheel', this.collapseIf, this);
        Ext.getDoc().on('mousedown', this.collapseIf, this);
        this.fireEvent('expand', this);
    },

    
    // private
    // Implements the default empty TriggerField.onTriggerClick function
    onTriggerClick : function(){
        if(this.disabled){
            return;
        }
        if(this.isExpanded()){
            this.collapse();
            this.el.focus();
        }else {
            this.onFocus({});
            if(this.triggerAction == 'all') {
                this.doQuery(this.allQuery, true);
            } else {
                this.doQuery(this.getRawValue());
            }
            this.el.focus();
        }
    }

    
    
    
    

});
Ext.reg('combo', Ext.form.ComboBox);

Ext.form.Checkbox = Ext.extend(Ext.form.Field,  {
    
    checkedCls: 'x-form-check-checked',
    
    focusCls: 'x-form-check-focus',
    
    overCls: 'x-form-check-over',
    
    mouseDownCls: 'x-form-check-down',
    
    tabIndex: 0,
    
    checked: false,
    
    defaultAutoCreate: {tag: 'input', type: 'checkbox', autocomplete: 'off'},
    
    
    
    


    // private
    baseCls: 'x-form-check',

    // private
    initComponent : function(){
        Ext.form.Checkbox.superclass.initComponent.call(this);
        this.addEvents(
            
            'check'
        );
    },

    // private
    initEvents : function(){
        Ext.form.Checkbox.superclass.initEvents.call(this);
        this.initCheckEvents();
    },

    // private
    initCheckEvents : function(){
        this.innerWrap.removeAllListeners();
        this.innerWrap.addClassOnOver(this.overCls);
        this.innerWrap.addClassOnClick(this.mouseDownCls);
        this.innerWrap.on('click', this.onClick, this);
        this.innerWrap.on('keyup', this.onKeyUp, this);
    },

    // private
    onRender : function(ct, position){
        Ext.form.Checkbox.superclass.onRender.call(this, ct, position);
        if(this.inputValue !== undefined){
            this.el.dom.value = this.inputValue;
        }
        this.el.addClass('x-hidden');

        this.innerWrap = this.el.wrap({
            tabIndex: this.tabIndex,
            cls: this.baseCls+'-wrap-inner'
        });
        this.wrap = this.innerWrap.wrap({cls: this.baseCls+'-wrap'});

        if(this.boxLabel){
            this.labelEl = this.innerWrap.createChild({
                tag: 'label',
                htmlFor: this.el.id,
                cls: 'x-form-cb-label',
                html: this.boxLabel
            });
        }

        this.imageEl = this.innerWrap.createChild({
            tag: 'img',
            src: Ext.BLANK_IMAGE_URL,
            cls: this.baseCls
        }, this.el);

        if(this.checked){
            this.setValue(true);
        }else{
            this.checked = this.el.dom.checked;
        }
        this.originalValue = this.checked;
    },
    
    // private
    afterRender : function(){
        Ext.form.Checkbox.superclass.afterRender.call(this);
        this.wrap[this.checked? 'addClass' : 'removeClass'](this.checkedCls);
    },

    // private
    onDestroy : function(){
        if(this.rendered){
            Ext.destroy(this.imageEl, this.labelEl, this.innerWrap, this.wrap);
        }
        Ext.form.Checkbox.superclass.onDestroy.call(this);
    },

    // private
    onFocus: function(e) {
        Ext.form.Checkbox.superclass.onFocus.call(this, e);
        this.el.addClass(this.focusCls);
    },

    // private
    onBlur: function(e) {
        Ext.form.Checkbox.superclass.onBlur.call(this, e);
        this.el.removeClass(this.focusCls);
    },

    // private
    onResize : function(){
        Ext.form.Checkbox.superclass.onResize.apply(this, arguments);
        if(!this.boxLabel && !this.fieldLabel){
            this.el.alignTo(this.wrap, 'c-c');
        }
    },

    // private
    onKeyUp : function(e){
        if(e.getKey() == Ext.EventObject.SPACE){
            this.onClick(e);
        }
    },

    // private
    onClick : function(e){
        if (!this.disabled && !this.readOnly) {
            this.toggleValue();
        }
        e.stopEvent();
    },

    // private
    onEnable : function(){
        Ext.form.Checkbox.superclass.onEnable.call(this);
        this.initCheckEvents();
    },

    // private
    onDisable : function(){
        Ext.form.Checkbox.superclass.onDisable.call(this);
        this.innerWrap.removeAllListeners();
    },

    toggleValue : function(){
        this.setValue(!this.checked);
    },

    // private
    getResizeEl : function(){
        if(!this.resizeEl){
            this.resizeEl = Ext.isSafari ? this.wrap : (this.wrap.up('.x-form-element', 5) || this.wrap);
        }
        return this.resizeEl;
    },

    // private
    getPositionEl : function(){
        return this.wrap;
    },

    // private
    getActionEl : function(){
        return this.wrap;
    },

    
    markInvalid : Ext.emptyFn,
    
    clearInvalid : Ext.emptyFn,

    // private
    initValue : Ext.emptyFn,

    
    getValue : function(){
        if(this.rendered){
            return this.el.dom.checked;
        }
        return this.checked;
    },

    
    setValue : function(v) {
        var checked = this.checked;
        this.checked = (v === true || v === 'true' || v == '1' || String(v).toLowerCase() == 'on');
        
        if(this.rendered){
            this.el.dom.checked = this.checked;
            this.el.dom.defaultChecked = this.checked;
            this.wrap[this.checked? 'addClass' : 'removeClass'](this.checkedCls);
        }

        if(checked != this.checked){
            this.fireEvent("check", this, this.checked);
            if(this.handler){
                this.handler.call(this.scope || this, this, this.checked);
            }
        }
    }

    
    
    
});
Ext.reg('checkbox', Ext.form.Checkbox);


Ext.form.CheckboxGroup = Ext.extend(Ext.form.Field, {
    
    
    columns : 'auto',
    
    vertical : false,
    
    allowBlank : true,
    
    blankText : "You must select at least one item in this group",
    
    // private
    defaultType : 'checkbox',
    
    // private
    groupCls: 'x-form-check-group',
    
    // private
    onRender : function(ct, position){
        if(!this.el){
            var panelCfg = {
                cls: this.groupCls,
                layout: 'column',
                border: false,
                renderTo: ct
            };
            var colCfg = {
                defaultType: this.defaultType,
                layout: 'form',
                border: false,
                defaults: {
                    hideLabel: true,
                    anchor: '100%'
                }
            }
            
            if(this.items[0].items){
                
                // The container has standard ColumnLayout configs, so pass them in directly
                
                Ext.apply(panelCfg, {
                    layoutConfig: {columns: this.items.length},
                    defaults: this.defaults,
                    items: this.items
                })
                for(var i=0, len=this.items.length; i<len; i++){
                    Ext.applyIf(this.items[i], colCfg);
                };
                
            }else{
                
                // The container has field item configs, so we have to generate the column
                // panels first then move the items into the columns as needed.
                
                var numCols, cols = [];
                
                if(typeof this.columns == 'string'){ // 'auto' so create a col per item
                    this.columns = this.items.length;
                }
                if(!Ext.isArray(this.columns)){
                    var cs = [];
                    for(var i=0; i<this.columns; i++){
                        cs.push((100/this.columns)*.01); // distribute by even %
                    }
                    this.columns = cs;
                }
                
                numCols = this.columns.length;
                
                // Generate the column configs with the correct width setting
                for(var i=0; i<numCols; i++){
                    var cc = Ext.apply({items:[]}, colCfg);
                    cc[this.columns[i] <= 1 ? 'columnWidth' : 'width'] = this.columns[i];
                    if(this.defaults){
                        cc.defaults = Ext.apply(cc.defaults || {}, this.defaults)
                    }
                    cols.push(cc);
                };
                
                // Distribute the original items into the columns
                if(this.vertical){
                    var rows = Math.ceil(this.items.length / numCols), ri = 0;
                    for(var i=0, len=this.items.length; i<len; i++){
                        if(i>0 && i%rows==0){
                            ri++;
                        }
                        if(this.items[i].fieldLabel){
                            this.items[i].hideLabel = false;
                        }
                        cols[ri].items.push(this.items[i]);
                    };
                }else{
                    for(var i=0, len=this.items.length; i<len; i++){
                        var ci = i % numCols;
                        if(this.items[i].fieldLabel){
                            this.items[i].hideLabel = false;
                        }
                        cols[ci].items.push(this.items[i]);
                    };
                }
                
                Ext.apply(panelCfg, {
                    layoutConfig: {columns: numCols},
                    items: cols
                });
            }
            
            this.panel = new Ext.Panel(panelCfg);
            this.el = this.panel.getEl();
            
            if(this.forId && this.itemCls){
                var l = this.el.up(this.itemCls).child('label', true);
                if(l){
                    l.setAttribute('htmlFor', this.forId);
                }
            }
            
            var fields = this.panel.findBy(function(c){
                return c.isFormField;
            }, this);
            
            this.items = new Ext.util.MixedCollection();
            this.items.addAll(fields);
        }
        Ext.form.CheckboxGroup.superclass.onRender.call(this, ct, position);
    },
    
    // private
    validateValue : function(value){
        if(!this.allowBlank){
            var blank = true;
            this.items.each(function(f){
                if(f.checked){
                    return blank = false;
                }
            }, this);
            if(blank){
                this.markInvalid(this.blankText);
                return false;
            }
        }
        return true;
    },
    
    // private
    onDisable : function(){
        this.items.each(function(item){
            item.disable();
        })
    },

    // private
    onEnable : function(){
        this.items.each(function(item){
            item.enable();
        })
    },
    
    // private
    onResize : function(w, h){
        this.panel.setSize(w, h);
        this.panel.doLayout();
    },
    
    // inherit docs from Field
    reset : function(){
        Ext.form.CheckboxGroup.superclass.reset.call(this);
        this.items.each(function(c){
            if(c.reset){
                c.reset();
            }
        }, this);
    },
    
    
    
    initValue : Ext.emptyFn,
    
    getValue : Ext.emptyFn,
    
    getRawValue : Ext.emptyFn,
    
    setValue : Ext.emptyFn,
    
    setRawValue : Ext.emptyFn
    
});

Ext.reg('checkboxgroup', Ext.form.CheckboxGroup);


Ext.form.Radio = Ext.extend(Ext.form.Checkbox, {
    // private
    inputType: 'radio',
    // private
    baseCls: 'x-form-radio',
    
    
    getGroupValue : function(){
        var c = this.getParent().child('input[name='+this.el.dom.name+']:checked', true);
        return c ? c.value : null;
    },
    
    // private
    getParent : function(){
        return this.el.up('form') || Ext.getBody();
    },

    // private
    toggleValue : function() {
        if(!this.checked){
            var els = this.getParent().select('input[name='+this.el.dom.name+']');
            els.each(function(el){
                if(el.dom.id == this.id){
                    this.setValue(true);
                }else{
                    Ext.getCmp(el.dom.id).setValue(false);
                }
            }, this);
        }
    },
    
    
    setValue : function(v){
        if(typeof v=='boolean') {
            Ext.form.Radio.superclass.setValue.call(this, v);
        }else{
            var r = this.getParent().child('input[name='+this.el.dom.name+'][value='+v+']', true);
            if(r && !r.checked){
                Ext.getCmp(r.id).toggleValue();
            };
        }
    },
    
    
    markInvalid : Ext.emptyFn,
    
    clearInvalid : Ext.emptyFn
    
});
Ext.reg('radio', Ext.form.Radio);


Ext.form.RadioGroup = Ext.extend(Ext.form.CheckboxGroup, {
    
    allowBlank : true,
    
    blankText : "You must select one item in this group",
    
    // private
    defaultType : 'radio',
    
    // private
    groupCls: 'x-form-radio-group'
});

Ext.reg('radiogroup', Ext.form.RadioGroup);


Ext.form.Hidden = Ext.extend(Ext.form.Field, {
    // private
    inputType : 'hidden',

    // private
    onRender : function(){
        Ext.form.Hidden.superclass.onRender.apply(this, arguments);
    },

    // private
    initEvents : function(){
        this.originalValue = this.getValue();
    },

    // These are all private overrides
    setSize : Ext.emptyFn,
    setWidth : Ext.emptyFn,
    setHeight : Ext.emptyFn,
    setPosition : Ext.emptyFn,
    setPagePosition : Ext.emptyFn,
    markInvalid : Ext.emptyFn,
    clearInvalid : Ext.emptyFn
});
Ext.reg('hidden', Ext.form.Hidden);

Ext.form.BasicForm = function(el, config){
    Ext.apply(this, config);
    
    this.items = new Ext.util.MixedCollection(false, function(o){
        return o.id || (o.id = Ext.id());
    });
    this.addEvents(
        
        'beforeaction',
        
        'actionfailed',
        
        'actioncomplete'
    );

    if(el){
        this.initEl(el);
    }
    Ext.form.BasicForm.superclass.constructor.call(this);
};

Ext.extend(Ext.form.BasicForm, Ext.util.Observable, {
    
    
    
    
    
    
    
    timeout: 30,

    // private
    activeAction : null,

    
    trackResetOnLoad : false,

    
    

    // private
    initEl : function(el){
        this.el = Ext.get(el);
        this.id = this.el.id || Ext.id();
        if(!this.standardSubmit){
            this.el.on('submit', this.onSubmit, this);
        }
        this.el.addClass('x-form');
    },

    
    getEl: function(){
        return this.el;
    },

    // private
    onSubmit : function(e){
        e.stopEvent();
    },

    // private
    destroy: function() {
        this.items.each(function(f){
            Ext.destroy(f);
        });
        if(this.el){
            this.el.removeAllListeners();
            this.el.remove();
        }
        this.purgeListeners();
    },

    
    isValid : function(){
        var valid = true;
        this.items.each(function(f){
           if(!f.validate()){
               valid = false;
           }
        });
        return valid;
    },

    
    isDirty : function(){
        var dirty = false;
        this.items.each(function(f){
           if(f.isDirty()){
               dirty = true;
               return false;
           }
        });
        return dirty;
    },

    
    doAction : function(action, options){
        if(typeof action == 'string'){
            action = new Ext.form.Action.ACTION_TYPES[action](this, options);
        }
        if(this.fireEvent('beforeaction', this, action) !== false){
            this.beforeAction(action);
            action.run.defer(100, action);
        }
        return this;
    },

    
    submit : function(options){
        if(this.standardSubmit){
            var v = this.isValid();
            if(v){
                this.el.dom.submit();
            }
            return v;
        }
        this.doAction('submit', options);
        return this;
    },

    
    load : function(options){
        this.doAction('load', options);
        return this;
    },

    
    updateRecord : function(record){
        record.beginEdit();
        var fs = record.fields;
        fs.each(function(f){
            var field = this.findField(f.name);
            if(field){
                record.set(f.name, field.getValue());
            }
        }, this);
        record.endEdit();
        return this;
    },

    
    loadRecord : function(record){
        this.setValues(record.data);
        return this;
    },

    // private
    beforeAction : function(action){
        var o = action.options;
        if(o.waitMsg){
            if(this.waitMsgTarget === true){
                this.el.mask(o.waitMsg, 'x-mask-loading');
            }else if(this.waitMsgTarget){
                this.waitMsgTarget = Ext.get(this.waitMsgTarget);
                this.waitMsgTarget.mask(o.waitMsg, 'x-mask-loading');
            }else{
                Ext.MessageBox.wait(o.waitMsg, o.waitTitle || this.waitTitle || 'Please Wait...');
            }
        }
    },

    // private
    afterAction : function(action, success){
        this.activeAction = null;
        var o = action.options;
        if(o.waitMsg){
            if(this.waitMsgTarget === true){
                this.el.unmask();
            }else if(this.waitMsgTarget){
                this.waitMsgTarget.unmask();
            }else{
                Ext.MessageBox.updateProgress(1);
                Ext.MessageBox.hide();
            }
        }
        if(success){
            if(o.reset){
                this.reset();
            }
            Ext.callback(o.success, o.scope, [this, action]);
            this.fireEvent('actioncomplete', this, action);
        }else{
            Ext.callback(o.failure, o.scope, [this, action]);
            this.fireEvent('actionfailed', this, action);
        }
    },

    
    findField : function(id){
        var field = this.items.get(id);
        if(!field){
            this.items.each(function(f){
                if(f.isFormField && (f.dataIndex == id || f.id == id || f.getName() == id)){
                    field = f;
                    return false;
                }
            });
        }
        return field || null;
    },


    
    markInvalid : function(errors){
        if(Ext.isArray(errors)){
            for(var i = 0, len = errors.length; i < len; i++){
                var fieldError = errors[i];
                var f = this.findField(fieldError.id);
                if(f){
                    f.markInvalid(fieldError.msg);
                }
            }
        }else{
            var field, id;
            for(id in errors){
                if(typeof errors[id] != 'function' && (field = this.findField(id))){
                    field.markInvalid(errors[id]);
                }
            }
        }
        return this;
    },

    
    setValues : function(values){
        if(Ext.isArray(values)){ // array of objects
            for(var i = 0, len = values.length; i < len; i++){
                var v = values[i];
                var f = this.findField(v.id);
                if(f){
                    f.setValue(v.value);
                    if(this.trackResetOnLoad){
                        f.originalValue = f.getValue();
                    }
                }
            }
        }else{ // object hash
            var field, id;
            for(id in values){
                if(typeof values[id] != 'function' && (field = this.findField(id))){
                    field.setValue(values[id]);
                    if(this.trackResetOnLoad){
                        field.originalValue = field.getValue();
                    }
                }
            }
        }
        return this;
    },

    
    getValues : function(asString){
        var fs = Ext.lib.Ajax.serializeForm(this.el.dom);
        if(asString === true){
            return fs;
        }
        return Ext.urlDecode(fs);
    },

    
    clearInvalid : function(){
        this.items.each(function(f){
           f.clearInvalid();
        });
        return this;
    },

    
    reset : function(){
        this.items.each(function(f){
            f.reset();
        });
        return this;
    },

    
    add : function(){
        this.items.addAll(Array.prototype.slice.call(arguments, 0));
        return this;
    },


    
    remove : function(field){
        this.items.remove(field);
        return this;
    },

    
    render : function(){
        this.items.each(function(f){
            if(f.isFormField && !f.rendered && document.getElementById(f.id)){ // if the element exists
                f.applyToMarkup(f.id);
            }
        });
        return this;
    },

    
    applyToFields : function(o){
        this.items.each(function(f){
           Ext.apply(f, o);
        });
        return this;
    },

    
    applyIfToFields : function(o){
        this.items.each(function(f){
           Ext.applyIf(f, o);
        });
        return this;
    }
});

// back compat
Ext.BasicForm = Ext.form.BasicForm;

Ext.FormPanel = Ext.extend(Ext.Panel, {
	
    
    
    
    
    buttonAlign:'center',

    
    minButtonWidth:75,

    
    labelAlign:'left',

    
    monitorValid : false,

    
    monitorPoll : 200,

    
    layout: 'form',

    // private
    initComponent :function(){
        this.form = this.createForm();

        this.bodyCfg = {
            tag: 'form',
            cls: this.baseCls + '-body',
            method : this.method || 'POST',
            id : this.formId || Ext.id()
        };
        if(this.fileUpload) {
            this.bodyCfg.enctype = 'multipart/form-data';
        }

        Ext.FormPanel.superclass.initComponent.call(this);

        this.initItems();

        this.addEvents(
            
            'clientvalidation'
        );

        this.relayEvents(this.form, ['beforeaction', 'actionfailed', 'actioncomplete']);
    },

    // private
    createForm: function(){
        delete this.initialConfig.listeners;
        return new Ext.form.BasicForm(null, this.initialConfig);
    },

    // private
    initFields : function(){
        var f = this.form;
        var formPanel = this;
        var fn = function(c){
            if(c.isFormField){
                f.add(c);
            }else if(c.doLayout && c != formPanel){
                Ext.applyIf(c, {
                    labelAlign: c.ownerCt.labelAlign,
                    labelWidth: c.ownerCt.labelWidth,
                    itemCls: c.ownerCt.itemCls
                });
                if(c.items){
                    c.items.each(fn);
                }
            }
        }
        this.items.each(fn);
    },

    // private
    getLayoutTarget : function(){
        return this.form.el;
    },

    
    getForm : function(){
        return this.form;
    },

    // private
    onRender : function(ct, position){
        this.initFields();

        Ext.FormPanel.superclass.onRender.call(this, ct, position);
        this.form.initEl(this.body);
    },
    
    // private
    beforeDestroy: function(){
        Ext.FormPanel.superclass.beforeDestroy.call(this);
        this.stopMonitoring();
        Ext.destroy(this.form);
    },

    // private
    initEvents : function(){
        Ext.FormPanel.superclass.initEvents.call(this);
        this.items.on('remove', this.onRemove, this);
		this.items.on('add', this.onAdd, this);
        if(this.monitorValid){ // initialize after render
            this.startMonitoring();
        }
    },
    
    // private
	onAdd : function(ct, c) {
		if (c.isFormField) {
			this.form.add(c);
		}
	},
	
	// private
	onRemove : function(c) {
		if (c.isFormField) {
			Ext.destroy(c.container.up('.x-form-item'));
			this.form.remove(c);
		}
	},

    
    startMonitoring : function(){
        if(!this.bound){
            this.bound = true;
            Ext.TaskMgr.start({
                run : this.bindHandler,
                interval : this.monitorPoll || 200,
                scope: this
            });
        }
    },

    
    stopMonitoring : function(){
        this.bound = false;
    },

    
    load : function(){
        this.form.load.apply(this.form, arguments);  
    },

    // private
    onDisable : function(){
        Ext.FormPanel.superclass.onDisable.call(this);
        if(this.form){
            this.form.items.each(function(){
                 this.disable();
            });
        }
    },

    // private
    onEnable : function(){
        Ext.FormPanel.superclass.onEnable.call(this);
        if(this.form){
            this.form.items.each(function(){
                 this.enable();
            });
        }
    },

    // private
    bindHandler : function(){
        if(!this.bound){
            return false; // stops binding
        }
        var valid = true;
        this.form.items.each(function(f){
            if(!f.isValid(true)){
                valid = false;
                return false;
            }
        });
        if(this.buttons){
            for(var i = 0, len = this.buttons.length; i < len; i++){
                var btn = this.buttons[i];
                if(btn.formBind === true && btn.disabled === valid){
                    btn.setDisabled(!valid);
                }
            }
        }
        this.fireEvent('clientvalidation', this, valid);
    }
});
Ext.reg('form', Ext.FormPanel);

Ext.form.FormPanel = Ext.FormPanel;



Ext.form.FieldSet = Ext.extend(Ext.Panel, {
    
    
    
    
    
    baseCls:'x-fieldset',
    
    layout: 'form',
    
    animCollapse: false,

    // private
    onRender : function(ct, position){
        if(!this.el){
            this.el = document.createElement('fieldset');
            this.el.id = this.id;
            if (this.title || this.header || this.checkboxToggle) {
                this.el.appendChild(document.createElement('legend')).className = 'x-fieldset-header';
            }
        }

        Ext.form.FieldSet.superclass.onRender.call(this, ct, position);

        if(this.checkboxToggle){
            var o = typeof this.checkboxToggle == 'object' ?
                    this.checkboxToggle :
                    {tag: 'input', type: 'checkbox', name: this.checkboxName || this.id+'-checkbox'};
            this.checkbox = this.header.insertFirst(o);
            this.checkbox.dom.checked = !this.collapsed;
            this.checkbox.on('click', this.onCheckClick, this);
        }
    },

    // private
    onCollapse : function(doAnim, animArg){
        if(this.checkbox){
            this.checkbox.dom.checked = false;
        }
        Ext.form.FieldSet.superclass.onCollapse.call(this, doAnim, animArg);

    },

    // private
    onExpand : function(doAnim, animArg){
        if(this.checkbox){
            this.checkbox.dom.checked = true;
        }
        Ext.form.FieldSet.superclass.onExpand.call(this, doAnim, animArg);
    },

    
    onCheckClick : function(){
        this[this.checkbox.dom.checked ? 'expand' : 'collapse']();
    },
    
    // private
    beforeDestroy : function(){
        if(this.checkbox){
            this.checkbox.un('click', this.onCheckClick, this);
        }
        Ext.form.FieldSet.superclass.beforeDestroy.call(this);
    }

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
});
Ext.reg('fieldset', Ext.form.FieldSet);




Ext.form.HtmlEditor = Ext.extend(Ext.form.Field, {
    
    enableFormat : true,
    
    enableFontSize : true,
    
    enableColors : true,
    
    enableAlignments : true,
    
    enableLists : true,
    
    enableSourceEdit : true,
    
    enableLinks : true,
    
    enableFont : true,
    
    createLinkText : 'Please enter the URL for the link:',
    
    defaultLinkValue : 'http:/'+'/',
    
    fontFamilies : [
        'Arial',
        'Courier New',
        'Tahoma',
        'Times New Roman',
        'Verdana'
    ],
    defaultFont: 'tahoma',

    // private properties
    validationEvent : false,
    deferHeight: true,
    initialized : false,
    activated : false,
    sourceEditMode : false,
    onFocus : Ext.emptyFn,
    iframePad:3,
    hideMode:'offsets',
    defaultAutoCreate : {
        tag: "textarea",
        style:"width:500px;height:300px;",
        autocomplete: "off"
    },

    // private
    initComponent : function(){
        this.addEvents(
            
            'initialize',
            
            'activate',
             
            'beforesync',
             
            'beforepush',
             
            'sync',
             
            'push',
             
            'editmodechange'
        )
    },

    // private
    createFontOptions : function(){
        var buf = [], fs = this.fontFamilies, ff, lc;
        for(var i = 0, len = fs.length; i< len; i++){
            ff = fs[i];
            lc = ff.toLowerCase();
            buf.push(
                '<option value="',lc,'" style="font-family:',ff,';"',
                    (this.defaultFont == lc ? ' selected="true">' : '>'),
                    ff,
                '</option>'
            );
        }
        return buf.join('');
    },
    
    
    createToolbar : function(editor){
        
        var tipsEnabled = Ext.QuickTips && Ext.QuickTips.isEnabled();
        
        function btn(id, toggle, handler){
            return {
                itemId : id,
                cls : 'x-btn-icon x-edit-'+id,
                enableToggle:toggle !== false,
                scope: editor,
                handler:handler||editor.relayBtnCmd,
                clickEvent:'mousedown',
                tooltip: tipsEnabled ? editor.buttonTips[id] || undefined : undefined,
                tabIndex:-1
            };
        }

        // build the toolbar
        var tb = new Ext.Toolbar({
            renderTo:this.wrap.dom.firstChild
        });

        // stop form submits
        tb.el.on('click', function(e){
            e.preventDefault();
        });

        if(this.enableFont && !Ext.isSafari2){
            this.fontSelect = tb.el.createChild({
                tag:'select',
                cls:'x-font-select',
                html: this.createFontOptions()
            });
            this.fontSelect.on('change', function(){
                var font = this.fontSelect.dom.value;
                this.relayCmd('fontname', font);
                this.deferFocus();
            }, this);
            tb.add(
                this.fontSelect.dom,
                '-'
            );
        };

        if(this.enableFormat){
            tb.add(
                btn('bold'),
                btn('italic'),
                btn('underline')
            );
        };

        if(this.enableFontSize){
            tb.add(
                '-',
                btn('increasefontsize', false, this.adjustFont),
                btn('decreasefontsize', false, this.adjustFont)
            );
        };

        if(this.enableColors){
            tb.add(
                '-', {
                    itemId:'forecolor',
                    cls:'x-btn-icon x-edit-forecolor',
                    clickEvent:'mousedown',
                    tooltip: tipsEnabled ? editor.buttonTips['forecolor'] || undefined : undefined,
                    tabIndex:-1,
                    menu : new Ext.menu.ColorMenu({
                        allowReselect: true,
                        focus: Ext.emptyFn,
                        value:'000000',
                        plain:true,
                        selectHandler: function(cp, color){
                            this.execCmd('forecolor', Ext.isSafari || Ext.isIE ? '#'+color : color);
                            this.deferFocus();
                        },
                        scope: this,
                        clickEvent:'mousedown'
                    })
                }, {
                    itemId:'backcolor',
                    cls:'x-btn-icon x-edit-backcolor',
                    clickEvent:'mousedown',
                    tooltip: tipsEnabled ? editor.buttonTips['backcolor'] || undefined : undefined,
                    tabIndex:-1,
                    menu : new Ext.menu.ColorMenu({
                        focus: Ext.emptyFn,
                        value:'FFFFFF',
                        plain:true,
                        allowReselect: true,
                        selectHandler: function(cp, color){
                            if(Ext.isGecko){
                                this.execCmd('useCSS', false);
                                this.execCmd('hilitecolor', color);
                                this.execCmd('useCSS', true);
                                this.deferFocus();
                            }else{
                                this.execCmd(Ext.isOpera ? 'hilitecolor' : 'backcolor', Ext.isSafari || Ext.isIE ? '#'+color : color);
                                this.deferFocus();
                            }
                        },
                        scope:this,
                        clickEvent:'mousedown'
                    })
                }
            );
        };

        if(this.enableAlignments){
            tb.add(
                '-',
                btn('justifyleft'),
                btn('justifycenter'),
                btn('justifyright')
            );
        };

        if(!Ext.isSafari2){
            if(this.enableLinks){
                tb.add(
                    '-',
                    btn('createlink', false, this.createLink)
                );
            };

            if(this.enableLists){
                tb.add(
                    '-',
                    btn('insertorderedlist'),
                    btn('insertunorderedlist')
                );
            }
            if(this.enableSourceEdit){
                tb.add(
                    '-',
                    btn('sourceedit', true, function(btn){
                        this.toggleSourceEdit(btn.pressed);
                    })
                );
            }
        }

        this.tb = tb;
    },

    
    getDocMarkup : function(){
        return '<html><head><style type="text/css">body{border:0;margin:0;padding:3px;height:98%;cursor:text;}</style></head><body></body></html>';
    },

    // private
    getEditorBody : function(){
        return this.doc.body || this.doc.documentElement;
    },

    // private
    getDoc : function(){
        return Ext.isIE ? this.getWin().document : (this.iframe.contentDocument || this.getWin().document);
    },

    // private
    getWin : function(){
        return Ext.isIE ? this.iframe.contentWindow : window.frames[this.iframe.name];
    },

    // private
    onRender : function(ct, position){
        Ext.form.HtmlEditor.superclass.onRender.call(this, ct, position);
        this.el.dom.style.border = '0 none';
        this.el.dom.setAttribute('tabIndex', -1);
        this.el.addClass('x-hidden');
        if(Ext.isIE){ // fix IE 1px bogus margin
            this.el.applyStyles('margin-top:-1px;margin-bottom:-1px;')
        }
        this.wrap = this.el.wrap({
            cls:'x-html-editor-wrap', cn:{cls:'x-html-editor-tb'}
        });

        this.createToolbar(this);

        this.tb.items.each(function(item){
           if(item.itemId != 'sourceedit'){
                item.disable();
            }
        });

        var iframe = document.createElement('iframe');
        iframe.name = Ext.id();
        iframe.frameBorder = '0';

        iframe.src = Ext.isIE ? Ext.SSL_SECURE_URL : "javascript:;";

        this.wrap.dom.appendChild(iframe);

        this.iframe = iframe;

        this.initFrame();

        if(this.autoMonitorDesignMode !== false){
            this.monitorTask = Ext.TaskMgr.start({
                run: this.checkDesignMode,
                scope: this,
                interval:100
            });
        }

        if(!this.width){
            var sz = this.el.getSize();
            this.setSize(sz.width, this.height || sz.height);
        }
    },

    initFrame : function(){
        this.doc = this.getDoc();
        this.win = this.getWin();

        this.doc.open();
        this.doc.write(this.getDocMarkup());
        this.doc.close();

        var task = { // must defer to wait for browser to be ready
            run : function(){
                if(this.doc.body || this.doc.readyState == 'complete'){
                    Ext.TaskMgr.stop(task);
                    this.doc.designMode="on";
                    this.initEditor.defer(10, this);
                }
            },
            interval : 10,
            duration:10000,
            scope: this
        };
        Ext.TaskMgr.start(task);
    },


    checkDesignMode : function(){
        if(this.wrap && this.wrap.dom.offsetWidth){
            var doc = this.getDoc();
            if(!doc){
                return;
            }
            if(!doc.editorInitialized || String(doc.designMode).toLowerCase() != 'on'){
                this.initFrame();
            }
        }
    },

    // private
    onResize : function(w, h){
        Ext.form.HtmlEditor.superclass.onResize.apply(this, arguments);
        if(this.el && this.iframe){
            if(typeof w == 'number'){
                var aw = w - this.wrap.getFrameWidth('lr');
                this.el.setWidth(this.adjustWidth('textarea', aw));
                this.iframe.style.width = Math.max(aw, 0) + 'px';
            }
            if(typeof h == 'number'){
                var ah = h - this.wrap.getFrameWidth('tb') - this.tb.el.getHeight();
                this.el.setHeight(this.adjustWidth('textarea', ah));
                this.iframe.style.height = Math.max(ah, 0) + 'px';
                if(this.doc){
                    this.getEditorBody().style.height = Math.max((ah - (this.iframePad*2)), 0) + 'px';
                }
            }
        }
    },

    
    toggleSourceEdit : function(sourceEditMode){
        if(sourceEditMode === undefined){
            sourceEditMode = !this.sourceEditMode;
        }
        this.sourceEditMode = sourceEditMode === true;
        var btn = this.tb.items.get('sourceedit');
        if(btn.pressed !== this.sourceEditMode){
            btn.toggle(this.sourceEditMode);
            return;
        }
        if(this.sourceEditMode){
            this.tb.items.each(function(item){
                if(item.itemId != 'sourceedit'){
                    item.disable();
                }
            });
            this.syncValue();
            this.iframe.className = 'x-hidden';
            this.el.removeClass('x-hidden');
            this.el.dom.removeAttribute('tabIndex');
            this.el.focus();
        }else{
            if(this.initialized){
                this.tb.items.each(function(item){
                    item.enable();
                });
            }
            this.pushValue();
            this.iframe.className = '';
            this.el.addClass('x-hidden');
            this.el.dom.setAttribute('tabIndex', -1);
            this.deferFocus();
        }
        var lastSize = this.lastSize;
        if(lastSize){
            delete this.lastSize;
            this.setSize(lastSize);
        }
        this.fireEvent('editmodechange', this, this.sourceEditMode);
    },

    // private used internally
    createLink : function(){
        var url = prompt(this.createLinkText, this.defaultLinkValue);
        if(url && url != 'http:/'+'/'){
            this.relayCmd('createlink', url);
        }
    },

    // private (for BoxComponent)
    adjustSize : Ext.BoxComponent.prototype.adjustSize,

    // private (for BoxComponent)
    getResizeEl : function(){
        return this.wrap;
    },

    // private (for BoxComponent)
    getPositionEl : function(){
        return this.wrap;
    },

    // private
    initEvents : function(){
        this.originalValue = this.getValue();
    },

    
    markInvalid : Ext.emptyFn,
    
    
    clearInvalid : Ext.emptyFn,

    // docs inherit from Field
    setValue : function(v){
        Ext.form.HtmlEditor.superclass.setValue.call(this, v);
        this.pushValue();
    },

    
    cleanHtml : function(html){
        html = String(html);
        if(html.length > 5){
            if(Ext.isSafari){ // strip safari nonsense
                html = html.replace(/\sclass="(?:Apple-style-span|khtml-block-placeholder)"/gi, '');
            }
        }
        if(html == '&nbsp;'){
            html = '';
        }
        return html;
    },

    
    syncValue : function(){
        if(this.initialized){
            var bd = this.getEditorBody();
            var html = bd.innerHTML;
            if(Ext.isSafari){
                var bs = bd.getAttribute('style'); // Safari puts text-align styles on the body element!
                var m = bs.match(/text-align:(.*?);/i);
                if(m && m[1]){
                    html = '<div style="'+m[0]+'">' + html + '</div>';
                }
            }
            html = this.cleanHtml(html);
            if(this.fireEvent('beforesync', this, html) !== false){
                this.el.dom.value = html;
                this.fireEvent('sync', this, html);
            }
        }
    },
    
    //docs inherit from Field
    getValue : function() {
        this.syncValue();
        return Ext.form.HtmlEditor.superclass.getValue.call(this);
    },


    
    pushValue : function(){
        if(this.initialized){
            var v = this.el.dom.value;
            if(!this.activated && v.length < 1){
                v = '&nbsp;';
            }
            if(this.fireEvent('beforepush', this, v) !== false){
                this.getEditorBody().innerHTML = v;
                this.fireEvent('push', this, v);
            }
        }
    },

    // private
    deferFocus : function(){
        this.focus.defer(10, this);
    },

    // docs inherit from Field
    focus : function(){
        if(this.win && !this.sourceEditMode){
            this.win.focus();
        }else{
            this.el.focus();
        }
    },

    // private
    initEditor : function(){
        var dbody = this.getEditorBody();
        var ss = this.el.getStyles('font-size', 'font-family', 'background-image', 'background-repeat');
        ss['background-attachment'] = 'fixed'; // w3c
        dbody.bgProperties = 'fixed'; // ie

        Ext.DomHelper.applyStyles(dbody, ss);

        if(this.doc){
            try{
                Ext.EventManager.removeAll(this.doc);
            }catch(e){}
        }

        this.doc = this.getDoc();

        Ext.EventManager.on(this.doc, {
            'mousedown': this.onEditorEvent,
            'dblclick': this.onEditorEvent,
            'click': this.onEditorEvent,
            'keyup': this.onEditorEvent,
            buffer:100,
            scope: this
        });

        if(Ext.isGecko){
            Ext.EventManager.on(this.doc, 'keypress', this.applyCommand, this);
        }
        if(Ext.isIE || Ext.isSafari || Ext.isOpera){
            Ext.EventManager.on(this.doc, 'keydown', this.fixKeys, this);
        }
        this.initialized = true;

        this.fireEvent('initialize', this);

        this.doc.editorInitialized = true;

        this.pushValue();
    },

    // private
    onDestroy : function(){
        if(this.monitorTask){
            Ext.TaskMgr.stop(this.monitorTask);
        }
        if(this.rendered){
            this.tb.items.each(function(item){
                if(item.menu){
                    item.menu.removeAll();
                    if(item.menu.el){
                        item.menu.el.destroy();
                    }
                }
                item.destroy();
            });
            this.wrap.dom.innerHTML = '';
            this.wrap.remove();
        }
    },

    // private
    onFirstFocus : function(){
        this.activated = true;
        this.tb.items.each(function(item){
           item.enable();
        });
        if(Ext.isGecko){ // prevent silly gecko errors
            this.win.focus();
            var s = this.win.getSelection();
            if(!s.focusNode || s.focusNode.nodeType != 3){
                var r = s.getRangeAt(0);
                r.selectNodeContents(this.getEditorBody());
                r.collapse(true);
                this.deferFocus();
            }
            try{
                this.execCmd('useCSS', true);
                this.execCmd('styleWithCSS', false);
            }catch(e){}
        }
        this.fireEvent('activate', this);
    },

    // private
    adjustFont: function(btn){
        var adjust = btn.itemId == 'increasefontsize' ? 1 : -1;

        var v = parseInt(this.doc.queryCommandValue('FontSize') || 2, 10);
        if(Ext.isSafari3 || Ext.isAir){
            // Safari 3 values
            // 1 = 10px, 2 = 13px, 3 = 16px, 4 = 18px, 5 = 24px, 6 = 32px
            if(v <= 10){
                v = 1 + adjust;
            }else if(v <= 13){
                v = 2 + adjust;
            }else if(v <= 16){
                v = 3 + adjust;
            }else if(v <= 18){
                v = 4 + adjust;
            }else if(v <= 24){
                v = 5 + adjust;
            }else {
                v = 6 + adjust;
            }
            v = v.constrain(1, 6);
        }else{
            if(Ext.isSafari){ // safari
                adjust *= 2;
            }
            v = Math.max(1, v+adjust) + (Ext.isSafari ? 'px' : 0);
        }
        this.execCmd('FontSize', v);
    },

    // private
    onEditorEvent : function(e){
        this.updateToolbar();
    },


    
    updateToolbar: function(){

        if(!this.activated){
            this.onFirstFocus();
            return;
        }

        var btns = this.tb.items.map, doc = this.doc;

        if(this.enableFont && !Ext.isSafari2){
            var name = (this.doc.queryCommandValue('FontName')||this.defaultFont).toLowerCase();
            if(name != this.fontSelect.dom.value){
                this.fontSelect.dom.value = name;
            }
        }
        if(this.enableFormat){
            btns.bold.toggle(doc.queryCommandState('bold'));
            btns.italic.toggle(doc.queryCommandState('italic'));
            btns.underline.toggle(doc.queryCommandState('underline'));
        }
        if(this.enableAlignments){
            btns.justifyleft.toggle(doc.queryCommandState('justifyleft'));
            btns.justifycenter.toggle(doc.queryCommandState('justifycenter'));
            btns.justifyright.toggle(doc.queryCommandState('justifyright'));
        }
        if(!Ext.isSafari2 && this.enableLists){
            btns.insertorderedlist.toggle(doc.queryCommandState('insertorderedlist'));
            btns.insertunorderedlist.toggle(doc.queryCommandState('insertunorderedlist'));
        }
        
        Ext.menu.MenuMgr.hideAll();

        this.syncValue();
    },

    // private
    relayBtnCmd : function(btn){
        this.relayCmd(btn.itemId);
    },

    
    relayCmd : function(cmd, value){
        (function(){
            this.focus();
            this.execCmd(cmd, value);
            this.updateToolbar();
        }).defer(10, this);
    },

    
    execCmd : function(cmd, value){
        this.doc.execCommand(cmd, false, value === undefined ? null : value);
        this.syncValue();
    },

    // private
    applyCommand : function(e){
        if(e.ctrlKey){
            var c = e.getCharCode(), cmd;
            if(c > 0){
                c = String.fromCharCode(c);
                switch(c){
                    case 'b':
                        cmd = 'bold';
                    break;
                    case 'i':
                        cmd = 'italic';
                    break;
                    case 'u':
                        cmd = 'underline';
                    break;
                }
                if(cmd){
                    this.win.focus();
                    this.execCmd(cmd);
                    this.deferFocus();
                    e.preventDefault();
                }
            }
        }
    },

    
    insertAtCursor : function(text){
        if(!this.activated){
            return;
        }
        if(Ext.isIE){
            this.win.focus();
            var r = this.doc.selection.createRange();
            if(r){
                r.collapse(true);
                r.pasteHTML(text);
                this.syncValue();
                this.deferFocus();
            }
        }else if(Ext.isGecko || Ext.isOpera){
            this.win.focus();
            this.execCmd('InsertHTML', text);
            this.deferFocus();
        }else if(Ext.isSafari){
            this.execCmd('InsertText', text);
            this.deferFocus();
        }
    },

    // private
    fixKeys : function(){ // load time branching for fastest keydown performance
        if(Ext.isIE){
            return function(e){
                var k = e.getKey(), r;
                if(k == e.TAB){
                    e.stopEvent();
                    r = this.doc.selection.createRange();
                    if(r){
                        r.collapse(true);
                        r.pasteHTML('&nbsp;&nbsp;&nbsp;&nbsp;');
                        this.deferFocus();
                    }
                }else if(k == e.ENTER){
                    r = this.doc.selection.createRange();
                    if(r){
                        var target = r.parentElement();
                        if(!target || target.tagName.toLowerCase() != 'li'){
                            e.stopEvent();
                            r.pasteHTML('<br />');
                            r.collapse(false);
                            r.select();
                        }
                    }
                }
            };
        }else if(Ext.isOpera){
            return function(e){
                var k = e.getKey();
                if(k == e.TAB){
                    e.stopEvent();
                    this.win.focus();
                    this.execCmd('InsertHTML','&nbsp;&nbsp;&nbsp;&nbsp;');
                    this.deferFocus();
                }
            };
        }else if(Ext.isSafari){
            return function(e){
                var k = e.getKey();
                if(k == e.TAB){
                    e.stopEvent();
                    this.execCmd('InsertText','\t');
                    this.deferFocus();
                }
             };
        }
    }(),

    
    getToolbar : function(){
        return this.tb;
    },

    
    buttonTips : {
        bold : {
            title: 'Bold (Ctrl+B)',
            text: 'Make the selected text bold.',
            cls: 'x-html-editor-tip'
        },
        italic : {
            title: 'Italic (Ctrl+I)',
            text: 'Make the selected text italic.',
            cls: 'x-html-editor-tip'
        },
        underline : {
            title: 'Underline (Ctrl+U)',
            text: 'Underline the selected text.',
            cls: 'x-html-editor-tip'
        },
        increasefontsize : {
            title: 'Grow Text',
            text: 'Increase the font size.',
            cls: 'x-html-editor-tip'
        },
        decreasefontsize : {
            title: 'Shrink Text',
            text: 'Decrease the font size.',
            cls: 'x-html-editor-tip'
        },
        backcolor : {
            title: 'Text Highlight Color',
            text: 'Change the background color of the selected text.',
            cls: 'x-html-editor-tip'
        },
        forecolor : {
            title: 'Font Color',
            text: 'Change the color of the selected text.',
            cls: 'x-html-editor-tip'
        },
        justifyleft : {
            title: 'Align Text Left',
            text: 'Align text to the left.',
            cls: 'x-html-editor-tip'
        },
        justifycenter : {
            title: 'Center Text',
            text: 'Center text in the editor.',
            cls: 'x-html-editor-tip'
        },
        justifyright : {
            title: 'Align Text Right',
            text: 'Align text to the right.',
            cls: 'x-html-editor-tip'
        },
        insertunorderedlist : {
            title: 'Bullet List',
            text: 'Start a bulleted list.',
            cls: 'x-html-editor-tip'
        },
        insertorderedlist : {
            title: 'Numbered List',
            text: 'Start a numbered list.',
            cls: 'x-html-editor-tip'
        },
        createlink : {
            title: 'Hyperlink',
            text: 'Make the selected text a hyperlink.',
            cls: 'x-html-editor-tip'
        },
        sourceedit : {
            title: 'Source Edit',
            text: 'Switch to source editing mode.',
            cls: 'x-html-editor-tip'
        }
    }

    // hide stuff that is not compatible
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
});
Ext.reg('htmleditor', Ext.form.HtmlEditor);

Ext.form.TimeField = Ext.extend(Ext.form.ComboBox, {
    
    minValue : null,
    
    maxValue : null,
    
    minText : "The time in this field must be equal to or after {0}",
    
    maxText : "The time in this field must be equal to or before {0}",
    
    invalidText : "{0} is not a valid time",
    
    format : "g:i A",
    
    altFormats : "g:ia|g:iA|g:i a|g:i A|h:i|g:i|H:i|ga|ha|gA|h a|g a|g A|gi|hi|gia|hia|g|H",
    
    increment: 15,

    // private override
    mode: 'local',
    // private override
    triggerAction: 'all',
    // private override
    typeAhead: false,
    
    // private - This is the date to use when generating time values in the absence of either minValue
    // or maxValue.  Using the current date causes DST issues on DST boundary dates, so this is an 
    // arbitrary "safe" date that can be any date aside from DST boundary dates.
    initDate: '1/1/2008',

    // private
    initComponent : function(){
        Ext.form.TimeField.superclass.initComponent.call(this);

        if(typeof this.minValue == "string"){
            this.minValue = this.parseDate(this.minValue);
        }
        if(typeof this.maxValue == "string"){
            this.maxValue = this.parseDate(this.maxValue);
        }

        if(!this.store){
            var min = this.parseDate(this.minValue);
            if(!min){
                min = new Date(this.initDate).clearTime();
            }
            var max = this.parseDate(this.maxValue);
            if(!max){
                max = new Date(this.initDate).clearTime().add('mi', (24 * 60) - 1);
            }
            var times = [];
            while(min <= max){
                times.push([min.dateFormat(this.format)]);
                min = min.add('mi', this.increment);
            }
            this.store = new Ext.data.SimpleStore({
                fields: ['text'],
                data : times
            });
            this.displayField = 'text';
        }
    },

    // inherited docs
    getValue : function(){
        var v = Ext.form.TimeField.superclass.getValue.call(this);
        return this.formatDate(this.parseDate(v)) || '';
    },

    // inherited docs
    setValue : function(value){
        Ext.form.TimeField.superclass.setValue.call(this, this.formatDate(this.parseDate(value)));
    },

    // private overrides
    validateValue : Ext.form.DateField.prototype.validateValue,
    parseDate : Ext.form.DateField.prototype.parseDate,
    formatDate : Ext.form.DateField.prototype.formatDate,

    // private
    beforeBlur : function(){
        var v = this.parseDate(this.getRawValue());
        if(v){
            this.setValue(v.dateFormat(this.format));
        }
    }

    
    
    
    
});
Ext.reg('timefield', Ext.form.TimeField);

Ext.form.Label = Ext.extend(Ext.BoxComponent, {
    
    
    

    // private
    onRender : function(ct, position){
        if(!this.el){
            this.el = document.createElement('label');
            this.el.id = this.getId();
            this.el.innerHTML = this.text ? Ext.util.Format.htmlEncode(this.text) : (this.html || '');
            if(this.forId){
                this.el.setAttribute('for', this.forId);
            }
        }
        Ext.form.Label.superclass.onRender.call(this, ct, position);
    },
    
    
    setText: function(t, encode){
        this.text = t;
        if(this.rendered){
            this.el.dom.innerHTML = encode !== false ? Ext.util.Format.htmlEncode(t) : t;
        }
        return this;
    }
});

Ext.reg('label', Ext.form.Label);

Ext.form.Action = function(form, options){
    this.form = form;
    this.options = options || {};
};


Ext.form.Action.CLIENT_INVALID = 'client';

Ext.form.Action.SERVER_INVALID = 'server';

Ext.form.Action.CONNECT_FAILURE = 'connect';

Ext.form.Action.LOAD_FAILURE = 'load';

Ext.form.Action.prototype = {












    type : 'default',


    // interface method
    run : function(options){

    },

    // interface method
    success : function(response){

    },

    // interface method
    handleResponse : function(response){

    },

    // default connection failure
    failure : function(response){
        this.response = response;
        this.failureType = Ext.form.Action.CONNECT_FAILURE;
        this.form.afterAction(this, false);
    },

    // private
    processResponse : function(response){
        this.response = response;
        if(!response.responseText){
            return true;
        }
        this.result = this.handleResponse(response);
        return this.result;
    },

    // utility functions used internally
    getUrl : function(appendParams){
        var url = this.options.url || this.form.url || this.form.el.dom.action;
        if(appendParams){
            var p = this.getParams();
            if(p){
                url += (url.indexOf('?') != -1 ? '&' : '?') + p;
            }
        }
        return url;
    },

    // private
    getMethod : function(){
        return (this.options.method || this.form.method || this.form.el.dom.method || 'POST').toUpperCase();
    },

    // private
    getParams : function(){
        var bp = this.form.baseParams;
        var p = this.options.params;
        if(p){
            if(typeof p == "object"){
                p = Ext.urlEncode(Ext.applyIf(p, bp));
            }else if(typeof p == 'string' && bp){
                p += '&' + Ext.urlEncode(bp);
            }
        }else if(bp){
            p = Ext.urlEncode(bp);
        }
        return p;
    },

    // private
    createCallback : function(opts){
		var opts = opts || {};
        return {
            success: this.success,
            failure: this.failure,
            scope: this,
            timeout: (opts.timeout*1000) || (this.form.timeout*1000),
            upload: this.form.fileUpload ? this.success : undefined
        };
    }
};


Ext.form.Action.Submit = function(form, options){
    Ext.form.Action.Submit.superclass.constructor.call(this, form, options);
};

Ext.extend(Ext.form.Action.Submit, Ext.form.Action, {
    
    
    type : 'submit',

    // private
    run : function(){
        var o = this.options;
        var method = this.getMethod();
        var isGet = method == 'GET';
        if(o.clientValidation === false || this.form.isValid()){
            Ext.Ajax.request(Ext.apply(this.createCallback(o), {
                form:this.form.el.dom,
                url:this.getUrl(isGet),
                method: method,
                headers: o.headers,
                params:!isGet ? this.getParams() : null,
                isUpload: this.form.fileUpload
            }));
        }else if (o.clientValidation !== false){ // client validation failed
            this.failureType = Ext.form.Action.CLIENT_INVALID;
            this.form.afterAction(this, false);
        }
    },

    // private
    success : function(response){
        var result = this.processResponse(response);
        if(result === true || result.success){
            this.form.afterAction(this, true);
            return;
        }
        if(result.errors){
            this.form.markInvalid(result.errors);
            this.failureType = Ext.form.Action.SERVER_INVALID;
        }
        this.form.afterAction(this, false);
    },

    // private
    handleResponse : function(response){
        if(this.form.errorReader){
            var rs = this.form.errorReader.read(response);
            var errors = [];
            if(rs.records){
                for(var i = 0, len = rs.records.length; i < len; i++) {
                    var r = rs.records[i];
                    errors[i] = r.data;
                }
            }
            if(errors.length < 1){
                errors = null;
            }
            return {
                success : rs.success,
                errors : errors
            };
        }
        return Ext.decode(response.responseText);
    }
});



Ext.form.Action.Load = function(form, options){
    Ext.form.Action.Load.superclass.constructor.call(this, form, options);
    this.reader = this.form.reader;
};

Ext.extend(Ext.form.Action.Load, Ext.form.Action, {
    // private
    type : 'load',

    // private
    run : function(){
        Ext.Ajax.request(Ext.apply(
                this.createCallback(this.options), {
                    method:this.getMethod(),
                    url:this.getUrl(false),
                    headers: this.options.headers,
                    params:this.getParams()
        }));
    },

    // private
    success : function(response){
        var result = this.processResponse(response);
        if(result === true || !result.success || !result.data){
            this.failureType = Ext.form.Action.LOAD_FAILURE;
            this.form.afterAction(this, false);
            return;
        }
        this.form.clearInvalid();
        this.form.setValues(result.data);
        this.form.afterAction(this, true);
    },

    // private
    handleResponse : function(response){
        if(this.form.reader){
            var rs = this.form.reader.read(response);
            var data = rs.records && rs.records[0] ? rs.records[0].data : null;
            return {
                success : rs.success,
                data : data
            };
        }
        return Ext.decode(response.responseText);
    }
});

Ext.form.Action.ACTION_TYPES = {
    'load' : Ext.form.Action.Load,
    'submit' : Ext.form.Action.Submit
};


Ext.form.VTypes = function(){
    // closure these in so they are only created once.
    var alpha = /^[a-zA-Z_]+$/;
    var alphanum = /^[a-zA-Z0-9_]+$/;
    var email = /^([\w]+)(\.[\w]+)*@([\w\-]+\.){1,5}([A-Za-z]){2,4}$/;
    var url = /(((https?)|(ftp)):\/\/([\-\w]+\.)+\w{2,3}(\/[%\-\w]+(\.\w{2,})?)*(([\w\-\.\?\\\/+@&#;`~=%!]*)(\.\w{2,})?)*\/?)/i;

    // All these messages and functions are configurable
    return {
        
        'email' : function(v){
            return email.test(v);
        },
        
        'emailText' : 'This field should be an e-mail address in the format "user@domain.com"',
        
        'emailMask' : /[a-z0-9_\.\-@]/i,

        
        'url' : function(v){
            return url.test(v);
        },
        
        'urlText' : 'This field should be a URL in the format "http:/'+'/www.domain.com"',
        
        
        'alpha' : function(v){
            return alpha.test(v);
        },
        
        'alphaText' : 'This field should only contain letters and _',
        
        'alphaMask' : /[a-z_]/i,

        
        'alphanum' : function(v){
            return alphanum.test(v);
        },
        
        'alphanumText' : 'This field should only contain letters, numbers and _',
        
        'alphanumMask' : /[a-z0-9_]/i
    };
}();

Ext.grid.GridPanel = Ext.extend(Ext.Panel, {
    
    
    
    
    
    
    
    
    
    
    
    

    
    ddText : "{0} selected row{1}",
    
    minColumnWidth : 25,
    
    trackMouseOver : true,
    
    enableDragDrop : false,
    
    enableColumnMove : true,
    
    enableColumnHide : true,
    
    enableHdMenu : true,
    
    stripeRows : false,
    
    autoExpandColumn : false,
    
    autoExpandMin : 50,
    
    autoExpandMax : 1000,
    
    view : null,
    
    loadMask : false,

    
    deferRowRender : true,

    // private
    rendered : false,
    // private
    viewReady: false,
    
    stateEvents: ["columnmove", "columnresize", "sortchange"],

    // private
    initComponent : function(){
        Ext.grid.GridPanel.superclass.initComponent.call(this);

        // override any provided value since it isn't valid
        this.autoScroll = false;
        this.autoWidth = false;

        if(Ext.isArray(this.columns)){
            this.colModel = new Ext.grid.ColumnModel(this.columns);
            delete this.columns;
        }

        // check and correct shorthanded configs
        if(this.ds){
            this.store = this.ds;
            delete this.ds;
        }
        if(this.cm){
            this.colModel = this.cm;
            delete this.cm;
        }
        if(this.sm){
            this.selModel = this.sm;
            delete this.sm;
        }
        this.store = Ext.StoreMgr.lookup(this.store);

        this.addEvents(
            // raw events
            
            "click",
            
            "dblclick",
            
            "contextmenu",
            
            "mousedown",
            
            "mouseup",
            
            "mouseover",
            
            "mouseout",
            
            "keypress",
            
            "keydown",

            // custom events
            
            "cellmousedown",
            
            "rowmousedown",
            
            "headermousedown",

            
            "cellclick",
            
            "celldblclick",
            
            "rowclick",
            
            "rowdblclick",
            
            "headerclick",
            
            "headerdblclick",
            
            "rowcontextmenu",
            
            "cellcontextmenu",
            
            "headercontextmenu",
            
            "bodyscroll",
            
            "columnresize",
            
            "columnmove",
            
            "sortchange"
        );
    },

    // private
    onRender : function(ct, position){
        Ext.grid.GridPanel.superclass.onRender.apply(this, arguments);

        var c = this.body;

        this.el.addClass('x-grid-panel');

        var view = this.getView();
        view.init(this);

        c.on("mousedown", this.onMouseDown, this);
        c.on("click", this.onClick, this);
        c.on("dblclick", this.onDblClick, this);
        c.on("contextmenu", this.onContextMenu, this);
        c.on("keydown", this.onKeyDown, this);

        this.relayEvents(c, ["mousedown","mouseup","mouseover","mouseout","keypress"]);

        this.getSelectionModel().init(this);
        this.view.render();
    },

    // private
    initEvents : function(){
        Ext.grid.GridPanel.superclass.initEvents.call(this);

        if(this.loadMask){
            this.loadMask = new Ext.LoadMask(this.bwrap,
                    Ext.apply({store:this.store}, this.loadMask));
        }
    },

    initStateEvents : function(){
        Ext.grid.GridPanel.superclass.initStateEvents.call(this);
        this.colModel.on('hiddenchange', this.saveState, this, {delay: 100});
    },

    applyState : function(state){
        var cm = this.colModel;
        var cs = state.columns;
        if(cs){
            for(var i = 0, len = cs.length; i < len; i++){
                var s = cs[i];
                var c = cm.getColumnById(s.id);
                if(c){
                    c.hidden = s.hidden;
                    c.width = s.width;
                    var oldIndex = cm.getIndexById(s.id);
                    if(oldIndex != i){
                        cm.moveColumn(oldIndex, i);
                    }
                }
            }
        }
        if(state.sort){
            this.store[this.store.remoteSort ? 'setDefaultSort' : 'sort'](state.sort.field, state.sort.direction);
        }
    },

    getState : function(){
        var o = {columns: []};
        for(var i = 0, c; c = this.colModel.config[i]; i++){
            o.columns[i] = {
                id: c.id,
                width: c.width
            };
            if(c.hidden){
                o.columns[i].hidden = true;
            }
        }
        var ss = this.store.getSortState();
        if(ss){
            o.sort = ss;
        }
        return o;
    },

    // private
    afterRender : function(){
        Ext.grid.GridPanel.superclass.afterRender.call(this);
        this.view.layout();
        if(this.deferRowRender){
            this.view.afterRender.defer(10, this.view);
        }else{
            this.view.afterRender();
        }
        this.viewReady = true;
    },

    
    reconfigure : function(store, colModel){
        if(this.loadMask){
            this.loadMask.destroy();
            this.loadMask = new Ext.LoadMask(this.bwrap,
                    Ext.apply({store:store}, this.initialConfig.loadMask));
        }
        this.view.bind(store, colModel);
        this.store = store;
        this.colModel = colModel;
        if(this.rendered){
            this.view.refresh(true);
        }
    },

    // private
    onKeyDown : function(e){
        this.fireEvent("keydown", e);
    },

    // private
    onDestroy : function(){
        if(this.rendered){
            if(this.loadMask){
                this.loadMask.destroy();
            }
            var c = this.body;
            c.removeAllListeners();
            this.view.destroy();
            c.update("");
        }
        this.colModel.purgeListeners();
        Ext.grid.GridPanel.superclass.onDestroy.call(this);
    },

    // private
    processEvent : function(name, e){
        this.fireEvent(name, e);
        var t = e.getTarget();
        var v = this.view;
        var header = v.findHeaderIndex(t);
        if(header !== false){
            this.fireEvent("header" + name, this, header, e);
        }else{
            var row = v.findRowIndex(t);
            var cell = v.findCellIndex(t);
            if(row !== false){
                this.fireEvent("row" + name, this, row, e);
                if(cell !== false){
                    this.fireEvent("cell" + name, this, row, cell, e);
                }
            }
        }
    },

    // private
    onClick : function(e){
        this.processEvent("click", e);
    },

    // private
    onMouseDown : function(e){
        this.processEvent("mousedown", e);
    },

    // private
    onContextMenu : function(e, t){
        this.processEvent("contextmenu", e);
    },

    // private
    onDblClick : function(e){
        this.processEvent("dblclick", e);
    },

    // private
    walkCells : function(row, col, step, fn, scope){
        var cm = this.colModel, clen = cm.getColumnCount();
        var ds = this.store, rlen = ds.getCount(), first = true;
        if(step < 0){
            if(col < 0){
                row--;
                first = false;
            }
            while(row >= 0){
                if(!first){
                    col = clen-1;
                }
                first = false;
                while(col >= 0){
                    if(fn.call(scope || this, row, col, cm) === true){
                        return [row, col];
                    }
                    col--;
                }
                row--;
            }
        } else {
            if(col >= clen){
                row++;
                first = false;
            }
            while(row < rlen){
                if(!first){
                    col = 0;
                }
                first = false;
                while(col < clen){
                    if(fn.call(scope || this, row, col, cm) === true){
                        return [row, col];
                    }
                    col++;
                }
                row++;
            }
        }
        return null;
    },

    // private
    getSelections : function(){
        return this.selModel.getSelections();
    },

    // private
    onResize : function(){
        Ext.grid.GridPanel.superclass.onResize.apply(this, arguments);
        if(this.viewReady){
            this.view.layout();
        }
    },

    
    getGridEl : function(){
        return this.body;
    },

    // private for compatibility, overridden by editor grid
    stopEditing : Ext.emptyFn,

    
    getSelectionModel : function(){
        if(!this.selModel){
            this.selModel = new Ext.grid.RowSelectionModel(
                    this.disableSelection ? {selectRow: Ext.emptyFn} : null);
        }
        return this.selModel;
    },

    
    getStore : function(){
        return this.store;
    },

    
    getColumnModel : function(){
        return this.colModel;
    },

    
    getView : function(){
        if(!this.view){
            this.view = new Ext.grid.GridView(this.viewConfig);
        }
        return this.view;
    },
    
    getDragDropText : function(){
        var count = this.selModel.getCount();
        return String.format(this.ddText, count, count == 1 ? '' : 's');
    }

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    



    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
});
Ext.reg('grid', Ext.grid.GridPanel);

Ext.grid.GridView = function(config){
    Ext.apply(this, config);
    // These events are only used internally by the grid components
    this.addEvents(
      
      "beforerowremoved",
      
      "beforerowsinserted",
      
      "beforerefresh",
      
      "rowremoved",
      
      "rowsinserted",
      
      "rowupdated",
      
      "refresh"
  );
    Ext.grid.GridView.superclass.constructor.call(this);
};

Ext.extend(Ext.grid.GridView, Ext.util.Observable, {
    
    
    
    
    
    deferEmptyText: true,
    
    scrollOffset: 19,
    
    autoFill: false,
    
    forceFit: false,
    
    sortClasses : ["sort-asc", "sort-desc"],
    
    sortAscText : "Sort Ascending",
    
    sortDescText : "Sort Descending",
    
    columnsText : "Columns",

    // private
    borderWidth: 2,
    tdClass: 'x-grid3-cell',
    hdCls: 'x-grid3-hd',

    
    cellSelectorDepth: 4,
    
    rowSelectorDepth: 10,

    
    cellSelector: 'td.x-grid3-cell',
    
    rowSelector: 'div.x-grid3-row',

    

    // private
    initTemplates : function(){
        var ts = this.templates || {};
        if(!ts.master){
            ts.master = new Ext.Template(
                    '<div class="x-grid3" hidefocus="true">',
                        '<div class="x-grid3-viewport">',
                            '<div class="x-grid3-header"><div class="x-grid3-header-inner"><div class="x-grid3-header-offset">{header}</div></div><div class="x-clear"></div></div>',
                            '<div class="x-grid3-scroller"><div class="x-grid3-body">{body}</div><a href="#" class="x-grid3-focus" tabIndex="-1"></a></div>',
                        "</div>",
                        '<div class="x-grid3-resize-marker">&#160;</div>',
                        '<div class="x-grid3-resize-proxy">&#160;</div>',
                    "</div>"
                    );
        }

        if(!ts.header){
            ts.header = new Ext.Template(
                    '<table border="0" cellspacing="0" cellpadding="0" style="{tstyle}">',
                    '<thead><tr class="x-grid3-hd-row">{cells}</tr></thead>',
                    "</table>"
                    );
        }

        if(!ts.hcell){
            ts.hcell = new Ext.Template(
                    '<td class="x-grid3-hd x-grid3-cell x-grid3-td-{id} {css}" style="{style}"><div {tooltip} {attr} class="x-grid3-hd-inner x-grid3-hd-{id}" unselectable="on" style="{istyle}">', this.grid.enableHdMenu ? '<a class="x-grid3-hd-btn" href="#"></a>' : '',
                    '{value}<img class="x-grid3-sort-icon" src="', Ext.BLANK_IMAGE_URL, '" />',
                    "</div></td>"
                    );
        }

        if(!ts.body){
            ts.body = new Ext.Template('{rows}');
        }

        if(!ts.row){
            ts.row = new Ext.Template(
                    '<div class="x-grid3-row {alt}" style="{tstyle}"><table class="x-grid3-row-table" border="0" cellspacing="0" cellpadding="0" style="{tstyle}">',
                    '<tbody><tr>{cells}</tr>',
                    (this.enableRowBody ? '<tr class="x-grid3-row-body-tr" style="{bodyStyle}"><td colspan="{cols}" class="x-grid3-body-cell" tabIndex="0" hidefocus="on"><div class="x-grid3-row-body">{body}</div></td></tr>' : ''),
                    '</tbody></table></div>'
                    );
        }

        if(!ts.cell){
            ts.cell = new Ext.Template(
                    '<td class="x-grid3-col x-grid3-cell x-grid3-td-{id} {css}" style="{style}" tabIndex="0" {cellAttr}>',
                    '<div class="x-grid3-cell-inner x-grid3-col-{id}" unselectable="on" {attr}>{value}</div>',
                    "</td>"
                    );
        }

        for(var k in ts){
            var t = ts[k];
            if(t && typeof t.compile == 'function' && !t.compiled){
                t.disableFormats = true;
                t.compile();
            }
        }

        this.templates = ts;
        this.colRe = new RegExp("x-grid3-td-([^\\s]+)", "");
    },

    // private
    fly : function(el){
        if(!this._flyweight){
            this._flyweight = new Ext.Element.Flyweight(document.body);
        }
        this._flyweight.dom = el;
        return this._flyweight;
    },

    // private
    getEditorParent : function(){
        return this.scroller.dom;
    },

    // private
    initElements : function(){
        var E = Ext.Element;

        var el = this.grid.getGridEl().dom.firstChild;
        var cs = el.childNodes;

        this.el = new E(el);

        this.mainWrap = new E(cs[0]);
        this.mainHd = new E(this.mainWrap.dom.firstChild);

        if(this.grid.hideHeaders){
            this.mainHd.setDisplayed(false);
        }

        this.innerHd = this.mainHd.dom.firstChild;
        this.scroller = new E(this.mainWrap.dom.childNodes[1]);
        if(this.forceFit){
            this.scroller.setStyle('overflow-x', 'hidden');
        }
        
        this.mainBody = new E(this.scroller.dom.firstChild);

        this.focusEl = new E(this.scroller.dom.childNodes[1]);
        this.focusEl.swallowEvent("click", true);

        this.resizeMarker = new E(cs[1]);
        this.resizeProxy = new E(cs[2]);
    },

    // private
    getRows : function(){
        return this.hasRows() ? this.mainBody.dom.childNodes : [];
    },

    // finder methods, used with delegation

    // private
    findCell : function(el){
        if(!el){
            return false;
        }
        return this.fly(el).findParent(this.cellSelector, this.cellSelectorDepth);
    },

    // private
    findCellIndex : function(el, requiredCls){
        var cell = this.findCell(el);
        if(cell && (!requiredCls || this.fly(cell).hasClass(requiredCls))){
            return this.getCellIndex(cell);
        }
        return false;
    },

    // private
    getCellIndex : function(el){
        if(el){
            var m = el.className.match(this.colRe);
            if(m && m[1]){
                return this.cm.getIndexById(m[1]);
            }
        }
        return false;
    },

    // private
    findHeaderCell : function(el){
        var cell = this.findCell(el);
        return cell && this.fly(cell).hasClass(this.hdCls) ? cell : null;
    },

    // private
    findHeaderIndex : function(el){
        return this.findCellIndex(el, this.hdCls);
    },


    findRow : function(el){
        if(!el){
            return false;
        }
        return this.fly(el).findParent(this.rowSelector, this.rowSelectorDepth);
    },


    findRowIndex : function(el){
        var r = this.findRow(el);
        return r ? r.rowIndex : false;
    },

    // getter methods for fetching elements dynamically in the grid


    getRow : function(row){
        return this.getRows()[row];
    },


    getCell : function(row, col){
        return this.getRow(row).getElementsByTagName('td')[col];
    },


    getHeaderCell : function(index){
      return this.mainHd.dom.getElementsByTagName('td')[index];
    },

    // manipulating elements

    // private - use getRowClass to apply custom row classes
    addRowClass : function(row, cls){
        var r = this.getRow(row);
        if(r){
            this.fly(r).addClass(cls);
        }
    },

    // private
    removeRowClass : function(row, cls){
        var r = this.getRow(row);
        if(r){
            this.fly(r).removeClass(cls);
        }
    },

    // private
    removeRow : function(row){
        Ext.removeNode(this.getRow(row));
        this.syncFocusEl(row);
    },
    
    // private
    removeRows : function(firstRow, lastRow){
        var bd = this.mainBody.dom;
        for(var rowIndex = firstRow; rowIndex <= lastRow; rowIndex++){
            Ext.removeNode(bd.childNodes[firstRow]);
        }
        this.syncFocusEl(firstRow);
    },

    // scrolling stuff

    // private
    getScrollState : function(){
        var sb = this.scroller.dom;
        return {left: sb.scrollLeft, top: sb.scrollTop};
    },

    // private
    restoreScroll : function(state){
        var sb = this.scroller.dom;
        sb.scrollLeft = state.left;
        sb.scrollTop = state.top;
    },

    
    scrollToTop : function(){
        this.scroller.dom.scrollTop = 0;
        this.scroller.dom.scrollLeft = 0;
    },

    // private
    syncScroll : function(){
      this.syncHeaderScroll();
      var mb = this.scroller.dom;
        this.grid.fireEvent("bodyscroll", mb.scrollLeft, mb.scrollTop);
    },

    // private
    syncHeaderScroll : function(){
        var mb = this.scroller.dom;
        this.innerHd.scrollLeft = mb.scrollLeft;
        this.innerHd.scrollLeft = mb.scrollLeft; // second time for IE (1/2 time first fails, other browsers ignore)
    },

    // private
    updateSortIcon : function(col, dir){
        var sc = this.sortClasses;
        var hds = this.mainHd.select('td').removeClass(sc);
        hds.item(col).addClass(sc[dir == "DESC" ? 1 : 0]);
    },

    // private
    updateAllColumnWidths : function(){
        var tw = this.getTotalWidth();
        var clen = this.cm.getColumnCount();
        var ws = [];
        for(var i = 0; i < clen; i++){
            ws[i] = this.getColumnWidth(i);
        }

        this.innerHd.firstChild.firstChild.style.width = tw;

        for(var i = 0; i < clen; i++){
            var hd = this.getHeaderCell(i);
            hd.style.width = ws[i];
        }

        var ns = this.getRows(), row, trow;
        for(var i = 0, len = ns.length; i < len; i++){
            row = ns[i];
            row.style.width = tw;
            if(row.firstChild){
                row.firstChild.style.width = tw;
                trow = row.firstChild.rows[0];
                for (var j = 0; j < clen; j++) {
                   trow.childNodes[j].style.width = ws[j];
                }
            }
        }

        this.onAllColumnWidthsUpdated(ws, tw);
    },

    // private
    updateColumnWidth : function(col, width){
        var w = this.getColumnWidth(col);
        var tw = this.getTotalWidth();

        this.innerHd.firstChild.firstChild.style.width = tw;
        var hd = this.getHeaderCell(col);
        hd.style.width = w;

        var ns = this.getRows(), row;
        for(var i = 0, len = ns.length; i < len; i++){
            row = ns[i];
            row.style.width = tw;
            if(row.firstChild){
                row.firstChild.style.width = tw;
                row.firstChild.rows[0].childNodes[col].style.width = w;
            }
        }

        this.onColumnWidthUpdated(col, w, tw);
    },

    // private
    updateColumnHidden : function(col, hidden){
        var tw = this.getTotalWidth();

        this.innerHd.firstChild.firstChild.style.width = tw;

        var display = hidden ? 'none' : '';

        var hd = this.getHeaderCell(col);
        hd.style.display = display;

        var ns = this.getRows(), row;
        for(var i = 0, len = ns.length; i < len; i++){
            row = ns[i];
            row.style.width = tw;
            if(row.firstChild){
                row.firstChild.style.width = tw;
                row.firstChild.rows[0].childNodes[col].style.display = display;
            }
        }

        this.onColumnHiddenUpdated(col, hidden, tw);

        delete this.lastViewWidth; // force recalc
        this.layout();
    },

    // private
    doRender : function(cs, rs, ds, startRow, colCount, stripe){
        var ts = this.templates, ct = ts.cell, rt = ts.row, last = colCount-1;
        var tstyle = 'width:'+this.getTotalWidth()+';';
        // buffers
        var buf = [], cb, c, p = {}, rp = {tstyle: tstyle}, r;
        for(var j = 0, len = rs.length; j < len; j++){
            r = rs[j]; cb = [];
            var rowIndex = (j+startRow);
            for(var i = 0; i < colCount; i++){
                c = cs[i];
                p.id = c.id;
                p.css = i == 0 ? 'x-grid3-cell-first ' : (i == last ? 'x-grid3-cell-last ' : '');
                p.attr = p.cellAttr = "";
                p.value = c.renderer(r.data[c.name], p, r, rowIndex, i, ds);
                p.style = c.style;
                if(p.value == undefined || p.value === "") p.value = "&#160;";
                if(r.dirty && typeof r.modified[c.name] !== 'undefined'){
                    p.css += ' x-grid3-dirty-cell';
                }
                cb[cb.length] = ct.apply(p);
            }
            var alt = [];
            if(stripe && ((rowIndex+1) % 2 == 0)){
                alt[0] = "x-grid3-row-alt";
            }
            if(r.dirty){
                alt[1] = " x-grid3-dirty-row";
            }
            rp.cols = colCount;
            if(this.getRowClass){
                alt[2] = this.getRowClass(r, rowIndex, rp, ds);
            }
            rp.alt = alt.join(" ");
            rp.cells = cb.join("");
            buf[buf.length] =  rt.apply(rp);
        }
        return buf.join("");
    },

    // private
    processRows : function(startRow, skipStripe){
        if(this.ds.getCount() < 1){
            return;
        }
        skipStripe = skipStripe || !this.grid.stripeRows;
        startRow = startRow || 0;
        var rows = this.getRows();
        var cls = ' x-grid3-row-alt ';
        rows[0].className += ' x-grid3-row-first';
        rows[rows.length - 1].className += ' x-grid3-row-last';
        for(var i = startRow, len = rows.length; i < len; i++){
            var row = rows[i];
            row.rowIndex = i;
            if(!skipStripe){
                var isAlt = ((i+1) % 2 == 0);
                var hasAlt = (' '+row.className + ' ').indexOf(cls) != -1;
                if(isAlt == hasAlt){
                    continue;
                }
                if(isAlt){
                    row.className += " x-grid3-row-alt";
                }else{
                    row.className = row.className.replace("x-grid3-row-alt", "");
                }
            }
        }
    },

    afterRender: function(){
        this.mainBody.dom.innerHTML = this.renderRows();
        this.processRows(0, true);

        if(this.deferEmptyText !== true){
            this.applyEmptyText();
        }
    },

    // private
    renderUI : function(){

        var header = this.renderHeaders();
        var body = this.templates.body.apply({rows:''});


        var html = this.templates.master.apply({
            body: body,
            header: header
        });

        var g = this.grid;

        g.getGridEl().dom.innerHTML = html;

        this.initElements();

        // get mousedowns early
        Ext.fly(this.innerHd).on("click", this.handleHdDown, this);
        this.mainHd.on("mouseover", this.handleHdOver, this);
        this.mainHd.on("mouseout", this.handleHdOut, this);
        this.mainHd.on("mousemove", this.handleHdMove, this);

        this.scroller.on('scroll', this.syncScroll,  this);
        if(g.enableColumnResize !== false){
            this.splitZone = new Ext.grid.GridView.SplitDragZone(g, this.mainHd.dom);
        }

        if(g.enableColumnMove){
            this.columnDrag = new Ext.grid.GridView.ColumnDragZone(g, this.innerHd);
            this.columnDrop = new Ext.grid.HeaderDropZone(g, this.mainHd.dom);
        }

        if(g.enableHdMenu !== false){
            if(g.enableColumnHide !== false){
                this.colMenu = new Ext.menu.Menu({id:g.id + "-hcols-menu"});
                this.colMenu.on("beforeshow", this.beforeColMenuShow, this);
                this.colMenu.on("itemclick", this.handleHdMenuClick, this);
            }
            this.hmenu = new Ext.menu.Menu({id: g.id + "-hctx"});
            this.hmenu.add(
                {id:"asc", text: this.sortAscText, cls: "xg-hmenu-sort-asc"},
                {id:"desc", text: this.sortDescText, cls: "xg-hmenu-sort-desc"}
            );
            if(g.enableColumnHide !== false){
                this.hmenu.add('-',
                    {id:"columns", text: this.columnsText, menu: this.colMenu, iconCls: 'x-cols-icon'}
                );
            }
            this.hmenu.on("itemclick", this.handleHdMenuClick, this);

            //g.on("headercontextmenu", this.handleHdCtx, this);
        }

        if(g.trackMouseOver){
            this.mainBody.on("mouseover", this.onRowOver, this);
            this.mainBody.on("mouseout", this.onRowOut, this);
        }
        if(g.enableDragDrop || g.enableDrag){
            this.dragZone = new Ext.grid.GridDragZone(g, {
                ddGroup : g.ddGroup || 'GridDD'
            });
        }

        this.updateHeaderSortState();

    },

    // private
    layout : function(){
        if(!this.mainBody){
            return; // not rendered
        }
        var g = this.grid;
        var c = g.getGridEl();
        var csize = c.getSize(true);
        var vw = csize.width;

        if(vw < 20 || csize.height < 20){ // display: none?
            return;
        }

        if(g.autoHeight){
            this.scroller.dom.style.overflow = 'visible';
            if(Ext.isSafari){
                this.scroller.dom.style.position = 'static';
            }
        }else{
            this.el.setSize(csize.width, csize.height);

            var hdHeight = this.mainHd.getHeight();
            var vh = csize.height - (hdHeight);

            this.scroller.setSize(vw, vh);
            if(this.innerHd){
                this.innerHd.style.width = (vw)+'px';
            }
        }
        if(this.forceFit){
            if(this.lastViewWidth != vw){
                this.fitColumns(false, false);
                this.lastViewWidth = vw;
            }
        }else {
            this.autoExpand();
            this.syncHeaderScroll();
        }
        this.onLayout(vw, vh);
    },

    // template functions for subclasses and plugins
    // these functions include precalculated values
    onLayout : function(vw, vh){
        // do nothing
    },

    onColumnWidthUpdated : function(col, w, tw){
        //template method
        this.focusEl.setWidth(tw);
    },

    onAllColumnWidthsUpdated : function(ws, tw){
        //template method
        this.focusEl.setWidth(tw);
    },

    onColumnHiddenUpdated : function(col, hidden, tw){
        // template method
        this.focusEl.setWidth(tw);
    },

    updateColumnText : function(col, text){
        // template method
    },

    afterMove : function(colIndex){
        // template method
    },

    
    // private
    init: function(grid){
        this.grid = grid;

        this.initTemplates();
        this.initData(grid.store, grid.colModel);
        this.initUI(grid);
    },

    // private
    getColumnId : function(index){
      return this.cm.getColumnId(index);
    },

    // private
    renderHeaders : function(){
        var cm = this.cm, ts = this.templates;
        var ct = ts.hcell;

        var cb = [], sb = [], p = {};
        var len = cm.getColumnCount();
        var last = len - 1;
        for(var i = 0; i < len; i++){
            p.id = cm.getColumnId(i);
            p.value = cm.getColumnHeader(i) || "";
            p.style = this.getColumnStyle(i, true);
            p.tooltip = this.getColumnTooltip(i);
            p.css = i == 0 ? 'x-grid3-cell-first ' : (i == last ? 'x-grid3-cell-last ' : '');
            if(cm.config[i].align == 'right'){
                p.istyle = 'padding-right:16px';
            } else {
                delete p.istyle;
            }
            cb[cb.length] = ct.apply(p);
        }
        return ts.header.apply({cells: cb.join(""), tstyle:'width:'+this.getTotalWidth()+';'});
    },

    // private
    getColumnTooltip : function(i){
        var tt = this.cm.getColumnTooltip(i);
        if(tt){
            if(Ext.QuickTips.isEnabled()){
                return 'ext:qtip="'+tt+'"';
            }else{
                return 'title="'+tt+'"';
            }
        }
        return "";
    },

    // private
    beforeUpdate : function(){
        this.grid.stopEditing(true);
    },

    // private
    updateHeaders : function(){
        this.innerHd.firstChild.innerHTML = this.renderHeaders();
    },

    
    focusRow : function(row){
        this.focusCell(row, 0, false);
    },

    
    focusCell : function(row, col, hscroll){
		this.syncFocusEl(this.ensureVisible(row, col, hscroll));
        if(Ext.isGecko){
            this.focusEl.focus();
        }else{
            this.focusEl.focus.defer(1, this.focusEl);
        }
    },

	resolveCell : function(row, col, hscroll){
		if(typeof row != "number"){
            row = row.rowIndex;
        }
        if(!this.ds){
            return null;
        }
        if(row < 0 || row >= this.ds.getCount()){
            return null;
        }
        col = (col !== undefined ? col : 0);

        var rowEl = this.getRow(row), cellEl;
        if(!(hscroll === false && col === 0)){
            while(this.cm.isHidden(col)){
                col++;
            }
            cellEl = this.getCell(row, col);
        }

		return {row: rowEl, cell: cellEl};
	},

	getResolvedXY : function(resolved){
		if(!resolved){
			return null;
		}
		var s = this.scroller.dom, c = resolved.cell, r = resolved.row;
		return c ? Ext.fly(c).getXY() : [this.el.getX(), Ext.fly(r).getY()];
	},

	syncFocusEl : function(row, col, hscroll){
		var xy = row;
		if(!Ext.isArray(xy)){
			row = Math.min(row, Math.max(0, this.getRows().length-1));
        	xy = this.getResolvedXY(this.resolveCell(row, col, hscroll));
		}
        this.focusEl.setXY(xy||this.scroller.getXY());
    },

	ensureVisible : function(row, col, hscroll){
        var resolved = this.resolveCell(row, col, hscroll);
		if(!resolved || !resolved.row){
			return;
		}

		var rowEl = resolved.row, cellEl = resolved.cell;

		var c = this.scroller.dom;

        var ctop = 0;
        var p = rowEl, stop = this.el.dom;
        while(p && p != stop){
            ctop += p.offsetTop;
            p = p.offsetParent;
        }
        ctop -= this.mainHd.dom.offsetHeight;

        var cbot = ctop + rowEl.offsetHeight;

        var ch = c.clientHeight;
        var stop = parseInt(c.scrollTop, 10);
        var sbot = stop + ch;

		if(ctop < stop){
          c.scrollTop = ctop;
        }else if(cbot > sbot){
            c.scrollTop = cbot-ch;
        }

        if(hscroll !== false){
            var cleft = parseInt(cellEl.offsetLeft, 10);
            var cright = cleft + cellEl.offsetWidth;

            var sleft = parseInt(c.scrollLeft, 10);
            var sright = sleft + c.clientWidth;
            if(cleft < sleft){
                c.scrollLeft = cleft;
            }else if(cright > sright){
                c.scrollLeft = cright-c.clientWidth;
            }
        }
        return this.getResolvedXY(resolved);
    },

    // private
    insertRows : function(dm, firstRow, lastRow, isUpdate){
        if(!isUpdate && firstRow === 0 && lastRow >= dm.getCount()-1){
            this.refresh();
        }else{
            if(!isUpdate){
                this.fireEvent("beforerowsinserted", this, firstRow, lastRow);
            }
            var html = this.renderRows(firstRow, lastRow);
            var before = this.getRow(firstRow);
            if(before){
                Ext.DomHelper.insertHtml('beforeBegin', before, html);
            }else{
                Ext.DomHelper.insertHtml('beforeEnd', this.mainBody.dom, html);
            }
            if(!isUpdate){
                this.fireEvent("rowsinserted", this, firstRow, lastRow);
                this.processRows(firstRow);
            }
        }
        this.syncFocusEl(firstRow);
    },

    // private
    deleteRows : function(dm, firstRow, lastRow){
        if(dm.getRowCount()<1){
            this.refresh();
        }else{
            this.fireEvent("beforerowsdeleted", this, firstRow, lastRow);

            this.removeRows(firstRow, lastRow);

            this.processRows(firstRow);
            this.fireEvent("rowsdeleted", this, firstRow, lastRow);
        }
    },

    // private
    getColumnStyle : function(col, isHeader){
        var style = !isHeader ? (this.cm.config[col].css || '') : '';
        style += 'width:'+this.getColumnWidth(col)+';';
        if(this.cm.isHidden(col)){
            style += 'display:none;';
        }
        var align = this.cm.config[col].align;
        if(align){
            style += 'text-align:'+align+';';
        }
        return style;
    },

    // private
    getColumnWidth : function(col){
        var w = this.cm.getColumnWidth(col);
        if(typeof w == 'number'){
            return (Ext.isBorderBox ? w : (w-this.borderWidth > 0 ? w-this.borderWidth:0)) + 'px';
        }
        return w;
    },

    // private
    getTotalWidth : function(){
        return this.cm.getTotalWidth()+'px';
    },

    // private
    fitColumns : function(preventRefresh, onlyExpand, omitColumn){
        var cm = this.cm, leftOver, dist, i;
        var tw = cm.getTotalWidth(false);
        var aw = this.grid.getGridEl().getWidth(true)-this.scrollOffset;

        if(aw < 20){ // not initialized, so don't screw up the default widths
            return;
        }
        var extra = aw - tw;

        if(extra === 0){
            return false;
        }

        var vc = cm.getColumnCount(true);
        var ac = vc-(typeof omitColumn == 'number' ? 1 : 0);
        if(ac === 0){
            ac = 1;
            omitColumn = undefined;
        }
        var colCount = cm.getColumnCount();
        var cols = [];
        var extraCol = 0;
        var width = 0;
        var w;
        for (i = 0; i < colCount; i++){
            if(!cm.isHidden(i) && !cm.isFixed(i) && i !== omitColumn){
                w = cm.getColumnWidth(i);
                cols.push(i);
                extraCol = i;
                cols.push(w);
                width += w;
            }
        }
        var frac = (aw - cm.getTotalWidth())/width;
        while (cols.length){
            w = cols.pop();
            i = cols.pop();
            cm.setColumnWidth(i, Math.max(this.grid.minColumnWidth, Math.floor(w + w*frac)), true);
        }

        if((tw = cm.getTotalWidth(false)) > aw){
            var adjustCol = ac != vc ? omitColumn : extraCol;
             cm.setColumnWidth(adjustCol, Math.max(1,
                     cm.getColumnWidth(adjustCol)- (tw-aw)), true);
        }

        if(preventRefresh !== true){
            this.updateAllColumnWidths();
        }


        return true;
    },

    // private
    autoExpand : function(preventUpdate){
        var g = this.grid, cm = this.cm;
        if(!this.userResized && g.autoExpandColumn){
            var tw = cm.getTotalWidth(false);
            var aw = this.grid.getGridEl().getWidth(true)-this.scrollOffset;
            if(tw != aw){
                var ci = cm.getIndexById(g.autoExpandColumn);
                var currentWidth = cm.getColumnWidth(ci);
                var cw = Math.min(Math.max(((aw-tw)+currentWidth), g.autoExpandMin), g.autoExpandMax);
                if(cw != currentWidth){
                    cm.setColumnWidth(ci, cw, true);
                    if(preventUpdate !== true){
                        this.updateColumnWidth(ci, cw);
                    }
                }
            }
        }
    },

    // private
    getColumnData : function(){
        // build a map for all the columns
        var cs = [], cm = this.cm, colCount = cm.getColumnCount();
        for(var i = 0; i < colCount; i++){
            var name = cm.getDataIndex(i);
            cs[i] = {
                name : (typeof name == 'undefined' ? this.ds.fields.get(i).name : name),
                renderer : cm.getRenderer(i),
                id : cm.getColumnId(i),
                style : this.getColumnStyle(i)
            };
        }
        return cs;
    },

    // private
    renderRows : function(startRow, endRow){
        // pull in all the crap needed to render rows
        var g = this.grid, cm = g.colModel, ds = g.store, stripe = g.stripeRows;
        var colCount = cm.getColumnCount();

        if(ds.getCount() < 1){
            return "";
        }

        var cs = this.getColumnData();

        startRow = startRow || 0;
        endRow = typeof endRow == "undefined"? ds.getCount()-1 : endRow;

        // records to render
        var rs = ds.getRange(startRow, endRow);

        return this.doRender(cs, rs, ds, startRow, colCount, stripe);
    },

    // private
    renderBody : function(){
        var markup = this.renderRows();
        return this.templates.body.apply({rows: markup});
    },

    // private
    refreshRow : function(record){
        var ds = this.ds, index;
        if(typeof record == 'number'){
            index = record;
            record = ds.getAt(index);
        }else{
            index = ds.indexOf(record);
        }
        var cls = [];
        this.insertRows(ds, index, index, true);
        this.getRow(index).rowIndex = index;
        this.onRemove(ds, record, index+1, true);
        this.fireEvent("rowupdated", this, index, record);
    },

    
    refresh : function(headersToo){
        this.fireEvent("beforerefresh", this);
        this.grid.stopEditing(true);

        var result = this.renderBody();
        this.mainBody.update(result);

        if(headersToo === true){
            this.updateHeaders();
            this.updateHeaderSortState();
        }
        this.processRows(0, true);
        this.layout();
        this.applyEmptyText();
        this.fireEvent("refresh", this);
    },

    // private
    applyEmptyText : function(){
        if(this.emptyText && !this.hasRows()){
            this.mainBody.update('<div class="x-grid-empty">' + this.emptyText + '</div>');
        }
    },

    // private
    updateHeaderSortState : function(){
        var state = this.ds.getSortState();
        if(!state){
            return;
        }
        if(!this.sortState || (this.sortState.field != state.field || this.sortState.direction != state.direction)){
            this.grid.fireEvent('sortchange', this.grid, state);
        }
        this.sortState = state;
        var sortColumn = this.cm.findColumnIndex(state.field);
        if(sortColumn != -1){
            var sortDir = state.direction;
            this.updateSortIcon(sortColumn, sortDir);
        }
    },

    // private
    destroy : function(){
        if(this.colMenu){
            Ext.menu.MenuMgr.unregister(this.colMenu);
            this.colMenu.destroy();
            delete this.colMenu;
        }
        if(this.hmenu){
            Ext.menu.MenuMgr.unregister(this.hmenu);
            this.hmenu.destroy();
            delete this.hmenu;
        }
        if(this.grid.enableColumnMove){
            var dds = Ext.dd.DDM.ids['gridHeader' + this.grid.getGridEl().id];
            if(dds){
                for(var dd in dds){
                    if(!dds[dd].config.isTarget && dds[dd].dragElId){
                        var elid = dds[dd].dragElId;
                        dds[dd].unreg();
                        Ext.get(elid).remove();
                    } else if(dds[dd].config.isTarget){
                        dds[dd].proxyTop.remove();
                        dds[dd].proxyBottom.remove();
                        dds[dd].unreg();
                    }
                    if(Ext.dd.DDM.locationCache[dd]){
                        delete Ext.dd.DDM.locationCache[dd];
                    }
                }
                delete Ext.dd.DDM.ids['gridHeader' + this.grid.getGridEl().id];
            }
        }
        
        if(this.dragZone){
            this.dragZone.unreg();
        }
        
        Ext.fly(this.innerHd).removeAllListeners();
        Ext.removeNode(this.innerHd);
        
        Ext.destroy(this.resizeMarker, this.resizeProxy, this.focusEl, this.mainBody, 
                    this.scroller, this.mainHd, this.mainWrap, this.dragZone, 
                    this.splitZone, this.columnDrag, this.columnDrop);

        this.initData(null, null);
        Ext.EventManager.removeResizeListener(this.onWindowResize, this);
        this.purgeListeners();
    },

    // private
    onDenyColumnHide : function(){

    },

    // private
    render : function(){
        if(this.autoFill){
            var ct = this.grid.ownerCt;
            if (ct && ct.getLayout()){
                ct.on('afterlayout', function(){ 
                    this.fitColumns(true, true);
                    this.updateHeaders(); 
                }, this, {single: true}); 
            }else{ 
                this.fitColumns(true, true); 
            }
        }else if(this.forceFit){
            this.fitColumns(true, false);
        }else if(this.grid.autoExpandColumn){
            this.autoExpand(true);
        }

        this.renderUI();
    },

    
    // private
    initData : function(ds, cm){
        if(this.ds){
            this.ds.un("load", this.onLoad, this);
            this.ds.un("datachanged", this.onDataChange, this);
            this.ds.un("add", this.onAdd, this);
            this.ds.un("remove", this.onRemove, this);
            this.ds.un("update", this.onUpdate, this);
            this.ds.un("clear", this.onClear, this);
        }
        if(ds){
            ds.on("load", this.onLoad, this);
            ds.on("datachanged", this.onDataChange, this);
            ds.on("add", this.onAdd, this);
            ds.on("remove", this.onRemove, this);
            ds.on("update", this.onUpdate, this);
            ds.on("clear", this.onClear, this);
        }
        this.ds = ds;

        if(this.cm){
            this.cm.un("configchange", this.onColConfigChange, this);
            this.cm.un("widthchange", this.onColWidthChange, this);
            this.cm.un("headerchange", this.onHeaderChange, this);
            this.cm.un("hiddenchange", this.onHiddenChange, this);
            this.cm.un("columnmoved", this.onColumnMove, this);
            this.cm.un("columnlockchange", this.onColumnLock, this);
        }
        if(cm){
            delete this.lastViewWidth;
            cm.on("configchange", this.onColConfigChange, this);
            cm.on("widthchange", this.onColWidthChange, this);
            cm.on("headerchange", this.onHeaderChange, this);
            cm.on("hiddenchange", this.onHiddenChange, this);
            cm.on("columnmoved", this.onColumnMove, this);
            cm.on("columnlockchange", this.onColumnLock, this);
        }
        this.cm = cm;
    },

    // private
    onDataChange : function(){
        this.refresh();
        this.updateHeaderSortState();
        this.syncFocusEl(0);
    },

    // private
    onClear : function(){
        this.refresh();
        this.syncFocusEl(0);
    },

    // private
    onUpdate : function(ds, record){
        this.refreshRow(record);
    },

    // private
    onAdd : function(ds, records, index){
        this.insertRows(ds, index, index + (records.length-1));
    },

    // private
    onRemove : function(ds, record, index, isUpdate){
        if(isUpdate !== true){
            this.fireEvent("beforerowremoved", this, index, record);
        }
        this.removeRow(index);
        if(isUpdate !== true){
            this.processRows(index);
            this.applyEmptyText();
            this.fireEvent("rowremoved", this, index, record);
        }
    },

    // private
    onLoad : function(){
        this.scrollToTop();
    },

    // private
    onColWidthChange : function(cm, col, width){
        this.updateColumnWidth(col, width);
    },

    // private
    onHeaderChange : function(cm, col, text){
        this.updateHeaders();
    },

    // private
    onHiddenChange : function(cm, col, hidden){
        this.updateColumnHidden(col, hidden);
    },

    // private
    onColumnMove : function(cm, oldIndex, newIndex){
        this.indexMap = null;
        var s = this.getScrollState();
        this.refresh(true);
        this.restoreScroll(s);
        this.afterMove(newIndex);
    },

    // private
    onColConfigChange : function(){
        delete this.lastViewWidth;
        this.indexMap = null;
        this.refresh(true);
    },

    
    // private
    initUI : function(grid){
        grid.on("headerclick", this.onHeaderClick, this);
    },

    // private
    initEvents : function(){

    },

    // private
    onHeaderClick : function(g, index){
        if(this.headersDisabled || !this.cm.isSortable(index)){
            return;
        }
        g.stopEditing(true);
        g.store.sort(this.cm.getDataIndex(index));
    },

    // private
    onRowOver : function(e, t){
        var row;
        if((row = this.findRowIndex(t)) !== false){
            this.addRowClass(row, "x-grid3-row-over");
        }
    },

    // private
    onRowOut : function(e, t){
        var row;
        if((row = this.findRowIndex(t)) !== false && !e.within(this.getRow(row), true)){
            this.removeRowClass(row, "x-grid3-row-over");
        }
    },

    // private
    handleWheel : function(e){
        e.stopPropagation();
    },

    // private
    onRowSelect : function(row){
        this.addRowClass(row, "x-grid3-row-selected");
    },

    // private
    onRowDeselect : function(row){
        this.removeRowClass(row, "x-grid3-row-selected");
    },

    // private
    onCellSelect : function(row, col){
        var cell = this.getCell(row, col);
        if(cell){
            this.fly(cell).addClass("x-grid3-cell-selected");
        }
    },

    // private
    onCellDeselect : function(row, col){
        var cell = this.getCell(row, col);
        if(cell){
            this.fly(cell).removeClass("x-grid3-cell-selected");
        }
    },

    // private
    onColumnSplitterMoved : function(i, w){
        this.userResized = true;
        var cm = this.grid.colModel;
        cm.setColumnWidth(i, w, true);

        if(this.forceFit){
            this.fitColumns(true, false, i);
            this.updateAllColumnWidths();
        }else{
            this.updateColumnWidth(i, w);
            this.syncHeaderScroll();
        }

        this.grid.fireEvent("columnresize", i, w);
    },

    // private
    handleHdMenuClick : function(item){
        var index = this.hdCtxIndex;
        var cm = this.cm, ds = this.ds;
        switch(item.id){
            case "asc":
                ds.sort(cm.getDataIndex(index), "ASC");
                break;
            case "desc":
                ds.sort(cm.getDataIndex(index), "DESC");
                break;
            default:
                index = cm.getIndexById(item.id.substr(4));
                if(index != -1){
                    if(item.checked && cm.getColumnsBy(this.isHideableColumn, this).length <= 1){
                        this.onDenyColumnHide();
                        return false;
                    }
                    cm.setHidden(index, item.checked);
                }
        }
        return true;
    },

    // private
    isHideableColumn : function(c){
        return !c.hidden && !c.fixed;
    },

    // private
    beforeColMenuShow : function(){
        var cm = this.cm,  colCount = cm.getColumnCount();
        this.colMenu.removeAll();
        for(var i = 0; i < colCount; i++){
            if(cm.config[i].fixed !== true && cm.config[i].hideable !== false){
                this.colMenu.add(new Ext.menu.CheckItem({
                    id: "col-"+cm.getColumnId(i),
                    text: cm.getColumnHeader(i),
                    checked: !cm.isHidden(i),
                    hideOnClick:false,
                    disabled: cm.config[i].hideable === false
                }));
            }
        }
    },

    // private
    handleHdDown : function(e, t){
        if(Ext.fly(t).hasClass('x-grid3-hd-btn')){
            e.stopEvent();
            var hd = this.findHeaderCell(t);
            Ext.fly(hd).addClass('x-grid3-hd-menu-open');
            var index = this.getCellIndex(hd);
            this.hdCtxIndex = index;
            var ms = this.hmenu.items, cm = this.cm;
            ms.get("asc").setDisabled(!cm.isSortable(index));
            ms.get("desc").setDisabled(!cm.isSortable(index));
            this.hmenu.on("hide", function(){
                Ext.fly(hd).removeClass('x-grid3-hd-menu-open');
            }, this, {single:true});
            this.hmenu.show(t, "tl-bl?");
        }
    },

    // private
    handleHdOver : function(e, t){
        var hd = this.findHeaderCell(t);
        if(hd && !this.headersDisabled){
            this.activeHd = hd;
            this.activeHdIndex = this.getCellIndex(hd);
            var fly = this.fly(hd);
            this.activeHdRegion = fly.getRegion();
            if(!this.cm.isMenuDisabled(this.activeHdIndex)){
                fly.addClass("x-grid3-hd-over");
                this.activeHdBtn = fly.child('.x-grid3-hd-btn');
                if(this.activeHdBtn){
                    this.activeHdBtn.dom.style.height = (hd.firstChild.offsetHeight-1)+'px';
                }
            }
        }
    },

    // private
    handleHdMove : function(e, t){
        if(this.activeHd && !this.headersDisabled){
            var hw = this.splitHandleWidth || 5;
            var r = this.activeHdRegion;
            var x = e.getPageX();
            var ss = this.activeHd.style;
            if(x - r.left <= hw && this.cm.isResizable(this.activeHdIndex-1)){
                ss.cursor = Ext.isAir ? 'move' : Ext.isSafari ? 'e-resize' : 'col-resize'; // col-resize not always supported
            }else if(r.right - x <= (!this.activeHdBtn ? hw : 2) && this.cm.isResizable(this.activeHdIndex)){
                ss.cursor = Ext.isAir ? 'move' : Ext.isSafari ? 'w-resize' : 'col-resize';
            }else{
                ss.cursor = '';
            }
        }
    },

    // private
    handleHdOut : function(e, t){
        var hd = this.findHeaderCell(t);
        if(hd && (!Ext.isIE || !e.within(hd, true))){
            this.activeHd = null;
            this.fly(hd).removeClass("x-grid3-hd-over");
            hd.style.cursor = '';
        }
    },

    // private
    hasRows : function(){
        var fc = this.mainBody.dom.firstChild;
        return fc && fc.className != 'x-grid-empty';
    },

    // back compat
    bind : function(d, c){
        this.initData(d, c);
    }
});


// private
// This is a support class used internally by the Grid components
Ext.grid.GridView.SplitDragZone = function(grid, hd){
    this.grid = grid;
    this.view = grid.getView();
    this.marker = this.view.resizeMarker;
    this.proxy = this.view.resizeProxy;
    Ext.grid.GridView.SplitDragZone.superclass.constructor.call(this, hd,
        "gridSplitters" + this.grid.getGridEl().id, {
        dragElId : Ext.id(this.proxy.dom), resizeFrame:false
    });
    this.scroll = false;
    this.hw = this.view.splitHandleWidth || 5;
};
Ext.extend(Ext.grid.GridView.SplitDragZone, Ext.dd.DDProxy, {

    b4StartDrag : function(x, y){
        this.view.headersDisabled = true;
        var h = this.view.mainWrap.getHeight();
        this.marker.setHeight(h);
        this.marker.show();
        this.marker.alignTo(this.view.getHeaderCell(this.cellIndex), 'tl-tl', [-2, 0]);
        this.proxy.setHeight(h);
        var w = this.cm.getColumnWidth(this.cellIndex);
        var minw = Math.max(w-this.grid.minColumnWidth, 0);
        this.resetConstraints();
        this.setXConstraint(minw, 1000);
        this.setYConstraint(0, 0);
        this.minX = x - minw;
        this.maxX = x + 1000;
        this.startPos = x;
        Ext.dd.DDProxy.prototype.b4StartDrag.call(this, x, y);
    },


    handleMouseDown : function(e){
        var t = this.view.findHeaderCell(e.getTarget());
        if(t){
            var xy = this.view.fly(t).getXY(), x = xy[0], y = xy[1];
            var exy = e.getXY(), ex = exy[0], ey = exy[1];
            var w = t.offsetWidth, adjust = false;
            if((ex - x) <= this.hw){
                adjust = -1;
            }else if((x+w) - ex <= this.hw){
                adjust = 0;
            }
            if(adjust !== false){
                this.cm = this.grid.colModel;
                var ci = this.view.getCellIndex(t);
                if(adjust == -1){
                  if (ci + adjust < 0) {
                    return;
                  }
                    while(this.cm.isHidden(ci+adjust)){
                        --adjust;
                        if(ci+adjust < 0){
                            return;
                        }
                    }
                }
                this.cellIndex = ci+adjust;
                this.split = t.dom;
                if(this.cm.isResizable(this.cellIndex) && !this.cm.isFixed(this.cellIndex)){
                    Ext.grid.GridView.SplitDragZone.superclass.handleMouseDown.apply(this, arguments);
                }
            }else if(this.view.columnDrag){
                this.view.columnDrag.callHandleMouseDown(e);
            }
        }
    },

    endDrag : function(e){
        this.marker.hide();
        var v = this.view;
        var endX = Math.max(this.minX, e.getPageX());
        var diff = endX - this.startPos;
        v.onColumnSplitterMoved(this.cellIndex, this.cm.getColumnWidth(this.cellIndex)+diff);
        setTimeout(function(){
            v.headersDisabled = false;
        }, 50);
    },

    autoOffset : function(){
        this.setDelta(0,0);
    }
});


Ext.grid.GroupingView = Ext.extend(Ext.grid.GridView, {
    
    hideGroupedColumn:false,
    
    showGroupName:true,
    
    startCollapsed:false,
    
    enableGrouping:true,
    
    enableGroupingMenu:true,
    
    enableNoGroups:true,
    
    emptyGroupText : '(None)',
    
    ignoreAdd: false,
    
    groupTextTpl : '{text}',
    
    

    // private
    gidSeed : 1000,

    // private
    initTemplates : function(){
        Ext.grid.GroupingView.superclass.initTemplates.call(this);
        this.state = {};

        var sm = this.grid.getSelectionModel();
        sm.on(sm.selectRow ? 'beforerowselect' : 'beforecellselect',
                this.onBeforeRowSelect, this);

        if(!this.startGroup){
            this.startGroup = new Ext.XTemplate(
                '<div id="{groupId}" class="x-grid-group {cls}">',
                    '<div id="{groupId}-hd" class="x-grid-group-hd" style="{style}"><div>', this.groupTextTpl ,'</div></div>',
                    '<div id="{groupId}-bd" class="x-grid-group-body">'
            );
        }
        this.startGroup.compile();
        this.endGroup = '</div></div>';
    },

    // private
    findGroup : function(el){
        return Ext.fly(el).up('.x-grid-group', this.mainBody.dom);
    },

    // private
    getGroups : function(){
        return this.hasRows() ? this.mainBody.dom.childNodes : [];
    },

    // private
    onAdd : function(){
        if(this.enableGrouping && !this.ignoreAdd){
            var ss = this.getScrollState();
            this.refresh();
            this.restoreScroll(ss);
        }else if(!this.enableGrouping){
            Ext.grid.GroupingView.superclass.onAdd.apply(this, arguments);
        }
    },

    // private
    onRemove : function(ds, record, index, isUpdate){
        Ext.grid.GroupingView.superclass.onRemove.apply(this, arguments);
        var g = document.getElementById(record._groupId);
        if(g && g.childNodes[1].childNodes.length < 1){
            Ext.removeNode(g);
        }
        this.applyEmptyText();
    },

    // private
    refreshRow : function(record){
        if(this.ds.getCount()==1){
            this.refresh();
        }else{
            this.isUpdating = true;
            Ext.grid.GroupingView.superclass.refreshRow.apply(this, arguments);
            this.isUpdating = false;
        }
    },

    // private
    beforeMenuShow : function(){
        var field = this.getGroupField();
        var g = this.hmenu.items.get('groupBy');
        if(g){
            g.setDisabled(this.cm.config[this.hdCtxIndex].groupable === false);
        }
        var s = this.hmenu.items.get('showGroups');
        if(s){
           s.setDisabled(!field && this.cm.config[this.hdCtxIndex].groupable === false);
			s.setChecked(!!field, true);
        }
    },

    // private
    renderUI : function(){
        Ext.grid.GroupingView.superclass.renderUI.call(this);
        this.mainBody.on('mousedown', this.interceptMouse, this);

        if(this.enableGroupingMenu && this.hmenu){
            this.hmenu.add('-',{
                id:'groupBy',
                text: this.groupByText,
                handler: this.onGroupByClick,
                scope: this,
                iconCls:'x-group-by-icon'
            });
            if(this.enableNoGroups){
                this.hmenu.add({
                    id:'showGroups',
                    text: this.showGroupsText,
                    checked: true,
                    checkHandler: this.onShowGroupsClick,
                    scope: this
                });
            }
            this.hmenu.on('beforeshow', this.beforeMenuShow, this);
        }
    },

    // private
    onGroupByClick : function(){
        this.grid.store.groupBy(this.cm.getDataIndex(this.hdCtxIndex));
        this.beforeMenuShow(); // Make sure the checkboxes get properly set when changing groups
    },

    // private
    onShowGroupsClick : function(mi, checked){
        if(checked){
            this.onGroupByClick();
        }else{
            this.grid.store.clearGrouping();
        }
    },

    
    toggleGroup : function(group, expanded){
        this.grid.stopEditing(true);
        group = Ext.getDom(group);
        var gel = Ext.fly(group);
        expanded = expanded !== undefined ?
                expanded : gel.hasClass('x-grid-group-collapsed');

        this.state[gel.dom.id] = expanded;
        gel[expanded ? 'removeClass' : 'addClass']('x-grid-group-collapsed');
    },

    
    toggleAllGroups : function(expanded){
        var groups = this.getGroups();
        for(var i = 0, len = groups.length; i < len; i++){
            this.toggleGroup(groups[i], expanded);
        }
    },

    
    expandAllGroups : function(){
        this.toggleAllGroups(true);
    },

    
    collapseAllGroups : function(){
        this.toggleAllGroups(false);
    },

    // private
    interceptMouse : function(e){
        var hd = e.getTarget('.x-grid-group-hd', this.mainBody);
        if(hd){
            e.stopEvent();
            this.toggleGroup(hd.parentNode);
        }
    },

    // private
    getGroup : function(v, r, groupRenderer, rowIndex, colIndex, ds){
        var g = groupRenderer ? groupRenderer(v, {}, r, rowIndex, colIndex, ds) : String(v);
        if(g === ''){
            g = this.cm.config[colIndex].emptyGroupText || this.emptyGroupText;
        }
        return g;
    },

    // private
    getGroupField : function(){
        return this.grid.store.getGroupState();
    },

    // private
    renderRows : function(){
        var groupField = this.getGroupField();
        var eg = !!groupField;
        // if they turned off grouping and the last grouped field is hidden
        if(this.hideGroupedColumn) {
            var colIndex = this.cm.findColumnIndex(groupField);
            if(!eg && this.lastGroupField !== undefined) {
                this.mainBody.update('');
                this.cm.setHidden(this.cm.findColumnIndex(this.lastGroupField), false);
                delete this.lastGroupField;
            }else if (eg && this.lastGroupField === undefined) {
                this.lastGroupField = groupField;
                this.cm.setHidden(colIndex, true);
            }else if (eg && this.lastGroupField !== undefined && groupField !== this.lastGroupField) {
                this.mainBody.update('');
                var oldIndex = this.cm.findColumnIndex(this.lastGroupField);
                this.cm.setHidden(oldIndex, false);
                this.lastGroupField = groupField;
                this.cm.setHidden(colIndex, true);
            }
        }
        return Ext.grid.GroupingView.superclass.renderRows.apply(
                    this, arguments);
    },

    // private
    doRender : function(cs, rs, ds, startRow, colCount, stripe){
        if(rs.length < 1){
            return '';
        }
        var groupField = this.getGroupField();
        var colIndex = this.cm.findColumnIndex(groupField);

        this.enableGrouping = !!groupField;

        if(!this.enableGrouping || this.isUpdating){
            return Ext.grid.GroupingView.superclass.doRender.apply(
                    this, arguments);
        }
        var gstyle = 'width:'+this.getTotalWidth()+';';

        var gidPrefix = this.grid.getGridEl().id;
        var cfg = this.cm.config[colIndex];
        var groupRenderer = cfg.groupRenderer || cfg.renderer;
        var prefix = this.showGroupName ?
                     (cfg.groupName || cfg.header)+': ' : '';

        var groups = [], curGroup, i, len, gid;
        for(i = 0, len = rs.length; i < len; i++){
            var rowIndex = startRow + i;
            var r = rs[i],
                gvalue = r.data[groupField],
                g = this.getGroup(gvalue, r, groupRenderer, rowIndex, colIndex, ds);
            if(!curGroup || curGroup.group != g){
                gid = gidPrefix + '-gp-' + groupField + '-' + Ext.util.Format.htmlEncode(g);
               	// if state is defined use it, however state is in terms of expanded
				// so negate it, otherwise use the default.
				var isCollapsed  = typeof this.state[gid] !== 'undefined' ? !this.state[gid] : this.startCollapsed;
				var gcls = isCollapsed ? 'x-grid-group-collapsed' : '';	
                curGroup = {
                    group: g,
                    gvalue: gvalue,
                    text: prefix + g,
                    groupId: gid,
                    startRow: rowIndex,
                    rs: [r],
                    cls: gcls,
                    style: gstyle
                };
                groups.push(curGroup);
            }else{
                curGroup.rs.push(r);
            }
            r._groupId = gid;
        }

        var buf = [];
        for(i = 0, len = groups.length; i < len; i++){
            var g = groups[i];
            this.doGroupStart(buf, g, cs, ds, colCount);
            buf[buf.length] = Ext.grid.GroupingView.superclass.doRender.call(
                    this, cs, g.rs, ds, g.startRow, colCount, stripe);

            this.doGroupEnd(buf, g, cs, ds, colCount);
        }
        return buf.join('');
    },

    
    getGroupId : function(value){
        var gidPrefix = this.grid.getGridEl().id;
        var groupField = this.getGroupField();
        var colIndex = this.cm.findColumnIndex(groupField);
        var cfg = this.cm.config[colIndex];
        var groupRenderer = cfg.groupRenderer || cfg.renderer;
        var gtext = this.getGroup(value, {data:{}}, groupRenderer, 0, colIndex, this.ds);
        return gidPrefix + '-gp-' + groupField + '-' + Ext.util.Format.htmlEncode(value);
    },

    // private
    doGroupStart : function(buf, g, cs, ds, colCount){
        buf[buf.length] = this.startGroup.apply(g);
    },

    // private
    doGroupEnd : function(buf, g, cs, ds, colCount){
        buf[buf.length] = this.endGroup;
    },

    // private
    getRows : function(){
        if(!this.enableGrouping){
            return Ext.grid.GroupingView.superclass.getRows.call(this);
        }
        var r = [];
        var g, gs = this.getGroups();
        for(var i = 0, len = gs.length; i < len; i++){
            g = gs[i].childNodes[1].childNodes;
            for(var j = 0, jlen = g.length; j < jlen; j++){
                r[r.length] = g[j];
            }
        }
        return r;
    },

    // private
    updateGroupWidths : function(){
        if(!this.enableGrouping || !this.hasRows()){
            return;
        }
        var tw = Math.max(this.cm.getTotalWidth(), this.el.dom.offsetWidth-this.scrollOffset) +'px';
        var gs = this.getGroups();
        for(var i = 0, len = gs.length; i < len; i++){
            gs[i].firstChild.style.width = tw;
        }
    },

    // private
    onColumnWidthUpdated : function(col, w, tw){
        Ext.grid.GroupingView.superclass.onColumnWidthUpdated.call(this, col, w, tw);
        this.updateGroupWidths();
    },

    // private
    onAllColumnWidthsUpdated : function(ws, tw){
        Ext.grid.GroupingView.superclass.onAllColumnWidthsUpdated.call(this, ws, tw);
        this.updateGroupWidths();
    },

    // private
    onColumnHiddenUpdated : function(col, hidden, tw){
        Ext.grid.GroupingView.superclass.onColumnHiddenUpdated.call(this, col, hidden, tw);
        this.updateGroupWidths();
    },

    // private
    onLayout : function(){
        this.updateGroupWidths();
    },

    // private
    onBeforeRowSelect : function(sm, rowIndex){
        if(!this.enableGrouping){
            return;
        }
        var row = this.getRow(rowIndex);
        if(row && !row.offsetParent){
            var g = this.findGroup(row);
            this.toggleGroup(g, true);
        }
    },

    
    groupByText: 'Group By This Field',
    
    showGroupsText: 'Show in Groups'
});
// private
Ext.grid.GroupingView.GROUP_ID = 1000;
// private
// This is a support class used internally by the Grid components
Ext.grid.HeaderDragZone = function(grid, hd, hd2){
    this.grid = grid;
    this.view = grid.getView();
    this.ddGroup = "gridHeader" + this.grid.getGridEl().id;
    Ext.grid.HeaderDragZone.superclass.constructor.call(this, hd);
    if(hd2){
        this.setHandleElId(Ext.id(hd));
        this.setOuterHandleElId(Ext.id(hd2));
    }
    this.scroll = false;
};
Ext.extend(Ext.grid.HeaderDragZone, Ext.dd.DragZone, {
    maxDragWidth: 120,
    getDragData : function(e){
        var t = Ext.lib.Event.getTarget(e);
        var h = this.view.findHeaderCell(t);
        if(h){
            return {ddel: h.firstChild, header:h};
        }
        return false;
    },

    onInitDrag : function(e){
        this.view.headersDisabled = true;
        var clone = this.dragData.ddel.cloneNode(true);
        clone.id = Ext.id();
        clone.style.width = Math.min(this.dragData.header.offsetWidth,this.maxDragWidth) + "px";
        this.proxy.update(clone);
        return true;
    },

    afterValidDrop : function(){
        var v = this.view;
        setTimeout(function(){
            v.headersDisabled = false;
        }, 50);
    },

    afterInvalidDrop : function(){
        var v = this.view;
        setTimeout(function(){
            v.headersDisabled = false;
        }, 50);
    }
});

// private
// This is a support class used internally by the Grid components
Ext.grid.HeaderDropZone = function(grid, hd, hd2){
    this.grid = grid;
    this.view = grid.getView();
    // split the proxies so they don't interfere with mouse events
    this.proxyTop = Ext.DomHelper.append(document.body, {
        cls:"col-move-top", html:"&#160;"
    }, true);
    this.proxyBottom = Ext.DomHelper.append(document.body, {
        cls:"col-move-bottom", html:"&#160;"
    }, true);
    this.proxyTop.hide = this.proxyBottom.hide = function(){
        this.setLeftTop(-100,-100);
        this.setStyle("visibility", "hidden");
    };
    this.ddGroup = "gridHeader" + this.grid.getGridEl().id;
    // temporarily disabled
    //Ext.dd.ScrollManager.register(this.view.scroller.dom);
    Ext.grid.HeaderDropZone.superclass.constructor.call(this, grid.getGridEl().dom);
};
Ext.extend(Ext.grid.HeaderDropZone, Ext.dd.DropZone, {
    proxyOffsets : [-4, -9],
    fly: Ext.Element.fly,

    getTargetFromEvent : function(e){
        var t = Ext.lib.Event.getTarget(e);
        var cindex = this.view.findCellIndex(t);
        if(cindex !== false){
            return this.view.getHeaderCell(cindex);
        }
    },

    nextVisible : function(h){
        var v = this.view, cm = this.grid.colModel;
        h = h.nextSibling;
        while(h){
            if(!cm.isHidden(v.getCellIndex(h))){
                return h;
            }
            h = h.nextSibling;
        }
        return null;
    },

    prevVisible : function(h){
        var v = this.view, cm = this.grid.colModel;
        h = h.prevSibling;
        while(h){
            if(!cm.isHidden(v.getCellIndex(h))){
                return h;
            }
            h = h.prevSibling;
        }
        return null;
    },

    positionIndicator : function(h, n, e){
        var x = Ext.lib.Event.getPageX(e);
        var r = Ext.lib.Dom.getRegion(n.firstChild);
        var px, pt, py = r.top + this.proxyOffsets[1];
        if((r.right - x) <= (r.right-r.left)/2){
            px = r.right+this.view.borderWidth;
            pt = "after";
        }else{
            px = r.left;
            pt = "before";
        }
        var oldIndex = this.view.getCellIndex(h);
        var newIndex = this.view.getCellIndex(n);

        if(this.grid.colModel.isFixed(newIndex)){
            return false;
        }

        var locked = this.grid.colModel.isLocked(newIndex);

        if(pt == "after"){
            newIndex++;
        }
        if(oldIndex < newIndex){
            newIndex--;
        }
        if(oldIndex == newIndex && (locked == this.grid.colModel.isLocked(oldIndex))){
            return false;
        }
        px +=  this.proxyOffsets[0];
        this.proxyTop.setLeftTop(px, py);
        this.proxyTop.show();
        if(!this.bottomOffset){
            this.bottomOffset = this.view.mainHd.getHeight();
        }
        this.proxyBottom.setLeftTop(px, py+this.proxyTop.dom.offsetHeight+this.bottomOffset);
        this.proxyBottom.show();
        return pt;
    },

    onNodeEnter : function(n, dd, e, data){
        if(data.header != n){
            this.positionIndicator(data.header, n, e);
        }
    },

    onNodeOver : function(n, dd, e, data){
        var result = false;
        if(data.header != n){
            result = this.positionIndicator(data.header, n, e);
        }
        if(!result){
            this.proxyTop.hide();
            this.proxyBottom.hide();
        }
        return result ? this.dropAllowed : this.dropNotAllowed;
    },

    onNodeOut : function(n, dd, e, data){
        this.proxyTop.hide();
        this.proxyBottom.hide();
    },

    onNodeDrop : function(n, dd, e, data){
        var h = data.header;
        if(h != n){
            var cm = this.grid.colModel;
            var x = Ext.lib.Event.getPageX(e);
            var r = Ext.lib.Dom.getRegion(n.firstChild);
            var pt = (r.right - x) <= ((r.right-r.left)/2) ? "after" : "before";
            var oldIndex = this.view.getCellIndex(h);
            var newIndex = this.view.getCellIndex(n);
            var locked = cm.isLocked(newIndex);
            if(pt == "after"){
                newIndex++;
            }
            if(oldIndex < newIndex){
                newIndex--;
            }
            if(oldIndex == newIndex && (locked == cm.isLocked(oldIndex))){
                return false;
            }
            cm.setLocked(oldIndex, locked, true);
            cm.moveColumn(oldIndex, newIndex);
            this.grid.fireEvent("columnmove", oldIndex, newIndex);
            return true;
        }
        return false;
    }
});


Ext.grid.GridView.ColumnDragZone = function(grid, hd){
    Ext.grid.GridView.ColumnDragZone.superclass.constructor.call(this, grid, hd, null);
    this.proxy.el.addClass('x-grid3-col-dd');
};

Ext.extend(Ext.grid.GridView.ColumnDragZone, Ext.grid.HeaderDragZone, {
    handleMouseDown : function(e){

    },

    callHandleMouseDown : function(e){
        Ext.grid.GridView.ColumnDragZone.superclass.handleMouseDown.call(this, e);
    }
});
// private
// This is a support class used internally by the Grid components
Ext.grid.SplitDragZone = function(grid, hd, hd2){
    this.grid = grid;
    this.view = grid.getView();
    this.proxy = this.view.resizeProxy;
    Ext.grid.SplitDragZone.superclass.constructor.call(this, hd,
        "gridSplitters" + this.grid.getGridEl().id, {
        dragElId : Ext.id(this.proxy.dom), resizeFrame:false
    });
    this.setHandleElId(Ext.id(hd));
    this.setOuterHandleElId(Ext.id(hd2));
    this.scroll = false;
};
Ext.extend(Ext.grid.SplitDragZone, Ext.dd.DDProxy, {
    fly: Ext.Element.fly,

    b4StartDrag : function(x, y){
        this.view.headersDisabled = true;
        this.proxy.setHeight(this.view.mainWrap.getHeight());
        var w = this.cm.getColumnWidth(this.cellIndex);
        var minw = Math.max(w-this.grid.minColumnWidth, 0);
        this.resetConstraints();
        this.setXConstraint(minw, 1000);
        this.setYConstraint(0, 0);
        this.minX = x - minw;
        this.maxX = x + 1000;
        this.startPos = x;
        Ext.dd.DDProxy.prototype.b4StartDrag.call(this, x, y);
    },


    handleMouseDown : function(e){
        ev = Ext.EventObject.setEvent(e);
        var t = this.fly(ev.getTarget());
        if(t.hasClass("x-grid-split")){
            this.cellIndex = this.view.getCellIndex(t.dom);
            this.split = t.dom;
            this.cm = this.grid.colModel;
            if(this.cm.isResizable(this.cellIndex) && !this.cm.isFixed(this.cellIndex)){
                Ext.grid.SplitDragZone.superclass.handleMouseDown.apply(this, arguments);
            }
        }
    },

    endDrag : function(e){
        this.view.headersDisabled = false;
        var endX = Math.max(this.minX, Ext.lib.Event.getPageX(e));
        var diff = endX - this.startPos;
        this.view.onColumnSplitterMoved(this.cellIndex, this.cm.getColumnWidth(this.cellIndex)+diff);
    },

    autoOffset : function(){
        this.setDelta(0,0);
    }
});

Ext.grid.GridDragZone = function(grid, config){
    this.view = grid.getView();
    Ext.grid.GridDragZone.superclass.constructor.call(this, this.view.mainBody.dom, config);
    if(this.view.lockedBody){
        this.setHandleElId(Ext.id(this.view.mainBody.dom));
        this.setOuterHandleElId(Ext.id(this.view.lockedBody.dom));
    }
    this.scroll = false;
    this.grid = grid;
    this.ddel = document.createElement('div');
    this.ddel.className = 'x-grid-dd-wrap';
};

Ext.extend(Ext.grid.GridDragZone, Ext.dd.DragZone, {
    ddGroup : "GridDD",

    
    getDragData : function(e){
        var t = Ext.lib.Event.getTarget(e);
        var rowIndex = this.view.findRowIndex(t);
        if(rowIndex !== false){
            var sm = this.grid.selModel;
            if(!sm.isSelected(rowIndex) || e.hasModifier()){
                sm.handleMouseDown(this.grid, rowIndex, e);
            }
            return {grid: this.grid, ddel: this.ddel, rowIndex: rowIndex, selections:sm.getSelections()};
        }
        return false;
    },

    
    onInitDrag : function(e){
        var data = this.dragData;
        this.ddel.innerHTML = this.grid.getDragDropText();
        this.proxy.update(this.ddel);
        // fire start drag?
    },

    
    afterRepair : function(){
        this.dragging = false;
    },

    
    getRepairXY : function(e, data){
        return false;
    },

    onEndDrag : function(data, e){
        // fire end drag?
    },

    onValidDrop : function(dd, e, id){
        // fire drag drop?
        this.hideProxy();
    },

    beforeInvalidDrop : function(e, id){

    }
});


Ext.grid.ColumnModel = function(config){
    
    this.defaultWidth = 100;

    
    this.defaultSortable = false;

    
    if(config.columns){
        Ext.apply(this, config);
        this.setConfig(config.columns, true);
    }else{
        this.setConfig(config, true);
    }
    this.addEvents(
        
        "widthchange",
        
        "headerchange",
        
        "hiddenchange",
        
        "columnmoved",
        // deprecated - to be removed
        "columnlockchange",
        
        "configchange"
    );
    Ext.grid.ColumnModel.superclass.constructor.call(this);
};
Ext.extend(Ext.grid.ColumnModel, Ext.util.Observable, {
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    
    getColumnId : function(index){
        return this.config[index].id;
    },

    
    setConfig : function(config, initial){
        if(!initial){ // cleanup
            delete this.totalWidth;
            for(var i = 0, len = this.config.length; i < len; i++){
                var c = this.config[i];
                if(c.editor){
                    c.editor.destroy();
                }
            }
        }
        this.config = config;
        this.lookup = {};
        // if no id, create one
        for(var i = 0, len = config.length; i < len; i++){
            var c = config[i];
            if(typeof c.renderer == "string"){
                c.renderer = Ext.util.Format[c.renderer];
            }
            if(typeof c.id == "undefined"){
                c.id = i;
            }
            if(c.editor && c.editor.isFormField){
                c.editor = new Ext.grid.GridEditor(c.editor);
            }
            this.lookup[c.id] = c;
        }
        if(!initial){
            this.fireEvent('configchange', this);
        }
    },

    
    getColumnById : function(id){
        return this.lookup[id];
    },

    
    getIndexById : function(id){
        for(var i = 0, len = this.config.length; i < len; i++){
            if(this.config[i].id == id){
                return i;
            }
        }
        return -1;
    },

    
    moveColumn : function(oldIndex, newIndex){
        var c = this.config[oldIndex];
        this.config.splice(oldIndex, 1);
        this.config.splice(newIndex, 0, c);
        this.dataMap = null;
        this.fireEvent("columnmoved", this, oldIndex, newIndex);
    },

    // deprecated - to be removed
    isLocked : function(colIndex){
        return this.config[colIndex].locked === true;
    },

    // deprecated - to be removed
    setLocked : function(colIndex, value, suppressEvent){
        if(this.isLocked(colIndex) == value){
            return;
        }
        this.config[colIndex].locked = value;
        if(!suppressEvent){
            this.fireEvent("columnlockchange", this, colIndex, value);
        }
    },

    // deprecated - to be removed
    getTotalLockedWidth : function(){
        var totalWidth = 0;
        for(var i = 0; i < this.config.length; i++){
            if(this.isLocked(i) && !this.isHidden(i)){
                this.totalWidth += this.getColumnWidth(i);
            }
        }
        return totalWidth;
    },

    // deprecated - to be removed
    getLockedCount : function(){
        for(var i = 0, len = this.config.length; i < len; i++){
            if(!this.isLocked(i)){
                return i;
            }
        }
    },

    
    getColumnCount : function(visibleOnly){
        if(visibleOnly === true){
            var c = 0;
            for(var i = 0, len = this.config.length; i < len; i++){
                if(!this.isHidden(i)){
                    c++;
                }
            }
            return c;
        }
        return this.config.length;
    },

    
    getColumnsBy : function(fn, scope){
        var r = [];
        for(var i = 0, len = this.config.length; i < len; i++){
            var c = this.config[i];
            if(fn.call(scope||this, c, i) === true){
                r[r.length] = c;
            }
        }
        return r;
    },

    
    isSortable : function(col){
        if(typeof this.config[col].sortable == "undefined"){
            return this.defaultSortable;
        }
        return this.config[col].sortable;
    },

    
    isMenuDisabled : function(col){
        return !!this.config[col].menuDisabled;
    },

    
    getRenderer : function(col){
        if(!this.config[col].renderer){
            return Ext.grid.ColumnModel.defaultRenderer;
        }
        return this.config[col].renderer;
    },

    
    setRenderer : function(col, fn){
        this.config[col].renderer = fn;
    },

    
    getColumnWidth : function(col){
        return this.config[col].width || this.defaultWidth;
    },

    
    setColumnWidth : function(col, width, suppressEvent){
        this.config[col].width = width;
        this.totalWidth = null;
        if(!suppressEvent){
             this.fireEvent("widthchange", this, col, width);
        }
    },

    
    getTotalWidth : function(includeHidden){
        if(!this.totalWidth){
            this.totalWidth = 0;
            for(var i = 0, len = this.config.length; i < len; i++){
                if(includeHidden || !this.isHidden(i)){
                    this.totalWidth += this.getColumnWidth(i);
                }
            }
        }
        return this.totalWidth;
    },

    
    getColumnHeader : function(col){
        return this.config[col].header;
    },

    
    setColumnHeader : function(col, header){
        this.config[col].header = header;
        this.fireEvent("headerchange", this, col, header);
    },

    
    getColumnTooltip : function(col){
            return this.config[col].tooltip;
    },
    
    setColumnTooltip : function(col, tooltip){
            this.config[col].tooltip = tooltip;
    },

    
    getDataIndex : function(col){
        return this.config[col].dataIndex;
    },

    
    setDataIndex : function(col, dataIndex){
        this.config[col].dataIndex = dataIndex;
    },

    
    findColumnIndex : function(dataIndex){
        var c = this.config;
        for(var i = 0, len = c.length; i < len; i++){
            if(c[i].dataIndex == dataIndex){
                return i;
            }
        }
        return -1;
    },

    
    isCellEditable : function(colIndex, rowIndex){
        return (this.config[colIndex].editable || (typeof this.config[colIndex].editable == "undefined" && this.config[colIndex].editor)) ? true : false;
    },

    
    getCellEditor : function(colIndex, rowIndex){
        return this.config[colIndex].editor;
    },

    
    setEditable : function(col, editable){
        this.config[col].editable = editable;
    },


    
    isHidden : function(colIndex){
        return this.config[colIndex].hidden;
    },


    
    isFixed : function(colIndex){
        return this.config[colIndex].fixed;
    },

    
    isResizable : function(colIndex){
        return colIndex >= 0 && this.config[colIndex].resizable !== false && this.config[colIndex].fixed !== true;
    },
    
    setHidden : function(colIndex, hidden){
        var c = this.config[colIndex];
        if(c.hidden !== hidden){
            c.hidden = hidden;
            this.totalWidth = null;
            this.fireEvent("hiddenchange", this, colIndex, hidden);
        }
    },

    
    setEditor : function(col, editor){
        this.config[col].editor = editor;
    }
});

// private
Ext.grid.ColumnModel.defaultRenderer = function(value){
    if(typeof value == "string" && value.length < 1){
        return "&#160;";
    }
    return value;
};

// Alias for backwards compatibility
Ext.grid.DefaultColumnModel = Ext.grid.ColumnModel;

Ext.grid.AbstractSelectionModel = function(){
    this.locked = false;
    Ext.grid.AbstractSelectionModel.superclass.constructor.call(this);
};

Ext.extend(Ext.grid.AbstractSelectionModel, Ext.util.Observable,  {
    
    init : function(grid){
        this.grid = grid;
        this.initEvents();
    },

    
    lock : function(){
        this.locked = true;
    },

    
    unlock : function(){
        this.locked = false;
    },

    
    isLocked : function(){
        return this.locked;
    }
});

Ext.grid.RowSelectionModel = function(config){
    Ext.apply(this, config);
    this.selections = new Ext.util.MixedCollection(false, function(o){
        return o.id;
    });

    this.last = false;
    this.lastActive = false;

    this.addEvents(
        
	    "selectionchange",
        
	    "beforerowselect",
        
	    "rowselect",
        
	    "rowdeselect"
    );

    Ext.grid.RowSelectionModel.superclass.constructor.call(this);
};

Ext.extend(Ext.grid.RowSelectionModel, Ext.grid.AbstractSelectionModel,  {
    
    singleSelect : false,

	
    // private
    initEvents : function(){

        if(!this.grid.enableDragDrop && !this.grid.enableDrag){
            this.grid.on("rowmousedown", this.handleMouseDown, this);
        }else{ // allow click to work like normal
            this.grid.on("rowclick", function(grid, rowIndex, e) {
                if(e.button === 0 && !e.shiftKey && !e.ctrlKey) {
                    this.selectRow(rowIndex, false);
                    grid.view.focusRow(rowIndex);
                }
            }, this);
        }

        this.rowNav = new Ext.KeyNav(this.grid.getGridEl(), {
            "up" : function(e){
                if(!e.shiftKey || this.singleSelect){
                    this.selectPrevious(false);
                }else if(this.last !== false && this.lastActive !== false){
                    var last = this.last;
                    this.selectRange(this.last,  this.lastActive-1);
                    this.grid.getView().focusRow(this.lastActive);
                    if(last !== false){
                        this.last = last;
                    }
                }else{
                    this.selectFirstRow();
                }
            },
            "down" : function(e){
                if(!e.shiftKey || this.singleSelect){
                    this.selectNext(false);
                }else if(this.last !== false && this.lastActive !== false){
                    var last = this.last;
                    this.selectRange(this.last,  this.lastActive+1);
                    this.grid.getView().focusRow(this.lastActive);
                    if(last !== false){
                        this.last = last;
                    }
                }else{
                    this.selectFirstRow();
                }
            },
            scope: this
        });

        var view = this.grid.view;
        view.on("refresh", this.onRefresh, this);
        view.on("rowupdated", this.onRowUpdated, this);
        view.on("rowremoved", this.onRemove, this);
    },

    // private
    onRefresh : function(){
        var ds = this.grid.store, index;
        var s = this.getSelections();
        this.clearSelections(true);
        for(var i = 0, len = s.length; i < len; i++){
            var r = s[i];
            if((index = ds.indexOfId(r.id)) != -1){
                this.selectRow(index, true);
            }
        }
        if(s.length != this.selections.getCount()){
            this.fireEvent("selectionchange", this);
        }
    },

    // private
    onRemove : function(v, index, r){
        if(this.selections.remove(r) !== false){
            this.fireEvent('selectionchange', this);
        }
    },

    // private
    onRowUpdated : function(v, index, r){
        if(this.isSelected(r)){
            v.onRowSelect(index);
        }
    },

    
    selectRecords : function(records, keepExisting){
        if(!keepExisting){
            this.clearSelections();
        }
        var ds = this.grid.store;
        for(var i = 0, len = records.length; i < len; i++){
            this.selectRow(ds.indexOf(records[i]), true);
        }
    },

    
    getCount : function(){
        return this.selections.length;
    },

    
    selectFirstRow : function(){
        this.selectRow(0);
    },

    
    selectLastRow : function(keepExisting){
        this.selectRow(this.grid.store.getCount() - 1, keepExisting);
    },

    
    selectNext : function(keepExisting){
        if(this.hasNext()){
            this.selectRow(this.last+1, keepExisting);
            this.grid.getView().focusRow(this.last);
			return true;
        }
		return false;
    },

    
    selectPrevious : function(keepExisting){
        if(this.hasPrevious()){
            this.selectRow(this.last-1, keepExisting);
            this.grid.getView().focusRow(this.last);
			return true;
        }
		return false;
    },

    
    hasNext : function(){
        return this.last !== false && (this.last+1) < this.grid.store.getCount();
    },

    
    hasPrevious : function(){
        return !!this.last;
    },


    
    getSelections : function(){
        return [].concat(this.selections.items);
    },

    
    getSelected : function(){
        return this.selections.itemAt(0);
    },

    
    each : function(fn, scope){
        var s = this.getSelections();
        for(var i = 0, len = s.length; i < len; i++){
            if(fn.call(scope || this, s[i], i) === false){
                return false;
            }
        }
        return true;
    },

    
    clearSelections : function(fast){
        if(this.isLocked()) return;
        if(fast !== true){
            var ds = this.grid.store;
            var s = this.selections;
            s.each(function(r){
                this.deselectRow(ds.indexOfId(r.id));
            }, this);
            s.clear();
        }else{
            this.selections.clear();
        }
        this.last = false;
    },


    
    selectAll : function(){
        if(this.isLocked()) return;
        this.selections.clear();
        for(var i = 0, len = this.grid.store.getCount(); i < len; i++){
            this.selectRow(i, true);
        }
    },

    
    hasSelection : function(){
        return this.selections.length > 0;
    },

    
    isSelected : function(index){
        var r = typeof index == "number" ? this.grid.store.getAt(index) : index;
        return (r && this.selections.key(r.id) ? true : false);
    },

    
    isIdSelected : function(id){
        return (this.selections.key(id) ? true : false);
    },

    // private
    handleMouseDown : function(g, rowIndex, e){
        if(e.button !== 0 || this.isLocked()){
            return;
        };
        var view = this.grid.getView();
        if(e.shiftKey && !this.singleSelect && this.last !== false){
            var last = this.last;
            this.selectRange(last, rowIndex, e.ctrlKey);
            this.last = last; // reset the last
            view.focusRow(rowIndex);
        }else{
            var isSelected = this.isSelected(rowIndex);
            if(e.ctrlKey && isSelected){
                this.deselectRow(rowIndex);
            }else if(!isSelected || this.getCount() > 1){
                this.selectRow(rowIndex, e.ctrlKey || e.shiftKey);
                view.focusRow(rowIndex);
            }
        }
    },

    
    selectRows : function(rows, keepExisting){
        if(!keepExisting){
            this.clearSelections();
        }
        for(var i = 0, len = rows.length; i < len; i++){
            this.selectRow(rows[i], true);
        }
    },

    
    selectRange : function(startRow, endRow, keepExisting){
        if(this.isLocked()) return;
        if(!keepExisting){
            this.clearSelections();
        }
        if(startRow <= endRow){
            for(var i = startRow; i <= endRow; i++){
                this.selectRow(i, true);
            }
        }else{
            for(var i = startRow; i >= endRow; i--){
                this.selectRow(i, true);
            }
        }
    },

    
    deselectRange : function(startRow, endRow, preventViewNotify){
        if(this.isLocked()) return;
        for(var i = startRow; i <= endRow; i++){
            this.deselectRow(i, preventViewNotify);
        }
    },

    
    selectRow : function(index, keepExisting, preventViewNotify){
        if(this.isLocked() || (index < 0 || index >= this.grid.store.getCount()) || this.isSelected(index)) return;
        var r = this.grid.store.getAt(index);
        if(r && this.fireEvent("beforerowselect", this, index, keepExisting, r) !== false){
            if(!keepExisting || this.singleSelect){
                this.clearSelections();
            }
            this.selections.add(r);
            this.last = this.lastActive = index;
            if(!preventViewNotify){
                this.grid.getView().onRowSelect(index);
            }
            this.fireEvent("rowselect", this, index, r);
            this.fireEvent("selectionchange", this);
        }
    },

    
    deselectRow : function(index, preventViewNotify){
        if(this.isLocked()) return;
        if(this.last == index){
            this.last = false;
        }
        if(this.lastActive == index){
            this.lastActive = false;
        }
        var r = this.grid.store.getAt(index);
        if(r){
            this.selections.remove(r);
            if(!preventViewNotify){
                this.grid.getView().onRowDeselect(index);
            }
            this.fireEvent("rowdeselect", this, index, r);
            this.fireEvent("selectionchange", this);
        }
    },

    // private
    restoreLast : function(){
        if(this._last){
            this.last = this._last;
        }
    },

    // private
    acceptsNav : function(row, col, cm){
        return !cm.isHidden(col) && cm.isCellEditable(col, row);
    },

    // private
    onEditorKey : function(field, e){
        var k = e.getKey(), newCell, g = this.grid, ed = g.activeEditor;
        var shift = e.shiftKey;
        if(k == e.TAB){
            e.stopEvent();
            ed.completeEdit();
            if(shift){
                newCell = g.walkCells(ed.row, ed.col-1, -1, this.acceptsNav, this);
            }else{
                newCell = g.walkCells(ed.row, ed.col+1, 1, this.acceptsNav, this);
            }
        }else if(k == e.ENTER){
            e.stopEvent();
            ed.completeEdit();
			if(this.moveEditorOnEnter !== false){
				if(shift){
					newCell = g.walkCells(ed.row - 1, ed.col, -1, this.acceptsNav, this);
				}else{
					newCell = g.walkCells(ed.row + 1, ed.col, 1, this.acceptsNav, this);
				}
			}
        }else if(k == e.ESC){
            ed.cancelEdit();
        }
        if(newCell){
            g.startEditing(newCell[0], newCell[1]);
        }
    }
});

Ext.grid.CellSelectionModel = function(config){
    Ext.apply(this, config);

    this.selection = null;

    this.addEvents(
        
	    "beforecellselect",
        
	    "cellselect",
        
	    "selectionchange"
    );

    Ext.grid.CellSelectionModel.superclass.constructor.call(this);
};

Ext.extend(Ext.grid.CellSelectionModel, Ext.grid.AbstractSelectionModel,  {

    
    initEvents : function(){
        this.grid.on("cellmousedown", this.handleMouseDown, this);
        this.grid.getGridEl().on(Ext.isIE || Ext.isSafari3 ? "keydown" : "keypress", this.handleKeyDown, this);
        var view = this.grid.view;
        view.on("refresh", this.onViewChange, this);
        view.on("rowupdated", this.onRowUpdated, this);
        view.on("beforerowremoved", this.clearSelections, this);
        view.on("beforerowsinserted", this.clearSelections, this);
        if(this.grid.isEditor){
            this.grid.on("beforeedit", this.beforeEdit,  this);
        }
    },

	//private
    beforeEdit : function(e){
        this.select(e.row, e.column, false, true, e.record);
    },

	//private
    onRowUpdated : function(v, index, r){
        if(this.selection && this.selection.record == r){
            v.onCellSelect(index, this.selection.cell[1]);
        }
    },

	//private
    onViewChange : function(){
        this.clearSelections(true);
    },

	
    getSelectedCell : function(){
        return this.selection ? this.selection.cell : null;
    },

    
    clearSelections : function(preventNotify){
        var s = this.selection;
        if(s){
            if(preventNotify !== true){
                this.grid.view.onCellDeselect(s.cell[0], s.cell[1]);
            }
            this.selection = null;
            this.fireEvent("selectionchange", this, null);
        }
    },

    
    hasSelection : function(){
        return this.selection ? true : false;
    },

    
    handleMouseDown : function(g, row, cell, e){
        if(e.button !== 0 || this.isLocked()){
            return;
        };
        this.select(row, cell);
    },

    
    select : function(rowIndex, colIndex, preventViewNotify, preventFocus,  r){
        if(this.fireEvent("beforecellselect", this, rowIndex, colIndex) !== false){
            this.clearSelections();
            r = r || this.grid.store.getAt(rowIndex);
            this.selection = {
                record : r,
                cell : [rowIndex, colIndex]
            };
            if(!preventViewNotify){
                var v = this.grid.getView();
                v.onCellSelect(rowIndex, colIndex);
                if(preventFocus !== true){
                    v.focusCell(rowIndex, colIndex);
                }
            }
            this.fireEvent("cellselect", this, rowIndex, colIndex);
            this.fireEvent("selectionchange", this, this.selection);
        }
    },

	//private
    isSelectable : function(rowIndex, colIndex, cm){
        return !cm.isHidden(colIndex);
    },

    
    handleKeyDown : function(e){
        if(!e.isNavKeyPress()){
            return;
        }
        var g = this.grid, s = this.selection;
        if(!s){
            e.stopEvent();
            var cell = g.walkCells(0, 0, 1, this.isSelectable,  this);
            if(cell){
                this.select(cell[0], cell[1]);
            }
            return;
        }
        var sm = this;
        var walk = function(row, col, step){
            return g.walkCells(row, col, step, sm.isSelectable,  sm);
        };
        var k = e.getKey(), r = s.cell[0], c = s.cell[1];
        var newCell;

        switch(k){
             case e.TAB:
                 if(e.shiftKey){
                     newCell = walk(r, c-1, -1);
                 }else{
                     newCell = walk(r, c+1, 1);
                 }
             break;
             case e.DOWN:
                 newCell = walk(r+1, c, 1);
             break;
             case e.UP:
                 newCell = walk(r-1, c, -1);
             break;
             case e.RIGHT:
                 newCell = walk(r, c+1, 1);
             break;
             case e.LEFT:
                 newCell = walk(r, c-1, -1);
             break;
             case e.ENTER:
                 if(g.isEditor && !g.editing){
                    g.startEditing(r, c);
                    e.stopEvent();
                    return;
                }
             break;
        };
        if(newCell){
            this.select(newCell[0], newCell[1]);
            e.stopEvent();
        }
    },

    acceptsNav : function(row, col, cm){
        return !cm.isHidden(col) && cm.isCellEditable(col, row);
    },

    onEditorKey : function(field, e){
        var k = e.getKey(), newCell, g = this.grid, ed = g.activeEditor;
        if(k == e.TAB){
            if(e.shiftKey){
                newCell = g.walkCells(ed.row, ed.col-1, -1, this.acceptsNav, this);
            }else{
                newCell = g.walkCells(ed.row, ed.col+1, 1, this.acceptsNav, this);
            }
            e.stopEvent();
        }else if(k == e.ENTER){
            ed.completeEdit();
            e.stopEvent();
        }else if(k == e.ESC){
        	e.stopEvent();
            ed.cancelEdit();
        }
        if(newCell){
            g.startEditing(newCell[0], newCell[1]);
        }
    }
});

Ext.grid.EditorGridPanel = Ext.extend(Ext.grid.GridPanel, {
    
    clicksToEdit: 2,

    // private
    isEditor : true,
    // private
    detectEdit: false,

	
	autoEncode : false,

	
    // private
    trackMouseOver: false, // causes very odd FF errors

    // private
    initComponent : function(){
        Ext.grid.EditorGridPanel.superclass.initComponent.call(this);

        if(!this.selModel){
            
            this.selModel = new Ext.grid.CellSelectionModel();
        }

        this.activeEditor = null;

	    this.addEvents(
            
            "beforeedit",
            
            "afteredit",
            
            "validateedit"
        );
    },

    // private
    initEvents : function(){
        Ext.grid.EditorGridPanel.superclass.initEvents.call(this);

        this.on("bodyscroll", this.stopEditing, this, [true]);
        this.on("columnresize", this.stopEditing, this, [true]);

        if(this.clicksToEdit == 1){
            this.on("cellclick", this.onCellDblClick, this);
        }else {
            if(this.clicksToEdit == 'auto' && this.view.mainBody){
                this.view.mainBody.on("mousedown", this.onAutoEditClick, this);
            }
            this.on("celldblclick", this.onCellDblClick, this);
        }
    },

    // private
    onCellDblClick : function(g, row, col){
        this.startEditing(row, col);
    },

    // private
    onAutoEditClick : function(e, t){
        if(e.button !== 0){
            return;
        }
        var row = this.view.findRowIndex(t);
        var col = this.view.findCellIndex(t);
        if(row !== false && col !== false){
            this.stopEditing();
            if(this.selModel.getSelectedCell){ // cell sm
                var sc = this.selModel.getSelectedCell();
                if(sc && sc.cell[0] === row && sc.cell[1] === col){
                    this.startEditing(row, col);
                }
            }else{
                if(this.selModel.isSelected(row)){
                    this.startEditing(row, col);
                }
            }
        }
    },

    // private
    onEditComplete : function(ed, value, startValue){
//			_dump("onEditComplete()");
        this.editing = false;
        this.activeEditor = null;
        ed.un("specialkey", this.selModel.onEditorKey, this.selModel);
		var r = ed.record;
        var field = this.colModel.getDataIndex(ed.col);
        value = this.postEditValue(value, startValue, r, field);
        if(String(value) !== String(startValue)){
            var e = {
                grid: this,
                record: r,
                field: field,
                originalValue: startValue,
                value: value,
                row: ed.row,
                column: ed.col,
                cancel:false
            };
            if(this.fireEvent("validateedit", e) !== false && !e.cancel){
                r.set(field, e.value);
                delete e.cancel;
                this.fireEvent("afteredit", e);
            }
        }
        this.view.focusCell(ed.row, ed.col);
        this.fireEvent("complete", this, ed.row, ed.col);
    },

    
    startEditing : function(row, col){
        this.stopEditing();
        if(this.colModel.isCellEditable(col, row)){
            this.view.ensureVisible(row, col, true);
            var r = this.store.getAt(row);
            var field = this.colModel.getDataIndex(col);
            var e = {
                grid: this,
                record: r,
                field: field,
                value: r.data[field],
                row: row,
                column: col,
                cancel:false
            };
            if(this.fireEvent("beforeedit", e) !== false && !e.cancel){
                this.editing = true;
                var ed = this.colModel.getCellEditor(col, row);
                if(!ed.rendered){
                    ed.render(this.view.getEditorParent(ed));
                }
                (function(){ // complex but required for focus issues in safari, ie and opera
                    ed.row = row;
                    ed.col = col;
                    ed.record = r;
                    ed.on("complete", this.onEditComplete, this, {single: true});
                    ed.on("specialkey", this.selModel.onEditorKey, this.selModel);
                    
                    this.activeEditor = ed;
                    var v = this.preEditValue(r, field);
                    ed.startEdit(this.view.getCell(row, col).firstChild, v === undefined ? '' : v);
                }).defer(50, this);
            }
        }
    },

    // private
	preEditValue : function(r, field){
        var value = r.data[field];
		return this.autoEncode && typeof value == 'string' ? Ext.util.Format.htmlDecode(value) : value;
	},

    // private
	postEditValue : function(value, originalValue, r, field){
		return this.autoEncode && typeof value == 'string' ? Ext.util.Format.htmlEncode(value) : value;
	},

    
    stopEditing : function(cancel){
        if(this.activeEditor){
            this.activeEditor[cancel === true ? 'cancelEdit' : 'completeEdit']();
        }
        this.activeEditor = null;
    },

    // private
    onDestroy: function() {
        if(this.rendered){
            var cols = this.colModel.config;
            for(var i = 0, len = cols.length; i < len; i++){
                var c = cols[i];
                Ext.destroy(c.editor);
            }
        }
        Ext.grid.EditorGridPanel.superclass.onDestroy.call(this);
    }
});
Ext.reg('editorgrid', Ext.grid.EditorGridPanel);
// private
// This is a support class used internally by the Grid components
Ext.grid.GridEditor = function(field, config){
    Ext.grid.GridEditor.superclass.constructor.call(this, field, config);
    field.monitorTab = false;
};

Ext.extend(Ext.grid.GridEditor, Ext.Editor, {
    alignment: "tl-tl",
    autoSize: "width",
    hideEl : false,
    cls: "x-small-editor x-grid-editor",
    shim:false,
    shadow:false
});

Ext.grid.PropertyRecord = Ext.data.Record.create([
    {name:'name',type:'string'}, 'value'
]);


Ext.grid.PropertyStore = function(grid, source){
    this.grid = grid;
    this.store = new Ext.data.Store({
        recordType : Ext.grid.PropertyRecord
    });
    this.store.on('update', this.onUpdate,  this);
    if(source){
        this.setSource(source);
    }
    Ext.grid.PropertyStore.superclass.constructor.call(this);
};
Ext.extend(Ext.grid.PropertyStore, Ext.util.Observable, {
    // protected - should only be called by the grid.  Use grid.setSource instead.
    setSource : function(o){
        this.source = o;
        this.store.removeAll();
        var data = [];
        for(var k in o){
            if(this.isEditableValue(o[k])){
                data.push(new Ext.grid.PropertyRecord({name: k, value: o[k]}, k));
            }
        }
        this.store.loadRecords({records: data}, {}, true);
    },

    // private
    onUpdate : function(ds, record, type){
        if(type == Ext.data.Record.EDIT){
            var v = record.data['value'];
            var oldValue = record.modified['value'];
            if(this.grid.fireEvent('beforepropertychange', this.source, record.id, v, oldValue) !== false){
                this.source[record.id] = v;
                record.commit();
                this.grid.fireEvent('propertychange', this.source, record.id, v, oldValue);
            }else{
                record.reject();
            }
        }
    },

    // private
    getProperty : function(row){
       return this.store.getAt(row);
    },

    // private
    isEditableValue: function(val){
        if(Ext.isDate(val)){
            return true;
        }else if(typeof val == 'object' || typeof val == 'function'){
            return false;
        }
        return true;
    },

    // private
    setValue : function(prop, value){
        this.source[prop] = value;
        this.store.getById(prop).set('value', value);
    },

    // protected - should only be called by the grid.  Use grid.getSource instead.
    getSource : function(){
        return this.source;
    }
});


Ext.grid.PropertyColumnModel = function(grid, store){
    this.grid = grid;
    var g = Ext.grid;
    g.PropertyColumnModel.superclass.constructor.call(this, [
        {header: this.nameText, width:50, sortable: true, dataIndex:'name', id: 'name', menuDisabled:true},
        {header: this.valueText, width:50, resizable:false, dataIndex: 'value', id: 'value', menuDisabled:true}
    ]);
    this.store = store;
    this.bselect = Ext.DomHelper.append(document.body, {
        tag: 'select', cls: 'x-grid-editor x-hide-display', children: [
            {tag: 'option', value: 'true', html: 'true'},
            {tag: 'option', value: 'false', html: 'false'}
        ]
    });
    var f = Ext.form;

    var bfield = new f.Field({
        el:this.bselect,
        bselect : this.bselect,
        autoShow: true,
        getValue : function(){
            return this.bselect.value == 'true';
        }
    });
    this.editors = {
        'date' : new g.GridEditor(new f.DateField({selectOnFocus:true})),
        'string' : new g.GridEditor(new f.TextField({selectOnFocus:true})),
        'number' : new g.GridEditor(new f.NumberField({selectOnFocus:true, style:'text-align:left;'})),
        'boolean' : new g.GridEditor(bfield)
    };
    this.renderCellDelegate = this.renderCell.createDelegate(this);
    this.renderPropDelegate = this.renderProp.createDelegate(this);
};

Ext.extend(Ext.grid.PropertyColumnModel, Ext.grid.ColumnModel, {
    // private - strings used for locale support
    nameText : 'Name',
    valueText : 'Value',
    dateFormat : 'm/j/Y',

    // private
    renderDate : function(dateVal){
        return dateVal.dateFormat(this.dateFormat);
    },

    // private
    renderBool : function(bVal){
        return bVal ? 'true' : 'false';
    },

    // private
    isCellEditable : function(colIndex, rowIndex){
        return colIndex == 1;
    },

    // private
    getRenderer : function(col){
        return col == 1 ?
            this.renderCellDelegate : this.renderPropDelegate;
    },

    // private
    renderProp : function(v){
        return this.getPropertyName(v);
    },

    // private
    renderCell : function(val){
        var rv = val;
        if(Ext.isDate(val)){
            rv = this.renderDate(val);
        }else if(typeof val == 'boolean'){
            rv = this.renderBool(val);
        }
        return Ext.util.Format.htmlEncode(rv);
    },

    // private
    getPropertyName : function(name){
        var pn = this.grid.propertyNames;
        return pn && pn[name] ? pn[name] : name;
    },

    // private
    getCellEditor : function(colIndex, rowIndex){
        var p = this.store.getProperty(rowIndex);
        var n = p.data['name'], val = p.data['value'];
        if(this.grid.customEditors[n]){
            return this.grid.customEditors[n];
        }
        if(Ext.isDate(val)){
            return this.editors['date'];
        }else if(typeof val == 'number'){
            return this.editors['number'];
        }else if(typeof val == 'boolean'){
            return this.editors['boolean'];
        }else{
            return this.editors['string'];
        }
    }
});


Ext.grid.PropertyGrid = Ext.extend(Ext.grid.EditorGridPanel, {
    
    
    

    // private config overrides
    enableColumnMove:false,
    stripeRows:false,
    trackMouseOver: false,
    clicksToEdit:1,
    enableHdMenu : false,
    viewConfig : {
        forceFit:true
    },

    // private
    initComponent : function(){
        this.customEditors = this.customEditors || {};
        this.lastEditRow = null;
        var store = new Ext.grid.PropertyStore(this);
        this.propStore = store;
        var cm = new Ext.grid.PropertyColumnModel(this, store);
        store.store.sort('name', 'ASC');
        this.addEvents(
            
            'beforepropertychange',
            
            'propertychange'
        );
        this.cm = cm;
        this.ds = store.store;
        Ext.grid.PropertyGrid.superclass.initComponent.call(this);

        this.selModel.on('beforecellselect', function(sm, rowIndex, colIndex){
            if(colIndex === 0){
                this.startEditing.defer(200, this, [rowIndex, 1]);
                return false;
            }
        }, this);
    },

    // private
    onRender : function(){
        Ext.grid.PropertyGrid.superclass.onRender.apply(this, arguments);

        this.getGridEl().addClass('x-props-grid');
    },

    // private
    afterRender: function(){
        Ext.grid.PropertyGrid.superclass.afterRender.apply(this, arguments);
        if(this.source){
            this.setSource(this.source);
        }
    },

    
    setSource : function(source){
        this.propStore.setSource(source);
    },

    
    getSource : function(){
        return this.propStore.getSource();
    }
});
Ext.reg("propertygrid", Ext.grid.PropertyGrid);


Ext.grid.RowNumberer = function(config){
    Ext.apply(this, config);
    if(this.rowspan){
        this.renderer = this.renderer.createDelegate(this);
    }
};

Ext.grid.RowNumberer.prototype = {
    
    header: "",
    
    width: 23,
    
    sortable: false,

    // private
    fixed:true,
    menuDisabled:true,
    dataIndex: '',
    id: 'numberer',
    rowspan: undefined,

    // private
    renderer : function(v, p, record, rowIndex){
        if(this.rowspan){
            p.cellAttr = 'rowspan="'+this.rowspan+'"';
        }
        return rowIndex+1;
    }
};

Ext.grid.CheckboxSelectionModel = Ext.extend(Ext.grid.RowSelectionModel, {
    
    header: '<div class="x-grid3-hd-checker">&#160;</div>',
    
    width: 20,
    
    sortable: false,

    // private
    menuDisabled:true,
    fixed:true,
    dataIndex: '',
    id: 'checker',

    // private
    initEvents : function(){
        Ext.grid.CheckboxSelectionModel.superclass.initEvents.call(this);
        this.grid.on('render', function(){
            var view = this.grid.getView();
            view.mainBody.on('mousedown', this.onMouseDown, this);
            Ext.fly(view.innerHd).on('mousedown', this.onHdMouseDown, this);

        }, this);
    },

    // private
    onMouseDown : function(e, t){
        if(e.button === 0 && t.className == 'x-grid3-row-checker'){ // Only fire if left-click
            e.stopEvent();
            var row = e.getTarget('.x-grid3-row');
            if(row){
                var index = row.rowIndex;
                if(this.isSelected(index)){
                    this.deselectRow(index);
                }else{
                    this.selectRow(index, true);
                }
            }
        }
    },

    // private
    onHdMouseDown : function(e, t){
        if(t.className == 'x-grid3-hd-checker'){
            e.stopEvent();
            var hd = Ext.fly(t.parentNode);
            var isChecked = hd.hasClass('x-grid3-hd-checker-on');
            if(isChecked){
                hd.removeClass('x-grid3-hd-checker-on');
                this.clearSelections();
            }else{
                hd.addClass('x-grid3-hd-checker-on');
                this.selectAll();
            }
        }
    },

    // private
    renderer : function(v, p, record){
        return '<div class="x-grid3-row-checker">&#160;</div>';
    }
});

Ext.LoadMask = function(el, config){
    this.el = Ext.get(el);
    Ext.apply(this, config);
    if(this.store){
        this.store.on('beforeload', this.onBeforeLoad, this);
        this.store.on('load', this.onLoad, this);
        this.store.on('loadexception', this.onLoad, this);
        this.removeMask = Ext.value(this.removeMask, false);
    }else{
        var um = this.el.getUpdater();
        um.showLoadIndicator = false; // disable the default indicator
        um.on('beforeupdate', this.onBeforeLoad, this);
        um.on('update', this.onLoad, this);
        um.on('failure', this.onLoad, this);
        this.removeMask = Ext.value(this.removeMask, true);
    }
};

Ext.LoadMask.prototype = {
    
    
    
    msg : 'Loading...',
    
    msgCls : 'x-mask-loading',

    
    disabled: false,

    
    disable : function(){
       this.disabled = true;
    },

    
    enable : function(){
        this.disabled = false;
    },

    // private
    onLoad : function(){
        this.el.unmask(this.removeMask);
    },

    // private
    onBeforeLoad : function(){
        if(!this.disabled){
            this.el.mask(this.msg, this.msgCls);
        }
    },

    
    show: function(){
        this.onBeforeLoad();
    },

    
    hide: function(){
        this.onLoad();    
    },

    // private
    destroy : function(){
        if(this.store){
            this.store.un('beforeload', this.onBeforeLoad, this);
            this.store.un('load', this.onLoad, this);
            this.store.un('loadexception', this.onLoad, this);
        }else{
            var um = this.el.getUpdater();
            um.un('beforeupdate', this.onBeforeLoad, this);
            um.un('update', this.onLoad, this);
            um.un('failure', this.onLoad, this);
        }
    }
};

Ext.ProgressBar = Ext.extend(Ext.BoxComponent, {
   
    baseCls : 'x-progress',
    
    
    animate : false,

    // private
    waitTimer : null,

    // private
    initComponent : function(){
        Ext.ProgressBar.superclass.initComponent.call(this);
        this.addEvents(
            
            "update"
        );
    },

    // private
    onRender : function(ct, position){
        Ext.ProgressBar.superclass.onRender.call(this, ct, position);

        var tpl = new Ext.Template(
            '<div class="{cls}-wrap">',
                '<div class="{cls}-inner">',
                    '<div class="{cls}-bar">',
                        '<div class="{cls}-text">',
                            '<div>&#160;</div>',
                        '</div>',
                    '</div>',
                    '<div class="{cls}-text {cls}-text-back">',
                        '<div>&#160;</div>',
                    '</div>',
                '</div>',
            '</div>'
        );

        if(position){
            this.el = tpl.insertBefore(position, {cls: this.baseCls}, true);
        }else{
            this.el = tpl.append(ct, {cls: this.baseCls}, true);
        }
        if(this.id){
            this.el.dom.id = this.id;
        }
        var inner = this.el.dom.firstChild;
        this.progressBar = Ext.get(inner.firstChild);

        if(this.textEl){
            //use an external text el
            this.textEl = Ext.get(this.textEl);
            delete this.textTopEl;
        }else{
            //setup our internal layered text els
            this.textTopEl = Ext.get(this.progressBar.dom.firstChild);
            var textBackEl = Ext.get(inner.childNodes[1]);
            this.textTopEl.setStyle("z-index", 99).addClass('x-hidden');
            this.textEl = new Ext.CompositeElement([this.textTopEl.dom.firstChild, textBackEl.dom.firstChild]);
            this.textEl.setWidth(inner.offsetWidth);
        }
        this.progressBar.setHeight(inner.offsetHeight);
    },
    
    // private
	afterRender : function(){
		Ext.ProgressBar.superclass.afterRender.call(this);
		if(this.value){
			this.updateProgress(this.value, this.text);
		}else{
			this.updateText(this.text);
		}
	},

    
    updateProgress : function(value, text, animate){
        this.value = value || 0;
        if(text){
            this.updateText(text);
        }
        if(this.rendered){
	        var w = Math.floor(value*this.el.dom.firstChild.offsetWidth);
	        this.progressBar.setWidth(w, animate === true || (animate !== false && this.animate));
	        if(this.textTopEl){
	            //textTopEl should be the same width as the bar so overflow will clip as the bar moves
	            this.textTopEl.removeClass('x-hidden').setWidth(w);
	        }
        }
        this.fireEvent('update', this, value, text);
        return this;
    },

    
    wait : function(o){
        if(!this.waitTimer){
            var scope = this;
            o = o || {};
            this.updateText(o.text);
            this.waitTimer = Ext.TaskMgr.start({
                run: function(i){
                    var inc = o.increment || 10;
                    this.updateProgress(((((i+inc)%inc)+1)*(100/inc))*.01, null, o.animate);
                },
                interval: o.interval || 1000,
                duration: o.duration,
                onStop: function(){
                    if(o.fn){
                        o.fn.apply(o.scope || this);
                    }
                    this.reset();
                },
                scope: scope
            });
        }
        return this;
    },

    
    isWaiting : function(){
        return this.waitTimer != null;
    },

    
    updateText : function(text){
        this.text = text || '&#160;';
        if(this.rendered){
            this.textEl.update(this.text);
        }
        return this;
    },
    
    
    syncProgressBar : function(){
        if(this.value){
            this.updateProgress(this.value, this.text);
        }
        return this;
    },

    
    setSize : function(w, h){
        Ext.ProgressBar.superclass.setSize.call(this, w, h);
        if(this.textTopEl){
            var inner = this.el.dom.firstChild;
            this.textEl.setSize(inner.offsetWidth, inner.offsetHeight);
        }
        this.syncProgressBar();
        return this;
    },

    
    reset : function(hide){
        this.updateProgress(0);
        if(this.textTopEl){
            this.textTopEl.addClass('x-hidden');
        }
        if(this.waitTimer){
            this.waitTimer.onStop = null; //prevent recursion
            Ext.TaskMgr.stop(this.waitTimer);
            this.waitTimer = null;
        }
        if(hide === true){
            this.hide();
        }
        return this;
    }
});
Ext.reg('progress', Ext.ProgressBar);

Ext.Slider = Ext.extend(Ext.BoxComponent, {
	
	
    vertical: false,
	
    minValue: 0,
		
    maxValue: 100,
	
    keyIncrement: 1,
	
    increment: 0,
	// private
    clickRange: [5,15],
	
    clickToChange : true,
	
    animate: true,

    
    dragging: false,

    // private override
    initComponent : function(){
        if(this.value === undefined){
            this.value = this.minValue;
        }
        Ext.Slider.superclass.initComponent.call(this);
        this.keyIncrement = Math.max(this.increment, this.keyIncrement); 
        this.addEvents(
            		
			'beforechange', 
			
			'change',
			
			'changecomplete',
			
			'dragstart', 
			
			'drag', 
			
			'dragend'
		);

        if(this.vertical){
            Ext.apply(this, Ext.Slider.Vertical);
        }
    },

	// private override
    onRender : function(){
        this.autoEl = {
            cls: 'x-slider ' + (this.vertical ? 'x-slider-vert' : 'x-slider-horz'),
            cn:{cls:'x-slider-end',cn:{cls:'x-slider-inner',cn:[{cls:'x-slider-thumb'},{tag:'a', cls:'x-slider-focus', href:"#", tabIndex: '-1', hidefocus:'on'}]}}
        };
        Ext.Slider.superclass.onRender.apply(this, arguments);
        this.endEl = this.el.first();
        this.innerEl = this.endEl.first();
        this.thumb = this.innerEl.first();
        this.halfThumb = (this.vertical ? this.thumb.getHeight() : this.thumb.getWidth())/2;
        this.focusEl = this.thumb.next();
        this.initEvents();
    },

	// private override
    initEvents : function(){
        this.thumb.addClassOnOver('x-slider-thumb-over');
        this.mon(this.el, 'mousedown', this.onMouseDown, this);
        this.mon(this.el, 'keydown', this.onKeyDown, this);

        this.focusEl.swallowEvent("click", true);

        this.tracker = new Ext.dd.DragTracker({
            onBeforeStart: this.onBeforeDragStart.createDelegate(this),
            onStart: this.onDragStart.createDelegate(this),
            onDrag: this.onDrag.createDelegate(this),
            onEnd: this.onDragEnd.createDelegate(this),
            tolerance: 3,
            autoStart: 300
        });
        this.tracker.initEl(this.thumb);
        this.on('beforedestroy', this.tracker.destroy, this.tracker);
    },

	// private override
    onMouseDown : function(e){
        if(this.disabled) {return;}
        if(this.clickToChange && e.target != this.thumb.dom){
            var local = this.innerEl.translatePoints(e.getXY());
            this.onClickChange(local);
        }
        this.focus();
    },

	// private
    onClickChange : function(local){
        if(local.top > this.clickRange[0] && local.top < this.clickRange[1]){
            this.setValue(Math.round(this.reverseValue(local.left)), undefined, true);
        }
    },
	
	// private
    onKeyDown : function(e){
        if(this.disabled){e.preventDefault();return;}
        var k = e.getKey();
        switch(k){
            case e.UP:
            case e.RIGHT:
                e.stopEvent();
                if(e.ctrlKey){
                    this.setValue(this.maxValue, undefined, true);
                }else{
                    this.setValue(this.value+this.keyIncrement, undefined, true);
                }
            break;
            case e.DOWN:
            case e.LEFT:
                e.stopEvent();
                if(e.ctrlKey){
                    this.setValue(this.minValue, undefined, true);
                }else{
                    this.setValue(this.value-this.keyIncrement, undefined, true);
                }
            break;
            default:
                e.preventDefault();
        }
    },
	
	// private
    doSnap : function(value){
        if(!this.increment || this.increment == 1 || !value) {
            return value;
        }
        var newValue = value, inc = this.increment;
        var m = value % inc;
        if(m > 0){
            if(m > (inc/2)){
                newValue = value + (inc-m);
            }else{
                newValue = value - m;
            }
        }
        return newValue.constrain(this.minValue,  this.maxValue);
    },
	
	// private
    afterRender : function(){
        Ext.Slider.superclass.afterRender.apply(this, arguments);
        if(this.value !== undefined){
            var v = this.normalizeValue(this.value);
            if(v !== this.value){
                delete this.value;
                this.setValue(v, false);
            }else{
                this.moveThumb(this.translateValue(v), false);
            }
        }
    },

	// private
    getRatio : function(){
        var w = this.innerEl.getWidth();
        var v = this.maxValue - this.minValue;
        return v == 0 ? w : (w/v);
    },

	// private
    normalizeValue : function(v){
       if(typeof v != 'number'){
            v = parseInt(v);
        }
        v = Math.round(v);
        v = this.doSnap(v);
        v = v.constrain(this.minValue, this.maxValue);
        return v;
    },

	
    setValue : function(v, animate, changeComplete){
        v = this.normalizeValue(v);
        if(v !== this.value && this.fireEvent('beforechange', this, v, this.value) !== false){
            this.value = v;
            this.moveThumb(this.translateValue(v), animate !== false);
            this.fireEvent('change', this, v);
            if(changeComplete){
                this.fireEvent('changecomplete', this, v);
            }
        }
    },

	// private
    translateValue : function(v){
        var ratio = this.getRatio();
        return (v * ratio)-(this.minValue * ratio)-this.halfThumb;
    },

	reverseValue : function(pos){
        var ratio = this.getRatio();
        return (pos+this.halfThumb+(this.minValue * ratio))/ratio;
    },

	// private
    moveThumb: function(v, animate){
        if(!animate || this.animate === false){
            this.thumb.setLeft(v);
        }else{
            this.thumb.shift({left: v, stopFx: true, duration:.35});
        }
    },

	// private
    focus : function(){
        this.focusEl.focus(10);
    },

	// private
    onBeforeDragStart : function(e){
        return !this.disabled;
    },

	// private
    onDragStart: function(e){
        this.thumb.addClass('x-slider-thumb-drag');
        this.dragging = true;
        this.dragStartValue = this.value;
        this.fireEvent('dragstart', this, e);
    },

	// private
    onDrag: function(e){
        var pos = this.innerEl.translatePoints(this.tracker.getXY());
        this.setValue(Math.round(this.reverseValue(pos.left)), false);
        this.fireEvent('drag', this, e);
    },
	
	// private
    onDragEnd: function(e){
        this.thumb.removeClass('x-slider-thumb-drag');
        this.dragging = false;
        this.fireEvent('dragend', this, e);
        if(this.dragStartValue != this.value){
            this.fireEvent('changecomplete', this, this.value);
        }
    },
    
    //private
    onDisable: function(){
        Ext.Slider.superclass.onDisable.call(this);
        this.thumb.addClass(this.disabledClass);
        if(Ext.isIE){
            //IE breaks when using overflow visible and opacity other than 1.
            //Create a place holder for the thumb and display it.
            var xy = this.thumb.getXY();
            this.thumb.hide();
            this.innerEl.addClass(this.disabledClass).dom.disabled = true;
            if (!this.thumbHolder){
                this.thumbHolder = this.endEl.createChild({cls: 'x-slider-thumb ' + this.disabledClass});    
            }
            this.thumbHolder.show().setXY(xy);
        }
    },
    
    //private
    onEnable: function(){
        Ext.Slider.superclass.onEnable.call(this);
        this.thumb.removeClass(this.disabledClass);
        if(Ext.isIE){
            this.innerEl.removeClass(this.disabledClass).dom.disabled = false;
            if (this.thumbHolder){
                this.thumbHolder.hide();
            }
            this.thumb.show();
            this.syncThumb();
        }
    },

    // private
    onResize : function(w, h){
        this.innerEl.setWidth(w - (this.el.getPadding('l') + this.endEl.getPadding('r')));
        this.syncThumb();
    },
    
    
    syncThumb : function(){
        if(this.rendered){
            this.moveThumb(this.translateValue(this.value));
        }
    },
	
	
    getValue : function(){
        return this.value;
    }
});
Ext.reg('slider', Ext.Slider);

// private class to support vertical sliders
Ext.Slider.Vertical = {
    onResize : function(w, h){
        this.innerEl.setHeight(h - (this.el.getPadding('t') + this.endEl.getPadding('b')));
        this.syncThumb();
    },

    getRatio : function(){
        var h = this.innerEl.getHeight();
        var v = this.maxValue - this.minValue;
        return h/v;
    },

    moveThumb: function(v, animate){
        if(!animate || this.animate === false){
            this.thumb.setBottom(v);
        }else{
            this.thumb.shift({bottom: v, stopFx: true, duration:.35});
        }
    },

    onDrag: function(e){
        var pos = this.innerEl.translatePoints(this.tracker.getXY());
        var bottom = this.innerEl.getHeight()-pos.top;
        this.setValue(this.minValue + Math.round(bottom/this.getRatio()), false);
        this.fireEvent('drag', this, e);
    },

    onClickChange : function(local){
        if(local.left > this.clickRange[0] && local.left < this.clickRange[1]){
            var bottom = this.innerEl.getHeight()-local.top;
            this.setValue(this.minValue + Math.round(bottom/this.getRatio()), undefined, true);
        }
    }
};

Ext.StatusBar = Ext.extend(Ext.Toolbar, {
    
    
    
    
    
    
    
    cls : 'x-statusbar',
    
    busyIconCls : 'x-status-busy',
    
    busyText : 'Loading...',
    
    autoClear : 5000,
    
    // private
    activeThreadId : 0,
    
    // private
    initComponent : function(){
        if(this.statusAlign=='right'){
            this.cls += ' x-status-right';
        }
        Ext.StatusBar.superclass.initComponent.call(this);
    },
    
    // private
    afterRender : function(){
        Ext.StatusBar.superclass.afterRender.call(this);
        
        var right = this.statusAlign=='right',
            td = Ext.get(this.nextBlock());
        
        if(right){
            this.tr.appendChild(td.dom);
        }else{
            td.insertBefore(this.tr.firstChild);
        }
        
        this.statusEl = td.createChild({
            cls: 'x-status-text ' + (this.iconCls || this.defaultIconCls || ''),
            html: this.text || this.defaultText || ''
        });
        this.statusEl.unselectable();
        
        this.spacerEl = td.insertSibling({
            tag: 'td',
            style: 'width:100%',
            cn: [{cls:'ytb-spacer'}]
        }, right ? 'before' : 'after');
    },

    
    setStatus : function(o){
        o = o || {};
        
        if(typeof o == 'string'){
            o = {text:o};
        }
        if(o.text !== undefined){
            this.setText(o.text);
        }
        if(o.iconCls !== undefined){
            this.setIcon(o.iconCls);
        }
        
        if(o.clear){
            var c = o.clear,
                wait = this.autoClear,
                defaults = {useDefaults: true, anim: true};
            
            if(typeof c == 'object'){
                c = Ext.applyIf(c, defaults);
                if(c.wait){
                    wait = c.wait;
                }
            }else if(typeof c == 'number'){
                wait = c;
                c = defaults;
            }else if(typeof c == 'boolean'){
                c = defaults;
            }
            
            c.threadId = this.activeThreadId;
            this.clearStatus.defer(wait, this, [c]);
        }
        return this;
    },
     
    
    clearStatus : function(o){
        o = o || {};
        
        if(o.threadId && o.threadId !== this.activeThreadId){
            // this means the current call was made internally, but a newer
            // thread has set a message since this call was deferred.  Since
            // we don't want to overwrite a newer message just ignore.
            return this;
        }
        
        var text = o.useDefaults ? this.defaultText : '',
            iconCls = o.useDefaults ? (this.defaultIconCls ? this.defaultIconCls : '') : '';
            
        if(o.anim){
            this.statusEl.fadeOut({
                remove: false,
                useDisplay: true,
                scope: this,
                callback: function(){
                    this.setStatus({
	                    text: text, 
	                    iconCls: iconCls
	                });
                    this.statusEl.show();
                }
            });
        }else{
            // hide/show the el to avoid jumpy text or icon
            this.statusEl.hide();
	        this.setStatus({
	            text: text,
	            iconCls: iconCls
	        });
            this.statusEl.show();
        }
        return this;
    },
    
    
    setText : function(text){
        this.activeThreadId++;
        this.text = text || '';
        if(this.rendered){
            this.statusEl.update(this.text);
        }
        return this;
    },
    
    
    getText : function(){
        return this.text;
    },

    
    setIcon : function(cls){
        this.activeThreadId++;
        cls = cls || '';
        
        if(this.rendered){
	        if(this.currIconCls){
	            this.statusEl.removeClass(this.currIconCls);
	            this.currIconCls = null;
	        }
	        if(cls.length > 0){
	            this.statusEl.addClass(cls);
	            this.currIconCls = cls;
	        }
        }else{
            this.currIconCls = cls;
        }
        return this;
    },
    
    
    showBusy : function(o){
        if(typeof o == 'string'){
            o = {text:o};
        }
        o = Ext.applyIf(o || {}, {
            text: this.busyText,
            iconCls: this.busyIconCls
        });
        return this.setStatus(o);
    }
});
Ext.reg('statusbar', Ext.StatusBar);


Ext.History = (function () {
    var iframe, hiddenField;
    var ready = false;
    var currentToken;

    function getHash() {
        var href = top.location.href, i = href.indexOf("#");
        return i >= 0 ? href.substr(i + 1) : null;
    }

    function doSave() {
        hiddenField.value = currentToken;
    }

    function handleStateChange(token) {
        currentToken = token;
        Ext.History.fireEvent('change', token);
    }

    function updateIFrame (token) {
        var html = ['<html><body><div id="state">',token,'</div></body></html>'].join('');
        try {
            var doc = iframe.contentWindow.document;
            doc.open();
            doc.write(html);
            doc.close();
            return true;
        } catch (e) {
            return false;
        }
    }

    function checkIFrame() {
        if (!iframe.contentWindow || !iframe.contentWindow.document) {
            setTimeout(checkIFrame, 10);
            return;
        }

        var doc = iframe.contentWindow.document;
        var elem = doc.getElementById("state");
        var token = elem ? elem.innerText : null;

        var hash = getHash();

        setInterval(function () {

            doc = iframe.contentWindow.document;
            elem = doc.getElementById("state");

            var newtoken = elem ? elem.innerText : null;

            var newHash = getHash();

            if (newtoken !== token) {
                token = newtoken;
                handleStateChange(token);
                top.location.hash = token;
                hash = token;
                doSave();
            } else if (newHash !== hash) {
                hash = newHash;
                updateIFrame(newHash);
            }

        }, 50);

        ready = true;

        Ext.History.fireEvent('ready', Ext.History);
    }

    function startUp() {
        currentToken = hiddenField.value ? hiddenField.value : getHash();
        
        if (Ext.isIE) {
            checkIFrame();
        } else {
            var hash = getHash();
            setInterval(function () {
                var newHash = getHash();
                if (newHash !== hash) {
                    hash = newHash;
                    handleStateChange(hash);
                    doSave();
                }
            }, 50);
            ready = true;
            Ext.History.fireEvent('ready', Ext.History);
        }
    }

    return {
        
        fieldId: 'x-history-field',
        
        iframeId: 'x-history-frame',
        
        events:{},

        
        init: function (onReady, scope) {
            if(ready) {
                Ext.callback(onReady, scope, [this]);
                return;
            }
            if(!Ext.isReady){
                Ext.onReady(function(){
                    Ext.History.init(onReady, scope);
                });
                return;
            }
            hiddenField = Ext.getDom(Ext.History.fieldId);
			if (Ext.isIE) {
                iframe = Ext.getDom(Ext.History.iframeId);
            }
            this.addEvents('ready', 'change');
            if(onReady){
                this.on('ready', onReady, scope, {single:true});
            }
            startUp();
        },

        
        add: function (token, preventDup) {
            if(preventDup !== false){
                if(this.getToken() == token){
                    return true;
                }
            }
            if (Ext.isIE) {
                return updateIFrame(token);
            } else {
                top.location.hash = token;
                return true;
            }
        },

        
        back: function(){
            history.go(-1);
        },

        
        forward: function(){
            history.go(1);
        },

        
        getToken: function() {
            return ready ? currentToken : getHash();
        }
    };
})();
Ext.apply(Ext.History, new Ext.util.Observable());
Ext.debug = {};

(function(){

var cp;

function createConsole(){

    var scriptPanel = new Ext.debug.ScriptsPanel();
    var logView = new Ext.debug.LogPanel();
    var tree = new Ext.debug.DomTree();

    var tabs = new Ext.TabPanel({
        activeTab: 0,
        border: false,
        tabPosition: 'bottom',
        items: [{
            title: 'Debug Console',
            layout:'border',
            items: [logView, scriptPanel]
        },{
            title: 'DOM Inspector',
            layout:'border',
            items: [tree]
        }]
    });

    cp = new Ext.Panel({
        id: 'x-debug-browser',
        title: 'Console',
        collapsible: true,
        animCollapse: false,
        style: 'position:absolute;left:0;bottom:0;',
        height:200,
        logView: logView,
        layout: 'fit',
        
        tools:[{
            id: 'close',
            handler: function(){
                cp.destroy();
                cp = null;
                Ext.EventManager.removeResizeListener(handleResize);
            }
        }],

        items: tabs
    });

    cp.render(document.body);

    cp.resizer = new Ext.Resizable(cp.el, {
        minHeight:50,
        handles: "n",
        pinned: true,
        transparent:true,
        resizeElement : function(){
            var box = this.proxy.getBox();
            this.proxy.hide();
            cp.setHeight(box.height);
            return box;
        }
    });

    function handleResize(){
        cp.setWidth(Ext.getBody().getViewSize().width);
    }
    Ext.EventManager.onWindowResize(handleResize);

    handleResize();
}


Ext.apply(Ext, {
    log : function(){
        if(!cp){
            createConsole();
        }
        cp.logView.log.apply(cp.logView, arguments);
    },

    logf : function(format, arg1, arg2, etc){
        Ext.log(String.format.apply(String, arguments));
    },

    dump : function(o){
        if(typeof o == 'string' || typeof o == 'number' || typeof o == 'undefined' || Ext.isDate(o)){
            Ext.log(o);
        }else if(!o){
            Ext.log("null");
        }else if(typeof o != "object"){
            Ext.log('Unknown return type');
        }else if(Ext.isArray(o)){
            Ext.log('['+o.join(',')+']');
        }else{
            var b = ["{\n"];
            for(var key in o){
                var to = typeof o[key];
                if(to != "function" && to != "object"){
                    b.push(String.format("  {0}: {1},\n", key, o[key]));
                }
            }
            var s = b.join("");
            if(s.length > 3){
                s = s.substr(0, s.length-2);
            }
            Ext.log(s + "\n}");
        }
    },

    _timers : {},

    time : function(name){
        name = name || "def";
        Ext._timers[name] = new Date().getTime();
    },

    timeEnd : function(name, printResults){
        var t = new Date().getTime();
        name = name || "def";
        var v = String.format("{0} ms", t-Ext._timers[name]);
        Ext._timers[name] = new Date().getTime();
        if(printResults !== false){
            Ext.log('Timer ' + (name == "def" ? v : name + ": " + v));
        }
        return v;
    }
});

})();


Ext.debug.ScriptsPanel = Ext.extend(Ext.Panel, {
    id:'x-debug-scripts',
    region: 'east',
    minWidth: 200,
    split: true,
    width: 350,
    border: false,
    layout:'anchor',
    style:'border-width:0 0 0 1px;',

    initComponent : function(){

        this.scriptField = new Ext.form.TextArea({
            anchor: '100% -26',
            style:'border-width:0;'
        });

        this.trapBox = new Ext.form.Checkbox({
            id: 'console-trap',
            boxLabel: 'Trap Errors',
            checked: true
        });

        this.toolbar = new Ext.Toolbar([{
                text: 'Run',
                scope: this,
                handler: this.evalScript
            },{
                text: 'Clear',
                scope: this,
                handler: this.clear
            },
            '->',
            this.trapBox,
            ' ', ' '
        ]);

        this.items = [this.toolbar, this.scriptField];

        Ext.debug.ScriptsPanel.superclass.initComponent.call(this);
    },

    evalScript : function(){
        var s = this.scriptField.getValue();
        if(this.trapBox.getValue()){
            try{
                var rt = eval(s);
                Ext.dump(rt === undefined? '(no return)' : rt);
            }catch(e){
                Ext.log(e.message || e.descript);
            }
        }else{
            var rt = eval(s);
            Ext.dump(rt === undefined? '(no return)' : rt);
        }
    },

    clear : function(){
        this.scriptField.setValue('');
        this.scriptField.focus();
    }

});

Ext.debug.LogPanel = Ext.extend(Ext.Panel, {
    autoScroll: true,
    region: 'center',
    border: false,
    style:'border-width:0 1px 0 0',

    log : function(){
        var markup = [  '<div style="padding:5px !important;border-bottom:1px solid #ccc;">',
                    Ext.util.Format.htmlEncode(Array.prototype.join.call(arguments, ', ')).replace(/\n/g, '<br />').replace(/\s/g, '&#160;'),
                    '</div>'].join('');

        this.body.insertHtml('beforeend', markup);
        this.body.scrollTo('top', 100000);
    },

    clear : function(){
        this.body.update('');
        this.body.dom.scrollTop = 0;
    }
});

Ext.debug.DomTree = Ext.extend(Ext.tree.TreePanel, {
    enableDD:false ,
    lines:false,
    rootVisible:false,
    animate:false,
    hlColor:'ffff9c',
    autoScroll: true,
    region:'center',
    border:false,

    initComponent : function(){


        Ext.debug.DomTree.superclass.initComponent.call(this);
        
        // tree related stuff
        var styles = false, hnode;
        var nonSpace = /^\s*$/;
        var html = Ext.util.Format.htmlEncode;
        var ellipsis = Ext.util.Format.ellipsis;
        var styleRe = /\s?([a-z\-]*)\:([^;]*)(?:[;\s\n\r]*)/gi;

        function findNode(n){
            if(!n || n.nodeType != 1 || n == document.body || n == document){
                return false;
            }
            var pn = [n], p = n;
            while((p = p.parentNode) && p.nodeType == 1 && p.tagName.toUpperCase() != 'HTML'){
                pn.unshift(p);
            }
            var cn = hnode;
            for(var i = 0, len = pn.length; i < len; i++){
                cn.expand();
                cn = cn.findChild('htmlNode', pn[i]);
                if(!cn){ // in this dialog?
                    return false;
                }
            }
            cn.select();
            var a = cn.ui.anchor;
            treeEl.dom.scrollTop = Math.max(0 ,a.offsetTop-10);
            //treeEl.dom.scrollLeft = Math.max(0 ,a.offsetLeft-10); no likey
            cn.highlight();
            return true;
        }

        function nodeTitle(n){
            var s = n.tagName;
            if(n.id){
                s += '#'+n.id;
            }else if(n.className){
                s += '.'+n.className;
            }
            return s;
        }

        function onNodeSelect(t, n, last){
            return;
            if(last && last.unframe){
                last.unframe();
            }
            var props = {};
            if(n && n.htmlNode){
                if(frameEl.pressed){
                    n.frame();
                }
                if(inspecting){
                    return;
                }
                addStyle.enable();
                reload.setDisabled(n.leaf);
                var dom = n.htmlNode;
                stylePanel.setTitle(nodeTitle(dom));
                if(styles && !showAll.pressed){
                    var s = dom.style ? dom.style.cssText : '';
                    if(s){
                        var m;
                        while ((m = styleRe.exec(s)) != null){
                            props[m[1].toLowerCase()] = m[2];
                        }
                    }
                }else if(styles){
                    var cl = Ext.debug.cssList;
                    var s = dom.style, fly = Ext.fly(dom);
                    if(s){
                        for(var i = 0, len = cl.length; i<len; i++){
                            var st = cl[i];
                            var v = s[st] || fly.getStyle(st);
                            if(v != undefined && v !== null && v !== ''){
                                props[st] = v;
                            }
                        }
                    }
                }else{
                    for(var a in dom){
                        var v = dom[a];
                        if((isNaN(a+10)) && v != undefined && v !== null && v !== '' && !(Ext.isGecko && a[0] == a[0].toUpperCase())){
                            props[a] = v;
                        }
                    }
                }
            }else{
                if(inspecting){
                    return;
                }
                addStyle.disable();
                reload.disabled();
            }
            stylesGrid.setSource(props);
            stylesGrid.treeNode = n;
            stylesGrid.view.fitColumns();
        }

        this.loader = new Ext.tree.TreeLoader();
        this.loader.load = function(n, cb){
            var isBody = n.htmlNode == document.body;
            var cn = n.htmlNode.childNodes;
            for(var i = 0, c; c = cn[i]; i++){
                if(isBody && c.id == 'x-debug-browser'){
                    continue;
                }
                if(c.nodeType == 1){
                    n.appendChild(new Ext.debug.HtmlNode(c));
                }else if(c.nodeType == 3 && !nonSpace.test(c.nodeValue)){
                    n.appendChild(new Ext.tree.TreeNode({
                        text:'<em>' + ellipsis(html(String(c.nodeValue)), 35) + '</em>',
                        cls: 'x-tree-noicon'
                    }));
                }
            }
            cb();
        };

        //tree.getSelectionModel().on('selectionchange', onNodeSelect, null, {buffer:250});

        this.root = this.setRootNode(new Ext.tree.TreeNode('Ext'));

        hnode = this.root.appendChild(new Ext.debug.HtmlNode(
                document.getElementsByTagName('html')[0]
        ));

    }
});


// highly unusual class declaration
Ext.debug.HtmlNode = function(){
    var html = Ext.util.Format.htmlEncode;
    var ellipsis = Ext.util.Format.ellipsis;
    var nonSpace = /^\s*$/;

    var attrs = [
        {n: 'id', v: 'id'},
        {n: 'className', v: 'class'},
        {n: 'name', v: 'name'},
        {n: 'type', v: 'type'},
        {n: 'src', v: 'src'},
        {n: 'href', v: 'href'}
    ];

    function hasChild(n){
        for(var i = 0, c; c = n.childNodes[i]; i++){
            if(c.nodeType == 1){
                return true;
            }
        }
        return false;
    }

    function renderNode(n, leaf){
        var tag = n.tagName.toLowerCase();
        var s = '&lt;' + tag;
        for(var i = 0, len = attrs.length; i < len; i++){
            var a = attrs[i];
            var v = n[a.n];
            if(v && !nonSpace.test(v)){
                s += ' ' + a.v + '=&quot;<i>' + html(v) +'</i>&quot;';
            }
        }
        var style = n.style ? n.style.cssText : '';
        if(style){
            s += ' style=&quot;<i>' + html(style.toLowerCase()) +'</i>&quot;';
        }
        if(leaf && n.childNodes.length > 0){
            s+='&gt;<em>' + ellipsis(html(String(n.innerHTML)), 35) + '</em>&lt;/'+tag+'&gt;';
        }else if(leaf){
            s += ' /&gt;';
        }else{
            s += '&gt;';
        }
        return s;
    }

    var HtmlNode = function(n){
        var leaf = !hasChild(n);
        this.htmlNode = n;
        this.tagName = n.tagName.toLowerCase();
        var attr = {
            text : renderNode(n, leaf),
            leaf : leaf,
            cls: 'x-tree-noicon'
        };
        HtmlNode.superclass.constructor.call(this, attr);
        this.attributes.htmlNode = n; // for searching
        if(!leaf){
            this.on('expand', this.onExpand,  this);
            this.on('collapse', this.onCollapse,  this);
        }
    };


    Ext.extend(HtmlNode, Ext.tree.AsyncTreeNode, {
        cls: 'x-tree-noicon',
        preventHScroll: true,
        refresh : function(highlight){
            var leaf = !hasChild(this.htmlNode);
            this.setText(renderNode(this.htmlNode, leaf));
            if(highlight){
                Ext.fly(this.ui.textNode).highlight();
            }
        },

        onExpand : function(){
            if(!this.closeNode && this.parentNode){
                this.closeNode = this.parentNode.insertBefore(new Ext.tree.TreeNode({
                    text:'&lt;/' + this.tagName + '&gt;',
                    cls: 'x-tree-noicon'
                }), this.nextSibling);
            }else if(this.closeNode){
                this.closeNode.ui.show();
            }
        },

        onCollapse : function(){
            if(this.closeNode){
                this.closeNode.ui.hide();
            }
        },

        render : function(bulkRender){
            HtmlNode.superclass.render.call(this, bulkRender);
        },

        highlightNode : function(){
            //Ext.fly(this.htmlNode).highlight();
        },

        highlight : function(){
            //Ext.fly(this.ui.textNode).highlight();
        },

        frame : function(){
            this.htmlNode.style.border = '1px solid #0000ff';
            //this.highlightNode();
        },

        unframe : function(){
            //Ext.fly(this.htmlNode).removeClass('x-debug-frame');
            this.htmlNode.style.border = '';
        }
    });

    return HtmlNode;
}();



/*
 * Japanese translation
 * By tyama
 * 04-08-2007, 05:49 AM
 */

Ext.UpdateManager.defaults.indicatorText = '<div class="loading-indicator">読み込み中...</div>';

if(Ext.View){
  Ext.View.prototype.emptyText = "";
}

if(Ext.grid.GridPanel){
  Ext.grid.GridPanel.prototype.ddText = "{0} 行選択";
}

if(Ext.TabPanelItem){
  Ext.TabPanelItem.prototype.closeText = "このタブを閉じる";
}

if(Ext.form.Field){
  Ext.form.Field.prototype.invalidText = "フィールドの値が不正です。";
}

if(Ext.LoadMask){
    Ext.LoadMask.prototype.msg = "読み込み中...";
}

Date.monthNames = ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月','11月','12月'];

Date.dayNames = [
 "日",
 "月",
 "火",
 "水",
 "木",
 "金",
 "土"];

if(Ext.MessageBox){
  Ext.MessageBox.buttonText = {
    ok : "OK",
    cancel : "キャンセル",
    yes : "はい",
    no : "いいえ"
  };
}

if(Ext.util.Format){
  Ext.util.Format.date = function(v, format){
     if(!v) return "";
     if(!(v instanceof Date)) v = new Date(Date.parse(v));
     return v.dateFormat(format || "Y/m/d");
  };
}

if(Ext.DatePicker){
  Ext.apply(Ext.DatePicker.prototype, {
     todayText         : "今日",
     minText           : "選択した日付は最小値以下です。",
     maxText           : "選択した日付は最大値以上です。",
     disabledDaysText  : "",
     disabledDatesText : "",
     monthNames	       : Date.monthNames,
     dayNames	       : Date.dayNames,
     nextText          : '次月へ (コントロール+右)',
     prevText          : '前月へ (コントロール+左)',
     monthYearText     : '月選択 (コントロール+上/下で年移動)',
     todayTip          : "{0} (スペースキー)",
     format            : "Y/m/d"
  });
}

if(Ext.PagingToolbar){
  Ext.apply(Ext.PagingToolbar.prototype, {
     beforePageText : "ページ",
     afterPageText  : "/ {0}",
     firstText      : "最初のページ",
     prevText       : "前のページ",
     nextText       : "次のページ",
     lastText       : "最後のページ",
     refreshText    : "更新",
     displayMsg     : "{2} 件中 {0} - {1} を表示",
     emptyMsg       : '表示するデータがありません。'
  });
}

if(Ext.form.TextField){
  Ext.apply(Ext.form.TextField.prototype, {
     minLengthText : "このフィールドの最小値は {0} です。",
     maxLengthText : "このフィールドの最大値は {0} です。",
     blankText     : "必須項目です。",
     regexText     : "",
     emptyText     : null
  });
}

if(Ext.form.NumberField){
  Ext.apply(Ext.form.NumberField.prototype, {
     minText : "このフィールドの最小値は {0} です。",
     maxText : "このフィールドの最大値は {0} です。",
     nanText : "{0} は数値ではありません。"
  });
}

if(Ext.form.DateField){
  Ext.apply(Ext.form.DateField.prototype, {
     disabledDaysText  : "無効",
     disabledDatesText : "無効",
     minText           : "このフィールドの日付は、 {0} 以降の日付に設定してください。",
     maxText           : "このフィールドの日付は、 {0} 以前の日付に設定してください。",
     invalidText       : "{0} は間違った日付入力です。 - 入力形式は「{1}」です。",
     format            : "Y/m/d"
  });
}

if(Ext.form.ComboBox){
  Ext.apply(Ext.form.ComboBox.prototype, {
     loadingText       : "読み込み中...",
     valueNotFoundText : undefined
  });
}

if(Ext.form.VTypes){
  Ext.apply(Ext.form.VTypes, {
     emailText    : 'メールアドレスを"user@domain.com"の形式で入力してください。',
     urlText      : 'URLを"http:/'+'/www.domain.com"の形式で入力してください。',
     alphaText    : '半角英字と"_"のみです。',
     alphanumText : '半角英数と"_"のみです。'
  });
}

if(Ext.grid.GridView){
  Ext.apply(Ext.grid.GridView.prototype, {
     sortAscText  : "昇順",
     sortDescText : "降順",
     lockText     : "カラムロック",
     unlockText   : "カラムロック解除",
     columnsText  : "Columns"
  });
}

if(Ext.grid.PropertyColumnModel){
  Ext.apply(Ext.grid.PropertyColumnModel.prototype, {
     nameText   : "名称",
     valueText  : "値",
     dateFormat : "Y/m/d"
  });
}

if(Ext.layout.BorderLayout && Ext.layout.BorderLayout.SplitRegion){
  Ext.apply(Ext.layout.BorderLayout.SplitRegion.prototype, {
     splitTip            : "ドラッグするとリサイズできます。",
     collapsibleSplitTip : "ドラッグでリサイズ。 ダブルクリックで隠す。"
  });
}
/*
 * Ext JS Library 2.2
 * Copyright(c) 2006-2008, Ext JS, LLC.
 * licensing@extjs.com
 * 
 * http://extjs.com/license
 */


Ext.form.FileUploadField = Ext.extend(Ext.form.TextField,  {
    /**
     * @cfg {String} buttonText The button text to display on the upload button (defaults to
     * 'Browse...').  Note that if you supply a value for {@link #buttonCfg}, the buttonCfg.text
     * value will be used instead if available.
     */
    buttonText: 'Browse...',
    /**
     * @cfg {Boolean} buttonOnly True to display the file upload field as a button with no visible
     * text field (defaults to false).  If true, all inherited TextField members will still be available.
     */
    buttonOnly: false,
    /**
     * @cfg {Number} buttonOffset The number of pixels of space reserved between the button and the text field
     * (defaults to 3).  Note that this only applies if {@link #buttonOnly} = false.
     */
    buttonOffset: 3,
    /**
     * @cfg {Object} buttonCfg A standard {@link Ext.Button} config object.
     */

    // private
    readOnly: true,
    
    /**
     * @hide 
     * @method autoSize
     */
    autoSize: Ext.emptyFn,
    
    // private
    initComponent: function(){
        Ext.form.FileUploadField.superclass.initComponent.call(this);
        
        this.addEvents(
            /**
             * @event fileselected
             * Fires when the underlying file input field's value has changed from the user
             * selecting a new file from the system file selection dialog.
             * @param {Ext.form.FileUploadField} this
             * @param {String} value The file value returned by the underlying file input field
             */
            'fileselected'
        );
    },
    
    // private
    onRender : function(ct, position){
        Ext.form.FileUploadField.superclass.onRender.call(this, ct, position);
        
        this.wrap = this.el.wrap({cls:'x-form-field-wrap x-form-file-wrap'});
        this.el.addClass('x-form-file-text');
        this.el.dom.removeAttribute('name');
        
        this.fileInput = this.wrap.createChild({
            id: this.getFileInputId(),
            name: this.name||this.getId(),
            cls: 'x-form-file',
            tag: 'input', 
            type: 'file',
            size: 1
        });
        
        var btnCfg = Ext.applyIf(this.buttonCfg || {}, {
            text: this.buttonText
        });
        this.button = new Ext.Button(Ext.apply(btnCfg, {
            renderTo: this.wrap,
            cls: 'x-form-file-btn' + (btnCfg.iconCls ? ' x-btn-icon' : '')
        }));
        
        if(this.buttonOnly){
            this.el.hide();
            this.wrap.setWidth(this.button.getEl().getWidth());
        }
        
        this.fileInput.on('change', function(){
            var v = this.fileInput.dom.value;
            this.setValue(v);
            this.fireEvent('fileselected', this, v);
        }, this);
    },
    
    // private
    getFileInputId: function(){
        return this.id+'-file';
    },
    
    // private
    onResize : function(w, h){
        Ext.form.FileUploadField.superclass.onResize.call(this, w, h);
        
        this.wrap.setWidth(w);
        
        if(!this.buttonOnly){
            var w = this.wrap.getWidth() - this.button.getEl().getWidth() - this.buttonOffset;
            this.el.setWidth(w);
        }
    },
    
    // private
    preFocus : Ext.emptyFn,
    
    // private
    getResizeEl : function(){
        return this.wrap;
    },

    // private
    getPositionEl : function(){
        return this.wrap;
    },

    // private
    alignErrorIcon : function(){
        this.errorIcon.alignTo(this.wrap, 'tl-tr', [2, 0]);
    }
    
});
Ext.reg('fileuploadfield', Ext.form.FileUploadField);/*
 * Ext JS Library 2.2
 * Copyright(c) 2006-2008, Ext JS, LLC.
 * licensing@extjs.com
 * 
 * http://extjs.com/license
 */

Ext.app.SearchField = Ext.extend(Ext.form.TwinTriggerField, {
	initComponent : function(){
		Ext.app.SearchField.superclass.initComponent.call(this);
		this.on('specialkey', function(f, e){
			if(e.getKey() == e.ENTER) this.onTrigger2Click();
		}, this);
	},

	validationEvent:false,
	validateOnBlur:false,
	trigger1Class:'x-form-clear-trigger',
	trigger2Class:'x-form-search-trigger',
	hideTrigger1:true,
	width:180,
	hasSearch : false,
	paramName : 'query',
	keyword   : '',

	onTrigger1Click : function(){
		_dump("Ext.app.SearchField.onTrigger1Click()");
		try{
			if(this.hasSearch){
				this.el.dom.value = '';
				this.keyword = '';

//				var treeCmp = Ext.getCmp('navigate-tree-panel');
//				var search_node = treeCmp.getNodeById('search');
//				if(!Ext.isEmpty(search_node)) search_node.remove();

				this.triggers[0].hide();
				this.hasSearch = false;
			}
		}catch(e){
			_dump("Ext.app.SearchField.onTrigger1Click():"+e);
		}
	},

	onTrigger2Click : function(){
		_dump("Ext.app.SearchField.onTrigger2Click()");
		try{
			var v = this.getRawValue();
			_dump("Ext.app.SearchField.onTrigger2Click():v.length=["+v.length+"]");
			if(v.length < 1){
				this.onTrigger1Click();
				return;
			}
			this.keyword = v;

			var urlOBj = Ext.urlDecode(_location.location.search.substr(1));
			urlOBj.node = 'search';
			urlOBj[this.paramName] = v;
			_location.location.search = Ext.urlEncode(urlOBj);

			this.hasSearch = true;
			this.triggers[0].show();
		}catch(e){
			_dump("Ext.app.SearchField.onTrigger2Click():"+e);
		}
	}
});/*
 * Ext JS Library 2.2
 * Copyright(c) 2006-2008, Ext JS, LLC.
 * licensing@extjs.com
 * 
 * http://extjs.com/license
 */

Ext.app.SearchFieldStore = Ext.extend(Ext.form.TwinTriggerField, {
	initComponent : function(){
		Ext.app.SearchField.superclass.initComponent.call(this);
		this.on('specialkey', function(f, e){
			if(e.getKey() == e.ENTER){
				this.onTrigger2Click();
			}
		}, this);
	},

	validationEvent:false,
	validateOnBlur:false,
	trigger1Class:'x-form-clear-trigger',
	trigger2Class:'x-form-search-trigger',
	hideTrigger1:true,
	width:180,
	hasSearch : false,
	paramName : 'query',
	pageSize : 20,

	onTrigger1Click : function(){
		_dump("Ext.app.SearchFieldStore.onTrigger1Click()");
		try{
			if(this.hasSearch){
				this.el.dom.value = '';
				var o = {start: 0};
				this.store.baseParams = this.store.baseParams || {};
				this.store.baseParams[this.paramName] = '';
				this.store.reload({params:o});
				this.triggers[0].hide();
				this.hasSearch = false;
			}
		}catch(e){
			_dump("Ext.app.SearchFieldStore.onTrigger1Click():"+e);
		}
	},

	onTrigger2Click : function(){
		_dump("Ext.app.SearchFieldStore.onTrigger2Click()");
		try{
			var v = this.getRawValue();
			_dump("Ext.app.SearchFieldStore.onTrigger2Click():v.length=["+v.length+"]");
			if(v.length < 1){
				this.onTrigger1Click();
				return;
			}
			var o = {start:0,limit:this.pageSize};
			this.store.baseParams = this.store.baseParams || {};
			this.store.baseParams[this.paramName] = v;
			this.store.reload({params:o});
			this.hasSearch = true;
			this.triggers[0].show();
		}catch(e){
			_dump("Ext.app.SearchFieldStore.onTrigger2Click():"+e);
		}
	}
});
/*
 * Ext JS Library 2.2
 * Copyright(c) 2006-2008, Ext JS, LLC.
 * licensing@extjs.com
 * 
 * http://extjs.com/license
 */

Ext.app.SearchFMAStore = Ext.extend(Ext.form.TwinTriggerField, {
	initComponent : function(){
		Ext.app.SearchField.superclass.initComponent.call(this);
		this.on('specialkey', function(f, e){
			if(e.getKey() == e.ENTER){
				this.onTrigger2Click();
			}
		}, this);
	},

	validationEvent:false,
	validateOnBlur:false,
	trigger1Class:'x-form-clear-trigger',
	trigger2Class:'x-form-search-trigger',
	hideTrigger1:true,
	width:180,
	hasSearch : false,
	paramName : 'query',
	pageSize : 20,

	onTrigger1Click : function(){
		_dump("Ext.app.SearchFMAStore.onTrigger1Click()");
		try{
			if(this.hasSearch){
				this.el.dom.value = '';
				var o = {start: 0};
				this.store.baseParams = this.store.baseParams || {};
				this.store.baseParams[this.paramName] = '';
				this.store.baseParams.node = '';
				this.store.reload({params:o});
				this.triggers[0].hide();
				this.hasSearch = false;
			}
		}catch(e){
			_dump("Ext.app.SearchFMAStore.onTrigger1Click():"+e);
		}
	},

	onTrigger2Click : function(){
		_dump("Ext.app.SearchFMAStore.onTrigger2Click()");
		try{
			var v = this.getRawValue();
			_dump("Ext.app.SearchFMAStore.onTrigger2Click():v.length=["+v.length+"]");
			if(v.length < 1){
				this.onTrigger1Click();
				return;
			}
			var o = {start:0,limit:this.pageSize};
			this.store.baseParams = this.store.baseParams || {};
			this.store.baseParams[this.paramName] = v;
			this.store.baseParams.node = 'search';
			this.store.reload({params:o});
			this.hasSearch = true;
			this.triggers[0].show();
		}catch(e){
			_dump("Ext.app.SearchFMAStore.onTrigger2Click():"+e);
		}
	}
});
/*
 * Ext JS Library 2.2
 * Copyright(c) 2006-2008, Ext JS, LLC.
 * licensing@extjs.com
 * 
 * http://extjs.com/license
 */

Ext.app.SearchFieldListeners = Ext.extend(Ext.form.TwinTriggerField, {
	initComponent : function(){
		Ext.app.SearchFieldListeners.superclass.initComponent.call(this);
		this.on('specialkey', function(f, e){
			if(e.getKey() == e.ENTER) this.onTrigger2Click();
		}, this);
	},

	validationEvent:false,
	validateOnBlur:false,
	trigger1Class:'x-form-clear-trigger',
	trigger2Class:'x-form-search-trigger',
	hideTrigger1:true,
	width:180,
	hasSearch : false,
	keyword   : '',

	onTrigger1Click : function(){
		if(this.hasSearch){
			this.el.dom.value = '';
			this.keyword = '';
			this.triggers[0].hide();
			this.hasSearch = false;
			this.fireEvent('clear',this);
		}
	},

	onTrigger2Click : function(){
		var v = this.getRawValue();
		if(v.length < 1){
			this.onTrigger1Click();
			return;
		}
		this.keyword = v;
		this.hasSearch = true;
		this.triggers[0].show();
		this.fireEvent('search',this,this.keyword);
	}
});/*
 * Ext JS Library 2.2
 * Copyright(c) 2006-2008, Ext JS, LLC.
 * licensing@extjs.com
 * 
 * http://extjs.com/license
 */

Ext.tree.ColumnTree = Ext.extend(Ext.tree.TreePanel, {
    lines:false,
    borderWidth: Ext.isBorderBox ? 0 : 2, // the combined left/right border for each cell
    cls:'x-column-tree',
    
    onRender : function(){
        Ext.tree.ColumnTree.superclass.onRender.apply(this, arguments);
        this.headers = this.body.createChild(
            {cls:'x-tree-headers'},this.innerCt.dom);

        var cols = this.columns, c;
        var totalWidth = 0;

        for(var i = 0, len = cols.length; i < len; i++){
             c = cols[i];
             totalWidth += c.width;
             this.headers.createChild({
                 cls:'x-tree-hd ' + (c.cls?c.cls+'-hd':''),
                 cn: {
                     cls:'x-tree-hd-text',
                     html: c.header
                 },
                 style:'width:'+(c.width-this.borderWidth)+'px;'
             });
        }
        this.headers.createChild({cls:'x-clear'});
        // prevent floats from wrapping when clipped
        this.headers.setWidth(totalWidth);
        this.innerCt.setWidth(totalWidth);
    }
});

Ext.tree.ColumnNodeUI = Ext.extend(Ext.tree.TreeNodeUI, {
    focus: Ext.emptyFn, // prevent odd scrolling behavior

    renderElements : function(n, a, targetNode, bulkRender){
        this.indentMarkup = n.parentNode ? n.parentNode.ui.getChildIndent() : '';

        var t = n.getOwnerTree();
        var cols = t.columns;
        var bw = t.borderWidth;
        var c = cols[0];

        var buf = [
             '<li class="x-tree-node"><div ext:tree-node-id="',n.id,'" class="x-tree-node-el x-tree-node-leaf ', a.cls,'">',
                '<div class="x-tree-col" style="width:',c.width-bw,'px;">',
                    '<span class="x-tree-node-indent">',this.indentMarkup,"</span>",
                    '<img src="', this.emptyIcon, '" class="x-tree-ec-icon x-tree-elbow">',
                    '<img src="', a.icon || this.emptyIcon, '" class="x-tree-node-icon',(a.icon ? " x-tree-node-inline-icon" : ""),(a.iconCls ? " "+a.iconCls : ""),'" unselectable="on">',
                    '<a hidefocus="on" class="x-tree-node-anchor" href="',a.href ? a.href : "#",'" tabIndex="1" ',
                    a.hrefTarget ? ' target="'+a.hrefTarget+'"' : "", '>',
                    '<span unselectable="on">', n.text || (c.renderer ? c.renderer(a[c.dataIndex], n, a) : a[c.dataIndex]),"</span></a>",
                "</div>"];
         for(var i = 1, len = cols.length; i < len; i++){
             c = cols[i];

             buf.push('<div class="x-tree-col ',(c.cls?c.cls:''),'" style="width:',c.width-bw,'px;">',
                        '<div class="x-tree-col-text">',(c.renderer ? c.renderer(a[c.dataIndex], n, a) : a[c.dataIndex]),"</div>",
                      "</div>");
         }
         buf.push(
            '<div class="x-clear"></div></div>',
            '<ul class="x-tree-node-ct" style="display:none;"></ul>',
            "</li>");

        if(bulkRender !== true && n.nextSibling && n.nextSibling.ui.getEl()){
            this.wrap = Ext.DomHelper.insertHtml("beforeBegin",
                                n.nextSibling.ui.getEl(), buf.join(""));
        }else{
            this.wrap = Ext.DomHelper.insertHtml("beforeEnd", targetNode, buf.join(""));
        }

        this.elNode = this.wrap.childNodes[0];
        this.ctNode = this.wrap.childNodes[1];
        var cs = this.elNode.firstChild.childNodes;
        this.indentNode = cs[0];
        this.ecNode = cs[1];
        this.iconNode = cs[2];
        this.anchor = cs[3];
        this.textNode = cs[3].firstChild;
    }
});/*
 * Ext JS Library 2.2
 * Copyright(c) 2006-2008, Ext JS, LLC.
 * licensing@extjs.com
 * 
 * http://extjs.com/license
 */


// We are adding these custom layouts to a namespace that does not
// exist by default in Ext, so we have to add the namespace first:
Ext.ns('Ext.ux.layout');

/*
 * ================  CenterLayout  =======================
 */
/**
 * @class Ext.ux.layout.CenterLayout
 * @extends Ext.layout.FitLayout
 * <p>This is a very simple layout style used to center contents within a container.  This layout works within
 * nested containers and can also be used as expected as a Viewport layout to center the page layout.</p>
 * <p>As a subclass of FitLayout, CenterLayout expects to have a single child panel of the container that uses 
 * the layout.  The layout does not require any config options, although the child panel contained within the
 * layout must provide a fixed or percentage width.  The child panel's height will fit to the container by
 * default, but you can specify <tt>autoHeight:true</tt> to allow it to autosize based on its content height.  
 * Example usage:</p> 
 * <pre><code>
// The content panel is centered in the container
var p = new Ext.Panel({
    title: 'Center Layout',
    layout: 'ux.center',
    items: [{
        title: 'Centered Content',
        width: '75%',
        html: 'Some content'
    }]
});

// If you leave the title blank and specify no border
// you'll create a non-visual, structural panel just
// for centering the contents in the main container.
var p = new Ext.Panel({
    layout: 'ux.center',
    border: false,
    items: [{
        title: 'Centered Content',
        width: 300,
        autoHeight: true,
        html: 'Some content'
    }]
});
</code></pre>
 */
Ext.ux.layout.CenterLayout = Ext.extend(Ext.layout.FitLayout, {
	// private
    setItemSize : function(item, size){
        this.container.addClass('ux-layout-center');
        item.addClass('ux-layout-center-item');
        if(item && size.height > 0){
            if(item.width){
                size.width = item.width;
            }
            item.setSize(size);
        }
    }
});
Ext.Container.LAYOUTS['ux.center'] = Ext.ux.layout.CenterLayout;

/*
 * CenterLayout demo panel
 */
var centerLayout = {
	id: 'center-panel',
    layout:'ux.center',
    items: {
        title: 'Centered Panel: 75% of container width and fit height',
        layout: 'ux.center',
        autoScroll: true,
        width: '75%',
        bodyStyle: 'padding:20px 0;',
        items: [{
        	title: 'Inner Centered Panel',
        	html: 'Fixed 300px wide and auto height. The container panel will also autoscroll if narrower than 300px.',
        	width: 300,
        	frame: true,
        	autoHeight: true,
        	bodyStyle: 'padding:10px 20px;'
        }]
    }
};

/*
 * ================  RowLayout  =======================
 */
/**
 * @class Ext.ux.layout.RowLayout
 * @extends Ext.layout.ContainerLayout
 * <p>This is the layout style of choice for creating structural layouts in a multi-row format where the height of
 * each row can be specified as a percentage or fixed height.  Row widths can also be fixed, percentage or auto.
 * This class is intended to be extended or created via the layout:'ux.row' {@link Ext.Container#layout} config,
 * and should generally not need to be created directly via the new keyword.</p>
 * <p>RowLayout does not have any direct config options (other than inherited ones), but it does support a
 * specific config property of <b><tt>rowHeight</tt></b> that can be included in the config of any panel added to it.  The
 * layout will use the rowHeight (if present) or height of each panel during layout to determine how to size each panel.
 * If height or rowHeight is not specified for a given panel, its height will default to the panel's height (or auto).</p>
 * <p>The height property is always evaluated as pixels, and must be a number greater than or equal to 1.
 * The rowHeight property is always evaluated as a percentage, and must be a decimal value greater than 0 and
 * less than 1 (e.g., .25).</p>
 * <p>The basic rules for specifying row heights are pretty simple.  The logic makes two passes through the
 * set of contained panels.  During the first layout pass, all panels that either have a fixed height or none
 * specified (auto) are skipped, but their heights are subtracted from the overall container height.  During the second
 * pass, all panels with rowHeights are assigned pixel heights in proportion to their percentages based on
 * the total <b>remaining</b> container height.  In other words, percentage height panels are designed to fill the space
 * left over by all the fixed-height and/or auto-height panels.  Because of this, while you can specify any number of rows
 * with different percentages, the rowHeights must always add up to 1 (or 100%) when added together, otherwise your
 * layout may not render as expected.  Example usage:</p>
 * <pre><code>
// All rows are percentages -- they must add up to 1
var p = new Ext.Panel({
    title: 'Row Layout - Percentage Only',
    layout:'ux.row',
    items: [{
        title: 'Row 1',
        rowHeight: .25 
    },{
        title: 'Row 2',
        rowHeight: .6
    },{
        title: 'Row 3',
        rowHeight: .15
    }]
});

// Mix of height and rowHeight -- all rowHeight values must add
// up to 1. The first row will take up exactly 120px, and the last two
// rows will fill the remaining container height.
var p = new Ext.Panel({
    title: 'Row Layout - Mixed',
    layout:'ux.row',
    items: [{
        title: 'Row 1',
        height: 120,
        // standard panel widths are still supported too:
        width: '50%' // or 200
    },{
        title: 'Row 2',
        rowHeight: .8,
        width: 300
    },{
        title: 'Row 3',
        rowHeight: .2
    }]
});
</code></pre>
 */
Ext.ux.layout.RowLayout = Ext.extend(Ext.layout.ContainerLayout, {
    // private
    monitorResize:true,

    // private
    isValidParent : function(c, target){
        return c.getEl().dom.parentNode == this.innerCt.dom;
    },

    // private
    onLayout : function(ct, target){
        var rs = ct.items.items, len = rs.length, r, i;

        if(!this.innerCt){
            target.addClass('ux-row-layout-ct');
            this.innerCt = target.createChild({cls:'x-row-inner'});
        }
        this.renderAll(ct, this.innerCt);

        var size = target.getViewSize();

        if(size.width < 1 && size.height < 1){ // display none?
            return;
        }

        var h = size.height - target.getPadding('tb'),
            ph = h;

        this.innerCt.setSize({height:h});
        
        // some rows can be percentages while others are fixed
        // so we need to make 2 passes
        
        for(i = 0; i < len; i++){
            r = rs[i];
            if(!r.rowHeight){
                ph -= (r.getSize().height + r.getEl().getMargins('tb'));
            }
        }

        ph = ph < 0 ? 0 : ph;

        for(i = 0; i < len; i++){
            r = rs[i];
            if(r.rowHeight){
                r.setSize({height: Math.floor(r.rowHeight*ph) - r.getEl().getMargins('tb')});
            }
        }
    }
    
    /**
     * @property activeItem
     * @hide
     */
});
Ext.Container.LAYOUTS['ux.row'] = Ext.ux.layout.RowLayout;

/*
 * RowLayout demo panel
 */
var rowLayout = {
	id: 'row-panel',
	bodyStyle: 'padding:5px',
	layout: 'ux.row',
    title: 'Row Layout',
    items: [{
        title: 'Height = 25%, Width = 50%',
        rowHeight: .25,
        width: '50%'
    },{
        title: 'Height = 100px, Width = 300px',
        height: 100,
        width: 300
    },{
    	title: 'Height = 75%, Width = fit',
    	rowHeight: .75
    }]
};

/*
 * Ext JS Library 2.2
 * Copyright(c) 2006-2008, Ext JS, LLC.
 * licensing@extjs.com
 * 
 * http://extjs.com/license
 */

// some data used in the examples
Ext.namespace('Ext.exampledata');

Ext.exampledata.states = [
        ['AL', 'Alabama', 'The Heart of Dixie'],
        ['AK', 'Alaska', 'The Land of the Midnight Sun'],
        ['AZ', 'Arizona', 'The Grand Canyon State'],
        ['AR', 'Arkansas', 'The Natural State'],
        ['CA', 'California', 'The Golden State'],
        ['CO', 'Colorado', 'The Mountain State'],
        ['CT', 'Connecticut', 'The Constitution State'],
        ['DE', 'Delaware', 'The First State'],
        ['DC', 'District of Columbia', "The Nation's Capital"],
        ['FL', 'Florida', 'The Sunshine State'],
        ['GA', 'Georgia', 'The Peach State'],
        ['HI', 'Hawaii', 'The Aloha State'],
        ['ID', 'Idaho', 'Famous Potatoes'],
        ['IL', 'Illinois', 'The Prairie State'],
        ['IN', 'Indiana', 'The Hospitality State'],
        ['IA', 'Iowa', 'The Corn State'],
        ['KS', 'Kansas', 'The Sunflower State'],
        ['KY', 'Kentucky', 'The Bluegrass State'],
        ['LA', 'Louisiana', 'The Bayou State'],
        ['ME', 'Maine', 'The Pine Tree State'],
        ['MD', 'Maryland', 'Chesapeake State'],
        ['MA', 'Massachusetts', 'The Spirit of America'],
        ['MI', 'Michigan', 'Great Lakes State'],
        ['MN', 'Minnesota', 'North Star State'],
        ['MS', 'Mississippi', 'Magnolia State'],
        ['MO', 'Missouri', 'Show Me State'],
        ['MT', 'Montana', 'Big Sky Country'],
        ['NE', 'Nebraska', 'Beef State'],
        ['NV', 'Nevada', 'Silver State'],
        ['NH', 'New Hampshire', 'Granite State'],
        ['NJ', 'New Jersey', 'Garden State'],
        ['NM', 'New Mexico', 'Land of Enchantment'],
        ['NY', 'New York', 'Empire State'],
        ['NC', 'North Carolina', 'First in Freedom'],
        ['ND', 'North Dakota', 'Peace Garden State'],
        ['OH', 'Ohio', 'The Heart of it All'],
        ['OK', 'Oklahoma', 'Oklahoma is OK'],
        ['OR', 'Oregon', 'Pacific Wonderland'],
        ['PA', 'Pennsylvania', 'Keystone State'],
        ['RI', 'Rhode Island', 'Ocean State'],
        ['SC', 'South Carolina', 'Nothing Could be Finer'],
        ['SD', 'South Dakota', 'Great Faces, Great Places'],
        ['TN', 'Tennessee', 'Volunteer State'],
        ['TX', 'Texas', 'Lone Star State'],
        ['UT', 'Utah', 'Salt Lake State'],
        ['VT', 'Vermont', 'Green Mountain State'],
        ['VA', 'Virginia', 'Mother of States'],
        ['WA', 'Washington', 'Green Tree State'],
        ['WV', 'West Virginia', 'Mountain State'],
        ['WI', 'Wisconsin', "America's Dairyland"],
        ['WY', 'Wyoming', 'Like No Place on Earth']
    ];/*
 * Ext JS Library 2.2
 * Copyright(c) 2006-2008, Ext JS, LLC.
 * licensing@extjs.com
 * 
 * http://extjs.com/license
 */


Ext.DataView.LabelEditor = function(cfg, field){
    Ext.DataView.LabelEditor.superclass.constructor.call(this,
        field || new Ext.form.TextField({
            allowBlank: false,
            growMin:90,
            growMax:240,
            grow:true,
            selectOnFocus:true
        }), cfg
    );
}

Ext.extend(Ext.DataView.LabelEditor, Ext.Editor, {
    alignment: "tl-tl",
    hideEl : false,
    cls: "x-small-editor",
    shim: false,
    completeOnEnter: true,
    cancelOnEsc: true,
    labelSelector: 'span.x-editable',

    init : function(view){
        this.view = view;
        view.on('render', this.initEditor, this);
        this.on('complete', this.onSave, this);
    },

    initEditor : function(){
        this.view.getEl().on('mousedown', this.onMouseDown, this, {delegate: this.labelSelector});
    },

    onMouseDown : function(e, target){
        if(!e.ctrlKey && !e.shiftKey){
            var item = this.view.findItemFromChild(target);
            e.stopEvent();
            var record = this.view.store.getAt(this.view.indexOf(item));
            this.startEdit(target, record.data[this.dataIndex]);
            this.activeRecord = record;
        }else{
            e.preventDefault();
        }
    },

    onSave : function(ed, value){
        this.activeRecord.set(this.dataIndex, value);
    }
});


Ext.DataView.DragSelector = function(cfg){
    cfg = cfg || {};
    var view, regions, proxy, tracker;
    var rs, bodyRegion, dragRegion = new Ext.lib.Region(0,0,0,0);
    var dragSafe = cfg.dragSafe === true;

    this.init = function(dataView){
        view = dataView;
        view.on('render', onRender);
    };

    function fillRegions(){
        rs = [];
        view.all.each(function(el){
            rs[rs.length] = el.getRegion();
        });
        bodyRegion = view.el.getRegion();
    }

    function cancelClick(){
        return false;
    }

    function onBeforeStart(e){
        return !dragSafe || e.target == view.el.dom;
    }

    function onStart(e){
        view.on('containerclick', cancelClick, view, {single:true});
        if(!proxy){
            proxy = view.el.createChild({cls:'x-view-selector'});
        }else{
            proxy.setDisplayed('block');
        }
        fillRegions();
        view.clearSelections();
    }

    function onDrag(e){
        var startXY = tracker.startXY;
        var xy = tracker.getXY();

        var x = Math.min(startXY[0], xy[0]);
        var y = Math.min(startXY[1], xy[1]);
        var w = Math.abs(startXY[0] - xy[0]);
        var h = Math.abs(startXY[1] - xy[1]);

        dragRegion.left = x;
        dragRegion.top = y;
        dragRegion.right = x+w;
        dragRegion.bottom = y+h;

        dragRegion.constrainTo(bodyRegion);
        proxy.setRegion(dragRegion);

        for(var i = 0, len = rs.length; i < len; i++){
            var r = rs[i], sel = dragRegion.intersect(r);
            if(sel && !r.selected){
                r.selected = true;
                view.select(i, true);
            }else if(!sel && r.selected){
                r.selected = false;
                view.deselect(i);
            }
        }
    }

    function onEnd(e){
        if(proxy){
            proxy.setDisplayed(false);
        }
    }

    function onRender(view){
        tracker = new Ext.dd.DragTracker({
            onBeforeStart: onBeforeStart,
            onStart: onStart,
            onDrag: onDrag,
            onEnd: onEnd
        });
        tracker.initEl(view.el);
    }
};// Create user extensions namespace (Ext.ux)
Ext.namespace('Ext.ux');

/**
 * Ext.ux.ColorPicker Extension Class for ExtJs 2.0
 *
 * @author Amon
 * @version 2.0
 *
 * Webpage: http://colorpicker.theba.hu
 *
 * @class Ext.ux.ColorPicker
 * @extends Ext.util.Observable
 * @constructor
 * Creates new ColorPicker
 * @param {Object} config Config Object
 * @cfg {Boolean} hidePanel true to hide the inputs (defaults to false)
 * @cfg {Boolean/Object} animate Moving pickers with this animate or false to no animation (defaults to false)
 * @cfg {Object} rgb (optional) Add initial color with rgb format eg.: { r:255, g:128, b:10 }
 * @cfg {Object} hsv (optional) Add initial color with hsv format eg.: { h:100, s:60, v:50 }
 * @cfg {String} color (optional) Add initial color with hexa format eg.: 'A3CF6D'
 * @cfg {Object} pickerHotPoint (optional) If you change the picker image, you can change the point of pick. ( defaults to { x:3, y:3 } )
 * @cfg {Object} captions labels of inputs (defaults to { red: 'R', green: 'G', blue: 'B', hue: 'H°', saturation: 'S%', brightness: 'V%', hexa: 'Color', websafe: 'Websafe' })
 */
Ext.ux.ColorPicker = function( config ) {
	config.bodyStyle = {'padding':'3px'};
	Ext.ux.ColorPicker.superclass.constructor.call( this, config );
	this.initialize( config );
}
// extend Ext.ux.ColorPicker with Ext.util.Observable
Ext.extend(Ext.ux.ColorPicker, Ext.util.Observable, {

	// help for convert hexa
	HCHARS: '0123456789ABCDEF',

	// initialization
	initialize: function( config ) {
		this.events = {};
		this.config = this.config || config;
		this.config.captions = this.config.captions || {};
		this.config.pickerHotPoint = this.config.pickerHotPoint || { x:3, y:3 };
		this._HSV = { h: 0, s: 100, v: 100 };
		this._RGB = { r: 255, g: 255, b: 255 };
		this._HEX = '000000';
		this.lastXYRgb = { x: 0, y: 0 };
		this.lastYHue = 0;
		this.domElement = this.config.renderTo || Ext.DomHelper.append( document.body, {}, true );
		this.domElement = Ext.get( this.domElement );//add tyamamot
		this.domElement.addClass( 'x-cp-panel' );
		this.cpCreateDomObjects();
		if( this.config.hidePanel ) { this.formContainer.hide(); }
		// init internal events
		this.rgbPicker.on( 'mousedown', this.rgbPickerClick.createDelegate( this ), this );
		this.huePicker.on( 'mousedown', this.huePickerClick.createDelegate( this ), this );
		this.wsColorContainer.on( 'mousedown', this.setColorFromWebsafe.createDelegate( this ), this );
		this.inColorContainer.on( 'mousedown', this.setColorFromInvert.createDelegate( this ), this );
		Ext.getCmp( 'redValue' + this.domElement.id ).on( 'change', this.changeRGBField.createDelegate( this ) );
		Ext.getCmp( 'greenValue' + this.domElement.id ).on( 'change', this.changeRGBField.createDelegate( this ) );
		Ext.getCmp( 'blueValue' + this.domElement.id ).on( 'change', this.changeRGBField.createDelegate( this ) );
		Ext.getCmp( 'hueValue' + this.domElement.id ).on( 'change', this.changeHSVField.createDelegate( this ) );
		Ext.getCmp( 'saturationValue' + this.domElement.id ).on( 'change', this.changeHSVField.createDelegate( this ) );
		Ext.getCmp( 'brightnessValue' + this.domElement.id ).on( 'change', this.changeHSVField.createDelegate( this ) );
		Ext.getCmp( 'colorValue' + this.domElement.id ).on( 'change', this.changeHexaField.createDelegate( this ) );

		Ext.getCmp( 'redValue' + this.domElement.id ).on( 'specialkey', this.changeRGBField.createDelegate( this ) );
		Ext.getCmp( 'greenValue' + this.domElement.id ).on( 'specialkey', this.changeRGBField.createDelegate( this ) );
		Ext.getCmp( 'blueValue' + this.domElement.id ).on( 'specialkey', this.changeRGBField.createDelegate( this ) );
		Ext.getCmp( 'hueValue' + this.domElement.id ).on( 'specialkey', this.changeHSVField.createDelegate( this ) );
		Ext.getCmp( 'saturationValue' + this.domElement.id ).on( 'specialkey', this.changeHSVField.createDelegate( this ) );
		Ext.getCmp( 'brightnessValue' + this.domElement.id ).on( 'specialkey', this.changeHSVField.createDelegate( this ) );
		Ext.getCmp( 'colorValue' + this.domElement.id ).on( 'specialkey', this.changeHexaField.createDelegate( this ) );
		// initial color check
		this.checkConfig();
		// register events
		this.addEvents({
			/**
			 * @event pickcolor
			 * Fires when a new color selected
			 * @param {Ext.util.ColorPicker} this
			 * @param {String} color
			 */
			pickcolor: true,
			/**
			 * @event changergb
			 * Fires when change rgb input
			 * @param {Ext.util.ColorPicker} this
			 * @param {Object} color ({ r: redvalue, g: greenvalue, b: bluevalue })
			 */
			changergb: true,
			/**
			 * @event changehsv
			 * Fires when change hsv input
			 * @param {Ext.util.ColorPicker} this
			 * @param {Object} color ({ h: huevalue, s: saturationvalue, v: brightnessvalue })
			 */
			changehsv: true,
			/**
			 * @event changehexa
			 * Fires when change hexa input
			 * @param {Ext.util.ColorPicker} this
			 * @param {String} color
			 */
			changehexa: true
		});
	},
	// create internal DOM objects
	cpCreateDomObjects: function() {
		this.rgbPicker = Ext.DomHelper.append( this.domElement, {
			tag: 'div',
			cls: 'x-cp-rgb-msk'
		}, true );
		this.rgbPointer = Ext.DomHelper.append( this.rgbPicker, {
			tag: 'div',
			cls: 'x-cp-rgb-picker'
		}, true );
		this.rgbPointer.setXY( [ this.rgbPicker.getLeft()-this.config.pickerHotPoint.x, this.rgbPicker.getTop()-this.config.pickerHotPoint.y ] );
		this.huePicker = Ext.DomHelper.append( this.domElement, {
			tag: 'div',
			cls: 'x-cp-hue-msk'
		}, true );
		this.huePointer = Ext.DomHelper.append( this.huePicker, {
			tag: 'div',
			cls: 'x-cp-hue-picker'
		}, true );
		this.huePointer.setXY( [ this.huePicker.getLeft()+(this.huePointer.getWidth() / 2)+1, this.huePicker.getTop()-this.config.pickerHotPoint.y ] );
		this.formContainer = Ext.DomHelper.append( Ext.DomHelper.append( this.domElement, {
			tag: 'div',
			cls: 'x-cp-control-container x-unselectable'
		}, true ), {
			tag: 'div',
			cls: 'x-cp-rgb-container x-unselectable',
			style: 'clear:both'
		}, true );
		this.colorContainer = Ext.DomHelper.append( this.formContainer, {
			cls: 'x-cp-coloro-container x-unselectable'
		}, true ).update( this.config.captions.color || 'Color' );
		this.form = new Ext.FormPanel({
			frame:true,
			autoWidth: true,
//			width: 100,
//			height: 227,
			height: 235,
			cls: 'x-cp-form',
			labelWidth : 28,
			labelAlign : 'left',
			defaults : {
				xtype:'fieldset',
				autoHeight:true,
				defaultType: 'numberfield',
				labelWidth : 28
			},
			items: [{
				title: 'RGB',
				items :[{
					fieldLabel: 'Red',
					id: 'redValue' + this.domElement.id
				},{
					fieldLabel: 'Green',
					id: 'greenValue' + this.domElement.id
				},{
					fieldLabel: 'Blue',
					id: 'blueValue' + this.domElement.id
				}]
			},{
				title: 'HSV',
				items :[{
					fieldLabel: 'Hue',
					id: 'hueValue' + this.domElement.id
				},{
					fieldLabel: 'Satur.',
					id: 'saturationValue' + this.domElement.id
				},{
					fieldLabel: 'Bright.',
					id: 'brightnessValue' + this.domElement.id
				}]
			},{
				title: 'Color',
				items :[{
					xtype: 'textfield',
					fieldLabel: 'Color',
					id: 'colorValue' + this.domElement.id
				}]
			}]
		});

		this.form.render(this.formContainer);
		var temp = Ext.DomHelper.append( this.form.body, {
			cls: 'x-cp-colors-container x-unselectable'
		}, true);
		this.wsColorContainer = Ext.DomHelper.append( temp, {
			cls: 'x-cp-color-container x-unselectable'
		}, true ).update( this.config.captions.websafe || 'Websafe' );
		this.inColorContainer = Ext.DomHelper.append( temp, {
			cls: 'x-cp-color-container x-unselectable'
		}, true ).update( this.config.captions.inverse || 'Inverse' );
		Ext.DomHelper.append( temp, { tag: 'div', style: 'height:0px;border:none;clear:both;font-size:1px;' });
		this.form.render( this.formContainer );
		Ext.DomHelper.append( this.domElement, { tag: 'div', style: 'height:0px;border:none;clear:both;font-size:1px;' });
	},
	/**
	 * Convert a float to decimal
	 * @param {Float} n
	 * @return {Integer}
	 */
	realToDec: function( n ) {
		return Math.min( 255, Math.round( n * 256 ) );
	},
	/**
	 * Convert HSV color format to RGB color format
	 * @param {Integer/Array( h, s, v )} h
	 * @param {Integer} s (optional)
	 * @param {Integer} v (optional)
	 * @return {Array}
	 */
	hsvToRgb: function( h, s, v ) {
		if( h instanceof Array ) { return this.hsvToRgb.call( this, h[0], h[1], h[2] ); }
		var r, g, b, i, f, p, q, t;
		i = Math.floor( ( h / 60 ) % 6 );
		f = ( h / 60 ) - i;
		p = v * ( 1 - s );
		q = v * ( 1 - f * s );
		t = v * ( 1 - ( 1 - f ) * s );
		switch(i) {
			case 0: r=v; g=t; b=p; break;
			case 1: r=q; g=v; b=p; break;
			case 2: r=p; g=v; b=t; break;
			case 3: r=p; g=q; b=v; break;
			case 4: r=t; g=p; b=v; break;
			case 5: r=v; g=p; b=q; break;
		}
		return [this.realToDec( r ), this.realToDec( g ), this.realToDec( b )];
	},
	/**
	 * Convert RGB color format to HSV color format
	 * @param {Integer/Array( r, g, b )} r
	 * @param {Integer} g (optional)
	 * @param {Integer} b (optional)
	 * @return {Array}
	 */
	rgbToHsv: function( r, g, b ) {
		if( r instanceof Array ) { return this.rgbToHsv.call( this, r[0], r[1], r[2] ); }
		r = r / 255;
		g = g / 255;
		b = b / 255;
		var min, max, delta, h, s, v;
		min = Math.min( Math.min( r, g ), b );
		max = Math.max( Math.max( r, g ), b );
		delta = max - min;
		switch (max) {
			case min:
				h = 0;
				break;
			case r:
				h = 60 * ( g - b ) / delta;
				if ( g < b ) { h += 360; }
				break;
			case g:
				h = ( 60 * ( b - r ) / delta ) + 120;
				break;
			case b:
				h = ( 60 * ( r - g ) / delta ) + 240;
				break;
		}
		s = ( max === 0 ) ? 0 : 1 - ( min / max );
		return [Math.round( h ), s, max];
	},
	/**
	 * Convert RGB color format to Hexa color format
	 * @param {Integer/Array( r, g, b )} r
	 * @param {Integer} g (optional)
	 * @param {Integer} b (optional)
	 * @return {String}
	 */
	rgbToHex: function( r, g, b ) {
		if( r instanceof Array ) { return this.rgbToHex.call( this, r[0], r[1], r[2] ); }
		return this.decToHex( r ) + this.decToHex( g ) + this.decToHex( b );
	},
	/**
	 * Convert an integer to hexa
	 * @param {Integer} n
	 * @return {String}
	 */
	decToHex: function( n ) {
		n = parseInt(n, 10);
		n = ( !isNaN( n )) ? n : 0;
		n = (n > 255 || n < 0) ? 0 : n;
		return this.HCHARS.charAt( ( n - n % 16 ) / 16 ) + this.HCHARS.charAt( n % 16 );
	},
	/**
	 * Return with position of a character in this.HCHARS string
	 * @private
	 * @param {Char} c
	 * @return {Integer}
	 */
	getHCharPos: function( c ) {
		return this.HCHARS.indexOf( c.toUpperCase() );
	},
	/**
	 * Convert a hexa string to decimal
	 * @param {String} hex
	 * @return {Integer}
	 */
	hexToDec: function( hex ) {
		var s = hex.split('');
		return ( ( this.getHCharPos( s[0] ) * 16 ) + this.getHCharPos( s[1] ) );
	},
	/**
	 * Convert a hexa string to RGB color format
	 * @param {String} hex
	 * @return {Array}
	 */
	hexToRgb: function( hex ) {
		return [ this.hexToDec( hex.substr(0, 2) ), this.hexToDec( hex.substr(2, 2) ), this.hexToDec( hex.substr(4, 2) ) ];
	},
	/**
	 * Not documented yet
	 */
	checkSafeNumber: function( v ) {
		if ( !isNaN( v ) ) {
			v = Math.min( Math.max( 0, v ), 255 );
			var i, next;
			for( i=0; i<256; i=i+51 ) {
				next = i + 51;
				if ( v>=i && v<=next ) { return ( v - i > 25 ) ? next : i; }
			}
		}
		return v;
	},
	/**
	 * Not documented yet
	 */
	websafe: function( r, g, b ) {
		if( r instanceof Array ) { return this.websafe.call( this, r[0], r[1], r[2] ); }
		return [this.checkSafeNumber( r ), this.checkSafeNumber( g ), this.checkSafeNumber( b )];
	},
	/**
	 * Not documented yet
	 */
	invert: function( r, g, b ) {
		if( r instanceof Array ) { return this.invert.call( this, r[0], r[1], r[2] ); }
		return [255-r,255-g,255-b];
	},
	/**
	 * Convert Y coordinate to HUE value
	 * @private
	 * @param {Integer} y
	 * @return {Integer}
	 */
	getHue: function( y ) {
		var hue = 360 - Math.round( ( ( this.huePicker.getHeight() - y ) / this.huePicker.getHeight() ) * 360 );
		return hue === 360 ? 0 : hue;
	},
	/**
	 * Convert HUE value to Y coordinate
	 * @private
	 * @param {Integer} hue
	 * @return {Integer}
	 */
	getHPos: function( hue ) {
		//return this.huePicker.getHeight() - ( ( hue * this.huePicker.getHeight() ) / 360 );
		return hue * ( this.huePicker.getHeight() / 360 );
	},
	/**
	 * Convert X coordinate to Saturation value
	 * @private
	 * @param {Integer} x
	 * @return {Integer}
	 */
	getSaturation: function( x ) {
		return x / this.rgbPicker.getWidth();
	},
	/**
	 * Convert Saturation value to Y coordinate
	 * @private
	 * @param {Integer} saturation
	 * @return {Integer}
	 */
	getSPos: function( saturation ) {
		return saturation * this.rgbPicker.getWidth();
	},
	/**
	 * Convert Y coordinate to Brightness value
	 * @private
	 * @param {Integer} y
	 * @return {Integer}
	 */
	getValue: function( y ) {
		return ( this.rgbPicker.getHeight() - y ) / this.rgbPicker.getHeight();
	},
	/**
	 * Convert Brightness value to Y coordinate
	 * @private
	 * @param {Integer} value
	 * @return {Integer}
	 */
	getVPos: function( value ) {
		return this.rgbPicker.getHeight() - ( value * this.rgbPicker.getHeight() );
	},
	/**
	 * Update colors from the position of picker
	 */
	updateColorsFromRGBPicker: function() {
		this._HSV = { h: this._HSV.h, s: this.getSaturation( this.lastXYRgb.x ), v: this.getValue( this.lastXYRgb.y ) };
	},
	/**
	 * Update colors from the position of HUE picker
	 */
	updateColorsFromHUEPicker: function() {
		this._HSV.h = this.getHue( this.lastYHue );
		var temp = this.hsvToRgb( this._HSV.h, 1, 1 );
		temp =  this.rgbToHex( temp[0], temp[1], temp[2] );
		this.rgbPicker.setStyle( { backgroundColor: '#' + temp } );
	},
	/**
	 * Update colors from RGB input fields
	 */
	updateColorsFromRGBFields: function() {
		var temp = this.rgbToHsv( Ext.getCmp( 'redValue' + this.domElement.id ).getValue(), Ext.getCmp( 'greenValue' + this.domElement.id ).getValue(), Ext.getCmp( 'blueValue' + this.domElement.id ).getValue() );
		this._HSV = { h: temp[0], s: temp[1], v: temp[2] };
	},
	/**
	 * Update colors from HEXA input fields
	 */
	updateColorsFromHexaField: function() {
		var temp = this.hexToRgb( this._HEX );
		this._RGB = { r: temp[0], g: temp[1], b: temp[2] };
		temp = this.rgbToHsv( temp[0], temp[1], temp[2] );
		this._HSV = { h: temp[0], s: temp[1], v: temp[2] };
	},
	/**
	 * Update colors from HSV input fields
	 */
	updateColorsFromHSVFields: function() {
		var temp = this.hsvToRgb( this._HSV.h, this._HSV.s, this._HSV.v );
		this._RGB = { r: temp[0], g: temp[1], b: temp[2] };
	},
	/**
	 * Update RGB color from HSV color
	 */
	updateRGBFromHSV: function() {
		var temp = this.hsvToRgb( this._HSV.h, this._HSV.s, this._HSV.v );
		this._RGB = { r: temp[0], g: temp[1], b: temp[2] };
	},
	/**
	 * Update all inputs from internal color
	 */
	updateInputFields: function() {
		Ext.getCmp( 'redValue' + this.domElement.id ).setValue( this._RGB.r );
		Ext.getCmp( 'greenValue' + this.domElement.id ).setValue( this._RGB.g );
		Ext.getCmp( 'blueValue' + this.domElement.id ).setValue( this._RGB.b );
		Ext.getCmp( 'hueValue' + this.domElement.id ).setValue( this._HSV.h );
		Ext.getCmp( 'saturationValue' + this.domElement.id ).setValue( Math.round( this._HSV.s * 100 ) );
		Ext.getCmp( 'brightnessValue' + this.domElement.id ).setValue( Math.round( this._HSV.v * 100 ) );
		Ext.getCmp( 'colorValue' + this.domElement.id ).setValue( this._HEX );
	},
	/**
	 * Update color container
	 */
	updateColor: function() {
		// update hexa
		this._HEX = this.rgbToHex( this._RGB.r, this._RGB.g, this._RGB.b );
		// update color container
		this.colorContainer.setStyle( { backgroundColor: '#'+this._HEX } );
		this.colorContainer.set({ title: '#'+this._HEX });
		// update websafe color
		var temp = this.rgbToHex( this.websafe( this._RGB.r, this._RGB.g, this._RGB.b ) );
		this.wsColorContainer.setStyle( { backgroundColor: '#'+temp } );
		this.wsColorContainer.set({ title: '#'+temp });
		this.wsColorContainer.setStyle( { color: '#'+this.rgbToHex( this.invert( this.websafe( this._RGB.r, this._RGB.g, this._RGB.b ) ) ) } );
		// update invert color
		var temp = this.rgbToHex( this.invert( this._RGB.r, this._RGB.g, this._RGB.b ) );
		this.inColorContainer.setStyle( { backgroundColor: '#'+temp } );
		this.inColorContainer.setStyle( { color: '#'+this._HEX } );
		this.inColorContainer.set({ title: '#'+temp });
		this.colorContainer.setStyle( { color: '#'+temp } );
		// update input boxes
		this.updateInputFields();
		// fire the pickcolor event
		this.fireEvent( 'pickcolor', this, this._HEX );
	},
	/**
	 * Update position of both picker from the internal color
	 */
	updatePickers: function() {
		this.lastXYRgb = { x: this.getSPos( this._HSV.s ), y: this.getVPos( this._HSV.v ) };
		this.rgbPointer.setXY( [this.lastXYRgb.x-this.config.pickerHotPoint.x + this.rgbPicker.getLeft(), this.lastXYRgb.y-this.config.pickerHotPoint.y+this.rgbPicker.getTop()], this.config.animate );
		this.lastYHue = this.getHPos( this._HSV.h );
		this.huePointer.setXY( [this.huePicker.getLeft()+(this.huePointer.getWidth() / 2)+1, this.lastYHue + this.huePicker.getTop()-this.config.pickerHotPoint.y ], this.config.animate );
		var temp = this.hsvToRgb( this._HSV.h, 1, 1 );
		temp =  this.rgbToHex( temp[0], temp[1], temp[2] );
		this.rgbPicker.setStyle( { backgroundColor: '#' + temp } );
	},
	/**
	 * Internal event
	 * Catch the RGB picker click
	 */
	rgbPickerClick: function( event, cp ) {
		event.stopEvent();
		this.lastXYRgb = { x: event.getPageX() - this.rgbPicker.getLeft(), y: event.getPageY() - this.rgbPicker.getTop() };
		this.rgbPointer.setXY( [event.getPageX()-this.config.pickerHotPoint.x, event.getPageY()-this.config.pickerHotPoint.y], this.config.animate );
		this.updateColorsFromRGBPicker();
		this.updateRGBFromHSV();
		this.updateColor();
	},
	/**
	 * Internal event
	 * Catch the HUE picker click
	 */
	huePickerClick: function( event, cp ) {
		event.stopEvent();
		this.lastYHue = event.getPageY() - this.huePicker.getTop();
		this.huePointer.setY( [event.getPageY()-3], this.config.animate );
		this.updateColorsFromHUEPicker();
		this.updateRGBFromHSV();
		this.updateColor();
	},
	/**
	 * Internal event
	 * Catch the change event of RGB input fields
	 */
	changeRGBField: function( element, newValue, oldValue ) {
		if( !(newValue instanceof String) ) { newValue = element.getValue(); }
		if( newValue < 0 ) { newValue = 0; }
		if( newValue > 255 ) { newValue = 255; }

		if( element == Ext.getCmp( 'redValue' + this.domElement.id ) ) { this._RGB.r = newValue; }
		else if( element == Ext.getCmp( 'greenValue' + this.domElement.id ) ) { this._RGB.g = newValue; }
		else if( element == Ext.getCmp( 'blueValue' + this.domElement.id ) ) { this._RGB.b = newValue; }
		this.updateColorsFromRGBFields();
		this.updateColor();
		this.updatePickers();
		// fire the changergb event
		this.fireEvent( 'changergb', this, this._RGB );
	},
	/**
	 * Internal event
	 * Catch the change event of HSV input fields
	 */
	changeHSVField: function( element, newValue, oldValue ) {
		if( !(newValue instanceof String) ) { newValue = element.getValue(); }
		if( element == Ext.getCmp( 'hueValue' + this.domElement.id ) ) {
			if( newValue < 0 ) { newValue = 0; }
			if( newValue > 360 ) { newValue = 360; }
			this._HSV.h = newValue;
		} else {
			if( newValue < 0 ) { newValue = 0; }
			if( newValue > 100 ) { newValue = 100; }
			if( element == Ext.getCmp( 'saturationValue' + this.domElement.id ) ) { this._HSV.s = ( newValue / 100 ); }
			else if( element == Ext.getCmp( 'brightnessValue' + this.domElement.id ) ) { this._HSV.v = ( newValue / 100 ); }
		}
		this.updateColorsFromHSVFields();
		this.updateColor();
		this.updatePickers();
		// fire the changehsv event
		this.fireEvent( 'changehsv', this, this._HSV );
	},
	/**
	 * Internal event
	 * Catch the change event of HEXA input field
	 */
	changeHexaField: function( element, newValue, oldValue ) {
		if( !(newValue instanceof String) ) { newValue = element.getValue(); }
		if( element == Ext.getCmp( 'colorValue' + this.domElement.id ) ) {
			if( newValue.length > 9 ) { newValue = newValue.substr(0,5); }
			if( !newValue.match( /^[0-9a-f]{6}$/i ) ) { newValue = '000000'; }
			this._HEX = newValue;
			this.updateColorsFromHexaField();
			this.updateColor();
			this.updatePickers();
			// fire the changehexa event
			this.fireEvent( 'changehexa', this, this._HEX );
		}
	},
	/**
	 *
	 */
	setColorFromWebsafe: function(event) {
		event.stopEvent();
		this.setColor( this.wsColorContainer.getColor( 'backgroundColor','','' ) );
	},
	/**
	 *
	 */
	setColorFromInvert: function(event) {
		event.stopEvent();
		this.setColor( this.inColorContainer.getColor( 'backgroundColor','','' ) );
	},
	/**
	 * Set initial color if config contains
	 * @private
	 */
	checkConfig: function() {
		if( this.config ) {
			if( this.config.color ) { this.setColor( this.config.color ); }
			else if( this.config.hsv ) { this.setHSV( this.config.hsv ); }
			else if( this.config.rgb ) { this.setRGB( this.config.rgb ); }
		}
	},

	// PUBLIC methods

	/**
	 * Change color with hexa value
	 * @param {String} hexa (eg.: 9A4D5F )
	 */
	setColor: function( hexa ) {
		var temp = this.hexToRgb( hexa );
		this._RGB = { r:temp[0], g:temp[1], b:temp[2] }
		var temp = this.rgbToHsv( temp );
		this._HSV = { h:temp[0], s:temp[1], v:temp[2] };
		this.updateColor();
		this.updatePickers();
	},
	/**
	 * Change color with a RGB Object
	 * @param {Object} rgb (eg.: { r:255, g:200, b:111 })
	 */
	setRGB: function( rgb ) {
		this._RGB = rgb;
		var temp = this.rgbToHsv( rgb.r, rgb.g, rgb.b );
		this._HSV = { h: temp[0], s: temp[1], v: temp[2] };
		this.updateColor();
		this.updatePickers();
	},
	/**
	 * Change color with a HSV Object
	 * @param {Object} hsv (eg.: { h:359, s:10, v:100 })
	 */
	setHSV: function( hsv ) {
		this._HSV = { h: hsv.h, s: ( hsv.s / 100 ), v: ( hsv.v / 100 ) };
		var temp = this.hsvToRgb( hsv.h, ( hsv.s / 100 ), ( hsv.v / 100 ) );
		this._RGB = { r: temp[0], g: temp[1], b: temp[2] };
		this.updateColor();
		this.updatePickers();
	},
	/**
	 * Get the color from the internal store
	 * @param {Boolean} hash If it is true, the color prepended with '#'
	 * @return {String} hexa color format
	 */
	getColor: function( hash ) {
		return ( hash ? '' : '#' ) + this._HEX;
	},
	/**
	 * Get the color from the internal store in RGB object format
	 * @return {Object} format: { r: redvalue, g: greenvalue, b: bluevalue }
	 */
	getRGB: function() {
		return this._RGB;
	},
	/**
	 * Get the color from the internal store in HSV object format
	 * @return {Object} format: { h: huevalue, s: saturationvalue, v: brightnessvalue }
	 */
	getHSV: function() {
		return this._HSV;
	},
	/**
	 * Make input panel visible/hidden
	 * @param {Boolean} show Turns panel hidden or visible
	 * @param {Boolean/Object} animate Show/hide with animation or not
	 */
	setPanelVisible: function( show, animate ) {
		return this.formContainer.setVisible( show, animate );
	},
	/**
	 * Returns with boolean, input panel is visible or not
	 * @return {Boolean}
	 */
	isPanelVisible: function() {
		return this.formContainer.isDisplayed();
	},
	/**
	 * Make ColorPicker visible if it is not
	 * note: in ColorDialog it changed to the show method of BasicDialog
	 */
	showPicker: function() {
		this.domElement.show();
	},
	show: function() {//add tyamamot
		this.domElement.show();
	},
	/**
	 * Make ColorPicker hidden if it is visible
	 * note: in ColorDialog it changed to the hide method of BasicDialog
	 */
	hidePicker: function() {
		this.domElement.hide();
	},
	hide: function() {//add tyamamot
		this.domElement.hide();
	}
});
/**
 * @class Ext.ux.ColorPanel
 * @extends Ext.util.ColorPicker,
 * @constructor
 * Creates new ColorPanel
 * @param {Object} config Config Object (see the Ext.Panel config too!)
 * @cfg {Boolean} hidePanel true to hide the inputs (defaults to false)
 * @cfg {Boolean/Object} animate Moving pickers with this animate or false to no animation (defaults to false)
 * @cfg {Object} rgb (optional) Add initial color with rgb format eg.: { r:255, g:128, b:10 }
 * @cfg {Object} hsv (optional) Add initial color with hsv format eg.: { h:100, s:60, v:50 }
 * @cfg {String} color (optional) Add initial color with hexa format eg.: 'A3CF6D'
 * @cfg {Object} pickerHotPoint (optional) If you change the picker image, you can change the point of pick. ( defaults to { x:3, y:3 } )
 * @cfg {Object} captions labels of inputs (defaults to { red: 'R', green: 'G', blue: 'B', hue: 'H°', saturation: 'S%', brightness: 'V%', hexa: 'Color', websafe: 'Websafe' })
 */

Ext.ux.ColorPanel = function( config ) {
	this.config = config;
	this.config.renderTo = this.config.renderTo || Ext.DomHelper.append( document.body, {}, true );
	Ext.ux.ColorPanel.superclass.constructor.call( this, config );
	this.domElement = Ext.get( this.config.renderTo );
	this.render( this.domElement );
	this.config.renderTo = this.body;
	this.initialize( this.config );
	this.getEl().addClass( 'x-cp-panel' );
	this.domElement.removeClass( 'x-cp-panel' )
	this.body.setStyle({ 'padding': '5px' });
}
Ext.extend( Ext.ux.ColorPanel, Ext.Panel );
Ext.applyIf( Ext.ux.ColorPanel.prototype, Ext.ux.ColorPicker.prototype );
/**
 * @class Ext.ux.ColorDialog
 * @extends Ext.util.ColorPicker,
 * @constructor
 * Creates new ColorDialog
 * @param {Object} config Config Object (see the Ext.Window config too!)
 * @cfg {Boolean} hidePanel true to hide the inputs (defaults to false)
 * @cfg {Boolean/Object} animate Moving pickers with this animate or false to no animation (defaults to false)
 * @cfg {Object} rgb (optional) Add initial color with rgb format eg.: { r:255, g:128, b:10 }
 * @cfg {Object} hsv (optional) Add initial color with hsv format eg.: { h:100, s:60, v:50 }
 * @cfg {String} color (optional) Add initial color with hexa format eg.: 'A3CF6D'
 * @cfg {Object} pickerHotPoint (optional) If you change the picker image, you can change the point of pick. ( defaults to { x:3, y:3 } )
 * @cfg {Object} captions labels of inputs (defaults to { red: 'R', green: 'G', blue: 'B', hue: 'H°', saturation: 'S%', brightness: 'V%', hexa: 'Color', websafe: 'Websafe' })
 */
Ext.ux.ColorDialog = function( config ) {
	this.config = config;
	this.config.resizable = false;
	this.config.renderTo = this.config.renderTo || Ext.DomHelper.append( document.body, {}, true );
	Ext.ux.ColorDialog.superclass.constructor.call( this, config );
	this.domElement = Ext.get( this.config.renderTo );
	this.render( this.domElement );
	this.config.renderTo = this.body;
	this.initialize( this.config );
	this.body.addClass( 'x-cp-panel' )
	this.body.setStyle({ padding: '5px' });
	if(this.config.buttons){
		this.setSize( 398, 335 );
	}else{
		this.setSize( 398, 300 );
	}
}
Ext.extend( Ext.ux.ColorDialog, Ext.Window );
Ext.applyIf( Ext.ux.ColorDialog.prototype, Ext.ux.ColorPicker.prototype );
/**
 * @class Ext.ux.ColorField
 * @extends Ext.form.TriggerField
 * Provides a color input field with a {@link Ext.ColorPalette} dropdown.
* @constructor
* Create a new ColorField
 * <br />Example:
 * <pre><code>
var color_field = new Ext.ux.ColorField({
	fieldLabel: 'Color',
	id: 'color',
	width: 175,
	allowBlank: false
});
</code></pre>
* @param {Object} config
 */

Ext.ux.ColorField = Ext.extend(Ext.form.TriggerField,  {
	/**
	 * @cfg {String} invalidText
	 * The error to display when the color in the field is invalid (defaults to
	 * '{value} is not a valid color - it must be in the format {format}').
	 */
	invalidText : "'{0}' is not a valid color - it must be in a the hex format (# followed by 3 or 6 letters/numbers 0-9 A-F)",
	/**
	 * @cfg {String} triggerClass
	 * An additional CSS class used to style the trigger button.  The trigger will always get the
	 * class 'x-form-trigger' and triggerClass will be <b>appended</b> if specified (defaults to 'x-form-color-trigger'
	 * which displays a color wheel icon).
	 */
	triggerClass : 'x-form-color-trigger',
	/**
	 * @cfg {String/Object} autoCreate
	 * A DomHelper element spec, or true for a default element spec (defaults to
	 * {tag: "input", type: "text", size: "10", autocomplete: "off"})
	 */

	// private
	defaultAutoCreate : {tag: "input", type: "text", size: "10", maxlength: "7", autocomplete: "off"},

	// Limit input to hex values
	maskRe: /[#a-f0-9]/i,

	menu : null,
	menuOption : null,

	// private
	validateValue : function(value){
		if(!Ext.ux.ColorField.superclass.validateValue.call(this, value)){
			return false;
		}
		if(value.length < 1){ // if it's blank and textfield didn't flag it then it's valid
			this.setColor('');
			return true;
		}

		var parseOK = this.parseColor(value);

		if(!value || (parseOK == false)){
			this.markInvalid(String.format(this.invalidText,value));
			return false;
		}
		this.setColor(value);
		return true;
	},

	/**
	 * Sets the current color and changes the background.
	 * Does *not* change the value of the field.
	 * @param {String} hex The color value.
	 */
	setColor : function(color) {
		if (color=='' || color==undefined)
		{
			if (this.emptyText!='' && this.parseColor(this.emptyText))
				color=this.emptyText;
			else
				color='transparent';
		}
		if (this.trigger)
			this.trigger.setStyle( {
				'background-color': color
			});
		else
		{
			this.on('render',function(){this.setColor(color)},this);
		}
	},
	
	// private
	// Provides logic to override the default TriggerField.validateBlur which just returns true
	validateBlur : function(){
		return !this.menu || !this.menu.isVisible();
	},

	/**
	 * Returns the current value of the color field
	 * @return {String} value The color value
	 */
	getValue : function(){
		return Ext.ux.ColorField.superclass.getValue.call(this) || "";
	},

	/**
	 * Sets the value of the color field.  You can pass a string that can be parsed into a valid HTML color
	 * <br />Usage:
	 * <pre><code>
		colorField.setValue('#FFFFFF');
	 </code></pre>
	 * @param {String} color The color string
	 */
	setValue : function(color){
		Ext.ux.ColorField.superclass.setValue.call(this, this.formatColor(color));
		this.setColor( this.formatColor(color));
	},

	// private
	parseColor : function(value){
		return (!value || (value.substring(0,1) != '#')) ? false : (value.length==4 || value.length==7 );
	},

	// private
	formatColor : function(value){
		if (!value || this.parseColor(value))
			return value.toUpperCase();
		if (value.length==3 || value.length==6) {
			return '#' + value.toUpperCase();
		}
		return '';
	},

	// private
	menuListeners : {
		select: function(e, c){
			this.setValue(c);
			this.fireEvent('select',this,c);
		},
		show : function(){ // retain focus styling
			this.onFocus();
		},
		hide : function(){
			this.focus.defer(10, this);
			var ml = this.menuListeners;
			this.menu.un("select", ml.select,  this);
			this.menu.un("show", ml.show,  this);
			this.menu.un("hide", ml.hide,  this);
		},
		beforeshow : function(menu) {
			try {
				if (this.value != "") {
					this.menu.palette.select(this.value);
				}else{
					this.setValue("");
					var el = this.menu.palette.el;
					if(this.menu.palette.value){
						try{el.child("a.color-"+this.menu.palette.value).removeClass("x-color-palette-sel");}catch(e){}
						this.menu.palette.value = null;
					}
				}
			}catch(ex){}
		}
	},

	// private
	menuOptionListeners : {
		select: function(e, c){
			this.setValue(c);
			this.fireEvent('select',this,c);
		},
		show : function(){ // retain focus styling
			this.onFocus();
		},
		hide : function(){
			this.focus.defer(10, this);
		},
		beforeshow : function(menu) {
			try {
				if (this.value != "") {
					this.menu.palette.select(this.value);
				}else{
					this.setValue("");
					var el = this.menu.palette.el;
					if(this.menu.palette.value){
						try{el.child("a.color-"+this.menu.palette.value).removeClass("x-color-palette-sel");}catch(e){}
						this.menu.palette.value = null;
					}
				}
			}catch(ex){}
		}
	},

	// private
	// Implements the default empty TriggerField.onTriggerClick function to display the ColorPalette
	onTriggerClick : function(){
		var self = this;
		if(self.disabled){
			return;
		}
		if(self.menu == null){
			var config = Ext.applyIf({
				colors: self.initialConfig.colors,
				itemCls: self.initialConfig.colorsItemCls,
				colorsOptionMenu: self.initialConfig.colorsOptionMenu
			},{
				colors:palette_color,
				itemCls:"x-color-palette",
				colorsOptionMenu:true
			});
			_dump(config);
//			try{config.colors = palette_color;}catch(e){}

			var optionMenu;
			if(config.colorsOptionMenu){
				optionMenu = {
					text:'Option...',
					iconCls:'color_pallet',
					listeners: {
						click: {
							fn: function(){
								self.onMenuOptionClick();
							},
							buffer:100,
							scope:self
						}
					}
				};
			}
			self.menu = new Ext.ux.ColorMenu(config,optionMenu);
		}
		self.menu.on(Ext.apply({}, self.menuListeners, {
			scope:self
		}));
		self.menu.show(self.el, "tl-bl?");
	},


	onMenuOptionClick : function(){
		if(this.disabled){
			return;
		}
		if(this.menuOption == null){
			var config = {
				closeAction:'hide',
				modal : true,
				buttons : [{
					text : 'OK',
					handler : function(b,e){
						try{
							this.menuOption.fireEvent('select',b,this.menuOption.getColor(1));
							this.menuOption.hide();
						}catch(e){
							_dump(e);
						}
					},
					scope : this
				},{
					text : 'Cancel',
					handler : function(b,e){
						try{
							this.menuOption.hide();
						}catch(e){
							_dump(e);
						}
					},
					scope : this
				}]
			};
			try{
				var color = this.getValue();
				if(color.substr(0,1) == '#') color = color.substr(1);
				config.color = color;
			}catch(e){}
			this.menuOption = new Ext.ux.ColorDialog(config);
			this.menuOption.on(Ext.apply({}, this.menuOptionListeners, {
				scope:this
			}));
		}
		var body_box = Ext.getBody().getBox();
		body_box.width -= 30;
		var menu_box = this.menuOption.getBox();
		var x = this.el.getX();
		var y = this.el.getY()+this.el.getHeight();
		if(x+menu_box.width>body_box.width) x = (x+this.el.getWidth()+17) - menu_box.width;
		if(y+menu_box.height>body_box.height) y = y - this.el.getHeight() - menu_box.height;

		if(x<0) x = 0;
		if(y<0) y = 0;

		this.menuOption.setPosition(x,y);

		try{
			var color = this.getValue();
			if(color.substr(0,1) == '#') color = color.substr(1);
			this.menuOption.setColor(color);
		}catch(e){}

		this.menuOption.show(this.el);
	}



});

Ext.reg('colorfield',Ext.ux.ColorField);

Ext.ux.ColorMenu = function(config,options){
	Ext.ux.ColorMenu.superclass.constructor.call(this, config);
	this.plain = true;
	var ci = new Ext.menu.ColorItem(config);
	this.add(ci);
	if(options){
		this.add('-');
		this.add(options);
	}
	this.palette = ci.palette;
	this.relayEvents(ci, ["select"]);
};
Ext.extend(Ext.ux.ColorMenu, Ext.menu.Menu, {
	//private
	beforeDestroy: function(){
		this.palette.destroy();
	}
});
Ext.ux.ColorPickerField = Ext.extend(Ext.form.TriggerField,  {
	/**
	 * @cfg {String} invalidText
	 * The error to display when the color in the field is invalid (defaults to
	 * '{value} is not a valid color - it must be in the format {format}').
	 */
	invalidText : "'{0}' is not a valid color - it must be in a the hex format (# followed by 3 or 6 letters/numbers 0-9 A-F)",
	/**
	 * @cfg {String} triggerClass
	 * An additional CSS class used to style the trigger button.  The trigger will always get the
	 * class 'x-form-trigger' and triggerClass will be <b>appended</b> if specified (defaults to 'x-form-color-trigger'
	 * which displays a color wheel icon).
	 */
	triggerClass : 'x-form-color-trigger',
	/**
	 * @cfg {String/Object} autoCreate
	 * A DomHelper element spec, or true for a default element spec (defaults to
	 * {tag: "input", type: "text", size: "10", autocomplete: "off"})
	 */

	// private
	defaultAutoCreate : {tag: "input", type: "text", size: "10", maxlength: "7", autocomplete: "off"},

	// Limit input to hex values
	maskRe: /[#a-f0-9]/i,

	// private
	validateValue : function(value){
		if(!Ext.ux.ColorPickerField.superclass.validateValue.call(this, value)){
			return false;
		}
		if(value.length < 1){ // if it's blank and textfield didn't flag it then it's valid
			this.setColor('');
			return true;
		}

		var parseOK = this.parseColor(value);

		if(!value || (parseOK == false)){
			this.markInvalid(String.format(this.invalidText,value));
			return false;
		}
		this.setColor(value);
		return true;
	},

	/**
	 * Sets the current color and changes the background.
	 * Does *not* change the value of the field.
	 * @param {String} hex The color value.
	 */
	setColor : function(color) {
		if (color=='' || color==undefined)
		{
			if (this.emptyText!='' && this.parseColor(this.emptyText))
				color=this.emptyText;
			else
				color='transparent';
		}
		if(this.trigger){
			this.trigger.setStyle( {
				'background-color': color
			});
		}
		else
		{
			this.on('render',function(){this.setColor(color)},this);
		}
	},
	
	// private
	// Provides logic to override the default TriggerField.validateBlur which just returns true
	validateBlur : function(){
		return !this.menu || !this.menu.isVisible();
	},

	/**
	 * Returns the current value of the color field
	 * @return {String} value The color value
	 */
	getValue : function(){
		return Ext.ux.ColorPickerField.superclass.getValue.call(this) || "";
	},

	/**
	 * Sets the value of the color field.  You can pass a string that can be parsed into a valid HTML color
	 * <br />Usage:
	 * <pre><code>
		colorField.setValue('#FFFFFF');
	 </code></pre>
	 * @param {String} color The color string
	 */
	setValue : function(color){
		Ext.ux.ColorPickerField.superclass.setValue.call(this, this.formatColor(color));
		this.setColor( this.formatColor(color));
	},

	// private
	parseColor : function(value){
		return (!value || (value.substring(0,1) != '#')) ? false : (value.length==4 || value.length==7 );
	},

	// private
	formatColor : function(value){
		if (!value || this.parseColor(value))
			return value.toUpperCase();
		if (value.length==3 || value.length==6) {
			return '#' + value.toUpperCase();
		}
		return '';
	},

	// private
	menuListeners : {
		select: function(e, c){
			this.setValue(c);
		},
		show : function(){ // retain focus styling
			this.onFocus();
		},
		hide : function(){
			this.focus.defer(10, this);
//			var ml = this.menuListeners;
//			this.menu.un("select", ml.select,  this);
//			this.menu.un("show", ml.show,  this);
//			this.menu.un("hide", ml.hide,  this);
		}
	},

	// private
	// Implements the default empty TriggerField.onTriggerClick function to display the ColorPalette
	onTriggerClick : function(){
		if(this.disabled){
			return;
		}
		if(this.menu == null){
			var config = {
				closeAction:'hide',
				modal : true,
				buttons : [{
					text : 'OK',
					handler : function(b,e){
						try{
							this.menu.fireEvent('select',b,this.menu.getColor(1));
							this.menu.hide();
						}catch(e){
							_dump(e);
						}
					},
					scope : this
				},{
					text : 'Cancel',
					handler : function(b,e){
						try{
							this.menu.hide();
						}catch(e){
							_dump(e);
						}
					},
					scope : this
				}]
			};
			try{
				var color = this.getValue();
				if(color.substr(0,1) == '#') color = color.substr(1);
				config.color = color;
			}catch(e){}
			this.menu = new Ext.ux.ColorDialog(config);
			this.menu.on(Ext.apply({}, this.menuListeners, {
				scope:this
			}));
		}
		var body_box = Ext.getBody().getBox();
		body_box.width -= 30;
		var menu_box = this.menu.getBox();
		var x = this.el.getX();
		var y = this.el.getY()+this.el.getHeight();
		if(x+menu_box.width>body_box.width) x = (x+this.el.getWidth()+17) - menu_box.width;
		if(y+menu_box.height>body_box.height) y = y - this.el.getHeight() - menu_box.height;

		if(x<0) x = 0;
		if(y<0) y = 0;

		this.menu.setPosition(x,y);

		try{
			var color = this.getValue();
			if(color.substr(0,1) == '#') color = color.substr(1);
			this.menu.setColor(color);
		}catch(e){}

		this.menu.show(this.el);
	}
});
//未完成

Ext.ux.NoLabelsLayout = function( config ){
	Ext.ux.NoLabelsLayout.superclass.constructor.call( this, config );
	var template = new Ext.Template(
		'<div class="x-form-item x-menu-form-item {5}">',
		'<div class="x-form-element" id="x-form-el-{0}">',
		'</div>',
		'</div><div class="x-form-clear-left"></div>'
	);
	template.disableFormats = true;
	template.compile();
	Ext.ux.NoLabelsLayout.prototype.fieldTpl = template;
};
Ext.extend( Ext.ux.NoLabelsLayout, Ext.layout.FormLayout );

Ext.ux.TextFieldItem = function( config ){
	Ext.ux.TextFieldItem.superclass.constructor.call( this, config );
	this.defaultSize = 20;
	this.el = new Ext.form.TextField({
		cls: 'x-menu-field',
		id: this.id,
		fieldLabel: this.initialConfig.fieldLabel,
		labelStyle : 'font-family:tahoma,arial,sans-serif;font-size:11px;',
		autoCreate: {
			tag: "input",
			type: "text",
			size: this.initialConfig.size || this.defaultSize,
			autocomplete: "off",
			allowBlank: true
		}
	});
};

Ext.extend( Ext.ux.TextFieldItem, Ext.menu.Item, {
	onClick : function(e){
		e.stopEvent();
	},
	onRender: function( container, position ){
		var form = new Ext.form.FormPanel({
			baseCls : 'x-plain',
			border  : false,
			labelWidth :20
		});
		form.add( this.el );
		form.render( container );
		var textFieldDiv = Ext.get( 'x-form-el-' + this.id );
		textFieldDiv.removeClass( 'x-form-element' );
		textFieldDiv.addClass( 'x-menu-item' );
		textFieldDiv.insertFirst({
			tag: "img",
			src: this.initialConfig.icon || Ext.BLANK_IMAGE_URL,
			cls: 'x-menu-item-icon'
		});
	},
	getTextField: function(){
		return this.el;
	}
});
Ext.app.IncrementalSearchField = Ext.extend(Ext.form.ComboBox, {
	store : new Ext.data.JsonStore({
		url:'ag-incremental-search-term.cgi',
//		url:'ag-incremental-search-word.cgi',
		totalProperty : 'total',
		root: 'records',
		fields: [
			{name:'f_id',type:'string'},
			{name:'keyword',type:'string'},
			{name:'markup',type:'string'},
			{name:'src',type:'string'},
			{name:'parts_exists',type:'boolean'}
		],
		remoteSort: true,
		listeners: {
			'beforeload' : function(self,options){
				self.baseParams = self.baseParams || {};
				try{var bp3d_version = Ext.getCmp('bp3d-version-combo').getValue();}catch(e){return false;}
				self.baseParams.version = bp3d_version;
			},
			'load' : function(self,records,options){
			},
			scope:this
		}
	}),
	displayField:'keyword',
	typeAhead: false,
	loadingText: 'Searching...',
	width: 570,
	listWidth: 570,
	pageSize:10,
	minChars:0,
	triggerAction:'all',
	hideTrigger:true,
	selectOnFocus:true,
	tpl: new Ext.XTemplate(
		'<tpl for="."><div class="search-item" ',
			'<tpl if="parts_exists == true">style="height:30px"><img src="{src}" width="30" height="30" align="right"/></tpl>',
			'<tpl if="parts_exists == false">style="height:24px"><img src="icon/inprep_S.png" width="30" height="24" align="right"/></tpl>',
			'<h3>',
//			'<span>',
//			'<tpl if="parts_exists == true"><img src="css/bullet_picture.png" width="16" height="16"/></tpl>',
//			'<tpl if="parts_exists == false"><img src="css/bullet_delete.png" width="16" height="16"/></tpl>',
//			'</span>',
			'{markup}</h3>',
			'{f_id}',
		'</div></tpl>'
	),

	tpl_word: new Ext.XTemplate(
		'<tpl for="."><div class="search-item">',
			'<h3>{markup}</h3>',
		'</div></tpl>'
	),

	itemSelector: 'div.search-item',

	paramName : 'query',

	// private
	initComponent : function(){
		Ext.app.IncrementalSearchField.superclass.initComponent.call(this);
		this.on('specialkey', function(f, e){
			_dump("this.specialkey");
			if(e.getKey() == e.ENTER){
				this.specialkey=true;
				this.onTrigger2Click();
			}
		}, this);
		this.on('render', function(c){
			this.el.on('keyup', this.onElKeyUp, this);
		},this);
	},

	// private
	initList : function(){
		if(this.list) return;

		var cls = 'x-combo-list';

		this.list = new Ext.Layer({
			shadow: this.shadow, cls: [cls, this.listClass].join(' '), constrain:false
		});

		var lw = this.listWidth || Math.max(this.wrap.getWidth(), this.minListWidth);
		this.list.setWidth(lw);
		this.list.swallowEvent('mousewheel');
		this.assetHeight = 0;

		if(this.title){
			this.header = this.list.createChild({cls:cls+'-hd', html: this.title});
			this.assetHeight += this.header.getHeight();
		}

		this.innerList = this.list.createChild({cls:cls+'-inner'});
		this.innerList.on('mouseover', this.onViewOver, this);
		this.innerList.on('mousemove', this.onViewMove, this);
		this.innerList.setWidth(lw - this.list.getFrameWidth('lr'));

		if(this.pageSize){
			this.footer = this.list.createChild({cls:cls+'-ft'});
			this.pageTb = new Ext.PagingToolbar({
				store:this.store,
				pageSize: this.pageSize,
				renderTo:this.footer,
				items:['-','->','-',{
					xtype:'tbtext',
					text:'-'
				},{
					xtype:'tbtext',
					text:'Terms'
				}]
			});
			this.assetHeight += this.footer.getHeight();
		}

		if(!this.tpl){
			this.tpl = '<tpl for="."><div class="'+cls+'-item">{' + this.displayField + '}</div></tpl>';
		}

		this.view = new Ext.DataView({
			applyTo: this.innerList,
			tpl: this.tpl,
			singleSelect: true,
			selectedClass: this.selectedClass,
			itemSelector: this.itemSelector || '.' + cls + '-item'
		});

		this.view.on('click', this.onViewClick, this);

		this.bindStore(this.store, true);

		if(this.resizable){
			this.resizer = new Ext.Resizable(this.list,  {
				pinned:true,
				handles:'se'
			});
			this.resizer.on('resize', function(r, w, h){
				this.maxHeight = h-this.handleHeight-this.list.getFrameWidth('tb')-this.assetHeight;
				this.listWidth = w;
				this.innerList.setWidth(w - this.list.getFrameWidth('lr'));
				this.restrictHeight();
			}, this);
			this[this.pageSize?'footer':'innerList'].setStyle('margin-bottom', this.handleHeight+'px');
		}

	},

	// private
	initEvents : function(){
		Ext.form.ComboBox.superclass.initEvents.call(this);
		this.keyNav = new Ext.KeyNav(this.el, {
			"up" : function(e){
				this.inKeyMode = true;
				this.selectPrev();
			},
			"down" : function(e){
				if(!this.isExpanded()){
					this.onTriggerClick();
				}else{
					this.inKeyMode = true;
					this.selectNext();
				}
			},
			"enter" : function(e){
				if(!this.onViewClick()){
					this.collapse();
					this.el.focus();
					this.onFocus();
					this.fireEvent("specialkey", this, e);
					return;
				}
				this.specialkey=true;
				this.delayedCheck = true;
				this.unsetDelayCheck.defer(10, this);
			},
			"esc" : function(e){
				this.collapse();
			},
			"tab" : function(e){
				this.onViewClick(false);
				return true;
			},
			scope : this,
			doRelay : function(foo, bar, hname){
				if(hname == 'down' || this.scope.isExpanded()){
					return Ext.KeyNav.prototype.doRelay.apply(this, arguments);
				}
				return true;
			},
			forceKeyDown : true
		});
		this.queryDelay = Math.max(this.queryDelay || 10, this.mode == 'local' ? 10 : 250);
		this.dqTask = new Ext.util.DelayedTask(this.initQuery, this);
		if(this.typeAhead){
			this.taTask = new Ext.util.DelayedTask(this.onTypeAhead, this);
		}
		if(this.editable !== false){
			this.el.on("keyup", this.onKeyUp, this);
		}
		if(this.forceSelection){
			this.on('blur', this.doForce, this);
		}
	},

	// private
	onBeforeLoad : function(){
		if(this.pageTb){
			var items = this.pageTb.items;
			var item = items.get(items.getCount()-2);
			if(item) item.el.innerHTML = '-';
		}
		if(!this.hasFocus){
			return;
		}
		this.innerList.update(this.loadingText ? '<div class="loading-indicator">'+this.loadingText+'</div>' : '');
		this.restrictHeight();
		this.selectedIndex = -1;
	},

	// private
	onLoad : function(){
		if(this.pageTb){
			var items = this.pageTb.items;
			var item = items.get(items.getCount()-2);
			if(item) item.el.innerHTML = this.store.getTotalCount();
		}
		if(!this.hasFocus){
			return;
		}
		if(this.store.getCount() > 0){
			this.expand();
			this.restrictHeight();
			if(this.lastQuery == this.allQuery){
				if(this.editable){
					this.el.dom.select();
				}
				if(!this.selectByValue(this.value, true)){
					_dump("onLoad():4");
					this.select(0, true);
				}
			}else{
//				this.selectNext();
				this.view.clearSelections();
				this.selectedIndex = -1;

				if(this.typeAhead && this.lastKey != Ext.EventObject.BACKSPACE && this.lastKey != Ext.EventObject.DELETE){
					this.taTask.delay(this.typeAheadDelay);
				}
			}
		}else{
			this.onEmptyResults();
		}
//	this.el.focus();
	},

	// private
	onViewClick : function(doFocus){
		var rtn = false;
		var index = this.view.getSelectedIndexes()[0];
		var r = this.store.getAt(index);
		if(r){
			this.onSelect(r, index);
			rtn = true;
		}
		if(doFocus !== false){
			this.el.focus();
		}
		return rtn;
	},

	// private
	selectPrev : function(){
		var ct = this.store.getCount();
		if(ct > 0){
			if(this.selectedIndex <= 0){
				this.view.clearSelections();
				this.selectedIndex = -1;
			}else if(this.selectedIndex > 0){
				this.select(this.selectedIndex-1);
			}
		}
	},

	onSelect: function(record){
		this.setRawValue(record.data.keyword);
		this.collapse();
		this.el.focus();
		this.onFocus();
	},

	onElKeyUp : function(e,t,o){
		if(e.getKey() !== e.ENTER) return;
		_dump("onElKeyUp():"+this.specialkey);
		if(this.specialkey){
			this.specialkey = false;
			return;
		}
		this.onFocus();
		this.dqTask.delay(10);
	},

	onTrigger2Click : function(){
		try{
			var v = this.getRawValue();
			if(v.length < 1){
				return;
			}
			var urlOBj = Ext.urlDecode(_location.location.search.substr(1));
			urlOBj.node = 'search';
			urlOBj[this.paramName] = v;
			_location.location.search = Ext.urlEncode(urlOBj);
		}catch(e){
			_dump("Ext.app.IncrementalSearchField.onTrigger2Click():"+e);
		}
	}
});
/*
 * Ext JS Library 2.2
 * Copyright(c) 2006-2008, Ext JS, LLC.
 * licensing@extjs.com
 * 
 * http://extjs.com/license
 */

Ext.menu.EditableItem = Ext.extend(Ext.menu.BaseItem, {
	itemCls : "x-menu-item",
	hideOnClick: false,
	textfieldCfg : undefined,

	initComponent: function(){
		Ext.menu.EditableItem.superclass.initComponent.call(this);
		this.addEvents('keyup');

		this.editor = this.editor || new Ext.form.TextField(this.textfieldCfg);
		if(this.text) {
			this.editor.setValue(this.text);
		}
	},

	onRender: function(container){
		var iconStyle = this.iconStyle || "margin: 3px 3px 2px 2px;"
		var s = container.createChild({
			cls: this.itemCls,
			html: '<img src="' + this.icon + '" class="x-menu-item-icon" style="'+ iconStyle +'" />'
		});

		Ext.apply(this.config, {width: 125});
		this.editor.render(s);

		this.el = s;
		this.relayEvents(this.editor.el, ["keyup"]);

		if(Ext.isGecko) {
			s.setStyle('overflow', 'auto');
		}
		Ext.menu.EditableItem.superclass.onRender.call(this, container);
	},
    
	getValue: function(){
		return this.editor.getValue();
	},

	setValue: function(value){
		this.editor.setValue(value);
	},

	isValid: function(preventMark){
		return this.editor.isValid(preventMark);
	}
});/*
 * Ext JS Library 2.2
 * Copyright(c) 2006-2008, Ext JS, LLC.
 * licensing@extjs.com
 * 
 * http://extjs.com/license
 */

Ext.menu.RangeMenu = function(config){
	Ext.menu.RangeMenu.superclass.constructor.call(this, config);
  
	this.updateTask = new Ext.util.DelayedTask(this.fireUpdate, this);

	var cfg = this.fieldCfg;
	var cls = this.fieldCls;
	var fields = this.fields = Ext.applyIf(this.fields || {}, {
		'gt': new Ext.menu.EditableItem({
			icon      : this.icons.gt,
			iconStyle : this.iconStyles.gt,
			editor    : new cls(typeof cfg == "object" ? cfg.gt || '' : cfg)
		}),
		'lt': new Ext.menu.EditableItem({
			icon      : this.icons.lt,
			iconStyle : this.iconStyles.lt,
			editor    : new cls(typeof cfg == "object" ? cfg.lt || '' : cfg)
		}),
		'eq': new Ext.menu.EditableItem({
			icon      : this.icons.eq, 
			iconStyle : this.iconStyles.eq,
			editor    : new cls(typeof cfg == "object" ? cfg.gt || '' : cfg)
		})
	});
	this.add(fields.gt, fields.lt, '-', fields.eq);

	for(var key in fields) {
		fields[key].on('keyup', this.onKeyUp.createDelegate(this, [fields[key]], true), this);
	}

	this.addEvents('update');
};

Ext.extend(Ext.menu.RangeMenu, Ext.menu.Menu, {
	fieldCls:     Ext.form.NumberField,
	fieldCfg:     '',
	updateBuffer: 500,
	icons: {
		gt: '/img/small_icons/greater_then.png', 
		lt: '/img/small_icons/less_then.png',
		eq: '/img/small_icons/equals.png'
	},
	iconStyles: {
		gt: 'position:relative;margin: 3px 3px 2px 2px;', 
		lt: 'position:relative;margin: 3px 3px 2px 2px;',
		eq: 'position:relative;margin: 3px 3px 2px 2px;'
	},
		
	fireUpdate: function() {
		this.fireEvent("update", this);
	},
	
	setValue: function(data) {
		for(var key in this.fields) {
			this.fields[key].setValue(data[key] !== undefined ? data[key] : '');
		}
		this.fireEvent("update", this);
	},
	
	getValue: function() {
		var result = {};
		for(var key in this.fields) {
			var field = this.fields[key];
			if(field.isValid() && String(field.getValue()).length > 0) { 
				result[key] = field.getValue();
			}
		}
		return result;
	},

	onKeyUp: function(event, input, notSure, field) {
		if(event.getKey() == event.ENTER && field.isValid()) {
			this.hide(true);
			return;
		}
		if(field == this.fields.eq) {
			this.fields.gt.setValue(null);
			this.fields.lt.setValue(null);
		} else {
			this.fields.eq.setValue(null);
		}
		this.updateTask.delay(this.updateBuffer);
	}
});/*
 * Ext JS Library 2.2
 * Copyright(c) 2006-2008, Ext JS, LLC.
 * licensing@extjs.com
 * 
 * http://extjs.com/license
 */

Ext.grid.GridFilters = function(config){		
	this.filters = new Ext.util.MixedCollection();
	this.filters.getKey = function(o) {return o ? o.dataIndex : null};
	
	for(var i=0, len=config.filters.length; i<len; i++) {
		this.addFilter(config.filters[i]);
  }
  
	this.deferredUpdate = new Ext.util.DelayedTask(this.reload, this);
	
	delete config.filters;
	Ext.apply(this, config);
};
Ext.extend(Ext.grid.GridFilters, Ext.util.Observable, {
	/**
	 * @cfg {Integer} updateBuffer
	 * Number of milisecond to defer store updates since the last filter change.
	 */
	updateBuffer: 500,
	/**
	 * @cfg {String} paramPrefix
	 * The url parameter prefix for the filters.
	 */
	paramPrefix: 'filter',
	/**
	 * @cfg {String} fitlerCls
	 * The css class to be applied to column headers that active filters. Defaults to 'ux-filterd-column'
	 */
	filterCls: 'ux-filtered-column',
	/**
	 * @cfg {Boolean} local
	 * True to use Ext.data.Store filter functions instead of server side filtering.
	 */
	local: false,
	/**
	 * @cfg {Boolean} autoReload
	 * True to automagicly reload the datasource when a filter change happens.
	 */
	autoReload: true,
	/**
	 * @cfg {String} stateId
	 * Name of the Ext.data.Store value to be used to store state information.
	 */
	stateId: undefined,
	/**
	 * @cfg {Boolean} showMenu
	 * True to show the filter menus
	 */
	showMenu: true,
    /**
     * @cfg {String} filtersText
     * The text displayed for the "Filters" menu item
     */
    filtersText: 'Filters',

	init: function(grid){
    if(grid instanceof Ext.grid.GridPanel){
      this.grid  = grid;
      
      this.store = this.grid.getStore();
      if(this.local){
        this.store.on('load', function(store) {
          store.filterBy(this.getRecordFilter());
        }, this);
      } else {
        this.store.on('beforeload', this.onBeforeLoad, this);
      }
      
      this.grid.filters = this;
      
      this.grid.addEvents('filterupdate');
      
      grid.on("render", this.onRender, this);
      grid.on("beforestaterestore", this.applyState, this);
      grid.on("beforestatesave", this.saveState, this);
      
    } else if(grid instanceof Ext.PagingToolbar) {
      this.toolbar = grid;
    }
	},
		
	/** private **/
	applyState: function(grid, state) {
		this.suspendStateStore = true;
		this.clearFilters();
		if(state.filters) {
			for(var key in state.filters) {
				var filter = this.filters.get(key);
				if(filter) {
					filter.setValue(state.filters[key]);
					filter.setActive(true);
				}
			}
    }
    
		this.deferredUpdate.cancel();
		if(this.local) {
			this.reload();
    }
    
		this.suspendStateStore = false;
	},
	
	/** private **/
	saveState: function(grid, state){
		var filters = {};
		this.filters.each(function(filter) {
			if(filter.active) {
				filters[filter.dataIndex] = filter.getValue();
      }
		});
		return state.filters = filters;
	},
	
	/** private **/
	onRender: function(){
		var hmenu;
		
		if(this.showMenu) {
			hmenu = this.grid.getView().hmenu;
			
			this.sep  = hmenu.addSeparator();
			this.menu = hmenu.add(new Ext.menu.CheckItem({
					text: this.filtersText,
					menu: new Ext.menu.Menu()
				}));
			this.menu.on('checkchange', this.onCheckChange, this);
			this.menu.on('beforecheckchange', this.onBeforeCheck, this);
				
			hmenu.on('beforeshow', this.onMenu, this);
		}
		
		this.grid.getView().on("refresh", this.onRefresh, this);
		this.updateColumnHeadings(this.grid.getView());
	},
	
	/** private **/
	onMenu: function(filterMenu) {
		var filter = this.getMenuFilter();
		if(filter) {
			this.menu.menu = filter.menu;
			this.menu.setChecked(filter.active, false);
		}
		
		this.menu.setVisible(filter !== undefined);
		this.sep.setVisible(filter !== undefined);
	},
	
	/** private **/
	onCheckChange: function(item, value) {
		this.getMenuFilter().setActive(value);
	},
	
	/** private **/
	onBeforeCheck: function(check, value) {
		return !value || this.getMenuFilter().isActivatable();
	},
	
	/** private **/
	onStateChange: function(event, filter) {
    if(event == "serialize") {
      return;
    }
    
		if(filter == this.getMenuFilter()) {
			this.menu.setChecked(filter.active, false);
    }
			
		if(this.autoReload || this.local) {
			this.deferredUpdate.delay(this.updateBuffer);
    }
		
		var view = this.grid.getView();
		this.updateColumnHeadings(view);
			
		this.grid.saveState();
			
		this.grid.fireEvent('filterupdate', this, filter);
	},
	
	/** private **/
	onBeforeLoad: function(store, options) {
		options.params = options.params || {};
		this.cleanParams(options.params);		
		var params = this.buildQuery(this.getFilterData());
		Ext.apply(options.params, params);
	},
	
	/** private **/
	onRefresh: function(view) {
		this.updateColumnHeadings(view);
	},
	
	/** private **/
	getMenuFilter: function() {
		var view = this.grid.getView();
		if(!view || view.hdCtxIndex === undefined) {
			return null;
    }
		
		return this.filters.get(view.cm.config[view.hdCtxIndex].dataIndex);
	},
	
	/** private **/
	updateColumnHeadings: function(view) {
		if(!view || !view.mainHd) {
      return;
    }
		
		var hds = view.mainHd.select('td').removeClass(this.filterCls);
		for(var i=0, len=view.cm.config.length; i<len; i++) {
			var filter = this.getFilter(view.cm.config[i].dataIndex);
			if(filter && filter.active) {
				hds.item(i).addClass(this.filterCls);
      }
		}
	},
	
	/** private **/
	reload: function() {
		if(this.local){
			this.grid.store.clearFilter(true);
			this.grid.store.filterBy(this.getRecordFilter());
		} else {
			this.deferredUpdate.cancel();
			var store = this.grid.store;
			if(this.toolbar) {
				var start = this.toolbar.paramNames.start;
				if(store.lastOptions && store.lastOptions.params && store.lastOptions.params[start]) {
					store.lastOptions.params[start] = 0;
        }
			}
			store.reload();
		}
	},
	
	/**
	 * Method factory that generates a record validator for the filters active at the time
	 * of invokation.
	 * 
	 * @private
	 */
	getRecordFilter: function() {
		var f = [];
		this.filters.each(function(filter) {
			if(filter.active) {
        f.push(filter);
      }
		});
		
		var len = f.length;
		return function(record) {
			for(var i=0; i<len; i++) {
				if(!f[i].validateRecord(record)) {
					return false;
        }
      }
			return true;
		};
	},
	
	/**
	 * Adds a filter to the collection.
	 * 
	 * @param {Object/Ext.grid.filter.Filter} config A filter configuration or a filter object.
	 * 
	 * @return {Ext.grid.filter.Filter} The existing or newly created filter object.
	 */
	addFilter: function(config) {
		var filter = config.menu ? config : new (this.getFilterClass(config.type))(config);
		this.filters.add(filter);
		
		Ext.util.Observable.capture(filter, this.onStateChange, this);
		return filter;
	},
	
	/**
	 * Returns a filter for the given dataIndex, if on exists.
	 * 
	 * @param {String} dataIndex The dataIndex of the desired filter object.
	 * 
	 * @return {Ext.grid.filter.Filter}
	 */
	getFilter: function(dataIndex){
		return this.filters.get(dataIndex);
	},

	/**
	 * Turns all filters off. This does not clear the configuration information.
	 */
	clearFilters: function() {
		this.filters.each(function(filter) {
			filter.setActive(false);
		});
	},

	/** private **/
	getFilterData: function() {
		var filters = [];
		
		this.filters.each(function(f) {
			if(f.active) {
				var d = [].concat(f.serialize());
				for(var i=0, len=d.length; i<len; i++) {
					filters.push({field: f.dataIndex, data: d[i]});
        }
			}
		});
		
		return filters;
	},
	
	/**
	 * Function to take structured filter data and 'flatten' it into query parameteres. The default function
	 * will produce a query string of the form:
	 * 		filters[0][field]=dataIndex&filters[0][data][param1]=param&filters[0][data][param2]=param...
	 * 
	 * @param {Array} filters A collection of objects representing active filters and their configuration.
	 * 	  Each element will take the form of {field: dataIndex, data: filterConf}. dataIndex is not assured
	 *    to be unique as any one filter may be a composite of more basic filters for the same dataIndex.
	 * 
	 * @return {Object} Query keys and values
	 */
	buildQuery: function(filters) {
		var p = {};
		for(var i=0, len=filters.length; i<len; i++) {
			var f = filters[i];
			var root = [this.paramPrefix, '[', i, ']'].join('');
			p[root + '[field]'] = f.field;
			
			var dataPrefix = root + '[data]';
			for(var key in f.data) {
				p[[dataPrefix, '[', key, ']'].join('')] = f.data[key];
			}
		}
		return p;
	},
	
	/**
	 * Removes filter related query parameters from the provided object.
	 * 
	 * @param {Object} p Query parameters that may contain filter related fields.
	 */
	cleanParams: function(p) {
		var regex = new RegExp("^" + this.paramPrefix + "\[[0-9]+\]");
		for(var key in p) {
			if(regex.test(key)) {
				delete p[key];
      }
    }
	},
	
	/**
	 * Function for locating filter classes, overwrite this with your favorite
	 * loader to provide dynamic filter loading.
	 * 
	 * @param {String} type The type of filter to load.
	 * 
	 * @return {Class}
	 */
	getFilterClass: function(type){
		return Ext.grid.filter[type.substr(0, 1).toUpperCase() + type.substr(1) + 'Filter'];
	}
});/*
 * Ext JS Library 2.2
 * Copyright(c) 2006-2008, Ext JS, LLC.
 * licensing@extjs.com
 * 
 * http://extjs.com/license
 */

Ext.ns("Ext.grid.filter");
Ext.grid.filter.Filter = function(config){
	Ext.apply(this, config);
		
	this.events = {
		/**
		 * @event activate
		 * Fires when a inactive filter becomes active
		 * @param {Ext.ux.grid.filter.Filter} this
		 */
		'activate': true,
		/**
		 * @event deactivate
		 * Fires when a active filter becomes inactive
		 * @param {Ext.ux.grid.filter.Filter} this
		 */
		'deactivate': true,
		/**
		 * @event update
		 * Fires when a filter configuration has changed
		 * @param {Ext.ux.grid.filter.Filter} this
		 */
		'update': true,
		/**
		 * @event serialize
		 * Fires after the serialization process. Use this to apply additional parameters to the serialized data.
		 * @param {Array/Object} data A map or collection of maps representing the current filter configuration.
		 * @param {Ext.ux.grid.filter.Filter} filter The filter being serialized.
		 **/
		'serialize': true
	};
	Ext.grid.filter.Filter.superclass.constructor.call(this);
	
	this.menu = new Ext.menu.Menu();
	this.init();
	
	if(config && config.value) {
		this.setValue(config.value);
		this.setActive(config.active !== false, true);
		delete config.value;
	}
};
Ext.extend(Ext.grid.filter.Filter, Ext.util.Observable, {
	/**
	 * @cfg {Boolean} active
	 * Indicates the default status of the filter (defaults to false).
	 */
    /**
     * True if this filter is active. Read-only.
     * @type Boolean
     * @property
     */
	active: false,
	/**
	 * @cfg {String} dataIndex 
	 * The {@link Ext.data.Store} data index of the field this filter represents. The dataIndex does not actually
	 * have to exist in the store.
	 */
	dataIndex: null,
	/**
	 * The filter configuration menu that will be installed into the filter submenu of a column menu.
	 * @type Ext.menu.Menu
	 * @property
	 */
	menu: null,
	
	/**
	 * Initialize the filter and install required menu items.
	 */
	init: Ext.emptyFn,
	
	fireUpdate: function() {
		this.value = this.item.getValue();
		
		if(this.active) {
			this.fireEvent("update", this);
    }
		this.setActive(this.value.length > 0);
	},
	
	/**
	 * Returns true if the filter has enough configuration information to be activated.
	 * @return {Boolean}
	 */
	isActivatable: function() {
		return true;
	},
	
	/**
	 * Sets the status of the filter and fires that appropriate events.
	 * @param {Boolean} active        The new filter state.
	 * @param {Boolean} suppressEvent True to prevent events from being fired.
	 */
	setActive: function(active, suppressEvent) {
		if(this.active != active) {
			this.active = active;
			if(suppressEvent !== true) {
				this.fireEvent(active ? 'activate' : 'deactivate', this);
      }
		}
	},
	
	/**
	 * Get the value of the filter
	 * @return {Object} The 'serialized' form of this filter
	 */
	getValue: Ext.emptyFn,
	
	/**
	 * Set the value of the filter.
	 * @param {Object} data The value of the filter
	 */	
	setValue: Ext.emptyFn,
	
	/**
	 * Serialize the filter data for transmission to the server.
	 * @return {Object/Array} An object or collection of objects containing key value pairs representing
	 * 	the current configuration of the filter.
	 */
	serialize: Ext.emptyFn,
	
	/**
	 * Validates the provided Ext.data.Record against the filters configuration.
	 * @param {Ext.data.Record} record The record to validate
	 * @return {Boolean} True if the record is valid with in the bounds of the filter, false otherwise.
	 */
	 validateRecord: function(){return true;}
});/*
 * Ext JS Library 2.2
 * Copyright(c) 2006-2008, Ext JS, LLC.
 * licensing@extjs.com
 * 
 * http://extjs.com/license
 */

Ext.grid.filter.StringFilter = Ext.extend(Ext.grid.filter.Filter, {
	updateBuffer: 500,
	icon: '/img/small_icons/famfamfam/find.png',
	textfieldCfg : undefined,
	
	init: function() {
		var value = this.value = new Ext.menu.EditableItem({icon: this.icon,textfieldCfg: this.textfieldCfg});
		value.on('keyup', this.onKeyUp, this);
		this.menu.add(value);
		
		this.updateTask = new Ext.util.DelayedTask(this.fireUpdate, this);
	},
	
	onKeyUp: function(event) {
		if(event.getKey() == event.ENTER){
			this.menu.hide(true);
			return;
		}
		this.updateTask.delay(this.updateBuffer);
	},
	
	isActivatable: function() {
		return this.value.getValue().length > 0;
	},
	
	fireUpdate: function() {
		if(this.active) {
			this.fireEvent("update", this);
		}
		this.setActive(this.isActivatable());
	},
	
	setValue: function(value) {
		this.value.setValue(value);
		this.fireEvent("update", this);
	},
	
	getValue: function() {
		return this.value.getValue();
	},
	
	serialize: function() {
		var args = {type: 'string', value: this.getValue()};
		this.fireEvent('serialize', args, this);
		return args;
	},
	
	validateRecord: function(record) {
		var val = record.get(this.dataIndex);
		if(typeof val != "string") {
			return this.getValue().length == 0;
    }
		return val.toLowerCase().indexOf(this.getValue().toLowerCase()) > -1;
	}
});/*
 * Ext JS Library 2.2
 * Copyright(c) 2006-2008, Ext JS, LLC.
 * licensing@extjs.com
 * 
 * http://extjs.com/license
 */

Ext.grid.filter.DateFilter = Ext.extend(Ext.grid.filter.Filter, {
    /**
     * @cfg {Date} dateFormat
     * The date format applied to the menu's {@link Ext.menu.DateMenu}
     */
	dateFormat: 'm/d/Y',
    /**
     * @cfg {Object} pickerOpts
     * The config object that will be passed to the menu's {@link Ext.menu.DateMenu} during
     * initialization (sets minDate, maxDate and format to the same configs specified on the filter)
     */
	pickerOpts: {},
    /**
     * @cfg {String} beforeText
     * The text displayed for the "Before" menu item
     */
    beforeText: 'Before',
    /**
     * @cfg {String} afterText
     * The text displayed for the "After" menu item
     */
    afterText: 'After',
    /**
     * @cfg {String} onText
     * The text displayed for the "On" menu item
     */
    onText: 'On',
    /**
     * @cfg {Date} minDate
     * The minimum date allowed in the menu's {@link Ext.menu.DateMenu}
     */
    /**
     * @cfg {Date} maxDate
     * The maximum date allowed in the menu's {@link Ext.menu.DateMenu}
     */
	
	init: function() {
		var opts = Ext.apply(this.pickerOpts, {
			minDate: this.minDate, 
			maxDate: this.maxDate, 
			format:  this.dateFormat
		});
		var dates = this.dates = {
			'before': new Ext.menu.CheckItem({text: this.beforeText, menu: new Ext.menu.DateMenu(opts)}),
			'after':  new Ext.menu.CheckItem({text: this.afterText, menu: new Ext.menu.DateMenu(opts)}),
			'on':     new Ext.menu.CheckItem({text: this.onText, menu: new Ext.menu.DateMenu(opts)})
    };
				
		this.menu.add(dates.before, dates.after, "-", dates.on);
		
		for(var key in dates) {
			var date = dates[key];
			date.menu.on('select', this.onSelect.createDelegate(this, [date]), this);
  
      date.on('checkchange', function(){
        this.setActive(this.isActivatable());
			}, this);
		};
	},
  
	onSelect: function(date, menuItem, value, picker) {
    date.setChecked(true);
    var dates = this.dates;
    
    if(date == dates.on) {
      dates.before.setChecked(false, true);
      dates.after.setChecked(false, true);
    } else {
      dates.on.setChecked(false, true);
      
      if(date == dates.after && dates.before.menu.picker.value < value) {
        dates.before.setChecked(false, true);
      } else if (date == dates.before && dates.after.menu.picker.value > value) {
        dates.after.setChecked(false, true);
      }
    }
    
    this.fireEvent("update", this);
  },
  
	getFieldValue: function(field) {
		return this.dates[field].menu.picker.getValue();
	},
	
	getPicker: function(field) {
		return this.dates[field].menu.picker;
	},
	
	isActivatable: function() {
		return this.dates.on.checked || this.dates.after.checked || this.dates.before.checked;
	},
	
	setValue: function(value) {
		for(var key in this.dates) {
			if(value[key]) {
				this.dates[key].menu.picker.setValue(value[key]);
				this.dates[key].setChecked(true);
			} else {
				this.dates[key].setChecked(false);
			}
    }
	},
	
	getValue: function() {
		var result = {};
		for(var key in this.dates) {
			if(this.dates[key].checked) {
				result[key] = this.dates[key].menu.picker.getValue();
      }
    }	
		return result;
	},
	
	serialize: function() {
		var args = [];
		if(this.dates.before.checked) {
			args = [{type: 'date', comparison: 'lt', value: this.getFieldValue('before').format(this.dateFormat)}];
    }
		if(this.dates.after.checked) {
			args.push({type: 'date', comparison: 'gt', value: this.getFieldValue('after').format(this.dateFormat)});
    }
		if(this.dates.on.checked) {
			args = {type: 'date', comparison: 'eq', value: this.getFieldValue('on').format(this.dateFormat)};
    }

    this.fireEvent('serialize', args, this);
		return args;
	},
	
	validateRecord: function(record) {
		var val = record.get(this.dataIndex).clearTime(true).getTime();
		
		if(this.dates.on.checked && val != this.getFieldValue('on').clearTime(true).getTime()) {
			return false;
    }
		if(this.dates.before.checked && val >= this.getFieldValue('before').clearTime(true).getTime()) {
			return false;
    }
		if(this.dates.after.checked && val <= this.getFieldValue('after').clearTime(true).getTime()) {
			return false;
    }
		return true;
	}
});/*
 * Ext JS Library 2.2
 * Copyright(c) 2006-2008, Ext JS, LLC.
 * licensing@extjs.com
 * 
 * http://extjs.com/license
 */

Ext.grid.filter.ListFilter = Ext.extend(Ext.grid.filter.Filter, {
	labelField:  'text',
	loadingText: 'Loading...',
	loadOnShow:  true,
	value:       [],
	loaded:      false,
	phpMode:     false,
	
	init: function(){
		this.menu.add('<span class="loading-indicator">' + this.loadingText + '</span>');
		
		if(this.store && this.loadOnShow) {
		  this.menu.on('show', this.onMenuLoad, this);
		} else if(this.options) {
			var options = [];
			for(var i=0, len=this.options.length; i<len; i++) {
				var value = this.options[i];
				switch(Ext.type(value)) {
					case 'array':  
            options.push(value);
            break;
					case 'object':
            options.push([value.id, value[this.labelField]]);
            break;
					case 'string':
            options.push([value, value]);
            break;
				}
			}
			
			this.store = new Ext.data.Store({
				reader: new Ext.data.ArrayReader({id: 0}, ['id', this.labelField])
			});
			this.options = options;
			this.menu.on('show', this.onMenuLoad, this);
		}
    
		this.store.on('load', this.onLoad, this);
		this.bindShowAdapter();
	},
	
	/**
	 * Lists will initially show a 'loading' item while the data is retrieved from the store. In some cases the
	 * loaded data will result in a list that goes off the screen to the right (as placement calculations were done
	 * with the loading item). This adaptor will allow show to be called with no arguments to show with the previous
	 * arguments and thusly recalculate the width and potentially hang the menu from the left.
	 * 
	 */
	bindShowAdapter: function() {
		var oShow = this.menu.show;
		var lastArgs = null;
		this.menu.show = function() {
			if(arguments.length == 0) {
				oShow.apply(this, lastArgs);
			} else {
				lastArgs = arguments;
				oShow.apply(this, arguments);
			}
		};
	},
	
	onMenuLoad: function() {
		if(!this.loaded) {
			if(this.options) {
				this.store.loadData(this.options);
      } else {
				this.store.load();
      }
		}
	},
	
	onLoad: function(store, records) {
		var visible = this.menu.isVisible();
		this.menu.hide(false);
		
		this.menu.removeAll();
		
		var gid = this.single ? Ext.id() : null;
		for(var i=0, len=records.length; i<len; i++) {
			var item = new Ext.menu.CheckItem({
				text: records[i].get(this.labelField), 
				group: gid, 
				checked: this.value.indexOf(records[i].id) > -1,
				hideOnClick: false
      });
			
			item.itemId = records[i].id;
			item.on('checkchange', this.checkChange, this);
						
			this.menu.add(item);
		}
		
		this.setActive(this.isActivatable());
		this.loaded = true;
		
		if(visible) {
			this.menu.show(); //Adaptor will re-invoke with previous arguments
    }
	},
	
	checkChange: function(item, checked) {
		var value = [];
		this.menu.items.each(function(item) {
			if(item.checked) {
				value.push(item.itemId);
      }
		},this);
		this.value = value;
		
		this.setActive(this.isActivatable());
		this.fireEvent("update", this);
	},
	
	isActivatable: function() {
		return this.value.length > 0;
	},
	
	setValue: function(value) {
		var value = this.value = [].concat(value);

		if(this.loaded) {
			this.menu.items.each(function(item) {
				item.setChecked(false, true);
				for(var i=0, len=value.length; i<len; i++) {
					if(item.itemId == value[i]) {
						item.setChecked(true, true);
          }
        }
			}, this);
    }
			
		this.fireEvent("update", this);
	},
	
	getValue: function() {
		return this.value;
	},
	
	serialize: function() {
    var args = {type: 'list', value: this.phpMode ? this.value.join(',') : this.value};
    this.fireEvent('serialize', args, this);
		return args;
	},
	
	validateRecord: function(record) {
		return this.getValue().indexOf(record.get(this.dataIndex)) > -1;
	}
});/*
 * Ext JS Library 2.2
 * Copyright(c) 2006-2008, Ext JS, LLC.
 * licensing@extjs.com
 * 
 * http://extjs.com/license
 */

Ext.grid.filter.NumericFilter = Ext.extend(Ext.grid.filter.Filter, {
	init: function() {
		this.menu = new Ext.menu.RangeMenu();
		
		this.menu.on("update", this.fireUpdate, this);
	},
	
	fireUpdate: function() {
		this.setActive(this.isActivatable());
		this.fireEvent("update", this);
	},
	
	isActivatable: function() {
		var value = this.menu.getValue();
		return value.eq !== undefined || value.gt !== undefined || value.lt !== undefined;
	},
	
	setValue: function(value) {
		this.menu.setValue(value);
	},
	
	getValue: function() {
		return this.menu.getValue();
	},
	
	serialize: function() {
		var args = [];
		var values = this.menu.getValue();
		for(var key in values) {
			args.push({type: 'numeric', comparison: key, value: values[key]});
    }
		this.fireEvent('serialize', args, this);
		return args;
	},
	
	validateRecord: function(record) {
		var val = record.get(this.dataIndex),
			values = this.menu.getValue();
			
		if(values.eq != undefined && val != values.eq) {
			return false;
    }
		if(values.lt != undefined && val >= values.lt) {
			return false;
    }
		if(values.gt != undefined && val <= values.gt) {
			return false;
    }
		return true;
	}
});/*
 * Ext JS Library 2.2
 * Copyright(c) 2006-2008, Ext JS, LLC.
 * licensing@extjs.com
 * 
 * http://extjs.com/license
 */

Ext.grid.filter.BooleanFilter = Ext.extend(Ext.grid.filter.Filter, {
    /**
     * @cfg {Boolean} defaultValue
     * The default value of this filter (defaults to false)
     */
    defaultValue: false,
    /**
     * @cfg {String} yesText
     * The text displayed for the "Yes" checkbox
     */
    yesText: 'Yes',
    /**
     * @cfg {String} noText
     * The text displayed for the "No" checkbox
     */
    noText: 'No',

	init: function(){
	    var gId = Ext.id();
			this.options = [
				new Ext.menu.CheckItem({text: this.yesText, group: gId, checked: this.defaultValue === true}),
				new Ext.menu.CheckItem({text: this.noText, group: gId, checked: this.defaultValue === false})
	    ];
		
		this.menu.add(this.options[0], this.options[1]);
		
		for(var i=0; i<this.options.length; i++) {
			this.options[i].on('click', this.fireUpdate, this);
			this.options[i].on('checkchange', this.fireUpdate, this);
		}
	},
	
	isActivatable: function() {
		return true;
	},
	
	fireUpdate: function() {		
		this.fireEvent("update", this);			
		this.setActive(true);
	},
	
	setValue: function(value) {
		this.options[value ? 0 : 1].setChecked(true);
	},
	
	getValue: function() {
		return this.options[0].checked;
	},
	
	serialize: function() {
		var args = {type: 'boolean', value: this.getValue()};
		this.fireEvent('serialize', args, this);
		return args;
	},
	
	validateRecord: function(record) {
		return record.get(this.dataIndex) == this.getValue();
	}
});/*!
 * BP3D JavaScript Library
 * http://lifesciencedb.jp/bp3d/
 */
// /bp3d/ag-in-service/htdocs/ag_lang_js.cgiより自動生成
var ag_lang={"ADMIN_FORM_ADD_TITLE":"追加","ADMIN_FORM_CLASSLABEL_TITLE":"分類ラベル","ADMIN_FORM_DELETE_CAUSE_TITLE":"削除理由","ADMIN_FORM_DELETE_TITLE":"削除","ADMIN_FORM_DETAIL_E_TITLE":"詳細情報(英語)","ADMIN_FORM_DETAIL_J_TITLE":"詳細情報(日本語)","ADMIN_FORM_DETAIL_TITLE":"詳細","ADMIN_FORM_ENG_TITLE":"英語","ADMIN_FORM_ICON_TITLE":"アイコン","ADMIN_FORM_JPN_TITLE":"日本語","ADMIN_FORM_KANA_TITLE":"かな","ADMIN_FORM_LATINA_TITLE":"ラテン語","ADMIN_FORM_NAME_B_TITLE":"学名","ADMIN_FORM_NAME_E_TITLE":"英名","ADMIN_FORM_NAME_J_TITLE":"和名","ADMIN_FORM_NAME_TITLE":"名称","ADMIN_FORM_ORGAN_SYSTEM_E_TITLE":"臓器系・器官系(英語)","ADMIN_FORM_ORGAN_SYSTEM_J_TITLE":"臓器系・器官系(日本語)","ADMIN_FORM_ORGAN_SYSTEM_TITLE":"臓器系・器官系","ADMIN_FORM_REG_ERRMSG":"登録に失敗しました","ADMIN_FORM_REG_OKMSG":"登録しました","ADMIN_FORM_REG_WAITMSG":"登録しています","ADMIN_FORM_SYNONYM_E_TITLE":"シノニム(英語)","ADMIN_FORM_SYNONYM_J_TITLE":"シノニム(日本語)","ADMIN_FORM_UPDATE_TITLE":"編集","ADMIN_FORM_VOLUME_TITLE":"体積","ADMIN_MENU_ADD_TITLE":"追加","ADMIN_MENU_DELETE_TITLE":"削除","ADMIN_MENU_TITLE":"管理","ADMIN_MENU_UPDATE_TITLE":"編集","ANATOMO_ANATOMOGRAM_LABEL":"アナトモグラム","ANATOMO_COMMENT":"絵に説明を付ける","ANATOMO_EDITOR_LABEL":"現在のサイト状態を再現","ANATOMO_EDITOR_LABEL_A":"hyperlink to the present status of this site","ANATOMO_EMBEDDED_LABEL":"モデルを操作可能イメージとして埋め込み","ANATOMO_IMAGE_LABEL":"モデルイメージを再現","ANATOMO_IMAGE_LABEL_IMG":"Embed as an image","ANATOMO_OPEN":"大きなイメージで見る","ANATOMO_REP_LABEL":"Draw Type","ART_NAME":"Model component","BP3D_DESCRIPTION":"Select parts and Make Embeddable Model of Your Own.","BP3D_MODEL_ICON_LABEL":"モデルアイコンを再現","BP3D_TITLE":"BodyParts3D/Anatomography","BP3D_TITLE_HTML":"<div style=\"position:relative;width:auto;overflow:hidden;background:#dfe8f6;padding:2px;\"><div style=\"float:left;margin-right:1em;\"><label style=\"line-height:30px;color:#15428b;font:bold 16px tahoma,arial,helvetica,sans-serif;\">BodyParts3D/Anatomography</label><label style=\"line-height:30px;color:black;font:normal 11px tahoma,arial,helvetica,sans-serif;\"> : Select parts and Make Embeddable Model of Your Own.</label></div><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"x-btn-wrap x-btn \" style=\"float:left;width: auto;margin-left:1em;\"><tbody><tr><td class=\"x-btn-left\"><i>&nbsp;</i></td><td class=\"x-btn-center\"><em unselectable=\"on\"><button class=\"x-btn-text\" type=\"button\" onclick=\"click_information_button({url:\\'info/userGuide/application/index.html\\'})\">できること</button></em></td><td class=\"x-btn-right\"><i>&nbsp;</i></td></tr></tbody></table><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"x-btn-wrap x-btn \" style=\"float:left;width: auto;margin-left:1em;\"><tbody><tr><td class=\"x-btn-left\"><i>&nbsp;</i></td><td class=\"x-btn-center\"><em unselectable=\"on\"><button class=\"x-btn-text\" type=\"button\" onclick=\"click_information_button({url:\\'http://www.youtube.com/watch?v=CJLH1PqH_hg\\'})\">使い方</button></em></td><td class=\"x-btn-right\"><i>&nbsp;</i></td></tr></tbody></table></div>","BUILD_UP":"Build-up","BUTTON_ERROR_REPORT":"Error Report","BUTTON_FMA2OBJFILE_LIST":"FMA2obj","BUTTON_INFORMATION":"Information","BUTTON_OBJFILE_LIST":"obj2FMA","CDI_NAME":"Represented concept","CLICK_IMAGE_GRID_EMPTY_MESSAGE":"Click on the Image","COMMAND_LABEL":"コマンド","COMMAND_TITLE_MOVE":"移動","COMMAND_TITLE_ROTATE":"回転","COMMAND_TITLE_ZOOM":"拡大縮小","COMMENT_TITLE":"コメント","COMMENT_TITLE_DELETE":"削除","COMMENT_TITLE_DELETE_ERRMSG":"コメントの削除に失敗しました","COMMENT_TITLE_DELETE_MSG":"コメントを削除してよろしいですか？","COMMENT_TITLE_DELETE_SEL":"選択コメント削除","COMMENT_TITLE_EDIT":"編集","COMMENT_TITLE_PLUS":"コメント追加","COMMENT_TITLE_REFRESH":"コメント更新","COMMENT_TITLE_REPLY":"返信","COMMENT_TITLE_REPLY_SEL":"選択コメント返信","COMMENT_WIN_ADDMSG":"コメントを登録しました","COMMENT_WIN_ERRMSG":"コメントの登録に失敗しました","COMMENT_WIN_TITLE":"コメントを入力してください","COMMENT_WIN_TITLE_CANCEL":"中止","COMMENT_WIN_TITLE_SEND":"登録","COMMENT_WIN_WAITMSG":"コメントを登録しています","COMPLETE_COMPOUND":"Complete COMPOUND","COMPOUND_SECONDARY":"COMPOUND/SECONDARY","CONTENT_TITLE":"画像を選択してください","CONVERT_URL_ERRMSG":"URL変換エラー","COORDINATE_SYSTEM":"描画座標系","COPY_TITLE":"Copy","DATA_VERSION":"Data Version","DETAIL_TITLE":"詳細","DETAIL_TITLE_BNAME":"学名","DETAIL_TITLE_DEFINITION_E":"定義","DETAIL_TITLE_DETAIL":"詳細","DETAIL_TITLE_ICON_URL":"アイコンURL","DETAIL_TITLE_LAST":"更新日時","DETAIL_TITLE_NAME":"名称","DETAIL_TITLE_NAME_E":"英名","DETAIL_TITLE_NAME_J":"和名","DETAIL_TITLE_NAME_K":"かな","DETAIL_TITLE_NAME_L":"ラテン語","DETAIL_TITLE_ORGAN_SYSTEM_E":"臓器系・器官系(英語)","DETAIL_TITLE_ORGAN_SYSTEM_J":"臓器系・器官系(日本語)","DETAIL_TITLE_POINT_CHILDREN":"点構造要素","DETAIL_TITLE_POINT_PARENT":"親FMAID","DETAIL_TITLE_POINT_PARENT_ID":"親FMAID","DETAIL_TITLE_POINT_PARENT_NAME":"親解剖構造名","DETAIL_TITLE_SIZE":"ファイルサイズ","DETAIL_TITLE_SYNONYM_E":"シノニム","DETAIL_TITLE_SYNONYM_J":"シノニム(日本語)","DETAIL_TITLE_TAB_CONCEPT":"Concept(FMA)","DETAIL_TITLE_TAB_INFORMATION":"BodyParts3D","DETAIL_TITLE_TAB_TWEET":"Comment","DETAIL_TITLE_VOLUME":"体積","DETAIL_TITLE_XMAX":"Xmax","DETAIL_TITLE_XMIN":"Xmin","DETAIL_TITLE_YMAX":"Ymax","DETAIL_TITLE_YMIN":"Ymin","DETAIL_TITLE_ZMAX":"Zmax","DETAIL_TITLE_ZMIN":"Zmin","DISPTYPE_LIST":"リスト","DISPTYPE_LIST_WIDTH":"70","DISPTYPE_THUMB":"サムネイル","DISPTYPE_TITLE":"表示形式","DISPTYPE_TREE":"ツリー","DISPTYPE_WIDTH":"80","DOCUMENT_TITLE":"BodyParts3D/Anatomography : Select parts and Make Embeddable Model of Your Own.","ELEMENT":"ELEMENT","ELEMENT_COMPOUND":"ELEMENT and complete COMPOUND","ELEMENT_PRIMARY":"ELEMENT/PRIMARY","FEEDBACK_TITLE_DELETE_MSG":"[ %s ] を削除してよろしいですか？","FILTER_TITLE":"フィルター","FMA_DESCRIPTION_HTML":"<div style=\"padding:4px;font-weight:bold;vertical-align:bottom;\"><a href=\"http://sig.biostr.washington.edu/projects/fm/AboutFM.html\" target=\"_blank\" style=\"color:#0000ee;background: url(css/external.png) no-repeat scroll right bottom;padding-right:14px;\">FMA is anatomical ontology by University of Washington School of Medicine</a></div>","FMA_DESCRIPTION_URL":"http://sig.biostr.washington.edu/projects/fm/AboutFM.html","FMA_INFORMATION":"<a href=\"#\" onclick=\"return click_information_button({hash:\\'#FMA\\'});\"><img src=\"css/information.png\" width=12 height=12></a>","GOTO_AG":"<div class=\"goto-ag-base\"><div class=\"goto-ag-btn\"><a class=\"goto-ag-btn\" href=\"#\"><img src=\"css/goto_ag.png?1\"></a></div></div><div class=\"licenses-base\"><div class=\"licenses-img\"><a href=\"http://creativecommons.org/licenses/by-sa/2.1/jp/\" rel=\"license\"><img src=\"http://i.creativecommons.org/l/by-sa/2.1/jp/80x15.png\" alt=\"Creative Commons License\" align=\"left\" style=\"padding-right:2px;\"></a></div><br><div class=\"licenses-msg\">BodyParts3D, &copy; ライフサイエンス統合データベースセンター licensed under CC表示 継承2.1 日本</div></div>","GOTO_AG_WIDTH":"200","GOTO_ICON_LIST":"アイコンリストへ","GRID_EMPTY_MESSAGE":"ここに臓器アイコンをドラッグして、Anatomographyタブをクリックして下さい。<br><br>異なるデータセットのパーツは同時に描画できません。","GRID_TITLE_MODIFIED":"更新日","GRID_TITLE_NAME_E":"英名","GRID_TITLE_NAME_J":"和名","GRID_TITLE_NAME_K":"かな","GRID_TITLE_ORGANSYS":"器官系","GRID_TITLE_PHASE":"フェーズ","GRID_TITLE_VOLUME":"体積","HEATMAP_SET_MAX_VALUE":"HeatMapの最大値に設定","HEATMAP_SET_MIN_VALUE":"HeatMapの最小値に設定","ICON_REG_MSG":"登録済み","ICON_UNREG_MSG":"未登録","IMAGE_POSITION":"方向","IMAGE_POSITION_BACK":"後","IMAGE_POSITION_FRONT":"前","IMAGE_POSITION_LEFT":"左","IMAGE_POSITION_LIST_WIDTH":"40","IMAGE_POSITION_RIGHT":"右","IMAGE_POSITION_ROTATE":"回転","IMAGE_POSITION_WIDTH":"50","IMAGE_TREE_DEPTH":"深さ","IMAGE_TREE_DEPTH_LIST_WIDTH":"20","IMAGE_TREE_DEPTH_WIDTH":"35","INCOMPLETE_COMPOUND":"Incomplete COMPOUND","INFORMATION_URL":"info/index.html","LICENSES":"<table><tbody><tr><td valign=\"top\"><a href=\"http://creativecommons.org/licenses/by-sa/2.1/jp/\" rel=\"license\"><img src=\"http://i.creativecommons.org/l/by-sa/2.1/jp/80x15.png\" alt=\"Creative Commons License\" align=\"left\" style=\"padding-right:2px;\"></a>本サイトのコンテンツの標準利用許諾は、\"<b>クリエイティブ・コモンズ　表示-継承2.1　日本</b>\"です。<a href=\"info/userGuide/faq/credit.html\">&gt;&gt;詳細</a></td></tr></tbody></table>","LICENSES_HEIGHT":"80","LICENSES_WIDTH":"100","LICENSE_AG":"<div class=\"licenses-base\"><div class=\"licenses-img\"><a href=\"http://creativecommons.org/licenses/by-sa/2.1/jp/\" rel=\"license\"><img src=\"http://i.creativecommons.org/l/by-sa/2.1/jp/80x15.png\" alt=\"Creative Commons License\" align=\"left\" style=\"padding-right:2px;\"></a></div><br><div class=\"licenses-msg\">BodyParts3D, &copy; ライフサイエンス統合データベースセンター licensed under CC表示 継承2.1 日本</div></div>","LICENSE_EMBED":"BodyParts3D &copy; ライフサイエンス統合データベースセンター licensed under <a href=\"http://creativecommons.org/licenses/by-sa/2.1/jp/\" target=\"_blank\">CC表示 継承2.1 日本</a>","LICENSE_URL":"info/license/index.html","LINK_TAB_INFORMATION":"<a href=\"#\" onclick=\"return click_information_button({hash:\\'#BuildUp\\'});\"><img src=\"css/information.png\" width=12 height=12></a>","LOCALE_TITLE":"English","MSG_LOADING_DATA":"データ読込中 ...","MSG_NOT_DATA":"データは存在しません","MSG_NOT_ICON":"アイコンは存在しません","MSG_NOT_REVIEW":"レビューは存在しません","NEIGHBOR_PARTS_GRID_EMPTY_MESSAGE":"Pick one point to gather neighboring elements of it.","NOT_LATEST_VERSION":"","NOT_LATEST_VERSION_STYLE":"display:none;font-size:12px;font-weight:bold;text-decoration:underline;color:#ff0000;margin-left:2px;padding:4px;","OBJECTS_SET":"Objects set","OR_MODE":"以上","PAGING_DISP_MSG":"表示中のコメント","PAGING_EMPTY_MSG":"表示するはコメントありません","PAGING_FIRST":"最初のページへ","PAGING_LAST":"最後のページへ","PAGING_NEXT":"次のページへ","PAGING_PREV":"前のページへ","PAGING_REFRESH":"コメント更新","PART_OF_RELATION":"part of relations given as attributes in fma","PART_OF_RELATION_BP3D":"part of relations added for BodyParts3D","PART_OF_RELATION_BP3D_MESSAGE":"inference: \"left-part\" is part of \"left-whole\" when \"part\" is part of \"whole\".","PASTE_DESC_CSV":"<p style=\"margin:0;text-align:left;font-size:12px;\">最初の行にデータの項目名<br/>２行目以降にデータを入力して下さい。<br>各項目（データ）の区切りはカンマを使用して下さい。</p>","PASTE_DESC_TAB":"<p style=\"margin:0;text-align:left;font-size:12px;\">最初の行にデータの項目名<br/>２行目以降にデータを入力して下さい。<br>各項目（データ）の区切りはタブを使用して下さい。</p>","PASTE_TITLE":"Paste","REPRESENTATION":"Representation","REP_DENSITY":"Model / Concept density","REP_ID":"Representation","REP_PRIMITIVE":"Representation method","SEARCH_GRID_FILTER_NO":"無し","SEARCH_GRID_FILTER_YES":"有り","SEE_HOW_TO":"使い方","SEE_HOW_TO_URL":"http://www.youtube.com/watch?v=CJLH1PqH_hg","SEE_WHAT_YOU_CAN_GET":"できること","SEE_WHAT_YOU_CAN_GET_URL":"info/userGuide/application/index.html","SORTNAME_LENGTH":"12","SORT_LIST_WIDTH":"90","SORT_TITLE":"ソート","SORT_TITLE_LAST":"更新日時","SORT_TITLE_NAME_E":"名称(英名)","SORT_TITLE_NAME_J":"名称(和名)","SORT_TITLE_NAME_K":"名称(かな)","SORT_TITLE_NAME_L":"名称(ラテン名)","SORT_TITLE_NONE":"無し","SORT_TITLE_VOLUME":"体積","SORT_WIDTH":"100","TABTIP_AG":"人体モデル図編集ツール","TABTIP_BP3D":"人体各部位のインデックス","TABTIP_HOME":"Home","TABTIP_INFORMATION":"Information","TABTIP_REVIEWS":"Reviews","TITLE_AG":" ","TITLE_BP3D":" ","TITLE_HOME":"Home","TITLE_INFORMATION":" ","TITLE_REVIEWS":"Reviews","TOOLTIP_AUTO_ROTATION":"Auto rotation","TOOLTIP_FOCUS":"Focus(Centering & Zoom) Selected","TOOLTIP_FOCUS_CENTER":"Focus(Centering) Selected","TOOLTIP_MOVE":"移動","TOOLTIP_ROTATE":"回転","TOP_EDIT_TITLE":"編集","TOP_TITLE":"トップページ","TOP_WHATSNEW_TITLE":"新着情報","TREE_ROOT_TITLE":"ホーム","TREE_TITLE":"分類","TREE_TYPE":"Build-up logic","TREE_TYPE_1":"便宜的","TREE_TYPE_2":"is_a","TREE_TYPE_3":"is_a","TREE_TYPE_4":"PartOf","TREE_TYPE_HTML":"<label style=\"font-size:14px;font-weight:bold;vertical-align:bottom;\">Build-up logic<a href=\"#\" onclick=\"return click_information_button({hash:\\'#BuildUp\\'});\"><img src=\"css/information.png\" width=12 height=12></a>&nbsp;</label>","TREE_VERSION":"Tree version","VERSION_COMMENT_STYLE":"display:none;font-size:12px;color:#000000;margin-left:2px;padding:4px;","VERSION_INFORMATION":"\" i \" at the end of the data version (ex. 4.3i) denotes FMA data were augmented by ourselves to improve aggregation of smaller into larger parts. see <a href=\"http://rgm22.nig.ac.jp/mediawiki-ogareport/index.php/Site_information#Whats_new\" target=\"_blank\">http://rgm22.nig.ac.jp/mediawiki-ogareport/index.php/Site_information#Whats_new</a>","VERSION_INFORMATION_STYLE":"font-size:10px;color:#000000;margin-left:2px;padding:4px;"};
var get_ag_lang = function(key){
	if(!key) return undefined;
	if(ag_lang[key]===undefined && window.console){
		window.console.error('Undefined ['+key+']');
	}
	if(ag_lang[key].match(/^[\-+]*[0-9\.]+$/)){
		return Number(ag_lang[key]);
	}else{
		return ag_lang[key];
	}
};
var ag_def={"DEF_COLOR":"#f0d2a0"};
window.ag_extensions = window.ag_extensions || {};
ag_extensions.single_pin = ag_extensions.single_pin || {};

ag_extensions.single_pin._init = function(){
	var self = this;

//id="ag-comment-tabpanel"
	self.__parentPanel_id = 'anatomography-pin-grid-panel';
	self.__parentPanel = Ext.getCmp(self.__parentPanel_id);
//	console.log("ag_extensions.single_pin._init():"+self.__parentPanel);
	if(self.__parentPanel){
		if(self.__parentPanel.rendered){
			self._initUI();
		}else{
			self.__parentPanel.on({
				'render': function(){
					self._initUI();
				},
				buffer: 100,
				single: true
			});
		}
	}else{
		self.__initTask = {
			run: function(){
				self.__parentPanel = Ext.getCmp(self.__parentPanel_id);
				if(!self.__parentPanel) return;
				self.__initTaskRunner.stop(self.__initTask);
				if(self.__parentPanel.rendered){
					self._initUI();
				}else{
					self.__parentPanel.on({
						'render': function(){
							self._initUI();
						},
						buffer: 100,
						single: true
					});
				}
			},
			interval: 1000
		}
		self.__initTaskRunner = new Ext.util.TaskRunner();
		self.__initTaskRunner.start(self.__initTask);
	}
};

ag_extensions.single_pin._initUI = function(){
	var self = this;
	try{
//		console.log("ag_extensions.single_pin._initUI():"+self.__parentPanel);
//		console.log("ag_extensions.single_pin._initUI():"+self.__parentPanel.getXType());
//		console.log("ag_extensions.single_pin._initUI():"+self.__parentPanel.getTopToolbar());
//		self.__panel = new Ext.Panel({
//			xtype: 'panel',
//			title: 'Global Pin Mng',
//		});
//		self.__parentPanel.add(self.__panel);

		var ttbar = self.__parentPanel.getTopToolbar();
		if(ttbar){
			ttbar.addSeparator();
			self.__tbBtn = ttbar.addButton({
				tooltip: 'Copy SINGLE-PIN URL',
				iconCls: 'pin_copy',
				listeners: {
					click: function(button, e) {
						self.openCopyWindow({
							animEl: button.el,
							iconCls: button.iconCls,
							title: button.tooltip
						});
					}
				}
			});

			self.__parentPanel.getSelectionModel().on({
				selectionchange: function(selModel){
					self.__tbBtn.setDisabled(selModel.getCount()<=0);
				},
				scope: self
			});

			self.bind();
		}
	}catch(e){
		console.error(e);
	}
};

ag_extensions.single_pin.bind = function(){
	var self = this;
	self.__parentPanel.on({
		cellclick: function(gridCmp,rowIndex,colIndex,e){
			try{
				if(gridCmp.getColumnModel().getIndexById('spu')!=colIndex) return;

				var selModel = gridCmp.getSelectionModel();
				selModel.clearSelections();
				selModel.selectRow(rowIndex);

				var animEl = Ext.get(gridCmp.getView().getCell(rowIndex,colIndex));

				var b = self.__tbBtn;
//				b.fireEvent('click',b);

				self.openCopyWindow({
					animEl: animEl,
					iconCls: b.iconCls,
					title: b.tooltip
				});

				e.stopEvent();
			}catch(e){
				if(window.console.error) window.console.error(e);
			}
		}
	});
};

ag_extensions.single_pin.gridColumn = function(){
	return {
		dataIndex: 'no',
		header: 'SINGLE-PIN URL',
		id: 'spu',
		renderer: ag_extensions.single_pin.rendererGrid
	};
};

ag_extensions.single_pin.rendererGrid = function(value,metadata,record,rowIndex,colIndex,store){
	var self = ag_extensions.single_pin;
	metadata.attr = metadata.cellAttr = 'style="-moz-user-select:none;-khtml-user-select:none;-webkit-user-select:none;user-select:none;cursor:pointer;text-align:center;"'
	try{
//		return '<a target="_blank" href='+self.createSinglePinSegmentUrl([record])+'><img src="css/icon_link_mini_off.png" width=15 height=14></a>';

//		return '<a href="#" onclick="return ag_extensions.single_pin.clickSPCol(this);"><img src="css/icon_link_mini_off.png" width=15 height=14></a>';
		return '<img src="css/icon_link_mini_off.png" width=15 height=14>';
	}catch(e){
		if(window.console.error) window.console.error(e);
		return '';
	}
};

ag_extensions.single_pin.clickSPCol = function(dom){
	var self = this;
	var records;
	try{
		var gridCmp = self.__parentPanel;
		var selModel = gridCmp.getSelectionModel();
		selModel.clearSelections();
		var idx = gridCmp.getView().findRowIndex(Ext.get(dom.parentNode));
	}catch(e){
		if(window.console.error) window.console.error(e);
	}
//	var b = Ext.getCmp('anatomo_comment_pick_sp_url_copy');
	return false;
};

//SINGLE-PIN URL (Pin alone)用
ag_extensions.single_pin.createSinglePinAloneUrl = function(records,asString){
	if(Ext.isEmpty(asString)) asString = true;
	var anatomo_pin_shape_combo_value;
	var coordinate_system;

	try{
		anatomo_pin_shape_combo_value = Ext.getCmp("anatomo_pin_shape_combo").getValue();
	}catch(e){
		anatomo_pin_shape_combo_value = undefined;
	}
	try{
		coordinate_system = Ext.getCmp("ag-coordinate-system-combo").getValue();
	}catch(e){
		coordinate_system = undefined;
	}

	var editURL = getEditUrl();
	var prmPins = [];
	Ext.each(records,function(r,i,a){
		var prmPin = makeAnatomoPrm_Pin(r,anatomo_pin_shape_combo_value,coordinate_system,{no:1});
		if(Ext.isEmpty(prmPin)) return true;

		var jsonStr = prmPin;
		try{
			jsonStr = ag_extensions.toJSON.URI2JSON(jsonStr,{
				toString:true,
				mapPin:false,
				callback:undefined
			});
			jsonStr = encodeURIComponent(jsonStr);
			prmPins.push(editURL + cgipath.animation + '?' + jsonStr);
		}catch(e){
			prmPins.push(editURL + cgipath.animation + '?' + prmPin);
		}
	});
	if(asString){
		var sp_alone_url;
		if(prmPins.length) sp_alone_url = prmPins.join("\n");
		return sp_alone_url;
	}else{
		return prmPins.length ? prmPins : undefined;
	}
};

//SINGLE-PIN URL (Pin on a segment)用
ag_extensions.single_pin.createSinglePinSegmentUrl = function(records,asString){
	if(Ext.isEmpty(asString)) asString = true;
	var anatomo_pin_shape_combo_value;
	var coordinate_system;

	try{
		anatomo_pin_shape_combo_value = Ext.getCmp("anatomo_pin_shape_combo").getValue();
	}catch(e){
		anatomo_pin_shape_combo_value = undefined;
	}
	try{
		coordinate_system = Ext.getCmp("ag-coordinate-system-combo").getValue();
	}catch(e){
		coordinate_system = undefined;
	}

	var cur_url = Text2URI(URI2Text(glb_anatomo_editor_url,{target:{parts:false,pins:false}}),{target:{parts:false,pins:false}});
	var cur_search = "";
	if(cur_url.indexOf("?")>=0) cur_search = cur_url.replace(/^.+\?(.*)$/g,"$1");
	var cur_params = {};
	if(cur_search){
		var params = Ext.urlDecode(cur_search);
		if(!params.tp_ap) params.tp_ap = cur_search;
		cur_params = Ext.urlDecode(params.tp_ap);
	}

	var newRecord = Ext.data.Record.create(bp3d_parts_store_fields);
	var numRec = makeAnatomoOrganNumber(1);
	var prm_record = ag_param_store.getAt(0);

	var editURL = getEditUrl();
	var prmPins = [];
	Ext.each(records,function(r,i,a){

		var parts_record = new newRecord({
			'f_id'          : r.data.oid,
			'exclude'       : false,
			'color'         : '#'+prm_record.data.color_rgb,
			'value'         : '',
			'zoom'          : false,
			'opacity'       : '1.0',
			'representation': 'surface',
			'point'         : false
		});

		var prmParts = "oid" + numRec + "=" + r.data.oid;
		prmParts += makeAnatomoOrganPrm(numRec,parts_record,null,null);

		var prmPin = makeAnatomoPrm_Pin(r,anatomo_pin_shape_combo_value,coordinate_system,{no:1});
		if(Ext.isEmpty(prmPin)) return true;

		var params = Ext.apply({},Ext.urlDecode(prmParts),cur_params);
		params = Ext.apply({},Ext.urlDecode(prmPin),params);

		var jsonStr = Ext.urlEncode(params);
		try{
			jsonStr = ag_extensions.toJSON.URI2JSON(jsonStr,{
				toString:true,
				mapPin:false,
				callback:undefined
			});
			jsonStr = encodeURIComponent(jsonStr);
			prmPins.push(editURL + cgipath.animation + '?' + jsonStr);
		}catch(e){
			prmPins.push(editURL + cgipath.animation + '?' + Ext.urlEncode(params));
		}
	});
	if(asString){
		var sp_segment_url;
		if(prmPins.length) sp_segment_url = prmPins.join("\n");
		return sp_segment_url;
	}else{
		return prmPins.length ? prmPins : undefined;
	}
};

//SINGLE-PIN URL (Pin on a whole model)用
ag_extensions.single_pin.createSinglePinWholeModelUrl = function(records,asString){
	if(Ext.isEmpty(asString)) asString = true;
	var anatomo_pin_shape_combo_value;
	var coordinate_system;

	try{
		anatomo_pin_shape_combo_value = Ext.getCmp("anatomo_pin_shape_combo").getValue();
	}catch(e){
		anatomo_pin_shape_combo_value = undefined;
	}
	try{
		coordinate_system = Ext.getCmp("ag-coordinate-system-combo").getValue();
	}catch(e){
		coordinate_system = undefined;
	}

	var cur_url = Text2URI(URI2Text(glb_anatomo_editor_url,{target:{pins:false}}),{target:{pins:false}});
	var cur_search = "";
	if(cur_url.indexOf("?")>=0){
		cur_search = cur_url.replace(/^.+\?(.*)$/g,"$1");
	}else if(cur_url.search(/[&]*pno[0-9]{3}=/)>=0){
		cur_search = cur_url;
	}
	var cur_params = {};
	if(cur_search){
		var params = Ext.urlDecode(cur_search);
		if(!params.tp_ap) params.tp_ap = cur_search;
		cur_params = Ext.urlDecode(params.tp_ap);
	}
	var editURL = getEditUrl();
	var prmPins = [];
	Ext.each(records,function(r,i,a){
		var prmPin = makeAnatomoPrm_Pin(r,anatomo_pin_shape_combo_value,coordinate_system,{no:1});
		if(Ext.isEmpty(prmPin)) return true;
		var params = Ext.apply({},Ext.urlDecode(prmPin),cur_params);
		var jsonStr = Ext.urlEncode(params);
		try{
			jsonStr = ag_extensions.toJSON.URI2JSON(jsonStr,{
				toString:true,
				mapPin:false,
				callback:undefined
			});
			jsonStr = encodeURIComponent(jsonStr);
			prmPins.push(editURL + cgipath.animation + '?' + jsonStr);
		}catch(e){
			prmPins.push(editURL + cgipath.animation + '?' + Ext.urlEncode(params));
		}
	});
	if(asString){
		var sp_whole_url;
		if(prmPins.length) sp_whole_url = prmPins.join("\n");
		return sp_whole_url;
	}else{
		return prmPins.length ? prmPins : undefined;
	}
};

ag_extensions.single_pin.openCopyWindow = function(aOpts){
	var self = this;
	aOpts = aOpts || {};

	var records;
	try{
		records = Ext.getCmp('anatomography-pin-grid-panel').getSelectionModel().getSelections();
	}catch(e){
		if(window.console.error) window.console.error(e);
	}
	if(Ext.isEmpty(records) || Ext.isEmpty(glb_anatomo_editor_url)) return;

//SINGLE-PIN URL (Pin alone)用
	self.__sp_alone_url = ag_extensions.single_pin.createSinglePinAloneUrl(records,false);
	if(Ext.isEmpty(self.__sp_alone_url)) return;

//SINGLE-PIN URL (Pin on a segment)用
	self.__sp_segment_url = ag_extensions.single_pin.createSinglePinSegmentUrl(records,false);
	if(Ext.isEmpty(self.__sp_segment_url)) return;

//SINGLE-PIN URL (Pin on a whole model)用
	self.__sp_whole_url = ag_extensions.single_pin.createSinglePinWholeModelUrl(records,false);
	if(Ext.isEmpty(self.__sp_whole_url)) return;

	self.__urls = {
		sp_alone_url : [],
		sp_segment_url : [],
		sp_whole_url : []
	};
	Ext.each(self.__sp_alone_url,function(url,i,a){
		self.__urls.sp_alone_url.push({url:url});
	});
	Ext.each(self.__sp_segment_url,function(url,i,a){
		self.__urls.sp_segment_url.push({url:url});
	});
	Ext.each(self.__sp_whole_url,function(url,i,a){
		self.__urls.sp_whole_url.push({url:url});
	});
	var sp_alone_url = "";
	var sp_segment_url = "";
	var sp_whole_url = "";

	var transaction_id = Ext.Ajax.request({
		url     : 'get-convert-url.cgi',
		method  : 'POST',
		params  : Ext.urlEncode({urls:Ext.util.JSON.encode(self.__urls)}),
		success : function(conn,response,options){

			try{var results = Ext.util.JSON.decode(conn.responseText);}catch(e){}
			if(Ext.isEmpty(results) || Ext.isEmpty(results.status_code) || results.status_code!=200){
				var msg = get_ag_lang('CONVERT_URL_ERRMSG');
				if(results && results.status_code) msg += ' [ '+ results.status_code +' ]';
				Ext.MessageBox.show({
					title   : aOpts.title,
					msg     : msg,
					buttons : Ext.MessageBox.OK,
					icon    : Ext.MessageBox.ERROR
				});
				return;
			}
			if(Ext.isEmpty(results.sp_alone_url) || Ext.isEmpty(results.sp_segment_url) || Ext.isEmpty(results.sp_whole_url)){
				var msg = get_ag_lang('CONVERT_URL_ERRMSG');
				if(results && results.status_code) msg += ' [ no data ]';
				Ext.MessageBox.show({
					title   : aOpts.title,
					msg     : msg,
					buttons : Ext.MessageBox.OK,
					icon    : Ext.MessageBox.ERROR
				});
				return;
			}

			self.__urls_shoft = {
				sp_alone_url : [],
				sp_segment_url : [],
				sp_whole_url : []
			};
			Ext.each(results.sp_alone_url,function(r,i,a){
				if(Ext.isEmpty(r) || Ext.isEmpty(r.result) || Ext.isEmpty(r.result.status_code) || r.result.status_code != 200 || Ext.isEmpty(r.result.data) || Ext.isEmpty(r.result.data.url)) return true;
				self.__urls_shoft.sp_alone_url.push(r.result.data.url);
			});
			Ext.each(results.sp_segment_url,function(r,i,a){
				if(Ext.isEmpty(r) || Ext.isEmpty(r.result) || Ext.isEmpty(r.result.status_code) || r.result.status_code != 200 || Ext.isEmpty(r.result.data) || Ext.isEmpty(r.result.data.url)) return true;
				self.__urls_shoft.sp_segment_url.push(r.result.data.url);
			});
			Ext.each(results.sp_whole_url,function(r,i,a){
				if(Ext.isEmpty(r) || Ext.isEmpty(r.result) || Ext.isEmpty(r.result.status_code) || r.result.status_code != 200 || Ext.isEmpty(r.result.data) || Ext.isEmpty(r.result.data.url)) return true;
				self.__urls_shoft.sp_whole_url.push(r.result.data.url);
			});
			Ext.getCmp('ag-sp-alone-url-textarea').setValue(self.__urls_shoft.sp_alone_url.join("\n"));
			Ext.getCmp('ag-sp-segment-url-textarea').setValue(self.__urls_shoft.sp_segment_url.join("\n"));
			Ext.getCmp('ag-sp-whole-url-textarea').setValue(self.__urls_shoft.sp_whole_url.join("\n"));
		},
		failure : function(conn,response,options){
			Ext.MessageBox.show({
				title   : aOpts.title,
				msg     : get_ag_lang('CONVERT_URL_ERRMSG'),
				buttons : Ext.MessageBox.OK,
				icon    : Ext.MessageBox.ERROR
			});
		}
	});

	var copyWindow = new Ext.Window({
		animateTarget: aOpts.animEl || aOpts.animateTarget,
		iconCls     : aOpts.iconCls,
		title       : aOpts.title,
		width       : 400,
		height      : 532,
		minWidth    : 400,
		minHeight   : 532,
		plain       : true,
		buttonAlign :'center',
		modal       : true,
		bodyStyle   : 'background:transparent;',
		layout      : 'fit',
		items       : [{
			layout: 'form',
			border: false,
			bodyStyle   :'background:transparent;padding:5px;',
			labelAlign: 'top',
			defaultType: 'textarea',
			defaults: {
				width: 374,
				height: 116,
				selectOnFocus: true
			},
			items: [{
				id: 'ag-sp-alone-url-textarea',
				fieldLabel: 'SINGLE-PIN URL (Pin alone)',
				value: sp_alone_url
			},{
				id: 'ag-sp-segment-url-textarea',
				fieldLabel: 'SINGLE-PIN URL (Pin on a segment)',
				value: sp_segment_url
			},{
				id: 'ag-sp-whole-url-textarea',
				fieldLabel: 'SINGLE-PIN URL (Pin on a whole model)',
				value: sp_whole_url
			},{
				hideLabel: true,
				xtype: 'checkbox',
				height: null,
				checked: false,
				boxLabel : 'Elongate URL to original configuration for parsing.',
				listeners : {
					check: function(checkbox,checked){
						_dump("check():["+checkbox.id+"]["+checked+"]");
						if(!checked){
							Ext.getCmp('ag-sp-alone-url-textarea').setValue(self.__urls_shoft.sp_alone_url.join("\n"));
							Ext.getCmp('ag-sp-segment-url-textarea').setValue(self.__urls_shoft.sp_segment_url.join("\n"));
							Ext.getCmp('ag-sp-whole-url-textarea').setValue(self.__urls_shoft.sp_whole_url.join("\n"));
						}else{
							Ext.getCmp('ag-sp-alone-url-textarea').setValue(self.__sp_alone_url.join("\n"));
							Ext.getCmp('ag-sp-segment-url-textarea').setValue(self.__sp_segment_url.join("\n"));
							Ext.getCmp('ag-sp-whole-url-textarea').setValue(self.__sp_whole_url.join("\n"));
						}
					}
				}
			}]
		}],
		buttons: [{
			text: 'OK',
			handler: function(){
				copyWindow.close();
			}
		}]
	});
	copyWindow.show();

};

Ext.onReady(function(){
	ag_extensions.single_pin._init();
});
window.ag_extensions = window.ag_extensions || {};
ag_extensions.url2text = ag_extensions.url2text || {};

ag_extensions.url2text.openWindow = function(aOpts){
	aOpts = aOpts || {};

	var cur_text = URI2Text(glb_anatomo_editor_url,{target:{pins:false}});
	var cur_url = Text2URI(cur_text,{target:{pins:false}});
	var convOpts = {
		pin: {
			url_prefix : cur_url+encodeURIComponent('&')
		}
	};

	var text_value = URI2Text(glb_anatomo_editor_url,convOpts);
	if(Ext.isEmpty(text_value)) return;

	var json_value;
	var json_hidden=true;
	var text_height=290;
	if(true && window.ag_extensions && ag_extensions.toJSON && ag_extensions.toJSON.URI2JSON){
		json_value = ag_extensions.toJSON.URI2JSON(glb_anatomo_editor_url,{toString:{},callback:function(value){
			json_value = value;
			var textCmp = Ext.getCmp('ag_json_editor');
			if(textCmp && textCmp.rendered){
				textCmp.setValue(json_value);
			}else{
				var runner = new Ext.util.TaskRunner();
				var task = {
					run: function(json_value){
						var textCmp = Ext.getCmp('ag_json_editor');
						if(textCmp && textCmp.rendered){
							textCmp.setValue(json_value);
							runner.stop(task);
						}
					},
					args: [json_value],
					interval: 1000 //1 second
				}
				runner.start(task);
			}
		}});
		json_hidden=false;
		text_height=119;
	}

	var anatomo_url_window = new Ext.Window({
		animateTarget: aOpts.animEl || aOpts.animateTarget,
		iconCls     : aOpts.iconCls,
		title       : aOpts.title,
		width       : 600,
		height      : 500,
		layout      : 'form',
		plain       : true,
		bodyStyle   : 'padding:5px;text-align:right;',
		buttonAlign : 'center',
		modal       : true,
		resizable   : false,
		labelAlign  : 'left',
		labelWidth  : 24,
		items       : [
		{
			xtype         : 'textarea',
			id            : 'ag_url_textarea',
			fieldLabel    : 'URL',
			anchor        : '100%',
//			height        : 100,
			height        : 50,
			selectOnFocus : false,
			value         : glb_anatomo_editor_url
		},
		{
			layout:'table',
			border: false,
			width: '100%',
			bodyStyle: 'background-color: transparent;',
			layoutConfig: {
				columns: 2
			},
			items:[{
				hidden: true,
				xtype: 'button',
				text: 'URL to Table',
				handler: function(){
//						var url_arr = Ext.getCmp('ag_url_textarea').getValue().replace(/0x0d0x0a|0x0d|0x0a|\r\n/g,"\n").replace(/\n$/g,"").split("\n");
//						for(var i=0;i<url_arr.length;i++){
//							var rtnstr = URI2Text(url_arr[i],convOpts);
//							if(Ext.isEmpty(rtnstr)) continue;
//							Ext.getCmp('ag_url_editor').setValue(rtnstr);
//							break;
//						}

					var url_arr = Ext.getCmp('ag_url_textarea').getValue().replace(/0x0d0x0a|0x0d|0x0a|\r\n/g,"\n").replace(/\n$/g,"").split("\n");
					for(var i=0;i<url_arr.length;i++){
						url_arr[i] = url_arr[i].trim();
						if(Ext.isEmpty(url_arr[i])) continue;
						var idx = url_arr[i].indexOf("?");
						if(idx<0) continue;
						var search = url_arr[i].substr(idx+1);
						if(Ext.isEmpty(search)) continue;
						var params = Ext.urlDecode(search);
						if(params.shorten){
							update_open_ShortURL2LongURL(url_arr[i],function(long_url){
								var rtnstr = URI2Text(long_url,convOpts);
								if(Ext.isEmpty(rtnstr)) return;
								Ext.getCmp('ag_url_editor').setValue(rtnstr);
							});
							break;
						}else{
							var rtnstr = URI2Text(url_arr[i],convOpts);
							if(Ext.isEmpty(rtnstr)) continue;
							Ext.getCmp('ag_url_editor').setValue(rtnstr);
							break;
						}
					}

				}
			},{
				xtype: 'button',
				text: 'Open this URL',
				handler: function(){
					var url_arr = Ext.getCmp('ag_url_textarea').getValue().replace(/0x0d0x0a|0x0d|0x0a|\r\n/g,"\n").replace(/\n$/g,"").split("\n");
					for(var i=0;i<url_arr.length;i++){
						var rtnstr = url_arr[i];
						rtnstr = rtnstr.replace(/\r|\n/g,"").trim();
						if(Ext.isEmpty(rtnstr)) continue;
						Ext.getDom('ag-open-url-form-url').value = rtnstr;
						Ext.getDom('ag-open-url-form').submit();
						break;
					}
				}
			}],
			listeners: {
				render: {
					fn: function(comp){
						_dump("render():["+comp.id+"]");
						var table = $(comp.body.dom).children('table.x-table-layout');
						_dump(table);
						table.css({width:'100%'}).find('td.x-table-layout-cell:eq(1)').attr({align:'right'});
					},
					buffer: 250
				}
			}
		},
		{
			border: true,
			bodyStyle: 'background-color: transparent;',
			tbar:['<label style="font-size:11px;font-weight:bold;color:#15428b;line-height:21px;">Table</label>','->'],
			bbar:[{
				text: 'URL to Table',
				handler: function(){
					var url_arr = Ext.getCmp('ag_url_textarea').getValue().replace(/0x0d0x0a|0x0d|0x0a|\r\n/g,"\n").replace(/\n$/g,"").split("\n");
					for(var i=0;i<url_arr.length;i++){
						url_arr[i] = url_arr[i].trim();
						if(Ext.isEmpty(url_arr[i])) continue;
						var idx = url_arr[i].indexOf("?");
						if(idx<0) continue;
						var search = url_arr[i].substr(idx+1);
						if(Ext.isEmpty(search)) continue;
						var params = Ext.urlDecode(search);
						if(params.shorten){
							update_open_ShortURL2LongURL(url_arr[i],function(long_url){
								var rtnstr = URI2Text(long_url,convOpts);
								if(Ext.isEmpty(rtnstr)) return;
								Ext.getCmp('ag_url_editor').setValue(rtnstr);
							});
							break;
						}else{
							var rtnstr = URI2Text(url_arr[i],convOpts);
							if(Ext.isEmpty(rtnstr)) continue;
							Ext.getCmp('ag_url_editor').setValue(rtnstr);
							break;
						}
					}
				}
			},'-','->','-',{
				text     : 'Table to URL',
				disabled : false,
				handler : function(){
					var rtnstr = Text2URI(Ext.getCmp('ag_url_editor').getValue());
					Ext.getCmp('ag_url_textarea').setValue(rtnstr);
					update_open_url2text(rtnstr,function(url){
						Ext.getCmp('ag_url_textarea').setValue(url);
					});
				}
			}],
			anchor    : '100%',
			layout: 'anchor',
			items:{
				xtype     : 'textarea',
				id        : 'ag_url_editor',
				style     : 'font-family:Courier;monospace;',
				hideLabel : true,
				value     : text_value,
				anchor    : '100%',
				height: text_height
			}
		},
		{
			hidden:true,
			xtype    : 'button',
			text     : 'Table to URL',
			disabled : false,
			handler : function(){
				var rtnstr = Text2URI(Ext.getCmp('ag_url_editor').getValue());
				Ext.getCmp('ag_url_textarea').setValue(rtnstr);
				update_open_url2text(rtnstr,function(url){
					Ext.getCmp('ag_url_textarea').setValue(url);
				});
			}
		},
		{
			hidden: json_hidden,
			border: true,
			bodyStyle: 'background-color: transparent;',
			tbar: ['<label style="font-size:11px;font-weight:bold;color:#15428b;line-height:21px;">JSON</label>','->'],
			bbar:[{
				text: 'URL to JSON',
				handler: function(){
					var url_arr = Ext.getCmp('ag_url_textarea').getValue().replace(/0x0d0x0a|0x0d|0x0a|\r\n/g,"\n").replace(/\n$/g,"").split("\n");
					for(var i=0;i<url_arr.length;i++){
						url_arr[i] = url_arr[i].trim();
						if(Ext.isEmpty(url_arr[i])) continue;
						var idx = url_arr[i].indexOf("?");
						if(idx<0) continue;
						var search = url_arr[i].substr(idx+1);
						if(Ext.isEmpty(search)) continue;
						var params = Ext.urlDecode(search);
						if(params.shorten){
							update_open_ShortURL2LongURL(url_arr[i],function(long_url){
								var rtnstr = ag_extensions.toJSON.URI2JSON(long_url,{toString:{},callback:function(value){
									Ext.getCmp('ag_json_editor').setValue(value);
								}});
								if(Ext.isEmpty(rtnstr)) return;
								Ext.getCmp('ag_json_editor').setValue(rtnstr);
							});
							break;
						}else{
							var rtnstr = ag_extensions.toJSON.URI2JSON(url_arr[i],{toString:{},callback:function(value){
								Ext.getCmp('ag_json_editor').setValue(value);
							}});
							if(Ext.isEmpty(rtnstr)) continue;
							Ext.getCmp('ag_json_editor').setValue(rtnstr);
							break;
						}
					}
				}
			},'-','->','-',{
				text     : 'JSON to URL',
				disabled : false,
				handler : function(){
					var rtnstr = ag_extensions.toJSON.JSONStr2URI(Ext.getCmp('ag_json_editor').getValue());
					Ext.getCmp('ag_url_textarea').setValue(rtnstr);
					update_open_url2text(rtnstr,function(url){
						Ext.getCmp('ag_url_textarea').setValue(url);
					});
				}
			}],
			anchor: '100%',
			layout: 'anchor',
			items:{
				xtype     : 'textarea',
				id        : 'ag_json_editor',
				style     : 'font-family:Courier;monospace;',
				hideLabel : true,
				value     : json_value,
				anchor    : '100%',
				height: text_height
			}
		}
		],
		buttons : [{
			text    : 'Close',
			handler : function(){
				anatomo_url_window.close();
			}
		}],
		listeners: {
			render: function(){
				var long_url = Ext.getCmp('ag_url_textarea').getValue();
				update_open_url2text(long_url,function(url){
					Ext.getCmp('ag_url_textarea').setValue(url);
				});
			}
		}
	});
	anatomo_url_window.show();
};
window.ag_extensions = window.ag_extensions || {};
ag_extensions.import_parts_pins = ag_extensions.import_parts_pins || {};

ag_extensions.import_parts_pins.openWindow = function(aOpts){
	aOpts = Ext.apply({},aOpts||{},{
		title    : 'Import',
		width    : 500,
		height   : 324,
		plain    : true,
		modal    : true,
		resizable: false,
		animateTarget: null
	});

	var bp3d_version_combo = Ext.getCmp('bp3d-version-combo');
	var bp3d_version_store = bp3d_version_combo.getStore();
	var bp3d_version_idx = bp3d_version_store.find('tgi_version',new RegExp('^'+bp3d_version_combo.getValue()+'$'));
	var bp3d_version_rec;
	var bp3d_version_disp_value;
	if(bp3d_version_idx>=0) bp3d_version_rec = bp3d_version_store.getAt(bp3d_version_idx);
	if(bp3d_version_rec) bp3d_version_disp_value = bp3d_version_rec.get('tgi_name');

	var bp3d_tree_combo = Ext.getCmp('bp3d-tree-type-combo');
	var bp3d_tree_store = bp3d_tree_combo.getStore();
	var bp3d_tree_idx = bp3d_tree_store.find('t_type',new RegExp('^'+bp3d_tree_combo.getValue()+'$'));
	var bp3d_tree_rec;
	var bp3d_tree_disp_value;
	if(bp3d_tree_idx>=0) bp3d_tree_rec = bp3d_tree_store.getAt(bp3d_tree_idx);
	if(bp3d_tree_rec) bp3d_tree_disp_value = bp3d_tree_rec.get('bul_abbr');

	var convOpts = {
		target: {
			common: false,
			camera: false,
			clip: false,
			parts: true,
			point_parts: false,
			legendinfo: false,
			pins: true
		}
	};

	function add_text(text,aOpt){
		aOpt = aOpt || {};
		var aCB = aOpt.callback;
		var value="";
		var arr = text.replace(/0x0d0x0a|0x0d|0x0a|\r\n/g,"\n").split("\n");
		var url_arr = [];
		var text_arr = [];
		var addPartsRecs = [];
		for(var i=0;i<arr.length;i++){
			var trim_str = arr[i].trim();
			if(trim_str.length==0) continue;
			if(trim_str.indexOf('http')==0){
				url_arr.push(arr[i]);
			}else if(trim_str.search(/[\?&]*pno[0-9]{3}=/)>=0){
				url_arr.push(arr[i]);
			}else{
				text_arr.push(arr[i]);
			}
		}
		if(window.ag_extensions && ag_extensions.toJSON && ag_extensions.toJSON.JSONStr2URI){
			if(url_arr.length>0){
				for(var i=0;i<url_arr.length;i++){
					var trim_str = url_arr[i].trim();
					if(trim_str.length==0) continue;
					if(trim_str.search(/\?([\[\{].+)$/)>=0){
						var urlObj = Ext.urlDecode(RegExp.$1);
						var jsonStr;
						for(var key in urlObj){
							if(key.search(/^[\[\{]/)>=0){
								jsonStr = key;
								break;
							}
						}
						if(jsonStr){
							var rtn_url = ag_extensions.toJSON.JSONStr2URI(jsonStr);
							var rtn_text;
							if(rtn_url) rtn_text = URI2Text(rtn_url);
							if(rtn_text) url_arr[i] = Text2URI(rtn_text,convOpts);
						}
					}
					else if(trim_str.search(/\?(%7B|%5B)(.+)$/)>=0){
						var urlObj = Ext.urlDecode(RegExp.$1+RegExp.$2);
						var jsonStr;
						for(var key in urlObj){
							if(key.search(/^[\[\{]/)>=0){
								jsonStr = key;
								break;
							}
						}
						if(jsonStr){
							var rtn_url = ag_extensions.toJSON.JSONStr2URI(jsonStr);
							var rtn_text;
							if(rtn_url) rtn_text = URI2Text(rtn_url);
							if(rtn_text) url_arr[i] = Text2URI(rtn_text,convOpts);
						}
					}
				}
			}
		}
		if(text_arr.length>0){
			if(window.ag_extensions && ag_extensions.toJSON && ag_extensions.toJSON.JSONStr2URI){
				var rtn_url = ag_extensions.toJSON.JSONStr2URI(text_arr.join(""));
				var rtn_text;
				if(rtn_url) rtn_text = URI2Text('?'+rtn_url);
				if(rtn_text) text_arr = [rtn_text];
			}
			url_arr.push(Text2URI(text_arr.join("\n"),convOpts));
		}

		function add_items(params){
			if(Ext.isEmpty(params)) return addrecs;
			if(!params.tp_ap) params.tp_ap = Ext.urlEncode(params);
			if(convOpts.target.parts) addPartsRecs = addPartsRecs.concat(add_bp3d_parts_store_parts_from_TPAP(params.tp_ap));
			if(convOpts.target.pins) add_comment_store_pins_from_TPAP(params.tp_ap);
		}

		function add_store(arr,idx){
			if(Ext.isEmpty(idx)) idx = 0;

			for(;idx<arr.length;idx++){
				var url = arr[idx].trim();
//				if(url.indexOf('http')!=0) continue;

//				if(window.ag_extensions && ag_extensions.toJSON && ag_extensions.toJSON.URI2JSON){
//					var search = url;
//					if(url.indexOf("?")>=0) search = url.replace(/^.*\?(.*)$/g,"$1");
//					var urlObj = Ext.urlDecode(search);
//					if(urlObj.tp_ap) search = urlObj.tp_ap;
//					if(search){
//						console.log(search);
//						var jsonObj = ag_extensions.toJSON.URI2JSON(search,true);
//						if(jsonObj) console.log(Ext.util.JSON.encode(jsonObj));
//					}
//				}

				var search = "";
				if(url.indexOf("?")>=0){
					search = url.replace(/^.+\?(.*)$/g,"$1");
				}else if(url.search(/[\?&]*pno[0-9]{3}=/)>=0){
					search = url;
				}
				if(Ext.isEmpty(search)) continue;
				var params = Ext.urlDecode(search);
				if(params.shorten){

					var window_title = aOpts.title;
					Ext.Ajax.request({
						url     : 'get-convert-url.cgi',
						method  : 'POST',
						params  : Ext.urlEncode({url:url}),
						success : function(conn,response,options){
							try{var results = Ext.util.JSON.decode(conn.responseText);}catch(e){}
							if(Ext.isEmpty(results) || Ext.isEmpty(results.status_code) || results.status_code!=200){
								var msg = 'URL変換エラー';
								if(results && results.status_code) msg += ' [ '+ results.status_code +' ]';
								for(var key in results){
									_dump("1:["+key+"]=["+results[key]+"]");
								}
								if(aCB) (aCB)(false,addPartsRecs);
								Ext.MessageBox.show({
									title   : window_title,
									msg     : msg,
									buttons : Ext.MessageBox.OK,
									icon    : Ext.MessageBox.ERROR
								});
								return;
							}
							if(Ext.isEmpty(results.data)){
								if(aCB) (aCB)(false,addPartsRecs);
								var msg = 'URL変換エラー';
								if(results && results.status_code) msg += ' [ no data ]';
								Ext.MessageBox.show({
									title   : window_title,
									msg     : msg,
									buttons : Ext.MessageBox.OK,
									icon    : Ext.MessageBox.ERROR
								});
								return;
							}
							if(!Ext.isEmpty(results.data.url)){//shortURLに変換
								return;
							}
							if(!Ext.isEmpty(results.data.expand)){//longURLに変換
								var search;
								if(Ext.isArray(results.data.expand)){
									search = results.data.expand[0].long_url;
								}else{
									search = results.data.expand.long_url;
								}
								if(search){
									if(search.indexOf("?")>=0){
										search = search.replace(/^.+\?(.*)$/g,"$1");
									}else if(search.search(/[&]*pno[0-9]{3}=/)>=0){
									}else{
										search = undefined;
									}
								}
								if(search){
									if(search.search(/^([\[\{].+)$/)>=0){
										var urlObj = Ext.urlDecode(RegExp.$1);
										var jsonStr;
										for(var key in urlObj){
											if(key.search(/^[\[\{]/)>=0){
												jsonStr = key;
												break;
											}
										}
										if(jsonStr){
											var rtn_url = ag_extensions.toJSON.JSONStr2URI(jsonStr,{toString:false});
											if(rtn_url) search = Ext.urlEncode(rtn_url);
										}
									}
									else if(search.search(/^(%7B|%5B)(.+)$/)>=0){
										var urlObj = Ext.urlDecode(RegExp.$1+RegExp.$2);
										var jsonStr;
										for(var key in urlObj){
											if(key.search(/^[\[\{]/)>=0){
												jsonStr = key;
												break;
											}
										}
										if(jsonStr){
											var rtn_url = ag_extensions.toJSON.JSONStr2URI(jsonStr,{toString:false});
											if(rtn_url) search = Ext.urlEncode(rtn_url);
										}
									}
									add_items(Ext.urlDecode(search));
								}
								add_store(arr,++idx);
								return;
							}
						},
						failure : function(conn,response,options){
							if(aCB) (aCB)(false,addPartsRecs);
							Ext.MessageBox.show({
								title   : window_title,
								msg     : 'URL変換エラー',
								buttons : Ext.MessageBox.OK,
								icon    : Ext.MessageBox.ERROR
							});
						}
					});

					return;
				}else{
					add_items(params);
				}
			}
			if(aCB) (aCB)(true,addPartsRecs);
			return;
		}

		if(aOpt.clear){
			if(convOpts.target.parts) bp3d_parts_store.removeAll();
			if(convOpts.target.pins) ag_comment_store.removeAll();
		}

		add_store(url_arr);

		return;
	}

	function change_checked(field,checked){
		convOpts.target[field.name] = checked;
	}

	var ag_import_textarea_id = Ext.id();
	var win = new Ext.Window({
		title       : aOpts.title,
		animateTarget: aOpts.animateTarget,
		width       : aOpts.width,
		height      : aOpts.height,
		plain       : aOpts.plain,
		bodyStyle   : 'padding:5px;',
		buttonAlign : 'right',
		modal       : aOpts.modal,
		resizable   : aOpts.resizable,
		items: [{
			anchor: '100%',
			border: false,
			bodyStyle: 'background:transparent;',
			layout: 'table',
			layoutConfig: {
				columns: 3
			},
			items:[{
				xtype: 'label',
				width: 160,
				style: 'font:bold 11px tahoma,arial,helvetica,sans-serif;color:#15428b;',
				html: 'Paste http request or Table&nbsp;&nbsp;'
			},{
				xtype: 'checkbox',
				boxLabel: 'Parts',
				name: 'parts',
				checked: convOpts.target.parts,
				width: 60,
				listeners: {
					check: change_checked
				}
			},{
				xtype: 'checkbox',
				boxLabel: 'Pins',
				name: 'pins',
				checked: convOpts.target.pins,
				width: 60,
				listeners: {
					check: change_checked
				}
			}]
		},{
			xtype: 'textarea',
			id: ag_import_textarea_id,
			style: 'font-family:Courier;monospace;',
			selectOnFocus: true,
			allowBlank : false,
			hideLabel: true,
			emptyText: '',
			width: 474,
			height: 220
		}],
		buttons : [{
			text: 'Add to present pallet',
			handler: function(){
				var b = this;
				var ag_import_textarea = Ext.getCmp(ag_import_textarea_id);
				if(ag_import_textarea.validate()){
					if(convOpts.target.parts || convOpts.target.pins){
						b.setDisabled(true);
						win.loadMask.show();
						setTimeout(function(){
							var text = ag_import_textarea.getValue();
							add_text(text,{
								clear: false,
								callback: function(success,addPartsRecs){
									if(success){
										if(addPartsRecs.length) getConvertIdList(addPartsRecs,bp3d_parts_store);
										win.close();
									}else{
										win.loadMask.hide();
										b.setDisabled(false);
									}
								}
							});
						},100);
					}else{
						win.loadMask.hide();
					}
				}else{
					ag_import_textarea.focus();
				}
			}
		},{
			text: 'Replace with present pallet',
			handler: function(){
				var b = this;
				var ag_import_textarea = Ext.getCmp(ag_import_textarea_id);
				if(ag_import_textarea.validate()){
					if(convOpts.target.parts || convOpts.target.pins){
						b.setDisabled(true);
						win.loadMask.show();
						setTimeout(function(){
							var text = ag_import_textarea.getValue();
							add_text(text,{
								clear: true,
								callback: function(success,addPartsRecs){
									if(success){
										if(addPartsRecs.length) getConvertIdList(addPartsRecs,bp3d_parts_store);
										win.close();
									}else{
										win.loadMask.hide();
										b.setDisabled(false);
									}
								}
							});
						},100);
					}else{
						win.loadMask.hide();
					}
				}else{
					ag_import_textarea.focus();
				}
			}
		},{
			text: 'Cancel',
			handler: function(){
				win.close();
			}
		}],
		listeners : {
			render: function(comp){
				comp.loadMask = new Ext.LoadMask(comp.body,{removeMask:false});
			}
		}
	});
	win.show();
};
window.ag_extensions = window.ag_extensions || {};
ag_extensions.toJSON = ag_extensions.toJSON || {};
ag_extensions.toJSON.defaults = ag_extensions.toJSON.defaults || {};

ag_extensions.toJSON.defaults.Common = function(){
	return {
		"Model":"bp3d",                 //  モデル（文字列）
		"Version":"4.0",                //  バージョン（文字列／"2.0"、"3.0"、"4.0"。未指定の場合最新バージョンとなります）
		"AnatomogramVersion":"20110318",//  アナトモグラムのバージョン（文字列）
		"ScalarMaximum":null,           //  Scalar最大値（整数）
		"ScalarMinimum":null,           //  Scalar最小値（整数）
		"ColorbarFlag":false,           //  カラーバーの描画フラグ（Boolean）
		"ScalarColorFlag":false,        //  Valueを利用した臓器描画フラグ（Boolean）
		"TreeName":"isa",               //  利用するTree名（文字列／"isa"、"partof"のいずれかを指定します）
		"DateTime":null,                //  描画時刻（文字列、yyyymmddhhmmss）
		"CoordinateSystemName":"bp3d",  //  描画座標系（文字列）
		"CopyrightType":null,           //  コピーライト画像サイズ（文字列／未指定、large、medium、small）
		"PinNumberDrawFlag": true,      //  PinのID描画フラグ（Boolean）
		"PinDescriptionDrawFlag":false, //  true：description表示、false：description非表示（Boolean）
		"PinIndicationLineDrawFlag":0   //  ピンからPin Descriptionへの線描画指定（整数／0:描画なし、1:ピン先端から描画、2:ピン終端から描画）
	};
};
ag_extensions.toJSON.defaults.Window = function(){
	return {
		"ImageWidth":500,           //  画像幅px数（整数）
		"ImageHeight":500,          //  画像高さpx数（正数）
		"BackgroundColor":"FFFFFF", //  背景色RGB（文字列、16進数6桁）
		"BackgroundOpacity":100,    //  背景の不透明度（整数、0～100）
		"GridFlag":false,           //  Gridの描画有無（Boolean）
		"GridTickInterval":100,     //  Gridの描画単位（整数、mm指定）
		"GridColor":"FFFFFF"        //  Gridの描画色RGB（文字列、16進数6桁）
	};
};
ag_extensions.toJSON.defaults.Camera = function(){
	return {
		"CameraMode":null,        // カメラ位置のモード（文字列、camera、front、back、left、right、top、bottom）
		"CameraX":null,           // カメラのX座標（Double）
		"CameraY":null,           // カメラのY座標（Double）
		"CameraZ":null,           // カメラのZ座標（Double）
		"TargetX":null,           // 中心点のX座標（Double）
		"TargetY":null,           // 中心点のY座標（Double）
		"TargetZ":null,           // 中心点のZ座標（Double）
		"CameraUpVectorX":null,   // カメラの上方ベクトルのX要素（Double）
		"CameraUpVectorY":null,   // カメラの上方ベクトルのY要素（Double）
		"CameraUpVectorZ":null,   // カメラの上方ベクトルのZ要素（Double）
		"Zoom":null,              // ズーム値（Double、0～19.8）
		"AddLatitudeDegree":null, // 緯度方向への追加回転角度（Double、0～360度）
		"AddLongitudeDegree":null // 経度方向への追加回転角度（Double、0～360度）
	};
};
ag_extensions.toJSON.defaults.Part = function(){
	return {
		"PartID":null,                   // 臓器ID（文字列、名称より優先されます）
		"PartName":null,                 // 臓器名（文字列）
		"PartColor":"FFFFFF",          // 臓器色RGB（文字列、16進数6桁）
		"PartScalar":null,              // 臓器スカラー値（Double）
		"ScalarColorFlag":false,       // 臓器をスカラー値で描画するフラグ（Boolean）
		"PartOpacity":1,               // 臓器不透明度（Double、0～1）
		"PartRepresentation":"surface",// 臓器描画方法（文字列、surface、wireframe、point）
		"UseForBoundingBoxFlag":true,  // 臓器をBoundingBoxに含めるか否かのフラグ（Boolean、Focus時にはBoudingBoxに含まれる臓器群が収まるように拡大率が返されます）
		"PartDeleteFlag":false         // 臓器の削除フラグ（Boolean）
	};
};
ag_extensions.toJSON.defaults.Legend = function(){
	return {
		"DrawLegendFlag":false, // Legendの描画有無フラグ（Boolean）
		"LegendPosition":"UL",  // Legendの描画位置（文字列、ULのみ）
		"LegendColor":"646464", // Legendの描画色RGB（文字列、16進数6桁）
		"LegendTitle":null,     // Legendのタイトル（文字列）
		"Legend":null,          // Legend（文字列）
		"LegendAuthor":null     // Legend Author（文字列）
	};
};
ag_extensions.toJSON.defaults.Pin = function(){
	return {
		"PinID":null,                        //  PinID（文字列）
		"PinX":null,                          //  Pinの3次元空間上X座標（Double）
		"PinY":null,                          //  Pinの3次元空間上Y座標（Double）
		"PinZ":null,                          //  Pinの3次元空間上Z座標（Double）
		"PinArrowVectorX":null,               //  PinベクトルのX要素（Double）
		"PinArrowVectorY":null,               //  PinベクトルのY要素（Double）
		"PinArrowVectorZ":null,               //  PinベクトルのZ要素（Double）
		"PinUpVectorX":null,                  //  Pinの上方ベクトルのX要素（Double）
		"PinUpVectorY":null,                  //  Pinの上方ベクトルのY要素（Double）
		"PinUpVectorZ":null,                  //  Pinの上方ベクトルのZ要素（Double）
		"PinScreenX":null,                    //  Pinの画像上のX座標（Double）
		"PinScreenY":null,                    //  Pinの画像上のY座標（Double）
		"PinDescriptionDrawFlag":false,    //  PinのDescription描画フラグ（Boolean）
		"PinDescriptionColor":"0000FF",    //  PinのDescription描画色RGB（文字列、16進数6桁）
		"PinColor":"0000FF",               //  Pinの描画色RGB（文字列、16進数6桁）
		"PinShape":null,                     //  Pin形状（文字列、16進数6桁）
		"PinSize":10.0,                    //  Pinサイズ（Double）
		"PinCoordinateSystemName":"bp3d",  //  Pin作成時の座標系（文字列）
		"PinPartID":null,                    //  Pinが打たれているパーツのID（文字列）
		"PinPartName":null,                  //  Pinが打たれているパーツの名称（文字列）
		"PinDescription":null,               //  PinのDescription（文字列）
		"PinNumberDrawFlag": true,         //  PinのID描画フラグ（Boolean）
		"PinValue":null                      //  Pinの値（文字列）
	};
};

ag_extensions.toJSON.defaults.PinGroup = function(){
	return {
		"PinGroupID":null,                     //  PinGroupID（文字列）
		"PinGroupColor":"0000FF",            //  PinGroupの描画色RGB（文字列、16進数6桁）
		"PinGroupDescription":null,            //  PinGroupのDescription（文字列）
		"PinGroupDescriptionColor":"0000FF", //  PinGroupのDescription描画色RGB（文字列、16進数6桁）
		"PinGroupDescriptionDrawFlag":false, //  PinGroupのDescription描画フラグ（Boolean）
		"PinGroupNumberDrawFlag": true,      //  PinGroupのID描画フラグ（Boolean）
		"PinGroupShape":null,                  //  Pin形状（文字列、16進数6桁）
		"PinGroupSize":10.0,                 //  Pinサイズ（Double）
		"PinGroupValue":null,                  //  PinGroupの値（文字列）
		"PinGroupApiAdding": false,          //  PinGroupのAPIからのPin追加可フラグ（Boolean）
		"PinGroupApiExclusion": false,       //  PinGroupのAPIからのPin除外可フラグ（Boolean）
		"PinGroupApiReference": false,       //  PinGroupのAPIからのPin参照情報可フラグ（Boolean）
		"PinGroupSearch": false,             //  PinGroupの検索可フラグ（Boolean）
		"PinCount":null                         //  Pin数（整数）
	};
};

ag_extensions.toJSON.defaults.Pick = function(){
	return {
		"MaxNumberOfPicks":20, // 指定数分、パーツ表面を貫通して結果を返します
		"ScreenPosX":null,     // 画像上ピック位置のX座標
		"ScreenPosY":null,     // 画像上ピック位置のY座標
		"VoxelRadius":null     //
	};
};

ag_extensions.toJSON.defaults.ObjectRotate = function(){
	return {
		"DateTime":null,
		"RotateCenterX":null,
		"RotateCenterY":null,
		"RotateCenterZ":null,
		"RotateAxisVectorX":null,
		"RotateAxisVectorY":null,
		"RotateAxisVectorZ":null,
		"RotateDegree":null
	};
};

ag_extensions.toJSON.pinShapeAbbr2PinShape = function(pinShapeAbbr){
	if(pinShapeAbbr == 'CC'){
		return 'CONE';
	}else if(pinShapeAbbr == 'PSS'){
		return 'PIN_LONG';
	}else if(pinShapeAbbr == 'PS'){
		return 'PIN_LONG';
	}else if(pinShapeAbbr == 'PM'){
		return 'PIN_LONG';
	}else if(pinShapeAbbr == 'PL'){
		return 'PIN_LONG';
	}
	return "";
};
ag_extensions.toJSON.pinShapeAbbr2PinSize = function(pinShapeAbbr){
	if(pinShapeAbbr == 'CC'){
		return 25.0;
	}else if(pinShapeAbbr == 'PSS'){
		return 20.0;
	}else if(pinShapeAbbr == 'PS'){
		return 37.5;
	}else if(pinShapeAbbr == 'PM'){
		return 75.0;
	}else if(pinShapeAbbr == 'PL'){
		return 112.5;
	}
	return 10.0
};

//既存のレコードからJSON用のPinオブジェクトを生成する
ag_extensions.toJSON.fromRecordPin2HashPin = function(obj,clearEmpty){
	var self = this;
	if(Ext.isEmpty(clearEmpty)) clearEmpty = true;
	var hash = Ext.apply({},obj||{},self.defaults.Pin());
	if(Ext.isEmpty(hash.PinID)) hash.PinID = hash.no;
	hash.PinX = hash.x3d;
	hash.PinY = hash.y3d;
	hash.PinZ = hash.z3d;
	hash.PinArrowVectorX = hash.avx3d;
	hash.PinArrowVectorY = hash.avy3d;
	hash.PinArrowVectorZ = hash.avz3d;
	hash.PinUpVectorX = hash.uvx3d;
	hash.PinUpVectorY = hash.uvy3d;
	hash.PinUpVectorZ = hash.uvz3d;
	hash.PinColor = hash.color;
	hash.PinDescriptionColor = hash.color;
	hash.PinCoordinateSystemName = hash.coord;
	hash.PinPartID = hash.oid;
	hash.PinPartName = hash.organ;
	hash.PinDescription = hash.comment;
	hash.PinSize = self.pinShapeAbbr2PinSize(hash.PinShape);
	hash.PinShape = self.pinShapeAbbr2PinShape(hash.PinShape);
	delete hash.no;
	delete hash.x3d;
	delete hash.y3d;
	delete hash.z3d;
	delete hash.avx3d;
	delete hash.avy3d;
	delete hash.avz3d;
	delete hash.uvx3d;
	delete hash.uvy3d;
	delete hash.uvz3d;
	delete hash.color;
	delete hash.coord;
	delete hash.oid;
	delete hash.organ;
	delete hash.comment;

	if(clearEmpty){
		self._deletesEmptyProp(hash);
	}
	return hash;
};

//既存のレコードからJSON用のPinGroupオブジェクトを生成する
ag_extensions.toJSON.fromRecordPin2HashPinGroup = function(obj,clearEmpty){
	var self = this;
	if(Ext.isEmpty(clearEmpty)) clearEmpty = true;
	var hash = Ext.apply({},obj||{},self.defaults.PinGroup());
	if(Ext.isEmpty(hash.PinGroupID)) hash.PinGroupID = hash.no;
	hash.PinGroupColor = hash.color;
	hash.PinGroupDescriptionColor = hash.color;
	hash.PinGroupDescription = hash.comment;
//	if(hash.PinGroupShape == 'CC'){
//		hash.PinGroupShape = 'CONE';
//		hash.PinGroupSize = 25.0;
//	}else if(hash.PinGroupShape == 'PSS'){
//		hash.PinGroupShape = 'PIN_LONG';
//		hash.PinGroupSize = 20.0;
//	}else if(hash.PinGroupShape == 'PS'){
//		hash.PinGroupShape = 'PIN_LONG';
//		hash.PinGroupSize = 37.5;
//	}else if(hash.PinGroupShape == 'PM'){
//		hash.PinGroupShape = 'PIN_LONG';
//		hash.PinGroupSize = 75.0;
//	}else if(hash.PinGroupShape == 'PL'){
//		hash.PinGroupShape = 'PIN_LONG';
//		hash.PinGroupSize = 112.5;
//	}
	hash.PinGroupSize = self.pinShapeAbbr2PinSize(hash.PinGroupShape);// 25.0;
	hash.PinGroupShape = self.pinShapeAbbr2PinShape(hash.PinGroupShape);// 'CONE';

	delete hash.no;
	delete hash.x3d;
	delete hash.y3d;
	delete hash.z3d;
	delete hash.avx3d;
	delete hash.avy3d;
	delete hash.avz3d;
	delete hash.uvx3d;
	delete hash.uvy3d;
	delete hash.uvz3d;
	delete hash.color;
	delete hash.coord;
	delete hash.oid;
	delete hash.organ;
	delete hash.comment;

	if(clearEmpty){
		self._deletesEmptyProp(hash);
	}
	return hash;
};

//JSON文字列からURI文字を生成する
ag_extensions.toJSON.JSONStr2URI = function(jsonStr,aOpts){
	var self = this;
	var uri = {};
	var jsonObj;
	if(!Ext.isEmpty(jsonStr)){
		if(typeof jsonStr == 'string'){
			try{jsonObj = Ext.util.JSON.decode(jsonStr);}catch(e){if(window.console && console.log) console.log(e);}
		}else if(typeof jsonStr == 'object'){
			jsonObj = jsonStr;
		}
	}
	if(Ext.isEmpty(jsonObj)) return null;

	aOpts = Ext.apply({},aOpts||{},{
		toString: true,
		clearEmpty: true
	});
	var toStringOpts = aOpts.toString;
	var clearEmpty = aOpts.clearEmpty;

	var prm_record = ag_param_store.getAt(0);

	if(Ext.isEmpty(jsonObj.Common)){
		jsonObj.Common = Ext.apply({},{
			Version:bp3d.defaults.bp3d_version,
			PinDescriptionDrawFlag: Ext.getCmp('anatomo_pin_description_draw_check').getValue(),
			PinIndicationLineDrawFlag: Ext.getCmp('anatomo_pin_description_draw_pin_indication_line_combo').getValue(),
			PinNumberDrawFlag: Ext.getCmp('anatomo_pin_number_draw_check').getValue()
		},self.defaults.Common());
	}
	jsonObj.Common = Ext.apply({},{AnatomogramVersion: '09051901'},jsonObj.Common);
	var h = jsonObj.Common;
	if(!Ext.isEmpty(h.Model)) uri.model = h.Model;
	if(!Ext.isEmpty(h.Version)) uri.bv = h.Version;
	if(!Ext.isEmpty(h.AnatomogramVersion)) uri.av = h.AnatomogramVersion;
	if(!Ext.isEmpty(h.ScalarMaximum) && (h.ScalarMaximum-0) != 65535) uri.sx = h.ScalarMaximum;
	if(!Ext.isEmpty(h.ScalarMinimum) && (h.ScalarMinimum-0) != -65535) uri.sn = h.ScalarMinimum;
	if(!Ext.isEmpty(h.ColorbarFlag) && h.ColorbarFlag) uri.cf = h.ColorbarFlag ? 1 : 0;
	if(!Ext.isEmpty(h.ScalarColorFlag) && h.ScalarColorFlag) uri.hf = h.ScalarColorFlag ? 1 : 0;
	if(!Ext.isEmpty(h.TreeName)) uri.tn = h.TreeName;
	if(!Ext.isEmpty(h.DateTime)) uri.dt = h.DateTime;
	if(!Ext.isEmpty(h.CoordinateSystemName)) uri.crd = h.CoordinateSystemName;
	if(!Ext.isEmpty(h.PinDescriptionDrawFlag) && h.PinDescriptionDrawFlag) uri.dp = h.PinDescriptionDrawFlag ? 1 : 0;
	if(!Ext.isEmpty(h.PinIndicationLineDrawFlag) && h.PinIndicationLineDrawFlag) uri.dpl = h.PinIndicationLineDrawFlag;
	if(!Ext.isEmpty(h.PinNumberDrawFlag) && h.PinNumberDrawFlag) uri.np = h.PinNumberDrawFlag ? 1 : 0;

	if(Ext.isEmpty(jsonObj.Window)) jsonObj.Window = self.defaults.Window();
	var h = jsonObj.Window;
	if(!Ext.isEmpty(h.ImageWidth)) uri.iw = h.ImageWidth;
	if(!Ext.isEmpty(h.ImageHeight)) uri.ih = h.ImageHeight;
	if(!Ext.isEmpty(h.BackgroundColor)) uri.bcl = h.BackgroundColor;
	if(!Ext.isEmpty(h.BackgroundOpacity)) uri.bga = h.BackgroundOpacity;
	if(!Ext.isEmpty(h.GridFlag) && h.GridFlag){
		uri.gdr = h.GridFlag ? 1 : 0;
		if(!Ext.isEmpty(h.GridTickInterval)) uri.gtc = h.GridTickInterval;
		if(!Ext.isEmpty(h.GridColor)) uri.gcl = h.GridColor;
	}
	if(!Ext.isEmpty(jsonObj.Camera)){
		jsonObj.Camera = Ext.apply({},jsonObj.Camera,self.defaults.Camera());
		var h = jsonObj.Camera;
		uri.cx = h.CameraX;
		uri.cy = h.CameraY;
		uri.cz = h.CameraZ;
		uri.tx = h.TargetX;
		uri.ty = h.TargetY;
		uri.tz = h.TargetZ;
		uri.ux = h.CameraUpVectorX;
		uri.uy = h.CameraUpVectorY;
		uri.uz = h.CameraUpVectorZ;
		uri.zm = h.Zoom;
	}
	if(!Ext.isEmpty(jsonObj.Legend)){
		jsonObj.Legend = Ext.apply({},jsonObj.Legend,self.defaults.Legend());
		var h = Ext.apply({},jsonObj.Legend,self.defaults.Legend());
		uri.dl = h.DrawLegendFlag?1:0;
		if(!Ext.isEmpty(h.LegendPosition)) uri.lp = h.LegendPosition.toUpperCase();
		if(!Ext.isEmpty(h.LegendColor)) uri.lc = h.LegendColor.toUpperCase();
		uri.lt = h.LegendTitle;
		uri.le = h.Legend;
		uri.la = h.LegendAuthor;
	}
	if(jsonObj.Part && jsonObj.Part.length>0){
		var no = 0;
		var def_color = Ext.getCmp('anatomo-default-parts-color').getValue();
		if(def_color.indexOf("#")>=0) def_color = def_color.substr(def_color.indexOf("#")+1);
		Ext.each(jsonObj.Part,function(h,i,a){
			if(Ext.isEmpty(h.PartID) && Ext.isEmpty(h.PartName)) return true;

			h = Ext.apply({},h,Ext.apply({},{PartColor:def_color,UseForBoundingBoxFlag:false},self.defaults.Part()));

			var num = makeAnatomoOrganNumber(++no);

			if(!Ext.isEmpty(h.PartID)) uri['oid'+num] = h.PartID;
			if(!Ext.isEmpty(h.PartName)) uri['onm'+num] = h.PartName;
			if(!Ext.isEmpty(h.PartColor)) uri['ocl'+num] = h.PartColor;
			if(!Ext.isEmpty(h.PartScalar)) uri['osc'+num] = h.PartScalar;
			uri['osz'+num] = 'S';
			if(!Ext.isEmpty(h.PartDeleteFlag) && h.PartDeleteFlag){
				uri['osz'+num] = 'H';
			}else if(!Ext.isEmpty(h.UseForBoundingBoxFlag) && h.UseForBoundingBoxFlag){
				uri['osz'+num] = 'Z';
			}
			if(!Ext.isEmpty(h.PartOpacity)) uri['oop'+num] = h.PartOpacity-0;
			if(!Ext.isEmpty(h.PartRepresentation)) uri['orp'+num] = h.PartRepresentation;
			if(!Ext.isEmpty(h.Version)) uri['ov'+num] = h.Version;
		});
	}
	if(jsonObj.Pin && jsonObj.Pin.length>0){
		Ext.each(jsonObj.Pin,function(h,i,a){
			h = Ext.apply({},h,Ext.apply({},{PinShape:Ext.getCmp('anatomo_pin_shape_combo').getValue()},self.defaults.Pin()));
			var num = makeAnatomoOrganNumber(i+1);
			uri['pno'+num] = i+1;
			if(!Ext.isEmpty(h.PinX)) uri['px'+num] = h.PinX-0;
			if(!Ext.isEmpty(h.PinY)) uri['py'+num] = h.PinY-0;
			if(!Ext.isEmpty(h.PinZ)) uri['pz'+num] = h.PinZ-0;
			if(!Ext.isEmpty(h.PinArrowVectorX)) uri['pax'+num] = h.PinArrowVectorX-0;
			if(!Ext.isEmpty(h.PinArrowVectorY)) uri['pay'+num] = h.PinArrowVectorY-0;
			if(!Ext.isEmpty(h.PinArrowVectorZ)) uri['paz'+num] = h.PinArrowVectorZ-0;
			if(!Ext.isEmpty(h.PinUpVectorX)) uri['pux'+num] = h.PinUpVectorX-0;
			if(!Ext.isEmpty(h.PinUpVectorY)) uri['puy'+num] = h.PinUpVectorY-0;
			if(!Ext.isEmpty(h.PinUpVectorZ)) uri['puz'+num] = h.PinUpVectorZ-0;
			if(!Ext.isEmpty(h.PinDescriptionDrawFlag)) uri['pdd'+num] = h.PinDescriptionDrawFlag ? 1: 0;
			if(!Ext.isEmpty(h.PinDescriptionColor)) uri['pdc'+num] = h.PinDescriptionColor.toUpperCase();
			if(!Ext.isEmpty(h.PinNumberDrawFlag)) uri['pnd'+num] = h.PinNumberDrawFlag ? 1: 0;
			if(!Ext.isEmpty(h.PinColor)) uri['pcl'+num] = h.PinColor.toUpperCase();
			if(!Ext.isEmpty(h.PinShape)){
				uri['ps'+num] = h.PinShape.toUpperCase();
				if(uri['ps'+num]=='CONE'){
					uri['ps'+num]='CC';
				}else if(uri['ps'+num]=='PIN_LONG'){
					if(Ext.isEmpty(h.PinSize) || (h.PinSize-0)==self.pinShapeAbbr2PinSize('PL')){
						uri['ps'+num]='PL';
					}else if((h.PinSize-0)==self.pinShapeAbbr2PinSize('PM')){
						uri['ps'+num]='PM';
					}else if((h.PinSize-0)==self.pinShapeAbbr2PinSize('PS')){
						uri['ps'+num]='PS';
					}else if((h.PinSize-0)==self.pinShapeAbbr2PinSize('PSS')){
						uri['ps'+num]='PSS';
					}
				}else{
					uri['ps'+num] = "";
				}
			}
			if(!Ext.isEmpty(h.PinPartID)) uri['poi'+num] = h.PinPartID;
			if(!Ext.isEmpty(h.PinPartName)) uri['pon'+num] = h.PinPartName;
			if(!Ext.isEmpty(h.PinDescription)) uri['pd'+num] = h.PinDescription;
			if(!Ext.isEmpty(h.PinCoordinateSystemName)) uri['pcd'+num] = h.PinCoordinateSystemName;
			if(window.ag_extensions && ag_extensions.global_pin){
				if(!Ext.isEmpty(h.PinID)) uri['pid'+num] = h.PinID;
				if(!Ext.isEmpty(h.PinGroupID)) uri['pgid'+num] = h.PinGroupID;
			}
		});
	}

	if(!Ext.isEmpty(jsonObj.Pick)){
		var h = Ext.apply({},jsonObj.Pick,self.defaults.Pick());
		if(!Ext.isEmpty(h.ScreenPosX)) uri.px = h.ScreenPosX;
		if(!Ext.isEmpty(h.ScreenPosY)) uri.py = h.ScreenPosY;
		if(!Ext.isEmpty(h.VoxelRadius)) uri.vr = h.VoxelRadius;
	}

	if(!Ext.isEmpty(jsonObj.ObjectRotate)){
		var h = Ext.apply({},jsonObj.ObjectRotate,self.defaults.ObjectRotate());
		if(!Ext.isEmpty(h.ObjectRotate)) uri.autorotate = h.ObjectRotate;
		if(!Ext.isEmpty(h.RotateCenterX)) uri.orcx = h.RotateCenterX;
		if(!Ext.isEmpty(h.RotateCenterY)) uri.orcy = h.RotateCenterY;
		if(!Ext.isEmpty(h.RotateCenterZ)) uri.orcz = h.RotateCenterZ;
		if(!Ext.isEmpty(h.RotateAxisVectorX)) uri.orax = h.RotateAxisVectorX;
		if(!Ext.isEmpty(h.RotateAxisVectorY)) uri.oray = h.RotateAxisVectorY;
		if(!Ext.isEmpty(h.RotateAxisVectorZ)) uri.oraz = h.RotateAxisVectorZ;
		if(!Ext.isEmpty(h.RotateDegree)) uri.ordg = h.RotateDegree;
	}

	if(clearEmpty) self._deletesEmptyProp(uri);
	if(toStringOpts){
		var editURL = getEditUrl() + "?tp_ap=" + encodeURIComponent(Ext.urlEncode(uri));
		return editURL;
	}else{
		return uri;
	}
};

//URI文字からJSON文字列を生成する
ag_extensions.toJSON.URI2JSON = function(URIStr,aOpts){
	var self = this;
	var uriObj;
	if(!Ext.isEmpty(URIStr)){
		if(typeof URIStr == 'string'){
			if(URIStr.indexOf("?")>=0) URIStr = URIStr.substr(URIStr.indexOf("?")+1);
			try{uriObj = Ext.urlDecode(URIStr,false);}catch(e){if(window.console && console.error) console.error(e);}
			if(uriObj && uriObj.tp_ap) uriObj = Ext.urlDecode(uriObj.tp_ap);
		}else if(typeof URIStr == 'object'){
			uriObj = URIStr;
		}
	}
	if(Ext.isEmpty(uriObj)) return null;

	aOpts = Ext.apply({},aOpts||{},{
		callback: function(value){
//			console.log("callback()");
//			console.log(value);
		},
		mapPin: true,
		toString: false,
		clearEmpty: true
	});
	var toStringOpts = aOpts.toString;
	var clearEmpty = aOpts.clearEmpty;

	var jsonObj = {
		Common: Ext.apply({},{Version:bp3d.defaults.bp3d_version},self.defaults.Common()),
		Window: self.defaults.Window()
	};
	if(!Ext.isEmpty(uriObj.model)) jsonObj.Common.Model = uriObj.model;
	if(!Ext.isEmpty(uriObj.bv)) jsonObj.Common.Version = uriObj.bv;
	if(!Ext.isEmpty(uriObj.av)) jsonObj.Common.AnatomogramVersion = uriObj.av;
	if(!Ext.isEmpty(uriObj.sx)) jsonObj.Common.ScalarMaximum = uriObj.sx-0;
	if(!Ext.isEmpty(uriObj.sn)) jsonObj.Common.ScalarMinimum = uriObj.sn-0;
	if(!Ext.isEmpty(uriObj.cf)) jsonObj.Common.ColorbarFlag = uriObj.cf-0?true:false;
	if(!Ext.isEmpty(uriObj.hf)) jsonObj.Common.ScalarColorFlag = uriObj.hf-0?true:false;
	if(!Ext.isEmpty(uriObj.tn)) jsonObj.Common.TreeName = uriObj.tn;
	if(!Ext.isEmpty(uriObj.dt)) jsonObj.Common.DateTime = uriObj.dt;
	if(!Ext.isEmpty(uriObj.crd)) jsonObj.Common.CoordinateSystemName = uriObj.crd;
	if(!Ext.isEmpty(uriObj.np)) jsonObj.Common.PinNumberDrawFlag = uriObj.np-0?true:false;
	if(!Ext.isEmpty(uriObj.dp)) jsonObj.Common.PinDescriptionDrawFlag = uriObj.dp-0?true:false;
	if(!Ext.isEmpty(uriObj.dpl)) jsonObj.Common.PinIndicationLineDrawFlag = uriObj.dpl-0;
	if(clearEmpty) self._deletesEmptyProp(jsonObj.Common);

	if(!Ext.isEmpty(uriObj.iw)) jsonObj.Window.ImageWidth = uriObj.iw-0;
	if(!Ext.isEmpty(uriObj.ih)) jsonObj.Window.ImageHeight = uriObj.ih-0;
	if(!Ext.isEmpty(uriObj.bcl)) jsonObj.Window.BackgroundColor = uriObj.bcl;
	if(!Ext.isEmpty(uriObj.bga)) jsonObj.Window.BackgroundOpacity = uriObj.bga-0;
//	if(!Ext.isEmpty(uriObj.gdr)) jsonObj.Window.GridFlag = uriObj.gdr-0?true:false;
	if(!Ext.isEmpty(uriObj.gdr)) jsonObj.Window.GridFlag = (uriObj.gdr==="true");
	if(!Ext.isEmpty(uriObj.gtc)) jsonObj.Window.GridTickInterval = uriObj.gtc-0;
	if(!Ext.isEmpty(uriObj.gcl)) jsonObj.Window.GridColor = uriObj.gcl;
	if(clearEmpty)self._deletesEmptyProp(jsonObj.Window);

	if(
		!Ext.isEmpty(uriObj.cx) && !Ext.isEmpty(uriObj.cy) && !Ext.isEmpty(uriObj.cz) && !isNaN(Number(uriObj.cx)) && !isNaN(Number(uriObj.cy)) && !isNaN(Number(uriObj.cz)) &&
		!Ext.isEmpty(uriObj.tx) && !Ext.isEmpty(uriObj.ty) && !Ext.isEmpty(uriObj.tz) && !isNaN(Number(uriObj.tx)) && !isNaN(Number(uriObj.ty)) && !isNaN(Number(uriObj.tz)) &&
		!Ext.isEmpty(uriObj.ux) && !Ext.isEmpty(uriObj.uy) && !Ext.isEmpty(uriObj.uz) && !isNaN(Number(uriObj.ux)) && !isNaN(Number(uriObj.uy)) && !isNaN(Number(uriObj.uz))
	){
		jsonObj.Camera = Ext.apply({},{
			CameraMode:"camera",
			CameraX: parseFloat(uriObj.cx),
			CameraY: parseFloat(uriObj.cy),
			CameraZ: parseFloat(uriObj.cz),
			TargetX: parseFloat(uriObj.tx),
			TargetY: parseFloat(uriObj.ty),
			TargetZ: parseFloat(uriObj.tz),
			CameraUpVectorX: parseFloat(uriObj.ux),
			CameraUpVectorY: parseFloat(uriObj.uy),
			CameraUpVectorZ: parseFloat(uriObj.uz)
		},self.defaults.Camera());
	}
	if(!Ext.isEmpty(uriObj.zm) && !isNaN(Number(uriObj.zm))){
		if(Ext.isEmpty(jsonObj.Camera)) jsonObj.Camera = Ext.apply({},{CameraMode:"front"},self.defaults.Camera());
		jsonObj.Camera.Zoom = parseFloat(uriObj.zm)*5;
	}
	if(clearEmpty && jsonObj.Camera) self._deletesEmptyProp(jsonObj.Camera);

	if(!Ext.isEmpty(uriObj.lp) || !Ext.isEmpty(uriObj.lc) || !Ext.isEmpty(uriObj.lt) || !Ext.isEmpty(uriObj.le) || !Ext.isEmpty(uriObj.la)){
		jsonObj.Legend = self.defaults.Legend();
		if(!Ext.isEmpty(uriObj.dl)) jsonObj.Legend.DrawLegendFlag = uriObj.dl-0?true:false;
		if(!Ext.isEmpty(uriObj.lp)) jsonObj.Legend.LegendPosition = uriObj.lp;
		if(!Ext.isEmpty(uriObj.lc)) jsonObj.Legend.LegendColor = uriObj.lc.toUpperCase();
		if(!Ext.isEmpty(uriObj.lt)) jsonObj.Legend.LegendTitle = uriObj.lt;
		if(!Ext.isEmpty(uriObj.le)) jsonObj.Legend.Legend = uriObj.le;
		if(!Ext.isEmpty(uriObj.la)) jsonObj.Legend.LegendAuthor = uriObj.la;
	}
	if(clearEmpty && jsonObj.Legend) self._deletesEmptyProp(jsonObj.Legend);

	if(!Ext.isEmpty(uriObj.oid001) || !Ext.isEmpty(uriObj.onm001)){
		var defValue = self.defaults.Part();
		jsonObj.Part = [];
		var UseForBoundingBoxFlag = false;
		for(var i=0;;i++){
			var num = makeAnatomoOrganNumber(i+1);
			if(Ext.isEmpty(uriObj['oid'+num]) && Ext.isEmpty(uriObj['onm'+num])) break;
			var Part = self.defaults.Part();
			Part.PartDeleteFlag = false;
			Part.UseForBoundingBoxFlag = false;

			if(!Ext.isEmpty(uriObj['oid'+num])) Part.PartID = uriObj['oid'+num];
			if(!Ext.isEmpty(uriObj['onm'+num])) Part.PartName = uriObj['onm'+num];
			if(!Ext.isEmpty(uriObj['ocl'+num])) Part.PartColor = uriObj['ocl'+num];
			if(!Ext.isEmpty(uriObj['osc'+num])){
				Part.PartScalar = uriObj['osc'+num]-0;
				Part.ScalarColorFlag = true;
			}
			if(!Ext.isEmpty(uriObj['oop'+num])) Part.PartOpacity = uriObj['oop'+num]-0;
			if(!Ext.isEmpty(uriObj['orp'+num])) Part.PartRepresentation = uriObj['orp'+num];
			if(!Ext.isEmpty(uriObj['osz'+num])){
				if(uriObj['osz'+num]=='H'){
					Part.PartDeleteFlag = true;
				}else if(uriObj['osz'+num]=='Z'){
					Part.UseForBoundingBoxFlag = UseForBoundingBoxFlag = true;
				}
			}
			if(clearEmpty) self._deletesEmptyProp(Part);
			jsonObj.Part.push(Part);
		}
		if(jsonObj.Part){
			if(jsonObj.Part.length <= 0){
				delete jsonObj.Part;
			}else if(!UseForBoundingBoxFlag){
				Ext.each(jsonObj.Part,function(Part){
					Part.UseForBoundingBoxFlag = true;
				});
			}
		}
	}
	if(!Ext.isEmpty(uriObj.pno001)){
		var defValue = self.defaults.Pin();
		jsonObj.Pin = [];
		for(var i=0;;i++){
			var num = makeAnatomoOrganNumber(i+1);
			if(Ext.isEmpty(uriObj['pno'+num])) break;
			var Pin = self.defaults.Pin();
			if(!Ext.isEmpty(uriObj['px'+num]))  Pin.PinX = uriObj['px'+num]-0;
			if(!Ext.isEmpty(uriObj['py'+num]))  Pin.PinY = uriObj['py'+num]-0;
			if(!Ext.isEmpty(uriObj['pz'+num]))  Pin.PinZ = uriObj['pz'+num]-0;
			if(!Ext.isEmpty(uriObj['pax'+num])) Pin.PinArrowVectorX = uriObj['pax'+num]-0;
			if(!Ext.isEmpty(uriObj['pay'+num])) Pin.PinArrowVectorY = uriObj['pay'+num]-0;
			if(!Ext.isEmpty(uriObj['paz'+num])) Pin.PinArrowVectorZ = uriObj['paz'+num]-0;
			if(!Ext.isEmpty(uriObj['pux'+num])) Pin.PinUpVectorX = uriObj['pux'+num]-0;
			if(!Ext.isEmpty(uriObj['puy'+num])) Pin.PinUpVectorY = uriObj['puy'+num]-0;
			if(!Ext.isEmpty(uriObj['puz'+num])) Pin.PinUpVectorZ = uriObj['puz'+num]-0;
			if(!Ext.isEmpty(uriObj['pdd'+num])) Pin.PinDescriptionDrawFlag = uriObj['pdd'+num]-0?true:false;
			if(!Ext.isEmpty(uriObj['pnd'+num])) Pin.PinNumberDrawFlag = uriObj['pnd'+num]-0?true:false;
			if(!Ext.isEmpty(uriObj['pdc'+num])) Pin.PinDescriptionColor = uriObj['pdc'+num].toUpperCase();
			if(!Ext.isEmpty(uriObj['ps'+num])){
				Pin.PinShape = self.pinShapeAbbr2PinShape(uriObj['ps'+num]);
				Pin.PinSize = self.pinShapeAbbr2PinSize(uriObj['ps'+num]);
			}
			if(!Ext.isEmpty(uriObj['pcl'+num])) Pin.PinColor = uriObj['pcl'+num].toUpperCase();
			if(!Ext.isEmpty(uriObj['poi'+num])) Pin.PinPartID = uriObj['poi'+num];
			if(!Ext.isEmpty(uriObj['pon'+num])) Pin.PinPartName = uriObj['pon'+num];
			if(!Ext.isEmpty(uriObj['pd'+num]))  Pin.PinDescription = uriObj['pd'+num];
			if(!Ext.isEmpty(uriObj['pcd'+num])) Pin.PinCoordinateSystemName = uriObj['pcd'+num];
			if(window.ag_extensions && ag_extensions.global_pin){
				if(!Ext.isEmpty(uriObj['pid'+num])) Pin.PinID = uriObj['pid'+num];
				if(!Ext.isEmpty(uriObj['pgid'+num])) Pin.PinGroupID = uriObj['pgid'+num];
			}
			if(Ext.isEmpty(Pin.PinID)) Pin.PinID = i+1;
			jsonObj.Pin.push(Pin);
		}
		if(jsonObj.Pin && jsonObj.Pin.length ==0) delete jsonObj.Pin;
	}

	if(jsonObj.Pin && jsonObj.Pin.length){
		if(aOpts.mapPin){
			if(aOpts.callback){
				self._getMapPin(jsonObj,function(rtnJsonMapStr){
					if(!Ext.isEmpty(rtnJsonMapStr)){
						self._mergeMapPin(jsonObj.Pin,rtnJsonMapStr,aOpts);
					}else if(clearEmpty){
						Ext.each(jsonObj.Pin,function(pin,i,a){
							self._deletesEmptyProp(pin);
						});
					}
					var rtn;
					if(toStringOpts){
						var jsonStr = Ext.util.JSON.encode(jsonObj);
						if(typeof toStringOpts == 'object') jsonStr = self._formatJSONStr(jsonStr,toStringOpts);
						rtn = jsonStr;
					}else{
						rtn = jsonObj;
					}
					(aOpts.callback)(rtn);
				});
				var rtn;
				if(toStringOpts){
					var jsonStr = Ext.util.JSON.encode(jsonObj);
					if(typeof toStringOpts == 'object') jsonStr = self._formatJSONStr(jsonStr,toStringOpts);
					rtn = jsonStr;
				}else{
					rtn = jsonObj;
				}
				return rtn;
			}else{
				var rtnJsonMapStr = self._getMapPin(jsonObj);
				if(!Ext.isEmpty(rtnJsonMapStr)){
					self._mergeMapPin(jsonObj.Pin,rtnJsonMapStr,aOpts);
				}else if(clearEmpty){
					Ext.each(jsonObj.Pin,function(pin,i,a){
						self._deletesEmptyProp(pin);
					});
				}
			}
		}else if(clearEmpty){
			Ext.each(jsonObj.Pin,function(pin,i,a){
				self._deletesEmptyProp(pin);
			});
		}
	}

	if(!Ext.isEmpty(uriObj['px']) && !Ext.isEmpty(uriObj['py'])){
		jsonObj.Pick = self.defaults.Pick();
		jsonObj.Pick.ScreenPosX = uriObj['px']-0;
		jsonObj.Pick.ScreenPosY = uriObj['py']-0;
		if(!Ext.isEmpty(uriObj['vr'])) jsonObj.Pick.VoxelRadius = uriObj['vr']-0;
		if(clearEmpty) self._deletesEmptyProp(jsonObj.Pick);
	}

	if(
		!Ext.isEmpty(uriObj['autorotate']) &&
		!Ext.isEmpty(uriObj['orcx']) &&
		!Ext.isEmpty(uriObj['orcy']) &&
		!Ext.isEmpty(uriObj['orcz']) &&
		!Ext.isEmpty(uriObj['orax']) &&
		!Ext.isEmpty(uriObj['oray']) &&
		!Ext.isEmpty(uriObj['oraz']) &&
		!Ext.isEmpty(uriObj['ordg'])
	){
		jsonObj.ObjectRotate = self.defaults.ObjectRotate();
		jsonObj.ObjectRotate.DateTime = uriObj['autorotate'];
		jsonObj.ObjectRotate.RotateCenterX = uriObj['orcx']-0;
		jsonObj.ObjectRotate.RotateCenterY = uriObj['orcy']-0;
		jsonObj.ObjectRotate.RotateCenterZ = uriObj['orcz']-0;
		jsonObj.ObjectRotate.RotateAxisVectorX = uriObj['orax']-0;
		jsonObj.ObjectRotate.RotateAxisVectorY = uriObj['oray']-0;
		jsonObj.ObjectRotate.RotateAxisVectorZ = uriObj['oraz']-0;
		jsonObj.ObjectRotate.RotateDegree = uriObj['ordg']-0;
		if(clearEmpty) self._deletesEmptyProp(jsonObj.ObjectRotate);
	}

	var rtn;
	if(toStringOpts){
		var jsonStr = Ext.util.JSON.encode(jsonObj);
		if(typeof toStringOpts == 'object') jsonStr = self._formatJSONStr(jsonStr,toStringOpts);
		rtn = jsonStr;
	}else{
		rtn = jsonObj;
	}
	if(aOpts.callback) (aOpts.callback)(rtn);
	return rtn;
};

ag_extensions.toJSON._formatJSONStr = function(jsonStr,aOpts){
	aOpts = Ext.apply({},aOpts||{},{indent:2});
	var indent = aOpts.indent;
	var idx=0;
	var l = '';
	var m = '';
	var r = jsonStr;
	do {
		if(r.match(/[\{\[\]\},]/)){
			l += RegExp.leftContext;
			m = RegExp.lastMatch;
			r = RegExp.rightContext;
			if(m=='{' || m=='['){
				idx+=indent;
				l+=m+"\n"+String.leftPad('',idx);
			}else if(m==','){
				l+=m+"\n"+String.leftPad('',idx);
			}else if(m=='}' || m==']'){
				idx-=indent;
				l += "\n"+String.leftPad('',idx)+m;
			}
		}else{
			l+=r;
			break;
		}
	}while(1);
	return l;
};

ag_extensions.toJSON._deletesEmptyProp = function(Obj){
	for(var key in Obj){
		if(Ext.isEmpty(Obj[key])) delete Obj[key];
	}
};

ag_extensions.toJSON._mergeMapPin = function(PinArray,rtnJsonMapStr,aOpts){
	var self = this;
	if(!Ext.isEmpty(rtnJsonMapStr)){
		var rtnJson;
		try{rtnJson = Ext.util.JSON.decode(rtnJsonMapStr);}catch(e){}
		if(rtnJson && rtnJson.Map && rtnJson.Map.length){
			var mapColl = new Ext.util.MixedCollection(true,function(item){return item.PinID;});
			mapColl.addAll(rtnJson.Map);
			Ext.each(PinArray,function(pin,i,a){
				var map = mapColl.get(pin.PinID);
				if(!Ext.isEmpty(map)) Ext.apply(pin,map,pin);
				if(aOpts.clearEmpty) self._deletesEmptyProp(pin);
			});
		}
	}
};

ag_extensions.toJSON._getMapPin = function(jsonObj,aCallback){
	var self = this;
	var config = {
		type: 'POST',
		url: cgipath.map,
		data: Ext.util.JSON.encode(jsonObj)
	};
	if(aCallback){
		config.async = true;
		config.complete = function(XMLHttpRequest,textStatus){
			if(textStatus=='success'){
				(aCallback)(XMLHttpRequest.responseText);
			}else{
				(aCallback)();
			}
		};
		$.ajax(config);
		return;
	}else{
		config.async = false;
		var rtnJsonMapStr = $.ajax(config).responseText;
		return rtnJsonMapStr;
	}
};
///////////////////////////////////////////////////////////////////////////////
//ピック、ピン操作時のクリック位置即時反映
///////////////////////////////////////////////////////////////////////////////
window.ag_extensions = window.ag_extensions || {};
ag_extensions.pick_point = ag_extensions.pick_point || {};
///////////////////////////////////////////////////////////////////////////////
//初期化
///////////////////////////////////////////////////////////////////////////////
ag_extensions.pick_point._init = function(){
	var self = this;
	self.__images_src__ = [{
		name:"select_A.png",
		css: {
			'margin-top':'-13px',
			'margin-left':'-11px'
		}
	},{
		name:"select_B.png",
		css: {
			'margin-top':'-11px',
			'margin-left':'-9px'
		}
	},{
		name:"select_C.png",
		css: {
			'margin-top':'-24px',
			'margin-left':'-11px'
		}
	},{
		name:"select_D.png",
		css: {
			'margin-top':'-16px',
			'margin-left':'-1px'
		}
	},{
		name:"select_E.png",
		css: {
			'margin-top':'-11px',
			'margin-left':'-4px'
		}
	}];
	self.__images_src__ = [{
		name:"select_B.png",
		css: {
			'margin-top':'-11px',
			'margin-left':'-9px'
		}
	}];
	self.__images__ = [];
	self.__images_pos__ = 0;

	self.$__element__ =
		$('<div>')
			.css({
				'position':'absolute',
				'top':'0px',
				'left':'0px',

// 背景色で位置を表示する場合
//				'width':'5px',
//				'height':'5px',
//				'margin-top':'-2px',
//				'margin-left':'-2px',
//				'background-color':'red',

// 背景画像で位置を表示する場合
//				'width':'16px',
//				'height':'16px',
//				'margin-top':'-14px',
//				'margin-left':'-2px',
//				'background':'url(css/pin.png) no-repeat top left',

//				'opacity':'0.5',
				'-webkit-border-radius':'2px',
				'-moz-border-radius':'2px',
				'-ms-border-radius':'2px',
				'-o-border-radius':'2px',
				'border-radius':'2px'
			})
			.hide()
			.appendTo('div#anatomography-image-contentEl');


	$.each(self.__images_src__, function(){
		var name = this.name;
		var image = new Image();
		image.isLoaded = false;
		$(image).one('load',function(){
			this.isLoaded = true;
		});
		image.src = "css/pick-point/"+name;

		self.__images__.push({
			name : name,
			image : image
		})
	});


	if(self.__images__.length==0){
// 背景色で位置を表示する場合
		self.$__element__.css({
			'width':'5px',
			'height':'5px',
			'margin-top':'-2px',
			'margin-left':'-2px',
			'background-color':'red'
		});
	}else{
// 背景画像で位置を表示する場合
		self.$__element__.css({
			'width':'16px',
			'height':'16px',
			'margin-top':'-14px',
			'margin-left':'-2px',
			'background':'url(css/pin.png) no-repeat top left'
		});
	}


	$('img#ag_img')
		.bind('load',ag_extensions.pick_point.hide)
		.bind('abort',ag_extensions.pick_point.hide)
		.bind('error',ag_extensions.pick_point.hide)
		.bind('mousedown',ag_extensions.pick_point._mousedown);
};
///////////////////////////////////////////////////////////////////////////////
//イメージへのマウスダウン時の処理
///////////////////////////////////////////////////////////////////////////////
ag_extensions.pick_point._mousedown = function(e){
	if(e.which != 1) return;
	ag_extensions.pick_point.__mousedown__ = e;
	$('img#ag_img')
		.bind('mousemove',ag_extensions.pick_point._mousemove)
		.bind('mouseup',ag_extensions.pick_point._mouseup)
};
///////////////////////////////////////////////////////////////////////////////
//イメージへのマウスムーブ時の処理
///////////////////////////////////////////////////////////////////////////////
ag_extensions.pick_point._mousemove = function(e){
	if(
		ag_extensions.pick_point.__mousedown__
	){
		var left = 0;
		var top = 0;
		if(e.offsetX !== undefined && e.offsetY !== undefined){
			left = ag_extensions.pick_point.__mousedown__.offsetX - e.offsetX;
			top  = ag_extensions.pick_point.__mousedown__.offsetY - e.offsetY;
		}
		else if(e.layerX !== undefined && e.layerY !== undefined){
			left = ag_extensions.pick_point.__mousedown__.layerX - e.layerX;
			top  = ag_extensions.pick_point.__mousedown__.layerY - e.layerY;
		}
		if(left || top){
			$('img#ag_img')
				.unbind('mousemove',ag_extensions.pick_point._mousemove)
				.unbind('mouseup',ag_extensions.pick_point._mouseup)
			delete ag_extensions.pick_point.__mousedown__;
		}
	}
};
///////////////////////////////////////////////////////////////////////////////
//イメージへのマウスアップ時の処理
///////////////////////////////////////////////////////////////////////////////
ag_extensions.pick_point._mouseup = function(e){
	if(
		ag_extensions.pick_point.__mousedown__
	){
		var left = undefined;
		var top = undefined;
		if(e.offsetX !== undefined && e.offsetY !== undefined &&
			ag_extensions.pick_point.__mousedown__.offsetX == e.offsetX &&
			ag_extensions.pick_point.__mousedown__.offsetY == e.offsetY
		){
			left = e.offsetX;
			top  = e.offsetY;
		}
		else if(e.layerX !== undefined && e.layerY !== undefined &&
			ag_extensions.pick_point.__mousedown__.layerX == e.layerX &&
			ag_extensions.pick_point.__mousedown__.layerY == e.layerY
		){
			left = e.layerX;
			top  = e.layerY;
		}
		if(left !== undefined && top !== undefined){
// 背景色で位置を表示する場合
			if(ag_extensions.pick_point.__images__.length==0){
				var background = ag_extensions.pick_point.$__element__.css('background-color');
				if(window.glb_point_color && typeof window.glb_point_color == 'string'){
					background = window.glb_point_color;
					if(background.match(/^#*([A-F0-9][A-F0-9][A-F0-9][A-F0-9][A-F0-9][A-F0-9])$/i)){
						background = '#'+RegExp.$1;
					}else if(background.match(/^#*([A-F0-9][A-F0-9][A-F0-9])$/i)){
						background = '#'+RegExp.$1;
					}
				}
				ag_extensions.pick_point.$__element__.css({
					'background-color':background
				});
			}else{
				ag_extensions.pick_point.__images_pos__++;
				if(ag_extensions.pick_point.__images_pos__ > ag_extensions.pick_point.__images__.length) ag_extensions.pick_point.__images_pos__ = 1;
				var image = ag_extensions.pick_point.__images__[ag_extensions.pick_point.__images_pos__-1].image;
				var css = ag_extensions.pick_point.__images_src__[ag_extensions.pick_point.__images_pos__-1].css;
//				console.log(image.src);
//				console.log(css);
				ag_extensions.pick_point.$__element__.css({
					'background-image':'url('+ image.src +')',
					width: image.width,
					height: image.height
				}).css(css);
			}
			ag_extensions.pick_point.$__element__.css({
				'left':left,
				'top' :top
			});
			ag_extensions.pick_point.show();
		}
		delete ag_extensions.pick_point.__mousedown__;
	}
	$('img#ag_img')
		.unbind('mousemove',ag_extensions.pick_point._mousemove)
		.unbind('mouseup',ag_extensions.pick_point._mouseup);
};
///////////////////////////////////////////////////////////////////////////////
//表示
///////////////////////////////////////////////////////////////////////////////
ag_extensions.pick_point.show = function(){
	ag_extensions.pick_point.$__element__.show();
};
///////////////////////////////////////////////////////////////////////////////
//非表示
///////////////////////////////////////////////////////////////////////////////
ag_extensions.pick_point.hide = function(){
	ag_extensions.pick_point.$__element__.hide();
};
///////////////////////////////////////////////////////////////////////////////
//初期化処理コール
///////////////////////////////////////////////////////////////////////////////
$(document).ready(function(){
	ag_extensions.pick_point._init();
});
///////////////////////////////////////////////////////////////////////////////
//ピック機能のレスポンス向上
///////////////////////////////////////////////////////////////////////////////
window.ag_extensions = window.ag_extensions || {};
ag_extensions.pallet_element = ag_extensions.pallet_element || {};
///////////////////////////////////////////////////////////////////////////////
//初期化
///////////////////////////////////////////////////////////////////////////////
ag_extensions.pallet_element._init = function(){
	var self = this;
//	console.log('ag_extensions.pallet_element._init()');

	self.__MIN_PAGE_SIZE = 100;
	self.__MAX_PAGE_SIZE = 3000;
	self.__STEP_PAGE_SIZE = 100;
	self.__COOKIE_LIMIT_KEY = 'ag_extensions.pallet_element.pagesize';

	self.__Panel_id = 'ag-parts-element-panel';
	self.__GridPanel_id = 'ag-parts-element-gridpanel';
	self.__PagingBar_id = 'ag-parts-element-paging-toolbar';

	self.__palletGridPanel_id = 'ag-parts-gridpanel';
	self.__parentTabPanel_id = 'ag-comment-tabpanel';

	self.__contentsTabPanel_id = 'contents-tab-panel';
	self.__contentsAnatomographyPanel_id = 'contents-tab-anatomography-panel';

	self.__Panel = null;
	self.__GridStore = null;
	self.__GridPanel = null;
	self.__PagingBar = null;
	self.__palletGridPanel = null;
	self.__palletGridStore = null;
	self.__contentsTabPanel = null;

	self.__parentTabPanel = Ext.getCmp(self.__parentTabPanel_id);

	self._loadStoreDelayedTask = new Ext.util.DelayedTask(self._loadStore, self);

	if(self.__parentTabPanel){
		if(self.__parentTabPanel.rendered){
			self._initUI();
		}else{
			self.__parentTabPanel.on({
				render: function(){
					self._initUI();
				},
				buffer: 100,
				single: true
			});
		}
	}else{
		self.__initTask = {
			run: function(){
				self.__parentTabPanel = Ext.getCmp(self.__parentTabPanel_id);
				if(!self.__parentTabPanel) return;
				self.__initTaskRunner.stop(self.__initTask);
				if(self.__parentTabPanel.rendered){
					self._initUI();
				}else{
					self.__parentTabPanel.on({
						render: function(){
							self._initUI();
						},
						buffer: 100,
						single: true
					});
				}
			},
			interval: 1000
		}
		self.__initTaskRunner = new Ext.util.TaskRunner();
		self.__initTaskRunner.start(self.__initTask);
	}
};
///////////////////////////////////////////////////////////////////////////////
//Store初期化
///////////////////////////////////////////////////////////////////////////////
ag_extensions.pallet_element._initStore = function(){
	var self = this;
//	console.log('ag_extensions.pallet_element._initStore()');

	var store_fields = [
		{name:'partslist'},
		{name:'common_id'},
		{name:'b_id'},
		{name:'f_id',type:'string',convert:function(v,r){
			if(Ext.isEmpty(v)){
				return r.cdi_name;
			}else{
				return v;
			}
		}},
		{name:'name_j'},
		{name:'name_e',type:'string',convert:function(v,r){
			if(Ext.isEmpty(v)){
				return r.cdi_name_e;
			}else{
				return v;
			}
		}},
		{name:'name_k'},
		{name:'name_l'},
		{name:'phase'},
		'version',
//		'tg_id',
//		'tgi_id',
		{name:'tg_id',type:'int',convert:function(v,r){
			if(Ext.isEmpty(v)){
				return r.md_id;
			}else{
				return v;
			}
		}},
		{name:'tgi_id',type:'int',convert:function(v,r){
			if(Ext.isEmpty(v)){
				return r.mv_id;
			}else{
				return v;
			}
		}},

		'segment',
		'seg_color',
		'seg_thum_bgcolor',
		'seg_thum_bocolor',

		{name:'entry',   type:'date', dateFormat: 'timestamp',convert:function(v,r){
			if(Ext.isEmpty(v)){
				return r.rep_entry;
			}else{
				return v;
			}
		}},
		{name:'xmin',    type:'float',convert:function(v,r){
			if(Ext.isEmpty(v)){
				return r.rep_xmin;
			}else{
				return v;
			}
		}},
		{name:'xmax',    type:'float',convert:function(v,r){
			if(Ext.isEmpty(v)){
				return r.rep_xmax;
			}else{
				return v;
			}
		}},
		{name:'ymin',    type:'float',convert:function(v,r){
			if(Ext.isEmpty(v)){
				return r.rep_ymin;
			}else{
				return v;
			}
		}},
		{name:'ymax',    type:'float',convert:function(v,r){
			if(Ext.isEmpty(v)){
				return r.rep_ymax;
			}else{
				return v;
			}
		}},
		{name:'zmin',    type:'float',convert:function(v,r){
			if(Ext.isEmpty(v)){
				return r.rep_zmin;
			}else{
				return v;
			}
		}},
		{name:'zmax',    type:'float',convert:function(v,r){
			if(Ext.isEmpty(v)){
				return r.rep_zmax;
			}else{
				return v;
			}
		}},
		{name:'volume',  type:'float',convert:function(v,r){
			if(Ext.isEmpty(v)){
				return r.rep_volume;
			}else{
				return v;
			}
		}},
		{name:'organsys'},
		{name:'color'},
		{name:'value',defaultValue:''},
		{name:'zoom',type:'boolean',defaultValue:true},
		{name:'exclude',type:'boolean',defaultValue:false},
		{name:'opacity',type:'float',defaultValue:'1.0'},
		{name:'representation',defaultValue:'surface'},
		{name:'point',type:'boolean',defaultValue:false},
		{name:'elem_type'},
		{name:'def_color'},
		{name:'bul_id',type:'int'},
		{name:'cb_id',type:'int'},
		{name:'ci_id',type:'int'},
		{name:'md_id',type:'int'},
		{name:'mv_id',type:'int'},
		{name:'mr_id',type:'int'},
		{name:'cdi_name',type:'string'},
		{name:'cdi_name_e',type:'string'},
		{name:'rep_id',type:'string'},
		{name:'rep_xmin', type:'float'},
		{name:'rep_xmax', type:'float'},
		{name:'rep_ymin', type:'float'},
		{name:'rep_ymax', type:'float'},
		{name:'rep_zmin', type:'float'},
		{name:'rep_zmax', type:'float'},
		{name:'rep_volume', type:'float'},
		{name:'rep_entry',type:'date', dateFormat: 'timestamp'},
		{name:'rep_depth',type:'int'}
	];


	self.__GridStore = new Ext.data.JsonStore({
		url: 'get-pallet-element.cgi',
		autoLoad: false,
		root: 'datas',
		fields: store_fields,
		sortInfo: {
			field: 'rep_depth',
			direction: 'DESC'
		},
		listeners: {
			beforeload: function(store,options){
//				console.log('ag_extensions.pallet_element.__Store.beforeload()');
			},
			load: function(store,records,options){
//				console.log('ag_extensions.pallet_element.__Store.load()');
				var gridView = self.__GridPanel.getView();
				if(store.reader.jsonData.msg){
					gridView.emptyText = '<div class="bp3d-pallet-empty-message">'+store.reader.jsonData.msg+'</div>';
//            this.mainBody.update('<div class="x-grid-empty">' + this.emptyText + '</div>');
					self._clearStore(false);
				}else{
//					gridView.emptyText = '<div class="bp3d-pallet-empty-message">'+get_ag_lang('CLICK_IMAGE_GRID_EMPTY_MESSAGE')+'</div>';
					gridView.emptyText = '&nbsp;';
				}
				gridView.applyEmptyText();

				try{
					var toolbar = self.__PagingBar;
					var count = toolbar.items.getCount();
					if(count>0){
						var item = toolbar.items.get(1);
						item.el.innerHTML='<label>'+store.reader.jsonData.total+'&nbsp;Objects</label>';
					}
				}catch(e){
					_dump("load():"+e);
				}

//				console.log('ag_extensions.pallet_element.__Store.load():'+records.length);

				self._updateRecordsStatus(records);

				var storeLastOptionsParams = self._getStoreLastOptionsParams();
				Cookies.set(self.__COOKIE_LIMIT_KEY,storeLastOptionsParams.limit);
			},
			loadexception: function(){
				var store = this;
				var msg = store.reader && store.reader.jsonData && store.reader.jsonData.msg ? store.reader.jsonData.msg : 'Unknown Error!!';
				Ext.Msg.show({
					title: 'Error',
					msg: msg,
					buttons: Ext.Msg.OK,
					icon: Ext.MessageBox.ERROR
				});
				self._clearStore();
			}
		}
	});
};
///////////////////////////////////////////////////////////////////////////////
//UI初期化
///////////////////////////////////////////////////////////////////////////////
ag_extensions.pallet_element._initUI = function(){
	var self = this;
//	console.log('ag_extensions.pallet_element._initUI()');

	var insert_index = self.__parentTabPanel.items.findIndex('id',self.__palletGridPanel_id,0,false,true);
	if(insert_index<0) insert_index = 0;

	self._initStore();

	self.__PagingSizeData = [];
	for(var i=self.__MIN_PAGE_SIZE;i<=self.__MAX_PAGE_SIZE;i+=self.__STEP_PAGE_SIZE){
		self.__PagingSizeData.push([i,i]);
	}
	self.__PagingSizeComboBox = new Ext.form.ComboBox({
		ctCls         : 'x-small-editor',
		editable      : false,
		mode          : 'local',
		lazyInit      : false,
		displayField  : 'disp',
		valueField    : 'value',
		width         : 55,
		listWidth     : 55,
		triggerAction : 'all',
		value         : Cookies.get(self.__COOKIE_LIMIT_KEY) || self.__PagingSizeData[0][0],
		regex         : new RegExp("^[\-0-9]+$"),
		allowBlank    : false,
		selectOnFocus : true,
		validator     : function(value){
			value = Number(value);
			if(isNaN(value)) return '';
			return true;
		},
		store : new Ext.data.SimpleStore({
			fields: ['disp', 'value'],
			data: self.__PagingSizeData
		}),
		listeners: {
//			change: function(){
//				console.log('change()');
//				self._loadStoreDelayedTask.delay(250);
//			},
			select: function(){
//				console.log('select()');
				self._loadStoreDelayedTask.delay(250);
			}
		}
	});

////	self.__PagingBar = new Ext.PagingToolbar({
//	self.__PagingBar = new Ext.Toolbar({
//		id: self.__PagingBar_id,
//		pageSize: 100,
//		store: self.__GridStore,
//		displayInfo: false,
//		displayMsg: '',
//		emptyMsg: '',
//		hideMode: 'offsets',
//		hideParent: true,
//		items: [self.__PagingSizeComboBox]
//	});

	self.__PagingBar =  new Ext.Toolbar([
		'->',
		{xtype: 'tbtext', text: '<label>0&nbsp;Objects</label>'},
		'-',
		self.__PagingSizeComboBox
	]);

	var _grid_renderer = function(value,metadata,record,rowIndex,colIndex,store){
		var dataIndex = _grid_columns[colIndex].dataIndex;
		var item;
		for(var i=0;i<record.fields.length;i++){
			if(record.fields.keys[i] != dataIndex) continue;
			item = record.fields.items[i];
			break;
		}
		if(item){
			if(item.type == 'date'){
				if(dataIndex == 'entry' && value) value = new Date(value).format(bp3d.defaults.DATE_FORMAT);
				if(dataIndex == 'lastmod' && value) value = new Date(value).format(bp3d.defaults.TIME_FORMAT);
			}
		}
		if(isNoneDataRecord(record)){
			metadata.css += ' ag_point_none_data';
		}
		if(self.__PointId == record.data.f_id) metadata.css += ' ag_point_data';
		return value;
	}

	var _grid_partslist_checkbox_renderer = function(value,metadata,record,rowIndex,colIndex,store){
		var id = self.__GridPanel.getColumnModel().getColumnId(colIndex);
		metadata.css += ' x-grid3-check-col-td';
		if(isNoneDataRecord(record)) metadata.css += ' ag_point_none_data';
		if(self.__PointId == record.data.f_id) metadata.css += ' ag_point_data';
		if(record.data.seg_color) metadata.attr = 'style="background:'+record.data.seg_color+';"'
		if(isAdditionPartsList()){
			return '<div class="x-grid3-check-col'+(value?'-on':'')+' x-grid3-cc-'+id+'">&#160;</div>';
		}else{
			return '<div class="ag_grid_checkbox'+(value?'-on':'')+'-dis x-grid3-cc-'+id+'">&#160;</div>';
		}
	};

	var _grid_checkbox_renderer = function(value,metadata,record,rowIndex,colIndex,store){
		var id = self.__GridPanel.getColumnModel().getColumnId(colIndex);
		metadata.css += ' x-grid3-check-col-td';
		if(isNoneDataRecord(record)){
			metadata.css += ' ag_point_none_data';
		}else{
			if(record.data.partslist){
			}else{
				metadata.css += ' ag_point_none_pallet_data';
			}
		}
		if(self.__PointId == record.data.f_id) metadata.css += ' ag_point_data';
		return '<div class="x-grid3-check-col'+(value?'-on':'')+' x-grid3-cc-'+id+'">&#160;</div>';
	};

	var _grid_color_cell_style = function (value,metadata,record,rowIndex,colIndex,store) {
		if(self.__PointId == record.data.f_id) metadata.css += ' ag_point_data';
		if(isNoneDataRecord(record)){
			metadata.css += ' ag_point_none_data';
			return '';
		}else{
			if(record.data.partslist && value){
				return '<span style="background-color:' + value + '">&nbsp;&nbsp;&nbsp;&nbsp;</span>';
			}else{
				return '';
			}
		}
		return value;
	};

	var _grid_combobox_renderer = function(value,metadata,record,rowIndex,colIndex,store){
		if(isNoneDataRecord(record)){
			metadata.css += ' ag_point_none_data';
			value = "";
		}else{
			if(record.data.partslist){
			}else{
				value = "";
			}
		}
		if(self.__PointId == record.data.f_id) metadata.css += ' ag_point_data';
		return value;
	};

	var _grid_col_opacity_arr = [
		['1.0', '1.0'],
		['0.8', '0.8'],
		['0.6', '0.6'],
		['0.4', '0.4'],
		['0.3', '0.3'],
		['0.2', '0.2'],
		['0.1', '0.1'],
		['0.05', '0.05'],
		['0.0', '0.0']
	];

	var _grid_col_representation_arr = [
		['surface', 'surface'],
		['wireframe', 'wireframe'],
		['points', 'points']
	];

	var _grid_partslist_checkColumn = new Ext.grid.CheckColumn({
		header    : 'Pallet',
		dataIndex : 'partslist',
		width     : 40,
		fixed     : true,
		renderer  : _grid_partslist_checkbox_renderer
	});
	var _grid_zoom_checkColumn = new Ext.grid.CheckColumn({
		header    : "Zoom",
		dataIndex : 'zoom',
		hidden    : true,
		width     : 40,
		resizable : false,
		renderer  : _grid_checkbox_renderer
	});
	var _grid_exclude_checkColumn = new Ext.grid.CheckColumn({
		header    : "Remove",
		dataIndex : 'exclude',
		width     : 50,
		resizable : false,
		renderer  : _grid_checkbox_renderer
	});

	var _grid_col_version = {
		dataIndex:'version',
		header:'Version',
		id:'version',
		sortable: false,
		renderer: _grid_renderer,
		hidden:true
	};
	var _grid_col_rep_id = {
		dataIndex:'b_id',
		header: get_ag_lang('REP_ID'),
		renderer: _grid_renderer,
		sortable: true,
		id:'b_id'
	};
	var _grid_col_cdi_name = {
		dataIndex:'f_id',
		header: get_ag_lang('CDI_NAME'),
		renderer: _grid_renderer,
		sortable: true,
		id:'f_id'
	};

	var _grid_col_color = {
		dataIndex : 'color',
		header    : 'Color',
		id        : 'color',
		width     : 40,
		resizable : false,
		renderer  : _grid_color_cell_style,
/*
		editor    : new Ext.ux.ColorPickerField({
			menuListeners : {
				select: function(e, c){
					this.setValue(c);
					try{var record = self.__GridPanel._edit.record;}catch(e){_dump("color:"+e);}
					if(record){
						record.beginEdit();
						record.set('color',"#"+c);
						record.commit();
						record.endEdit();

						var grid = Ext.getCmp('ag-parts-gridpanel');
						var store = grid.getStore();
						var f_id = record.get('f_id');
						var record = null;
						var regexp = new RegExp('^'+f_id+'$');
						var index = store.find('f_id',regexp);
						if(index<0) index = store.find('conv_id',regexp);
						if(index>=0) record = store.getAt(index);
						if(record){
							record.set('color',"#"+c);
							record.commit();
						}
					}
				},
				show : function(){ // retain focus styling
					this.onFocus();
				},
				hide : function(){
					this.focus.defer(10, this);
				},
				beforeshow : function(menu) {
					try {
						if (this.value != "") {
							menu.palette.select(this.value);
						} else {
							this.setValue("");
							var el = menu.palette.el;
							if(menu.palette.value){
								try{el.child("a.color-"+menu.palette.value).removeClass("x-color-palette-sel");}catch(e){}
								menu.palette.value = null;
							}
						}
					}catch(ex){}
				}
			}
		})
*/
		editor    : new Ext.ux.ColorField({
			listeners: {
				select: function(e, c){
					try{var record = self.__GridPanel._edit.record;}catch(e){_dump("color:"+e);}
					if(record){
						record.beginEdit();
						record.set('color',"#"+c);
						record.commit();
						record.endEdit();

						var grid = Ext.getCmp('ag-parts-gridpanel');
						var store = grid.getStore();
						var f_id = record.get('f_id');
						var record = null;
						var regexp = new RegExp("^"+f_id+"\$");
						var index = store.find('f_id',regexp);
						if(index<0) index = store.find('conv_id',regexp);
						if(index>=0) record = store.getAt(index);
						if(record){
							record.set('color',"#"+c);
							record.commit();
						}

					}
				}
			}
		})
	};

	var _grid_col_opacity = {
		dataIndex : 'opacity',
		header    : 'Opacity',
		id        : 'opacity',
		width     : 50,
		resizable : false,
		align     : 'right',
		renderer: _grid_combobox_renderer,
		editor    : new Ext.form.ComboBox({
			typeAhead     : true,
			triggerAction : 'all',
			store         : _grid_col_opacity_arr,
			lazyRender    : true,
			listClass     : 'x-combo-list-small',
			listeners     : {
				'select' : function(combo,record,index){
					try{var record = self.__GridPanel._edit.record;}catch(e){_dump("opacity:"+e);}
					if(record){
						record.beginEdit();
						record.set('opacity',combo.getValue());
						record.commit();
						record.endEdit();

						var store = Ext.getCmp('ag-parts-gridpanel').getStore();
						var f_id = record.get('f_id');
						var record = null;
						var regexp = new RegExp("^"+f_id+"$");
						var index = store.find('f_id',regexp);
						if(index<0) index = store.find('conv_id',regexp);
						if(index>=0) record = store.getAt(index);
						if(record){
							record.set('opacity',combo.getValue());
							record.commit();
						}
					}
				},
				scope : this
			}
		})
	};

	var _grid_col_representation = {
		dataIndex : 'representation',
		header    : get_ag_lang('ANATOMO_REP_LABEL'),
		id        : 'representation',
		width     : 40,
		resizable : false,
		renderer  : _grid_combobox_renderer,
		hidden    : true,
		hideable  : true,
		sortable  : true,
		editor    : new Ext.form.ComboBox({
			typeAhead     : true,
			triggerAction : 'all',
			store         : _grid_col_representation_arr,
			lazyRender    : true,
			listClass     : 'x-combo-list-small',
			listeners     : {
				'select' : function(combo,record,index){
					try{var record = self.__GridPanel._edit.record;}catch(e){_dump("representation:"+e);}
					if(record){
						record.beginEdit();
						record.set('representation',combo.getValue());
						record.commit();
						record.endEdit();

						var store = Ext.getCmp('ag-parts-gridpanel').getStore();
						var f_id = record.get('f_id');
						var record = null;
						var regexp = new RegExp("^"+f_id+"$");
						var index = store.find('f_id',regexp);
						if(index<0) index = store.find('conv_id',regexp);
						if(index>=0) record = store.getAt(index);
						if(record){
							record.set('representation',combo.getValue());
							record.commit();
						}
					}
				},scope : this
			}
		})
	};

	var _grid_col_value = {
		dataIndex : 'value',
		header    : 'Value',
		id        : 'value',
		width     : 40,
		resizable : false,
		renderer  : _grid_renderer,
		hidden    : true,
		editor    : new Ext.form.TextField({
			allowBlank : true
		})
	};

	var _grid_columns = [
		_grid_partslist_checkColumn,
		{dataIndex:'name_e', header: get_ag_lang('DETAIL_TITLE_NAME_E'),                    renderer: _grid_renderer, id:'name_e'},
		_grid_col_color,
		_grid_col_opacity,
		_grid_exclude_checkColumn,
		_grid_col_value,
		_grid_col_representation,
		_grid_col_rep_id,
		_grid_col_cdi_name,
		{dataIndex:'xmin',  header:'Xmin(mm)',                        renderer: _grid_renderer, id:'xmin',     hidden:true},
		{dataIndex:'xmax',  header:'Xmax(mm)',                        renderer: _grid_renderer, id:'xmax',     hidden:true},
		{dataIndex:'ymin',  header:'Ymin(mm)',                        renderer: _grid_renderer, id:'ymin',     hidden:true},
		{dataIndex:'ymax',  header:'Ymax(mm)',                        renderer: _grid_renderer, id:'ymax',     hidden:true},
		{dataIndex:'zmin',  header:'Zmin(mm)',                        renderer: _grid_renderer, id:'zmin',     hidden:true},
		{dataIndex:'zmax',  header:'Zmax(mm)',                        renderer: _grid_renderer, id:'zmax',     hidden:true},
		{dataIndex:'volume',header: get_ag_lang('GRID_TITLE_VOLUME')+'(cm3)', renderer: _grid_renderer, id:'volume',   hidden:true},
		anatomography_point_grid_col_version,
		anatomography_point_grid_col_entry
	];


	self.__GridPanel = new Ext.grid.EditorGridPanel({
		id: self.__GridPanel_id,
		header: false,
		region: 'center',
		border: false,
		stripeRows: true,
		columnLines: true,
		maskDisabled: true,
		plugins: [
			_grid_partslist_checkColumn,
			_grid_zoom_checkColumn,
			_grid_exclude_checkColumn
		],
		clicksToEdit: 1,
		trackMouseOver: true,
		selModel: new Ext.grid.RowSelectionModel({singleSelect:true}),
		store: self.__GridStore,
		columns: _grid_columns,
		enableColLock: false,
		loadMask: true,
		viewConfig: {
			deferEmptyText: false,
//			emptyText: '<div class="bp3d-pallet-empty-message">'+get_ag_lang('CLICK_IMAGE_GRID_EMPTY_MESSAGE')+'</div>'
			emptyText: '&nbsp;'
		},

		listeners : {
			beforeedit: function(e){
				if(e.field == 'partslist'){
					e.cancel = (isNoneDataRecord(e.record)||(!isAdditionPartsList())?true:false);
				}else{
					e.cancel = !e.record.get('partslist');
				}
				if(!e.cancel) e.grid._edit = e;
			},
			afteredit: function(e){
				e.record.commit();

//				console.log('afteredit()');
				self._unBind();
				if(e.field == 'partslist'){
					if(e.value){
						self.__palletGridStore.add(e.record.copy());
					}else{
						var record = null;
						var index = self.__palletGridStore.find('f_id',new RegExp("^"+e.record.get('f_id')+"$"));
						if(index>=0) record = self.__palletGridStore.getAt(index);
						if(record) self.__palletGridStore.remove(record);
					}
				}else{
					var record = null;
					var regexp = new RegExp("^"+e.record.get('f_id')+"$");
					var index = self.__palletGridStore.find('f_id',regexp);
					if(index<0) index = self.__palletGridStore.find('conv_id',regexp);
					if(index>=0) record = self.__palletGridStore.getAt(index);
					if(record){
						record.set(e.field,e.record.get(e.field));
						record.commit();
					}
				}
				self._onBind();
			},
			complete: function(comp,row,col){
				comp.view.focusRow(row);
			},
			resize: function(grid){
				resizeGridPanelColumns(grid);
			},
			render: function(grid){
				restoreHiddenGridPanelColumns(grid);
			},
			scope : this
		}
	});
	self.__GridPanel.getColumnModel().on({
		'hiddenchange' : function(column,columnIndex,hidden){
			var editorgrid = self.__GridPanel;
			resizeGridPanelColumns(editorgrid);
			saveHiddenGridPanelColumns(editorgrid);
		},
		scope: this,
		delay: 100
	});

	self.__Panel = new Ext.Panel({
		id: self.__Panel_id,
		title: 'Element',
		layout: 'border',
//		border: true,
//		bodyStyle: 'border:0 0 1px 0;',

		items: [self.__GridPanel],

//		bbar: [{xtype: 'tbfill'},self.__PagingSizeComboBox],
		tbar : self.__PagingBar,

		listeners: {
			render: {
				fn: function(comp){
//					$(comp.body.dom).css({border:'0 0 1px 0'});
					self.__palletGridPanel = Ext.getCmp(self.__palletGridPanel_id);
					if(self.__parentTabPanel){
						if(self.__palletGridPanel.rendered){
							self._initBind();
						}else{
							self.__palletGridPanel.on({
								render: function(){
									self._initBind();
								},
								buffer: 100,
								single: true
							});
						}
					}else{
						self.__initTask = {
							run: function(){
								self.__palletGridPanel = Ext.getCmp(self.__palletGridPanel_id);
								if(!self.__palletGridPanel) return;
								self.__initTaskRunner.stop(self.__initTask);
								if(self.__palletGridPanel.rendered){
									self._initBind();
								}else{
									self.__palletGridPanel.on({
										render: function(){
											self._initBind();
										},
										buffer: 100,
										single: true
									});
								}
							},
							interval: 1000
						}
						if(!self.__initTaskRunner) self.__initTaskRunner = new Ext.util.TaskRunner();
						self.__initTaskRunner.start(self.__initTask);
					}
				},
				buffer: 100,
				single: true
			}
		}
	});
	self.__parentTabPanel.insert(++insert_index,self.__Panel);
};
///////////////////////////////////////////////////////////////////////////////
//イベント処理初期化
///////////////////////////////////////////////////////////////////////////////
ag_extensions.pallet_element._bindPalletStore = function(){
	var self = this;
//	console.log('ag_extensions.pallet_element._bindPalletStore()');
	self._loadStoreDelayedTask.delay(250);
};
ag_extensions.pallet_element._updatePalletStore = function(store,record,operation){
	var self = this;
//	console.log('ag_extensions.pallet_element._updatePalletStore():'+operation);
	if(operation!=Ext.data.Record.COMMIT) return;


	var update_record;
	var regexp = new RegExp("^"+record.get('f_id')+"$");
	var index = self.__GridStore.find('f_id',regexp);
	if(index<0) index = self.__GridStore.find('conv_id',regexp);
	if(index>=0) update_record = self.__GridStore.getAt(index);
//	console.log('ag_extensions.pallet_element._updatePalletStore():'+index);
	if(update_record){
		var updateNum = 0;
		var updateFieldNames = ['color','value','zoom','exclude','opacity','representation','point'];
		Ext.each(updateFieldNames,function(fieldName){
			if(update_record.get(fieldName)==record.get(fieldName)) return true;
			update_record.set(fieldName,record.get(fieldName));
			updateNum++;
		});
		if(updateNum) update_record.commit();
	}

//	self._loadStoreDelayedTask.delay(250);
};
ag_extensions.pallet_element._onBind = function(){
	var self = this;
//	console.log('ag_extensions.pallet_element._onBind()');
	self.__palletGridStore.on('add',self._bindPalletStore,self);
	self.__palletGridStore.on('clear',self._bindPalletStore,self);
	self.__palletGridStore.on('remove',self._bindPalletStore,self);
	self.__palletGridStore.on('update',self._bindPalletStore,self);
};
ag_extensions.pallet_element._unBind = function(){
	var self = this;
//	console.log('ag_extensions.pallet_element._unBind()');
	self.__palletGridStore.un('add',self._bindPalletStore,self);
	self.__palletGridStore.un('clear',self._bindPalletStore,self);
	self.__palletGridStore.un('remove',self._bindPalletStore,self);
	self.__palletGridStore.un('update',self._bindPalletStore,self);
};
ag_extensions.pallet_element._initBind = function(){
	var self = this;
//	console.log('ag_extensions.pallet_element._initBind()');
	self.__palletGridStore = self.__palletGridPanel.getStore();
	self._onBind();
	self.__palletGridStore.on('update',self._updatePalletStore,self,{buffer:250});
	self._bindPalletStore();
};
ag_extensions.pallet_element._loadStore = function(){
	var self = this;
//	console.log('ag_extensions.pallet_element._loadStore()');
	var datas = [];
	var store = self.__palletGridStore;
	if(store){
		Ext.each(store.getRange(),function(record){
			if(record.get('exclude') || record.get('opacity')<1) return true;
			datas.push({
				b_id: record.get('b_id'),
				f_id: record.get('f_id'),
				cb_id: record.get('cb_id'),
				ci_id: record.get('ci_id'),
				md_id: record.get('md_id'),
				mr_id: record.get('mr_id'),
				mv_id: record.get('mv_id'),
				bul_id: record.get('bul_id')
			});
		});
	}
	if(datas.length){
		datas = datas.sort(function(a,b){return a.f_id-b.f_id;});
	}
//	console.log(Ext.util.JSON.encode(datas));
//	console.log(datas);
//	console.log('ag_extensions.pallet_element._loadStore():'+datas.length);
	if(datas.length==0){
		self._clearStore();
		return;
	}
	var storeLastOptionsParams = self._getStoreLastOptionsParams();
	var params = {
		datas: Ext.util.JSON.encode(datas),
		limit: self.__PagingSizeComboBox.getValue()
	};
	if(storeLastOptionsParams.datas != params.datas || storeLastOptionsParams.limit != params.limit){
		self.__GridStore.load({
			params: params
		});
	}else{
		self._updateRecordsStatus(self.__GridStore.getRange());
	}
};
ag_extensions.pallet_element._initStoreLastOptionsParams = function(){
	var self = this;
	var params = {
		datas: Ext.util.JSON.encode([]),
		limit: Cookies.get(self.__COOKIE_LIMIT_KEY) || self.__MIN_PAGE_SIZE
	};
	return params;
}
ag_extensions.pallet_element._clearStore = function(clearParams){
	var self = this;
	if(Ext.isEmpty(clearParams)) clearParams = true;
	self.__GridStore.removeAll();
	if(clearParams && self.__GridStore.lastOptions){
		self.__GridStore.lastOptions.params = self._initStoreLastOptionsParams();
	}
	if(clearParams && self.__GridStore.reader){
		delete self.__GridStore.reader.jsonData;
	}
};
ag_extensions.pallet_element._getStoreLastOptionsParams = function(){
	var self = this;
	var params = self._initStoreLastOptionsParams();
	if(self.__GridStore.lastOptions && self.__GridStore.lastOptions.params) params = self.__GridStore.lastOptions.params;
	return params;
};
ag_extensions.pallet_element._updateRecordsStatus = function(records){
	var self = this;
	var prm_record = ag_param_store.getAt(0);
	var bp3d_parts_store = self.__palletGridStore;
	for(var i=0;i<records.length;i++){
		var partslist = false;
		var zoom = false;
		var exclude = false;
		var color = null;
		var opacity = "1.0";
		var representation = "surface";
		var value = "";
		var point = false;
		var elem_type = records[i].get('elem_type');
		var regexp = new RegExp("^"+records[i].get('f_id')+"$");
		var index = bp3d_parts_store.find('f_id',regexp);
		if(index<0) index = bp3d_parts_store.find('conv_id',regexp);
//					console.log('ag_extensions.pallet_element.__Store.load():'+records[i].get('f_id')+':'+index);
		if(index>=0){
			partslist = true;
			var record = bp3d_parts_store.getAt(index);
			exclude = record.get('exclude');
			color = record.get('color');
			opacity = record.get('opacity');
			representation = record.get('representation');
			value = record.get('value');
			point = record.get('point');
		}else{
			if(!Ext.isEmpty(records[i].get('def_color'))) color = records[i].get('def_color');
		}
		records[i].beginEdit();
		records[i].set('partslist',partslist);
		records[i].set('zoom',zoom);
		records[i].set('exclude',exclude);
		records[i].set('color',color?color:'#'+ (elem_type=='bp3d_point'? prm_record.data.point_color_rgb:prm_record.data.color_rgb));
		records[i].set('opacity',opacity);
		records[i].set('representation',representation);
		records[i].set('value',value);
		records[i].set('conv_id',records[i].get('f_id'));
		records[i].set('point',point);
		records[i].commit(true);
		records[i].endEdit();
	}
	self.__GridPanel.getView().refresh();
	if(records.length){
		self.selectPointElement(self.__PointId ? self.__PointId : null);
	}
};

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
ag_extensions.pallet_element.getId = function(){
	var self = this;
//	console.log('ag_extensions.pallet_element.getId()');
	return self.__Panel_id;
};
///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
ag_extensions.pallet_element.selectPointElement = function(pointId){
	var self = this;
//	console.log('ag_extensions.pallet_element.selectPointElement():'+pointId);
	var idx = -1;
	if(pointId){
		self.__PointId = pointId;
		idx = self.__GridStore.findBy(function(record,id){
			if(record.get('f_id')==self.__PointId){
				return true;
			}else{
				return false;
			}
		});
	}
	var view = self.__GridPanel.getView();
	if(idx<0 && view.hasRows()){
		delete self.__PointId;
	}
	view.refresh();
	if(idx<0) idx = 0;
//	console.log('ag_extensions.pallet_element.selectPointElement():'+view.hasRows());
//	console.log('ag_extensions.pallet_element.selectPointElement():'+idx);
	if(view.hasRows()){
		if(!self.__contentsTabPanel) self.__contentsTabPanel = Ext.getCmp(self.__contentsTabPanel_id);
		if(self.__contentsTabPanel.getActiveTab().id == self.__contentsAnatomographyPanel_id){
			view.focusRow(idx);
		}else{
			self.__contentsTabPanel.on({
				tabchange: function(tabPanel,tab){
					view.focusRow(idx);
//					console.log('ag_extensions.pallet_element.selectPointElement():'+idx);
				},
				single: true
			});
		}
	}
};
///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
ag_extensions.pallet_element.setActiveTab = function(){
	var self = this;
//	console.log('ag_extensions.pallet_element.setActiveTab()');
	self.__parentTabPanel.setActiveTab(self.__Panel);
};
ag_extensions.pallet_element.showLoadMask = function(){
	var self = this;
//	console.log('ag_extensions.pallet_element.showLoadMask()');
	try{
		self.__Panel.loadMask.show();
	}catch(e){
	}
};
ag_extensions.pallet_element.hideLoadMask = function(){
	var self = this;
//	console.log('ag_extensions.pallet_element.hideLoadMask()');
	try{
		self.__Panel.loadMask.hide();
	}catch(e){
	}
};
///////////////////////////////////////////////////////////////////////////////
//初期化処理コール
///////////////////////////////////////////////////////////////////////////////
Ext.onReady(function(){
	ag_extensions.pallet_element._init();
});
window.ag_extensions = window.ag_extensions || {};
ag_extensions.dataDrop = ag_extensions.dataDrop || {};

ag_extensions.dataDrop.init = function(){
		//FMASearchからのDrag&Dropに対応
		var el = Ext.getBody();
		el.on({
			dragenter: function(event){
				if(event && event.stopEvent) event.stopEvent();
				return false;
			},
			dragover: function(event){
				if(event && event.stopEvent) event.stopEvent();
				return false;
			},
			drop: function(event){
				if(event && event.stopEvent) event.stopEvent();
				var dataTransfer;
				if(Ext.isObject(event)){
					if(event.browserEvent && event.browserEvent.dataTransfer){
						dataTransfer = event.browserEvent.dataTransfer;
					}else if(event.dataTransfer){
						dataTransfer = event.dataTransfer;
					}
				}
				var dropData = null;
				if(dataTransfer && dataTransfer.getData){
					dropData = dataTransfer.getData('text/plain');
				}
				if(Ext.isEmpty(dropData)) return;
				if(Ext.isString(dropData)){
					if(dropData.match(/^[\[\{].+[\]\}]$/)){
						try{dropData = Ext.decode(dropData);}catch(e){}
					}
				}else{
					return;
				}
				try{
					if(Ext.isArray(dropData) || Ext.isObject(dropData)){
						var params = {};
						try{
							params.version = Ext.getCmp('bp3d-version-combo').getValue();
						}catch(e){}
						if(Ext.isEmpty(params.version)) params.version=init_bp3d_version;

						try{
							var bp3d_version_combo = Ext.getCmp('bp3d-version-combo');
							var bp3d_version_store = bp3d_version_combo.getStore();
							var bp3d_version_idx = bp3d_version_store.find('tgi_version',new RegExp('^'+bp3d_version_combo.getValue()+'$'));
							var bp3d_version_rec;
							var bp3d_version_disp_value;
							if(bp3d_version_idx>=0) bp3d_version_rec = bp3d_version_store.getAt(bp3d_version_idx);
							if(bp3d_version_rec){
								params.md_id = bp3d_version_rec.get('md_id');
								params.mv_id = bp3d_version_rec.get('mv_id');
								params.mr_id = bp3d_version_rec.get('mr_id');
							}
						}catch(e){
							if(window.console) console.error(e);
						}
						try{
							var bp3d_tree_combo = Ext.getCmp('bp3d-tree-type-combo');
							var bp3d_tree_store = bp3d_tree_combo.getStore();
							var bp3d_tree_idx = bp3d_tree_store.find('t_type',new RegExp('^'+bp3d_tree_combo.getValue()+'$'));
							var bp3d_tree_rec;
							var bp3d_tree_disp_value;
							if(bp3d_tree_idx>=0) bp3d_tree_rec = bp3d_tree_store.getAt(bp3d_tree_idx);
							if(bp3d_tree_rec){
								params.bul_id = bp3d_tree_rec.get('bul_id');
								params.ci_id = bp3d_tree_rec.get('ci_id');
								params.cb_id = bp3d_tree_rec.get('cb_id');
							}
						}catch(e){
							if(window.console) console.error(e);
						}
//						console.log(params);

						var newRecord = Ext.data.Record.create(bp3d_parts_store_fields);
						var prm_record = ag_param_store.getAt(0);
						var data2record = function(data){
							var addrec = new newRecord(Ext.apply({},{
								'exclude'       : false,
								'color'         : '#'+prm_record.data.color_rgb,
								'value'         : '',
								'zoom'          : false,
								'exclude'       : false,
								'opacity'       : '1.0',
								'representation': 'surface',
								'point'         : false
							},params));

							addrec.beginEdit();
							for(var fcnt=0;fcnt<addrec.fields.items.length;fcnt++){
								var fname = addrec.fields.items[fcnt].name;
								var fdefaultValue = addrec.fields.items[fcnt].defaultValue;
								if(Ext.isEmpty(addrec.get(fname))) addrec.set(fname,fdefaultValue);
							}

							if(data.id) addrec.set('f_id',data.id);
							if(data.name) addrec.set('name_e',data.name);
							if(data.color) addrec.set('color',data.color);
//							console.log(addrec.data.f_id,addrec.data.color);

							addrec.commit(false);
							addrec.endEdit();
							return addrec;
						};

						var partslist = Ext.getCmp('control-tab-partslist-panel');
						var store = partslist.getStore();

						var addrecs = [];
						var adddatas = {};

						var find_property = 'f_id';
						if(Ext.isArray(dropData)){
							Ext.each(dropData,function(data){
								var record = data2record(data);
								var idx = store.find(find_property, record.get(find_property), 0, false, true);
								if(idx<0) addrecs.push(record);
							});
						}
						else if(Ext.isObject(dropData)){
							var record = data2record(dropData);
							var idx = store.find(find_property, record.get(find_property), 0, false, true);
							if(idx<0) addrecs.push(record);
						}
						if(addrecs.length){
							Ext.each(addrecs,function(r){
								adddatas[r.get('f_id')]= Ext.apply({},r.data);
							});

							store.add(addrecs);
							clearConvertIdList(addrecs);
							getConvertIdList(addrecs,store,function(success){
								if(success){
									Ext.each(addrecs,function(addrec){
										var f_id = addrec.get('f_id');
										if(adddatas[f_id] && adddatas[f_id].color != addrec.get('color')){
											addrec.beginEdit();
											addrec.set('color',adddatas[f_id].color);
											addrec.commit(false);
											addrec.endEdit();
										}
									});
								}
							});
						}


					}

				}catch(e){
					console.error(e);
				}



			}
		});
};

Ext.onReady(function(){
	ag_extensions.dataDrop.init();
});

if(Ext.isEmpty(Ext.isObject)){
	var toString = Object.prototype.toString;
	Ext.isObject = (toString.call(null) === '[object Object]') ?
		function(value) {
			return value !== null && value !== undefined && toString.call(value) === '[object Object]' && value.ownerDocument === undefined;
		} :
		function(value) {
			return toString.call(value) === '[object Object]';
		}
	;
}
if(Ext.isEmpty(Ext.isString)){
	Ext.isString = function(value) {
		return typeof value === 'string';
	};
}
/////////////////////////////////////////////////////////////////////////////////////////////////////
// ag_common_js.cgiから移植（ここから）
/////////////////////////////////////////////////////////////////////////////////////////////////////
Ext.BLANK_IMAGE_URL = "resources/images/default/s.gif";

var _dump = function(aStr){
//	if(window.dump) window.dump("main.cgi:"+aStr+"\n")
//	try{if(console && console.log) console.log(aStr);}catch(e){}
};

captureEvents = function(observable) {
	Ext.util.Observable.capture(
		observable,
		function(eventName) {
			_dump(eventName);
		},
		this
	);
};

var Cookies = {};
Cookies.set = function(aKey, aVal, aExpires){
//	if(aKey=="ag_annotation.images.type"){
//		_dump("Cookies.set():["+aKey+"]["+aVal+"]["+aExpires+"]");
//	}
	if(aExpires == undefined) aExpires = true;
	if(aExpires){
		var xDay = new Date;
		xDay.setDate(xDay.getDate() + 30); //30 Days after
		xDay = xDay.toGMTString(); //GMT format
		document.cookie = aKey + '=' + escape(aVal) + '; expires=' + xDay + ';';
	}else{
		document.cookie = aKey + '=' + escape(aVal) + ';';
	}
}

Cookies.get = function(name,defvalue){
	if(defvalue == undefined) defvalue = null;
	var arg = name + "=";
	var alen = arg.length;
	var clen = document.cookie.length;
	var i = 0;
	var j = 0;
	while(i < clen){
		j = i + alen;
		if (document.cookie.substring(i, j) == arg){
			var rtnval = Cookies.getCookieVal(j);
//			if(name=="ag_annotation.images.type"){
//				_dump("Cookies.set():["+name+"]["+defvalue+"]["+rtnval+"]");
//			}
			if(rtnval == "") rtnval = defvalue;
			return rtnval;
		}
		i = document.cookie.indexOf(" ", i) + 1;
		if(i == 0)
			break;
	}
//	if(name=="ag_annotation.images.type"){
//		_dump("Cookies.set():["+name+"]["+defvalue+"]");
//	}
	return defvalue;
};

Cookies.clear = function(name) {
//	_dump("Cookies.clear():["+name+"]");
	if(Cookies.get(name)){
		document.cookie = name + "=" +
			"; expires=Thu, 01-Jan-70 00:00:01 GMT";
	}
};

Cookies.getCookieVal = function(offset){
	var endstr = document.cookie.indexOf(";", offset);
	if(endstr == -1){
		endstr = document.cookie.length;
	}
	return unescape(document.cookie.substring(offset, endstr));
};

/////////////////////////////////////////////////////////////////////////////////////////////////////

function anatomo_fixlen_format (num, len) {
	var retStr = num + "";
	while(retStr.length < len) {
		retStr = "0" + retStr;
	}
	return retStr;
}

function anatomo_float_format (num) {
	var scalar = num.toString();
	if (scalar == "NaN") {
		return "NANANANANANA";
	}
	if (scalar.indexOf("e-", 0) >= 0) {
		scalar = "0.0";
	}
	var nums = new Array();
	if (scalar.indexOf(".", 0) >= 0) {
		nums = scalar.split(".");
	} else {
		nums[0] = scalar;
		nums[1] = "";
	}
	var fMinus = false;
	if (nums[0].indexOf("-", 0) >= 0) {
		fMinus = true;
		nums[0] = nums[0].replace("-", "");
	}
	if (nums[0] > 65535) {
		nums[0] = 65535;
	}
	while (nums[0].length < 5) {
		nums[0] = "0" + nums[0];
	}
	while (nums[1].length < 5) {
		nums[1] = nums[1] + "0";
	}
	if (nums[1].length > 5) {
		nums[1] = nums[1].substr(0, 5);
	}
	if (fMinus) {
		return "M" + nums[0] + "." + nums[1];
	} else {
		return "P" + nums[0] + "." + nums[1];
	}
}

function AGVec3d (x, y, z) {
	this.x = x;
	this.y = y;
	this.z = z;
}


function agDifferenceD3 (v0, v1, out) {
	out.x = parseFloat(v0.x) - parseFloat(v1.x);
	out.y = parseFloat(v0.y) - parseFloat(v1.y);
	out.z = parseFloat(v0.z) - parseFloat(v1.z);
}

function agInnerProductD3 (v0, v1) {
	return parseFloat(v0.x * v1.x) + parseFloat(v0.y * v1.y) + parseFloat(v0.z * v1.z);
}

function agOuterProductD3 (v0, v1, out) {
	out.x = parseFloat(v0.y * v1.z) - parseFloat(v1.y * v0.z);
	out.y = parseFloat(v0.z * v1.x) - parseFloat(v1.z * v0.x);
	out.z = parseFloat(v0.x * v1.y) - parseFloat(v1.x * v0.y);
}

function agNormalizeD3 (v0, out) {
	var len;
	len = parseFloat(v0.x * v0.x) + parseFloat(v0.y * v0.y) + parseFloat(v0.z * v0.z);
	len = Math.sqrt(len);
	if (len == 0) {
		return false;
	}
	out.x = v0.x / len;
	out.y = v0.y / len;
	out.z = v0.z / len;
	return true;
}

function agCopyD3 (v0, out) {
	out.x = v0.x;
	out.y = v0.y;
	out.z = v0.z;
}

function agIsZero (x) {
	return (((parseFloat(x)<parseFloat(m_ag.epsilon)) && (parseFloat(x)>(-parseFloat(m_ag.epsilon)))) ? true : false);
}

function agDeg2Rad (deg) {
	return deg * m_ag.PI / 180;
}

function agRad2Deg (rad) {
	return rad * 180 / m_ag.PI;
}




function getCameraPos () {
	return m_ag.cameraPos;
}

function getTargetPos () {
	return m_ag.targetPos;
}

function getYRange () {
	return m_ag.orthoYRange;
}

function getYRangeFromServer(aCB) {
	var img = document.getElementById("clipImg");
	var urlStr = img.src;
	urlStr = urlStr.replace(/^[^?]+/,"getYRange.cgi");

	var yRange = "";
	Ext.Ajax.request({
		url: urlStr,
		success : function (response, options) {
			yRange = response.responseText;

			YRangeFromServer = parseFloat(yRange);
			if(aCB) (aCB)(YRangeFromServer);
		},
		failure : function (response, options) {
		}
	});
}

function getNear () {
	return m_ag.nearClip;
}

function getFar () {
	return m_ag.farClip;
}

function calcRotateDeg () {
	var CTx = m_ag.targetPos.x - m_ag.cameraPos.x;
	var CTy = m_ag.targetPos.y - m_ag.cameraPos.y;
	var CTz = m_ag.targetPos.z - m_ag.cameraPos.z;

	// Calculate Rotate H
	var radH = Math.acos(CTy / Math.sqrt(CTx*CTx + CTy * CTy));
	var degH = radH / Math.PI * 180;
	if (CTx > 0) degH = 360 - degH;
	while (degH >= 360) {
		degH = degH - 360;
	}
	if (m_ag.upVec.z < 0) {
		degH = degH + 180;
		while (degH >= 360) {
			degH = degH - 360;
		}
	}

	// Calculate Rotate V
	var UnitX = -1 * Math.sin(degH / 180 * Math.PI);
	var UnitY = Math.cos(degH / 180 * Math.PI);
	var UnitZ = 0;
	var radV = Math.acos((CTx * UnitX + CTy * UnitY + CTz * UnitZ) / Math.sqrt((CTx * CTx + CTy * CTy + CTz * CTz) * (UnitX * UnitX + UnitY * UnitY + UnitZ * UnitZ)));
	if(isNaN(radV)) radV = 0;
	var degV = radV / Math.PI * 180;
	if (CTz > 0) degV = 360 - degV;
	while (degV >= 360) {
		degV = degV - 360;
	}

	degH = Math.round(degH);
	degV = Math.round(degV);

	while (degH >= 360) {
		degH = degH - 360;
	}
	while (degV >= 360) {
		degV = degV - 360;
	}

//	if(degV%15) degV += (degV%15)>=8?(15-(degV%15)):(degV%15)-15;
//	if(degH%15) degH += (degH%15)>=8?(15-(degH%15)):(degH%15)-15;

//	while (degH >= 360) {
//		degH = degH - 360;
//	}
//	while (degV >= 360) {
//		degV = degV - 360;
//	}

	return {H:degH,V:degV};
}

function calcCameraPos () {
	var eyeLongitudeRadian = agDeg2Rad(m_ag.longitude);
	var eyeLatitudeRadian = agDeg2Rad(m_ag.latitude);
	var eyeTargetDistance = m_ag.distance;

	var target = m_ag.targetPos;
	var eye = m_ag.cameraPos;
	var yAxis = m_ag.upVec;

	var zAxis = new AGVec3d(null, null, null);
	var xAxis = new AGVec3d(null, null, null);
	var tmp0 = new AGVec3d(null, null, null);
	var remind;

	var cEyeLongitude = Math.cos(eyeLongitudeRadian);
	var sEyeLongitude = Math.sin(eyeLongitudeRadian);
	var cEyeLatitude = Math.cos(eyeLatitudeRadian);
	var sEyeLatitude = Math.sin(eyeLatitudeRadian);

	zAxis.x = cEyeLatitude * cEyeLongitude;
	zAxis.y = cEyeLatitude * sEyeLongitude;
	zAxis.z = sEyeLatitude;

	tmp0.x = cEyeLongitude;
	tmp0.y = sEyeLongitude;
	tmp0.z = 0;

	if(parseFloat(zAxis.z) >= parseFloat(m_ag.epsilon)){
		agOuterProductD3( zAxis, tmp0, xAxis );
		agNormalizeD3( xAxis, xAxis );
		agOuterProductD3( zAxis, xAxis, yAxis );
		agNormalizeD3( yAxis, yAxis );
	}
	else if(parseFloat(zAxis.z) < -parseFloat(m_ag.epsilon)){
		agOuterProductD3(tmp0, zAxis, xAxis);
		agNormalizeD3(xAxis, xAxis);
		agOuterProductD3(zAxis, xAxis, yAxis);
		agNormalizeD3(yAxis, yAxis);
	}
	else{ // zAxis.z == 0
		remind =  Math.round(m_ag.latitude) % 360;
		remind = remind < 0 ? -remind : remind;

		if( remind > 175 && remind < 185 ){
			yAxis.x = 0;
			yAxis.y = 0;
			yAxis.z = -1;
		}else{
			yAxis.x = 0;
			yAxis.y = 0;
			yAxis.z = 1;
		}
	}

	eye.x = parseFloat(zAxis.x) * parseFloat(eyeTargetDistance) + parseFloat(target.x);
	eye.y = parseFloat(zAxis.y) * parseFloat(eyeTargetDistance) + parseFloat(target.y);
	eye.z = parseFloat(zAxis.z) * parseFloat(eyeTargetDistance) + parseFloat(target.z);

	var posDif = parseFloat(888.056);
	var tmpDeg = calcRotateDeg();
	if (tmpDeg.H == 0 && tmpDeg.V == 0) {
		m_ag.cameraPos.x = m_ag.targetPos.x;
		m_ag.cameraPos.y = m_ag.targetPos.y - posDif;
		m_ag.cameraPos.z = m_ag.targetPos.z;
	} else if (tmpDeg.H == 90 && tmpDeg.V == 0) {
		m_ag.cameraPos.x = m_ag.targetPos.x + posDif;
		m_ag.cameraPos.y = m_ag.targetPos.y;
		m_ag.cameraPos.z = m_ag.targetPos.z;
	} else if (tmpDeg.H == 180 && tmpDeg.V == 0) {
		m_ag.cameraPos.x = m_ag.targetPos.x;
		m_ag.cameraPos.y = m_ag.targetPos.y + posDif;
		m_ag.cameraPos.z = m_ag.targetPos.z;
	} else if (tmpDeg.H == 270 && tmpDeg.V == 0) {
		m_ag.cameraPos.x = m_ag.targetPos.x - posDif;
		m_ag.cameraPos.y = m_ag.targetPos.y;
		m_ag.cameraPos.z = m_ag.targetPos.z;
	}
}

function setCameraAndTarget (cam, tar, upVec, isInitData) {
	var tc = new AGVec3d(null, null, null);	// camera  -> target
	agDifferenceD3(cam, tar, tc);
	var tc_len = agInnerProductD3(tc, tc);
	tc_len = Math.sqrt(tc_len);
	if (agIsZero(tc_len)) {
		return false;
	}

	var ntc = new AGVec3d(null, null, null);	// |camera  -> target|
	var inv_tc_len = 1 / tc_len;
	ntc.x = tc.x * inv_tc_len;
	ntc.y = tc.y * inv_tc_len;
	ntc.z = tc.z * inv_tc_len;

	var vz = new AGVec3d(0, 0, 1); // zaxis

	// calc latitude
	var latitude = 90;
	if (upVec.z >= 0) {
		latitude = 90 - agRad2Deg(Math.acos(agInnerProductD3(ntc, vz)));
	} else {
		latitude = 90 + agRad2Deg(Math.acos(agInnerProductD3(ntc, vz)));
	}

	// calc longitude
	var longitude = 0;
	var ntc_xy = new AGVec3d(tc.x, tc.y, 0);

	if (agNormalizeD3(ntc_xy, ntc_xy)) {
		var vx = new AGVec3d(1, 0, 0);
		if (upVec.z >= 0) {
		} else {
			ntc_xy.x = -ntc_xy.x;
			ntc_xy.y = -ntc_xy.y;
			ntc_xy.z = 0;
		}
		var tmp = agRad2Deg(Math.acos(agInnerProductD3(ntc_xy, vx)));
		if (ntc_xy.y >= 0) {
			longitude = tmp;
		} else {
			longitude = -tmp;
		}
	} else {
		var vx = new AGVec3d(1, 0, 0);
		var nup_xy = new AGVec3d(null, null, null);
		if (ntc.z >= 0) {
			nup_xy.x = -upVec.x;
			nup_xy.y = -upVec.y;
			nup_xy.z = 0;
		} else {
			nup_xy.x = upVec.x;
			nup_xy.y = upVec.y;
			nup_xy.z = 0;
		}
		if (!agNormalizeD3(nup_xy, nup_xy)) {
		}
		var tmp = agRad2Deg(Math.acos(agInnerProductD3(nup_xy, vx)));
		if (nup_xy.y >= 0) {
			longitude = tmp;
		} else {
			longitude = -tmp;
		}
	}

	m_ag.targetPos.x = tar.x;
	m_ag.targetPos.y = tar.y;
	m_ag.targetPos.z = tar.z;
	m_ag.distance = tc_len;

	m_ag.longitude = longitude;
	m_ag.latitude = latitude;

	calcCameraPos();

	if (isInitData) {
		agCopyD3 (m_ag.targetPos, m_ag.initTargetPos);
		m_ag.initLongitude = m_ag.longitude;
		m_ag.initLatitude = m_ag.latitude;
		m_ag.initDistance = m_ag.distance;
	}
	return true;
}

function setYRange (yRange, isInitData) {
	if (yRange > m_ag.Camera_YRange_Min) {
		m_ag.orthoYRange = yRange;
		if (isInitData) {
			m_ag.initOrthoYRange = yRange;
		}
		return true;
	} else {
		return false;
	}
}

function changeYRange (d, base) {
	var ratio = 1.0;
	if (d > 0) {
		ratio = Math.pow(base, d);
	} else if (d < 0) {
		ratio = Math.pow(base, d);
	}
	var tmp = m_ag.orthoYRange * ratio;
	if (tmp < m_ag.Camera_YRange_Min) {
		tmp = m_ag.Camera_YRange_Min;
	}
	m_ag.orthoYRange = tmp;
}

function setNear (nearClip) {
	m_ag.nearClip = nearClip;
	return true;
}

function setFar (farClip) {
	m_ag.farClip = farClip;
	return false;
}

function addLongitude (d) {
	m_ag.longitude = m_ag.longitude + d;
	calcCameraPos();
}

function addLatitude (d) {
	m_ag.latitude = m_ag.latitude + d;
	calcCameraPos();
}

function moveTargetByMouseForOrtho (winHeight, dx, dy) {
	var rx = -dx * m_ag.orthoYRange / winHeight;
	var ry = dy * m_ag.orthoYRange / winHeight;

	// latitude
	eyeLongitudeRadian = agDeg2Rad(m_ag.longitude);

	// logitude
	eyeLatitudeRadian = agDeg2Rad(m_ag.latitude);

	var cEyeLongitude = Math.cos(eyeLongitudeRadian);
	var sEyeLongitude = Math.sin(eyeLongitudeRadian);
	var cEyeLatitude = Math.cos(eyeLatitudeRadian);
	var sEyeLatitude = Math.sin(eyeLatitudeRadian);

	var zAxis = new AGVec3d(null, null, null);
	var xAxis = new AGVec3d(null, null, null);
	var yAxis = new AGVec3d(null, null, null);
	var tmp0 = new AGVec3d(null, null, null);
	var remind;

	yAxis.x = cEyeLatitude * cEyeLongitude;
	yAxis.y = cEyeLatitude * sEyeLongitude;
	yAxis.z = sEyeLatitude;

	tmp0.x = cEyeLongitude;
	tmp0.y = sEyeLongitude;
	tmp0.z = 0.0;

	if(yAxis.z >= parseFloat(m_ag.epsilon)){
		agOuterProductD3(yAxis, tmp0, xAxis);
		agOuterProductD3(yAxis, xAxis, zAxis);
	}
	else if(yAxis.z < -parseFloat(m_ag.epsilon)){
		agOuterProductD3(tmp0, yAxis, xAxis);
		agOuterProductD3(yAxis, xAxis, zAxis);
	} else {	// yAxis.z == 0
		remind = Math.round(m_ag.latitude) % 360;
		remind = remind < 0 ? -remind : remind;

		if(remind > 175 && remind < 185){
			zAxis.x = 0.0;
			zAxis.y = 0.0;
			zAxis.z = -1.0;
		}else{
			zAxis.x = 0.0;
			zAxis.y = 0.0;
			zAxis.z = 1.0;
		}
		agOuterProductD3(zAxis, yAxis, xAxis);
	}

	var norm = new AGVec3d(null, null, null);
	if(agNormalizeD3(xAxis, norm)) {
		agCopyD3(norm, xAxis);
	}
	if(agNormalizeD3(zAxis, norm)) {
		agCopyD3(norm, zAxis);
	}

	m_ag.targetPos.x = parseFloat(m_ag.targetPos.x) + parseFloat(xAxis.x * rx) + parseFloat(zAxis.x * ry);
	m_ag.targetPos.y = parseFloat(m_ag.targetPos.y) + parseFloat(xAxis.y * rx) + parseFloat(zAxis.y * ry);
	m_ag.targetPos.z = parseFloat(m_ag.targetPos.z) + parseFloat(xAxis.z * rx) + parseFloat(zAxis.z * ry);

	calcCameraPos();
}

function changeYRange (d, base) {
	var ratio = 1.0;
	if (d > 0) {
		ratio = Math.pow(base, d);
	} else if (d < 0) {
		ratio = Math.pow(base, d);
	}
	var tmp = m_ag.orthoYRange * ratio;
	if (tmp < m_ag.Camera_YRange_Min) {
		tmp = m_ag.Camera_YRange_Min;
	}
	m_ag.orthoYRange = tmp;
}

function calcRotateAxisDeg (upVec) {

	var V = [upVec.x,upVec.y,upVec.z];

	var X = [1.0,0.0,0.0];// Ｘ軸方向ベクトル
	var Y = [0.0,1.0,0.0];// Ｙ軸方向ベクトル
	var Z = [0.0,0.0,1.0];// Ｚ軸方向ベクトル
	var XV,YV,ZV,VV; //_内積
	var VL;          //_|V|
	var k;           //_x,y,zインデクス
	var pi;          //_円周率
	var rx,ry,rz;    //_ラヂアン
	var dx,dy,dz;    //_度

	//_内積の計算
	XV = YV = ZV = VV = 0;
	for(k=0;k<3;k++){
		XV += X[k]*V[k];
		YV += Y[k]*V[k];
		ZV += Z[k]*V[k];
		VV += V[k]*V[k];
	}
	//_角度の計算
	VL = Math.sqrt(VV);
	rx = Math.acos(XV/VL);
	ry = Math.acos(YV/VL);
	rz = Math.acos(ZV/VL);
	//_ラヂアン→度換算
	pi = Math.PI;
	dx = 180*rx/pi;
	dy = 180*ry/pi;
	dz = 180*rz/pi;
	//_表示
//	_dump("X=["+rx+"]["+dx+"]");
//	_dump("Y=["+ry+"]["+dy+"]");
//	_dump("Z=["+rz+"]["+dz+"]");


	var degH = 0;
	var degV = 0;

	var CTx = upVec.x;
	var CTy = upVec.y;
	var CTz = upVec.z;

//	_dump("CTx=["+CTx+"]");
//	_dump("CTy=["+CTy+"]");
//	_dump("CTz=["+CTz+"]");

	// Calculate Rotate H
	var radH = Math.acos(CTy / Math.sqrt(CTx*CTx + CTy * CTy));
//	_dump("radH=["+radH+"]");
	if(isNaN(radH)) radH = 0;
	var degH = radH / Math.PI * 180;

	// Calculate Rotate V
	var UnitX = -1 * Math.sin(degH / 180 * Math.PI);
	var UnitY = Math.cos(degH / 180 * Math.PI);
	var UnitZ = 0;
	var radV = Math.acos((CTx * UnitX + CTy * UnitY + CTz * UnitZ) / Math.sqrt((CTx * CTx + CTy * CTy + CTz * CTz) * (UnitX * UnitX + UnitY * UnitY + UnitZ * UnitZ)));
	if(isNaN(radV)) radV = 0;
	var degV = radV / Math.PI * 180;

//	_dump("deg=["+degH+"]["+degV+"]");


	return {H:degH,V:degV};
}

/////////////////////////////////////////////////////////////////////////////////////////////////////
function load_ag_img(e) {
	try{Ext.getCmp('anatomography-image').loadMask.hide();}catch(e){}
	var date = new Date();
//_dump("_updateAnatomo():time2=["+glb_time+"]["+date.getTime()+"]");
	var time = date.getTime() - glb_time;
	date.setTime(time);
	var s = date.getSeconds();
	var ms = date.getMilliseconds();
//_dump("_updateAnatomo():img=[load]:"+s+"."+ms);

//_dump("_updateAnatomo():img=[load]:"+params);
	setImageTransform('scale(1) translate(0px,0px)');
	var elemImg = Ext.get('ag_img');
	glbImgXY = elemImg.getXY();

	ag_put_usersession_task.delay(1000);
}
function _updateAnatomo (loadMask) {
	if(Ext.isEmpty(loadMask)) loadMask = true;
	glb_anatomo_image_url='';
	glb_anatomo_editor_url='';

	glb_anatomo_image_still = '';
	glb_anatomo_image_rotate = '';

//	glb_anatomo_embedded_url='';

//	try{Ext.getCmp('anatomography-image').loadMask.show();}catch(e){}
	try{
		var img = Ext.getDom('ag_img');
		if(img && img.src){
			var params = makeAnatomoPrm();
//_dump("_updateAnatomo():anatomoImgEvent=["+anatomoImgEvent+"]");
			if(!anatomoImgEvent){
				var elem = Ext.get('ag_img');
				if(elem){

					if(Ext.isGecko){
						var base_div = Ext.get('anatomography-image-contentEl');
						Ext.EventManager.on(base_div,"mousedown", function(e,t) {anatomoImgMouseDown(e,t);});
						Ext.EventManager.on(base_div,"mousemove", function(e,t) {anatomoImgMouseMove(e,t);});
						Ext.EventManager.on(base_div,"mouseup",   function(e,t) {anatomoImgMouseUp(e,t);});
						Ext.EventManager.on(base_div,"mouseout",  function(e,t) {anatomoImgMouseOut(e,t);});
						Ext.EventManager.on(base_div,"mousewheel",function(e,t) {anatomoImgMouseWheel(e,t);});
						Ext.EventManager.on(base_div,"dblclick",  function(e,t) {anatomoImgDblClick(e,t);});
					}else{
						elem.on("mousedown", function(e,t) {anatomoImgMouseDown(e,t);});
						elem.on("mousemove", function(e,t) {anatomoImgMouseMove(e,t);});
						elem.on("mouseup",   function(e,t) {anatomoImgMouseUp(e,t);});
						elem.on("mouseout",  function(e,t) {anatomoImgMouseOut(e,t);});
						elem.on("mousewheel",function(e,t) {anatomoImgMouseWheel(e,t);});
						elem.on("dblclick",  function(e,t) {anatomoImgDblClick(e,t);});
					}

					elem.on("abort", function(e) {
//_dump("_updateAnatomo():ag_img:abort()");
						try{Ext.getCmp('anatomography-image').loadMask.hide();}catch(e){}
						var img = Ext.getDom('ag_img');
						if(img){
							img.src = "resources/images/default/s.gif";
							setImageTransform('scale(1) translate(0px,0px)');
						}
						Ext.Msg.show({
							title: get_ag_lang('TITLE_AG'),
							buttons: Ext.Msg.OK,
							closable: false,
							icon: Ext.Msg.ERROR,
							modal : true,
							msg : 'Image loading aborted.'
						});
					});
					elem.on("error", function(e){
//_dump("_updateAnatomo():ag_img:error()");
						try{Ext.getCmp('anatomography-image').loadMask.hide();}catch(e){}
						var img = Ext.getDom('ag_img');
						if(img){
							img.src = "resources/images/default/s.gif";
							setImageTransform('scale(1) translate(0px,0px)');
						}
						var error_params = makeAnatomoPrm();
						var params = Ext.urlDecode(error_params,true);
						if(Ext.isEmpty(params.oid001)) return;//部品未指定時のエラーは何もしない
						Ext.Ajax.request({
							url:cgipath.image,
							params: Ext.urlDecode(error_params, true),
							method: 'POST',
							callback: function(options,success,response){
//_dump("success=["+success+"]");
								if(success) return;

								var msg = 'Failed to load the image.';
								if(!success){
									msg += ' [' + response.status + ':' + response.statusText + ']';
									Ext.Msg.show({
										title:' ',
										buttons: Ext.Msg.OK,
										closable: false,
										icon: Ext.Msg.ERROR,
										modal : true,
										msg : msg
									});
								}
							}
						});
					});
					elem.on("load", load_ag_img);
				}
				anatomoImgEvent = true;
			}

			_loadAnatomo(params,loadMask);
		}

//		glb_anatomo_image_url = img.src;
		try{
//			var editURL = img.src;
			var editURL = getEditUrl();
			editURL += cgipath.image;

//			editURL = editURL.replace(/#.*/, "");
//			editURL = editURL.replace(/\?.*/, "");

			glb_anatomo_image_still = glb_anatomo_image_rotate = makeAnatomoPrm();

			glb_anatomo_image_url = editURL + "?" + glb_anatomo_image_still;

//_dump("glb_anatomo_image_url=["+glb_anatomo_image_url+"]");
//			_dump("_updateAnatomo():1334");
//			img.src = "css/loading.gif";
		}catch(e){}
	}catch(e){
		if(e.name && e.message){
//			alert("_updateAnatomo():"+e.name+":"+e.message);
//			_dump("_updateAnatomo():"+e.name+":"+e.message);
		}else{
//			alert("_updateAnatomo():"+e);
//			_dump("_updateAnatomo():"+e);
		}
		try{img.src = "resources/images/default/s.gif";}catch(e){}
//		_dump("_updateAnatomo():1344");
	}
	try{
		var editURL = getEditUrl();
		editURL += "?tp_ap=" + encodeURIComponent(makeAnatomoPrm(1));
		glb_anatomo_editor_url = editURL;
//		glb_anatomo_embedded_url = getEmbedIFrameUrl(editURL);
	}catch(e){}

//	try{Ext.getCmp('anatomography-image').loadMask.hide();}catch(e){}
}

function getEmbedIFrameUrl(editURL){
	return '<iframe width="425" height="350" frameborder="0" scrolling="no" marginheight="0" marginwidth="0" src="'+editURL+'"></iframe><br />'+get_ag_lang('LICENSE_EMBED')+'<br /><small><a href="'+editURL+'" target="_blank" style="color:#0000FF;text-align:left">'+get_ag_lang('ANATOMO_OPEN')+'</a></small>';
}
function getEmbedImgUrl(editURL){
	return '<img src="'+editURL+'"><br />'+get_ag_lang('LICENSE_EMBED');
}
function getEmbedAUrl(editURL){
	return '<a href="'+editURL+'">BodyParts3D</a>';
}

function getEditUrl(){
	var editURL = document.URL;
	return editURL.replace(/#.*/, "").replace(/\?.*/, "").replace(/[^\/]+$/, "");
}

function setRotateHorizontalValue(value) {
	value = (isNaN(value))?0:parseInt(value);

//	var span = document.getElementById("rotateH");
//	span.setAttribute("value", value);
//	span.innerHTML = value;

	var prm_record = ag_param_store.getAt(0);
	prm_record.beginEdit();
	prm_record.set('rotate_h', value);
	prm_record.endEdit();
	prm_record.commit();

	try{Ext.getCmp("rotateH").setValue(value);}catch(e){}
}

function setRotateVerticalValue(value) {
	value = (isNaN(value))?0:parseInt(value);

//	var span = document.getElementById("rotateV");
//	span.setAttribute("value", value);
//	span.innerHTML = value;

	var prm_record = ag_param_store.getAt(0);
	prm_record.beginEdit();
	prm_record.set('rotate_v', value);
	prm_record.endEdit();
	prm_record.commit();

	try{Ext.getCmp("rotateV").setValue(value);}catch(e){}
}

function getRotateHorizontalValue() {
//	var span = document.getElementById("rotateH");
//	span.setAttribute("value", deg);
//	span.innerHTML = deg;
	try{
		return parseInt(Ext.getCmp("rotateH").getValue());
	}catch(e){
		var prm_record = ag_param_store.getAt(0);
		return prm_record.data.rotate_h;
	}
}

function getRotateVerticalValue() {
//	var span = document.getElementById("rotateV");
//	span.setAttribute("value", deg);
//	span.innerHTML = deg;
	try{
		return parseInt(Ext.getCmp("rotateV").getValue());
	}catch(e){
		var prm_record = ag_param_store.getAt(0);
		return prm_record.data.rotate_v;
	}
}

function makeRotImgDiv () {
	return;
	rotImgDiv = document.createElement("div");
	rotImgDiv.setAttribute("id", "rotImgDiv");
	rotImgDiv.setAttribute("align", "center");
	rotImgDiv.style.position = 'absolute';
	rotImgDiv.style.border = '1px solid #3c3c3c';
	rotImgDiv.style.background = '#f0f0f0';
	rotImgDiv.style.MozOpacity = 0.75;
	rotImgDiv.style.opacity = 0.75;
	rotImgDiv.style.filter = "alpha(opacity='75')";
	rotImgDiv.style.width = "80px";
	rotImgDiv.style.height = "80px";
	rotImgDiv.style.backgroundImage = "url('img/rotImg.png')";
	rotImgDiv.style.backgroundRepeat = "no-repeat";
	rotImgDiv.style.visibility = "hidden";
	rotImgDiv.style.left = "-100px";
	rotImgDiv.style.top = "-100px";
	document.body.appendChild(rotImgDiv);
}

function anatomoImgMoveCenter(x,y){
	var centerX = parseInt((ag_param_store.getAt(0).data.image_w /2) -  x);
	var centerY = parseInt((ag_param_store.getAt(0).data.image_h /2) -  y);
	var image_h = ag_param_store.getAt(0).data.image_h;
	var zoom = ag_param_store.getAt(0).data.zoom;
	moveTargetByMouseForOrtho(image_h, centerX / parseFloat(Math.pow(2, zoom)), centerY / parseFloat(Math.pow(2, zoom)));
	setImageTransform('scale(1) translate(' + centerX + 'px, ' + centerY + 'px)',true);
	stopUpdateAnatomo();
	_updateAnatomo();
}
function anatomoImgDblClick(e,t){
//_dump("anatomoImgDblClick():"+t.id);
	if(!t || t.id!='ag_img') return;
	try {
		e.stopPropagation();
		e.preventDefault();
	} catch (ex) {
		e.returnValue = false;
		e.cancelBubble = true;
	}

	var elemImg = Ext.get('ag_img');
	var xyImg = elemImg.getXY();
	var mouseX = e.xy[0] - xyImg[0];
	var mouseY = e.xy[1] - xyImg[1];
	anatomoImgMoveCenter(mouseX,mouseY);
//	var centerX = parseInt((ag_param_store.getAt(0).data.image_w /2) -  mouseX);
//	var centerY = parseInt((ag_param_store.getAt(0).data.image_h /2) -  mouseY);
//	moveTargetByMouseForOrtho(ag_param_store.getAt(0).data.image_h, centerX / parseFloat(Math.pow(2, ag_param_store.getAt(0).data.zoom)), centerY / parseFloat(Math.pow(2, ag_param_store.getAt(0).data.zoom)));
//	setImageTransform('scale(1) translate(' + centerX + 'px, ' + centerY + 'px)',true);
//	stopUpdateAnatomo();
//	_updateAnatomo();
}

function getFMAID_CSVstr () {
	var retStr = "";
	if (ag_parts_store && ag_parts_store.getCount() > 0) {
		for (var i = 0; i < ag_parts_store.getCount(); i++) {
			if (i > 0) {
				retStr = retStr + ",";
			}
			var record = ag_parts_store.getAt(i);
			retStr = retStr + record.data.f_id;
		}
	}
	return retStr;
}

function makeAnatomoOrganNumber(aNum){
	var num = aNum;
	while ((num+"").length < 3) {
		num = "0" + num;
	}
	return num;
}

function makeAnatomoOrganPointPrm(num,record){
	var prm = "";

	// Point Color
	var colorstr = record.data.color.substr(1, 6);
	if(colorstr.length == 6) prm = prm + "&pocl" + num + "=" + colorstr;

	// Point Remove
	prm = prm + "&porm" + num + "=";
	if (record.data.exclude) {
		prm = prm + "1";
	}else{
		prm = prm + "0";
	}

	// Point Opacity
	prm = prm + "&poop" + num + "=";
//	if(record.data.opacity==0.1){
//		prm = prm + "0.05";
//	}else{
		prm = prm + record.data.opacity;
//	}

	// Point Representation
	if (record.data.representation == "surface") {
		prm = prm + "&pore" + num + "=S";
	} else if (record.data.representation == "wireframe") {
		prm = prm + "&pore" + num + "=W";
	} else if (record.data.representation == "points") {
		prm = prm + "&pore" + num + "=P";
	}

	// Point Sphere
	var prm_record = ag_param_store.getAt(0);
	prm = prm + "&posh" + num + "=" + prm_record.data.point_sphere;

	return prm;
}

function isNumber(v){
	return((typeof v)==='number' && isFinite(v));
}

function roundPrm(value){
	try{if(!isNumber(value)) value = Number(value);}catch(e){}
	return Math.round(value*10000)/10000;
}

function truncationPrm(value){
	try{if(!isNumber(value)) value = Number(value);}catch(e){}
	return parseInt(value*10000)/10000;
}

function makeAnatomoPrm_Pin(record,anatomo_pin_shape_combo_value,coordinate_system,properties){

	if(window.ag_extensions && ag_extensions.global_pin && ag_extensions.global_pin.makeAnatomoPrm){
		return ag_extensions.global_pin.makeAnatomoPrm(arguments);
	}

	if(Ext.isEmpty(record) || Ext.isEmpty(record.data)) return undefined;

	properties = properties || {};
	var data = Ext.apply({},properties,record.data);

	if(Ext.isEmpty(anatomo_pin_shape_combo_value)){
		try{
			anatomo_pin_shape_combo_value = Ext.getCmp("anatomo_pin_shape_combo").getValue();
		}catch(e){
			anatomo_pin_shape_combo_value = init_anatomo_pin_shape;
		}
	}

	//coordinate_system
	if(Ext.isEmpty(coordinate_system)){
		try{
			coordinate_system = Ext.getCmp("ag-coordinate-system-combo").getValue();
		}catch(e){
			coordinate_system = prm_record.data.coord;
		}
	}
	var prm = '';
	try{
		var no = parseInt(data.no);
		var num = makeAnatomoOrganNumber(no);
		// No
		prm = prm + "pno" + num + "=" + no.toString();
		// 3Dx
		prm = prm + "&px" + num + "=" + roundPrm(data.x3d);
		// 3Dy
		prm = prm + "&py" + num + "=" + roundPrm(data.y3d);
		// 3Dz
		prm = prm + "&pz" + num + "=" + roundPrm(data.z3d);
		// ArrVec3Dx
		prm = prm + "&pax" + num + "=" + roundPrm(data.avx3d);
		// ArrVec3Dy
		prm = prm + "&pay" + num + "=" + roundPrm(data.avy3d);
		// ArrVec3Dz
		prm = prm + "&paz" + num + "=" + roundPrm(data.avz3d);
		// UpVec3Dx
		prm = prm + "&pux" + num + "=" + roundPrm(data.uvx3d);
		// UpVec3Dy
		prm = prm + "&puy" + num + "=" + roundPrm(data.uvy3d);
		// UpVec3Dz
		prm = prm + "&puz" + num + "=" + roundPrm(data.uvz3d);

		var pdc=0;
		// Draw Pin Description
		var drawCheck = Ext.getCmp('anatomo_pin_description_draw_check');
		if(drawCheck && drawCheck.rendered){
			if(drawCheck.getValue()){
				prm = prm + "&pdd" + num + "=1";
				prm = prm + "&pdc" + num + "=" + data.color;
				pdc=1;
			}else{
			}
		}else if(init_anatomo_pin_description_draw){
			prm = prm + "&pdd" + num + "=1";
			prm = prm + "&pdc" + num + "=" + data.color;
			pdc=1;
		}

		// Draw Pin Number
		var drawCheck = Ext.getCmp('anatomo_pin_number_draw_check');
		if(drawCheck && drawCheck.rendered){
			if(drawCheck.getValue()){
				prm = prm + "&pnd" + num + "=1";
				if(!pdc) prm = prm + "&pdc" + num + "=" + data.color;
			}else{
			}
		}else if(init_anatomo_pin_number_draw){
			prm = prm + "&pnd" + num + "=1";
			if(!pdc) prm = prm + "&pdc" + num + "=" + data.color;
		}


		// Point Shape
		prm = prm + "&ps" + num + "=" + anatomo_pin_shape_combo_value;
		// ForeRGB
		prm = prm + "&pcl" + num + "=" + data.color;
		// OrganID
		prm = prm + "&poi" + num + "=" + encodeURIComponent(data.oid);
		// OrganName
		prm = prm + "&pon" + num + "=" + encodeURIComponent(data.organ);
		// Comment
		prm = prm + "&pd" + num + "=" + (Ext.isEmpty(data.comment) ? '' : encodeURIComponent(data.comment));

		//coordinate_system
		if(!Ext.isEmpty(data.coord)){
			prm = prm + "&pcd" + num + "=" + encodeURIComponent(data.coord);
		}else if(!Ext.isEmpty(coordinate_system)){
			prm = prm + "&pcd" + num + "=" + encodeURIComponent(coordinate_system);
		}
	}catch(e){
		_dump(e);
		prm = undefined;
	}
//	console.log("prm=["+prm+"]");
	return prm;
}

function getDateString () {
	var now = new Date();
	var year = now.getFullYear();
	var mon = now.getMonth() + 1;
	var day = now.getDate();
	var hour = now.getHours();
	var min = now.getMinutes();
	var sec = now.getSeconds();
	if(mon < 10) mon = "0" + mon;
	if(day < 10) day = "0" + day;
	if(hour< 10) hour = "0" + hour;
	if(min < 10) min = "0" + min;
	if(sec < 10) sec = "0" + sec;
	return "" + year + mon + day + hour + min + sec;
}

setImageWindowSize = function(){
	var checkcmp = Ext.getCmp('anatomo-windowsize-autosize-check');
	if(checkcmp && checkcmp.rendered && !checkcmp.getValue()) return;
	var comp = Ext.getCmp('anatomography-image');
	if(!comp || !comp.rendered) return;
	var size = comp.getSize();
	try{
		var w = parseInt(size.width);
//		var w = parseInt((size.width-10)/10)*10;
//		w = (w<100?100:(w>900?900:w));
		w = (w<100?100:w);
		var h = parseInt(size.height);
//		var h = parseInt((size.height-10)/10)*10;
//		h = (h<100?100:(h>900?900:h));
		h = (h<100?100:h);
		var wc = Ext.getCmp('anatomo-width-combo');
		var hc = Ext.getCmp('anatomo-height-combo');
		if(wc && wc.rendered && hc && hc.rendered){
			wc.setValue(w);
			hc.setValue(h);
		}
		var prm_record = ag_param_store.getAt(0);
		prm_record.beginEdit();
		prm_record.set('image_w', w);
		prm_record.set('image_h', h);
		prm_record.endEdit();
		prm_record.commit();
		updateAnatomo();

	}catch(e){
		_dump("setImageWindowSize():"+e);
	}
};

var glb_ConvertIdList_transactionId = null;
getConvertIdList = function(records,store,callback){
//_dump("getConvertIdList():records=["+records.length+"]");
	var recs = [];
	for(var i=0;i<records.length;i++){
		var rec = {
			id      : records[i].id,
			tg_id   : records[i].get('tg_id'),
			tgi_id  : records[i].get('tgi_id'),
			version : records[i].get('version'),
			f_id    : records[i].get('f_id'),
			name_e  : records[i].get('name_e'),

			ci_id   : records[i].get('ci_id'),
			cb_id   : records[i].get('cb_id'),
			bul_id  : records[i].get('bul_id'),
			md_id   : records[i].get('md_id'),
			mv_id   : records[i].get('mv_id'),
			mr_id   : records[i].get('mr_id')
		};
		recs.push(rec);
	}
	var params = {
		parent  : (Ext.isEmpty(gParams.parent)?'':gParams.parent),
		lng     : gParams.lng,
		records : Ext.util.JSON.encode(recs)
	}
	try{
		params.version = Ext.getCmp('bp3d-version-combo').getValue();
//		_dump("getConvertIdList():params.version=["+params.version+"]");
	}catch(e){}
	if(Ext.isEmpty(params.version)) params.version=init_bp3d_version;

	try{
		var bp3d_version_combo = Ext.getCmp('bp3d-version-combo');
		var bp3d_version_store = bp3d_version_combo.getStore();
		var bp3d_version_idx = bp3d_version_store.find('tgi_version',new RegExp('^'+bp3d_version_combo.getValue()+'$'));
		var bp3d_version_rec;
		var bp3d_version_disp_value;
		if(bp3d_version_idx>=0) bp3d_version_rec = bp3d_version_store.getAt(bp3d_version_idx);
		if(bp3d_version_rec){
			params.md_id = bp3d_version_rec.get('md_id');
			params.mv_id = bp3d_version_rec.get('mv_id');
			params.mr_id = bp3d_version_rec.get('mr_id');
		}
	}catch(e){
		if(window.console) console.error(e);
	}
	try{
		var bp3d_tree_combo = Ext.getCmp('bp3d-tree-type-combo');
		var bp3d_tree_store = bp3d_tree_combo.getStore();
		var bp3d_tree_idx = bp3d_tree_store.find('t_type',new RegExp('^'+bp3d_tree_combo.getValue()+'$'));
		var bp3d_tree_rec;
		var bp3d_tree_disp_value;
		if(bp3d_tree_idx>=0) bp3d_tree_rec = bp3d_tree_store.getAt(bp3d_tree_idx);
		if(bp3d_tree_rec){
			params.bul_id = bp3d_tree_rec.get('bul_id');
			params.ci_id = bp3d_tree_rec.get('ci_id');
			params.cb_id = bp3d_tree_rec.get('cb_id');
		}
	}catch(e){
		if(window.console) console.error(e);
	}


	var params = Ext.urlEncode(params)
//_dump("getConvertIdList():params=["+params+"]");

	hideConvIDColumn();

	var window_title = "";
	if(glb_ConvertIdList_transactionId){
		Ext.Ajax.abort(glb_ConvertIdList_transactionId);
	}
	glb_ConvertIdList_transactionId = Ext.Ajax.request({
		url     : 'get-convert-id-list.cgi',
		method  : 'POST',
		params  : params,
		callback: function(options,success,response){
			glb_ConvertIdList_transactionId = null;
			try{
				if(callback) (callback)(success);
			}catch(e){
				_dump("getConvertIdList():callback():"+e);
			}
		},
		success : function(conn,response,options){
			try{var results = Ext.util.JSON.decode(conn.responseText);}catch(e){}
			if(!results || results.success == false){
				var msg = '';
				if(results && results.msg) msg += ' ['+results.msg+' ]';
				Ext.MessageBox.show({
					title   : window_title,
					msg     : msg,
					buttons : Ext.MessageBox.OK,
					icon    : Ext.MessageBox.ERROR
				});
				return;
			}
			try{
				if(results.records){
					try{var tg_id = Ext.getCmp('bp3d-tree-group-combo').getValue();}catch(e){tg_id=init_tree_group;}
					var i;
					for(i=0;i<results.records.length;i++){
						var record = store.getById(results.records[i].id);
						if(Ext.isEmpty(record)){
							var idx = store.find('b_id',new RegExp("^"+results.records[i].b_id+"$"));
							if(idx<0) idx = store.find('f_id',new RegExp("^"+results.records[i].f_id+"$"));
							if(idx<0) continue;
							record = store.getAt(idx);
						}
						record.beginEdit();
						if(results.records[i].conv_id && results.records[i].conv_id instanceof Array){
							record.set('conv_id',results.records[i].conv_id.join(","));
						}else{
							record.set('conv_id',results.records[i].conv_id);
						}
						for(var key in results.records[i]){
							if(key == 'conv_id') continue;
							record.set(key,results.records[i][key]);
						}
						record.commit(true);
						record.endEdit();
					}
					var records = store.getRange();
					store.removeAll();
					store.add(records);
					showConvIDColumn();
				}
				_updateAnatomo();
			}catch(e){
				_dump(e);
			}
		},
		failure : function(conn,response,options){
			try{var results = Ext.util.JSON.decode(conn.responseText);}catch(e){}
			var msg = '[';
			if(results && results.msg){
				msg += results.msg+' ]';
			}else{
				msg += conn.status+" "+conn.statusText+' ]';
			}
			Ext.MessageBox.show({
				title   : window_title,
				msg     : msg,
				buttons : Ext.MessageBox.OK,
				icon    : Ext.MessageBox.ERROR
			});
		}
	});
};

load_bp3d_contents_store = function(self,records,options){
_dump("load_bp3d_contents_store():records=["+records.length+"]");
_dump("load_bp3d_contents_store():["+Ext.isEmpty(gParams.tp_ap)+"]");
	try{reset_func();}catch(e){}
//	try{
		if(!Ext.isEmpty(gParams.tp_ap)){
			var tp_ap = gParams.tp_ap;
//						delete gParams.tp_ap;

			var tpap_param = analyzeTPAP(tp_ap);
			if(!tpap_param) return;
//_dump("bp3d_contents_store.load():tpap_param.parts=["+(tpap_param.parts?tpap_param.parts.length:0)+"]");

			var contents_tabs = Ext.getCmp('contents-tab-panel');

//2011-09-28 コメントアウト
//2011-09-30 各設定が正しく定義されない為、とりあえずタブをカレントにする
			if(((tpap_param.parts && tpap_param.parts.length>0 && records.length>0) || (tpap_param.pins && tpap_param.pins.length>0)) && contents_tabs){
				if(contents_tabs.getXType()=='tabpanel'){
					contents_tabs.setActiveTab('contents-tab-anatomography-panel');
				}else if(contents_tabs.getXType()=='panel'){
					contents_tabs.getLayout().setActiveItem('contents-tab-anatomography-panel');
				}
			}


			var fma_rec = {};
			for(var i=0,len=records.length;i<len;i++){
				var record = records[i].copy();
				var f_id = record.get('f_id');
				fma_rec[f_id] = record;
//_dump("bp3d_contents_store.load():record=["+i+"]["+record.data.f_id+"]["+record.data.name_e+"]");
			}

			try{var prm_record = (ag_param_store?ag_param_store.getAt(0):undefined);}catch(e){}

//_dump("bp3d_contents_store.load():prm_record.data.clip_depth=["+prm_record.data.clip_depth+"]");

			if(tpap_param.common != null && prm_record != undefined && prm_record != null){
				prm_record.beginEdit();
				if(!Ext.isEmpty(tpap_param.common.method)) prm_record.set('method',tpap_param.common.method);
				if(!Ext.isEmpty(tpap_param.common.viewpoint)) prm_record.set('viewpoint',tpap_param.common.viewpoint);
				if(gParams.tp_md){
					if(!Ext.isEmpty(tpap_param.common.image_w)) prm_record.set('image_w',tpap_param.common.image_w);
					if(!Ext.isEmpty(tpap_param.common.image_h)) prm_record.set('image_h',tpap_param.common.image_h);
				}
				if(!Ext.isEmpty(tpap_param.common.bg_rgb)) prm_record.set('bg_rgb',tpap_param.common.bg_rgb);
				prm_record.set('bg_transparent',Ext.isEmpty(tpap_param.common.bg_transparent)?NaN:0);
				if(!Ext.isEmpty(tpap_param.common.autoscalar_f)) prm_record.set('autoscalar_f',tpap_param.common.autoscalar_f);
				if(!Ext.isEmpty(tpap_param.common.colorbar_f)) prm_record.set('colorbar_f',tpap_param.common.colorbar_f);
				if(!Ext.isEmpty(tpap_param.common.heatmap_f)) prm_record.set('heatmap_f',tpap_param.common.heatmap_f);
				if(!Ext.isEmpty(tpap_param.common.drawsort_f)) prm_record.set('drawsort_f',tpap_param.common.drawsort_f);
				if(!Ext.isEmpty(tpap_param.common.mov_len)) prm_record.set('mov_len',tpap_param.common.mov_len);
				if(!Ext.isEmpty(tpap_param.common.mov_fps)) prm_record.set('mov_fps',tpap_param.common.mov_fps);

				if(gParams.tp_md){
					if(!Ext.isEmpty(tpap_param.common.image_w)){
						var elemW = Ext.getCmp('anatomo-width-combo');
						if(elemW && elemW.rendered) elemW.setValue(tpap_param.common.image_w);
					}
					if(!Ext.isEmpty(tpap_param.common.image_h)){
						var elemH = Ext.getCmp('anatomo-height-combo');
						if(elemH && elemH.rendered) elemH.setValue(tpap_param.common.image_h);
					}
					if(!Ext.isEmpty(tpap_param.common.image_w) || !Ext.isEmpty(tpap_param.common.image_h)){
						var elemC = Ext.getCmp('anatomo-windowsize-autosize-check');
						if(elemC && elemC.rendered) elemC.setValue(false);
					}
				}

				var elemBGCOLOR = Ext.getCmp('anatomo-bgcp');
				if(elemBGCOLOR && elemBGCOLOR.rendered) elemBGCOLOR.setValue('#'+tpap_param.common.bg_rgb);

				var elemBGTransparent = Ext.getCmp('anatomo-bgcolor-transparent-check');
				if(elemBGTransparent && elemBGTransparent.rendered) elemBGTransparent.setValue(Ext.isEmpty(tpap_param.common.bg_transparent)?false:true);

				if(!Ext.isEmpty(tpap_param.common.rotate_h) && !Ext.isEmpty(tpap_param.common.rotate_v)){
					setRotateHorizontalValue(tpap_param.common.rotate_h);
					setRotateVerticalValue(tpap_param.common.rotate_v);
					if(Ext.isEmpty(gParams.tp_md) || gParams.tp_md != 1){
						if(updateRotateImg) updateRotateImg();
					}
				}

				if(!Ext.isEmpty(tpap_param.common.scalar_max)){
					prm_record.set('scalar_max',tpap_param.common.scalar_max);
					var elem = Ext.getCmp('scalar-max-textfield');
					if(elem && elem.rendered) elem.setValue(tpap_param.common.scalar_max);
				}
				if(!Ext.isEmpty(tpap_param.common.scalar_min)){
					prm_record.set('scalar_min',tpap_param.common.scalar_min);
					var elem = Ext.getCmp('scalar-min-textfield');
					if(elem && elem.rendered) elem.setValue(tpap_param.common.scalar_min);
				}
				if(!Ext.isEmpty(tpap_param.common.colorbar_f) && parseInt(tpap_param.common.colorbar_f)>0){
					var elem = Ext.getCmp('show-colorbar-check');
					if(elem && elem.rendered) elem.setValue(true);
				}
				if(!Ext.isEmpty(tpap_param.common.heatmap_f) && parseInt(tpap_param.common.heatmap_f)>0){
					var elem = Ext.getCmp('show-heatmap-check');
					if(elem && elem.rendered) elem.setValue(true);
				}

//_dump("bp3d_contents_store.load():tpap_param.common.zoom=["+tpap_param.common.zoom+"]");
				if(!Ext.isEmpty(tpap_param.common.zoom)){
					prm_record.set('zoom',parseFloat(tpap_param.common.zoom));
					glb_zoom_slider = prm_record.data.zoom*5+1;
//_dump("bp3d_contents_store.load():glb_zoom_slider=["+glb_zoom_slider+"]");
//								var cmp = Ext.getCmp('zoom-value-text');
//								if(cmp && cmp.rendered) cmp.setValue(glb_zoom_slider+1);
					var cmp = Ext.getCmp('zoom-slider');
					if(cmp && cmp.rendered){
						cmp.setValue(glb_zoom_slider-1);
						ag_command_zoom_menu_slider_syncThumb_task.delay(1000);
					}
				}
				if(!Ext.isEmpty(tpap_param.common.move_x)) prm_record.set('move_x',tpap_param.common.move_x);
				if(!Ext.isEmpty(tpap_param.common.move_y)) prm_record.set('move_y',tpap_param.common.move_y);
				if(!Ext.isEmpty(tpap_param.common.move_z)) prm_record.set('move_z',tpap_param.common.move_z);
				if(!Ext.isEmpty(tpap_param.common.clip_depth)) prm_record.set('clip_depth',tpap_param.common.clip_depth);
				if(!Ext.isEmpty(tpap_param.common.clip_method)) prm_record.set('clip_method',tpap_param.common.clip_method);

				if(!Ext.isEmpty(tpap_param.common.bp3d_version)){
					init_bp3d_version = tpap_param.common.bp3d_version;
//_dump("bp3d_contents_store.load():init_bp3d_version=["+init_bp3d_version+"]");
					if(tpap_param.common.tg_id){
						init_tree_group = tpap_param.common.tg_id;
					}else if(tpap_param.common.model && model2tg[tpap_param.common.model]){
						init_tree_group = model2tg[tpap_param.common.model].tg_id;
					}else if(version2tg[init_bp3d_version] && version2tg[init_bp3d_version].tg_id){
						init_tree_group = version2tg[init_bp3d_version].tg_id;
					}
					if(version2tg[init_bp3d_version].tgi_delcause){
						if(Ext.isEmpty(latestversion[init_tree_group])) return;
						init_bp3d_version = latestversion[init_tree_group];
					}
//_dump("bp3d_contents_store.load():init_bp3d_version=["+init_bp3d_version+"]");

					var cmp = Ext.getCmp('bp3d-version-combo');
					if(cmp && cmp.rendered) cmp.setValue(init_bp3d_version);
					var cmp = Ext.getCmp('anatomo-version-combo');
					if(cmp && cmp.rendered) cmp.setValue(init_bp3d_version);
				}

				if(!Ext.isEmpty(tpap_param.common.grid)){
					prm_record.set('grid',tpap_param.common.grid);
					var elem = Ext.getCmp('ag-command-grid-show-check');
					if(elem && elem.rendered) elem.setValue(tpap_param.common.grid=='1'?true:false);
				}
				if(!Ext.isEmpty(tpap_param.common.grid_color)){
					var elem = Ext.getCmp('ag-command-grid-color-field');
					if(elem && elem.rendered) elem.setValue('#'+tpap_param.common.grid_color);
					prm_record.set('grid_color', tpap_param.common.grid_color);
				}
				if(!Ext.isEmpty(tpap_param.common.grid_len)){
					var elem = Ext.getCmp('ag-command-grid-len-combobox');
					if(elem && elem.rendered) elem.setValue(tpap_param.common.grid_len);
					prm_record.set('grid_len', tpap_param.common.grid_len);
				}

				if(Ext.isEmpty(tpap_param.common.coord)) tpap_param.common.coord = 'bp3d';
//_dump("bp3d_contents_store.load():tpap_param.common.coord=["+tpap_param.common.coord+"]");
				var elem = Ext.getCmp('ag-coordinate-system-combo');
				if(elem && elem.rendered){
					elem.setValue(tpap_param.common.coord);
//_dump("bp3d_contents_store.load():elem.getValue=["+elem.getValue()+"]");
				}
				prm_record.set('coord',tpap_param.common.coord);


				if(Ext.isEmpty(tpap_param.common.color_rgb)) tpap_param.common.color_rgb = 'f0d2a0';
				var elem = Ext.getCmp('anatomo-default-parts-color');
				if(elem && elem.rendered) elem.setValue(tpap_param.common.color_rgb);
				prm_record.set('color_rgb',tpap_param.common.color_rgb);

				if(Ext.isEmpty(tpap_param.common.point_color_rgb)) tpap_param.common.point_color_rgb = '0000ff';
				var elem = Ext.getCmp('anatomo-default-point-parts-color');
				if(elem && elem.rendered) elem.setValue(tpap_param.common.point_color_rgb);
				prm_record.set('point_color_rgb',tpap_param.common.point_color_rgb);

				if(!Ext.isEmpty(tpap_param.common.point_desc)){
					prm_record.set('point_desc',tpap_param.common.point_desc);
					var elem = Ext.getCmp('ag-command-point-description-check');
					if(elem && elem.rendered) elem.setValue(tpap_param.common.point_desc);
				}
				if(!Ext.isEmpty(tpap_param.common.point_pin_line)){
					init_anatomo_pin_description_line = tpap_param.common.point_pin_line;
					prm_record.set('point_pin_line',tpap_param.common.point_pin_line);
					var elem = Ext.getCmp('anatomo_pin_description_draw_pin_indication_line_combo');
					if(elem && elem.rendered) elem.setValue(tpap_param.common.point_pin_line);
				}
				if(!Ext.isEmpty(tpap_param.common.point_point_line)){
					prm_record.set('point_point_line',tpap_param.common.point_point_line);
					var elem = Ext.getCmp('ag-command-point-description-draw-point-indication-line-combo');
					if(elem && elem.rendered) elem.setValue(tpap_param.common.point_point_line);
				}
				if(!Ext.isEmpty(tpap_param.common.point_sphere)){
					prm_record.set('point_sphere',tpap_param.common.point_sphere);
					var elem = Ext.getCmp('ag-command-point-sphere-combo');
					if(elem && elem.rendered) elem.setValue(tpap_param.common.point_sphere);
				}


				//PIN関連
				if(!Ext.isEmpty(tpap_param.common.pin)){
					init_anatomo_pin_description_draw = tpap_param.common.pin ? true : false;
					var elem = Ext.getCmp('anatomo_pin_description_draw_check');
					if(elem && elem.rendered) elem.setValue(init_anatomo_pin_description_draw);
				}
				if(!Ext.isEmpty(tpap_param.common.pinno)){
					init_anatomo_pin_number_draw = tpap_param.common.pinno ? true : false;
					var elem = Ext.getCmp('anatomo_pin_number_draw_check');
					if(elem && elem.rendered) elem.setValue(init_anatomo_pin_number_draw);
				}


				if(!Ext.isEmpty(tpap_param.camera)){
					if(!Ext.isEmpty(tpap_param.camera.cameraPos)){
						m_ag.cameraPos.x = tpap_param.camera.cameraPos.x;
						m_ag.cameraPos.y = tpap_param.camera.cameraPos.y;
						m_ag.cameraPos.z = tpap_param.camera.cameraPos.z;
					}
					if(!Ext.isEmpty(tpap_param.camera.targetPos)){
						m_ag.targetPos.x = tpap_param.camera.targetPos.x;
						m_ag.targetPos.y = tpap_param.camera.targetPos.y;
						m_ag.targetPos.z = tpap_param.camera.targetPos.z;
					}
					if(!Ext.isEmpty(tpap_param.camera.upVec)){
						m_ag.upVec.x = tpap_param.camera.upVec.x;
						m_ag.upVec.y = tpap_param.camera.upVec.y;
						m_ag.upVec.z = tpap_param.camera.upVec.z;
					}
//_dump("m_ag.targetPos.x=["+(typeof m_ag.targetPos.x)+"]["+m_ag.targetPos.x+"]");
//_dump("m_ag.cameraPos=["+m_ag.cameraPos.x+"]["+m_ag.cameraPos.y+"]["+m_ag.cameraPos.z+"]");
//_dump("m_ag.targetPos=["+m_ag.targetPos.x+"]["+m_ag.targetPos.y+"]["+m_ag.targetPos.z+"]");
//_dump("m_ag.upVec=["+m_ag.upVec.x+"]["+m_ag.upVec.y+"]["+m_ag.upVec.z+"]");

					if(!Ext.isEmpty(tpap_param.camera.cameraPos) && !Ext.isEmpty(tpap_param.camera.targetPos) && !Ext.isEmpty(tpap_param.camera.upVec)){
						setCameraAndTarget(m_ag.cameraPos, m_ag.targetPos, m_ag.upVec, true);

						var deg = calcRotateDeg();
						tpap_param.common.rotate_h = deg.H;
						tpap_param.common.rotate_v = deg.V;
						setRotateHorizontalValue(deg.H);
						setRotateVerticalValue(deg.V);

						if(Ext.isEmpty(gParams.tp_md) || gParams.tp_md != 1){
							if(updateRotateImg) updateRotateImg();
						}
					}
				}

				if(!Ext.isEmpty(tpap_param.clip) && !Ext.isEmpty(tpap_param.clip.type) && tpap_param.clip.type != 'N'){
					if(!Ext.isEmpty(tpap_param.clip.type))   prm_record.set('clip_type',tpap_param.clip.type);
					if(!Ext.isEmpty(tpap_param.clip.depth))  prm_record.set('clip_depth',parseFloat(tpap_param.clip.depth));
					if(!Ext.isEmpty(tpap_param.clip.method)) prm_record.set('clip_method',tpap_param.clip.method);
					if(!Ext.isEmpty(tpap_param.clip.paramA)) prm_record.set('clip_paramA',parseFloat(tpap_param.clip.paramA));
					if(!Ext.isEmpty(tpap_param.clip.paramB)) prm_record.set('clip_paramB',parseFloat(tpap_param.clip.paramB));
					if(!Ext.isEmpty(tpap_param.clip.paramC)) prm_record.set('clip_paramC',parseFloat(tpap_param.clip.paramC));
					if(!Ext.isEmpty(tpap_param.clip.paramD)) prm_record.set('clip_paramD',parseFloat(tpap_param.clip.paramD));

					if(prm_record.data.clip_paramA != 0 && prm_record.data.clip_paramB != 0 && prm_record.data.clip_paramB != 0){
					}else{
						if(prm_record.data.clip_paramB){
							prm_record.set('clip_depth', (tpap_param.clip.paramD*prm_record.data.clip_paramB));
						}else if(prm_record.data.clip_paramA){
							prm_record.set('clip_depth', (tpap_param.clip.paramD*prm_record.data.clip_paramA));
						}else if(prm_record.data.clip_paramC){
							prm_record.set('clip_depth', (tpap_param.clip.paramD*prm_record.data.clip_paramC));
						}
						prm_record.set('clip_depth', tpap_param.clip.paramD);
					}

					var anatomo_clip_check = Ext.getCmp('anatomo-clip-check');
					var anatomo_clip_method_combo = Ext.getCmp('anatomo-clip-method-combo');
					var anatomo_clip_predifined_plane = Ext.getCmp('anatomo-clip-predifined-plane');
					var anatomo_clip_fix_check = Ext.getCmp('anatomo-clip-fix-check');
					var anatomo_clip_reverse_check = Ext.getCmp('anatomo-clip-reverse-check');
					var anatomo_clip_slider = Ext.getCmp('anatomo-clip-slider');
					var anatomo_clip_value_text = Ext.getCmp('anatomo-clip-value-text');

					var anatomo_clip_slider_up_button = Ext.get('anatomo-clip-slider-up-button');
					var anatomo_clip_slider_down_button = Ext.get('anatomo-clip-slider-down-button');
					var anatomo_clip_text_up_button = Ext.get('anatomo-clip-text-up-button');
					var anatomo_clip_text_down_button = Ext.get('anatomo-clip-text-down-button');
					var anatomo_clip_unit_label = Ext.get('anatomo-clip-unit-label');
					var clipImgDiv = Ext.get('clipImgDiv');

					if(anatomo_clip_check) anatomo_clip_check.un('check',oncheck_anatomo_clip_check);
					if(anatomo_clip_method_combo) anatomo_clip_method_combo.un('select',onselect_anatomo_clip_method_combo);
					if(anatomo_clip_predifined_plane) anatomo_clip_predifined_plane.un('select',onselect_anatomo_clip_predifined_plane);
					if(anatomo_clip_fix_check) anatomo_clip_fix_check.un('check',oncheck_anatomo_clip_fix_check);
					if(anatomo_clip_reverse_check) anatomo_clip_reverse_check.un('check',oncheck_anatomo_clip_reverse_check);
					if(anatomo_clip_slider) anatomo_clip_slider.un('change',onchange_anatomo_clip_slider);
					if(anatomo_clip_value_text) anatomo_clip_value_text.un('change',onchange_anatomo_clip_value_text);

					if(anatomo_clip_check && anatomo_clip_check.rendered) anatomo_clip_check.setValue(true);

					var clip = 'FREE';
					var clip_param = 1;
					var clip_depth = 0;
//_dump("anatomo_clip_predifined_plane=["+anatomo_clip_predifined_plane+"]");
					if(anatomo_clip_predifined_plane && anatomo_clip_predifined_plane.rendered){
						if(prm_record.data.clip_paramA != 0 && prm_record.data.clip_paramB != 0 && prm_record.data.clip_paramB != 0){
							clip_param = prm_record.data.clip_paramD;
							clip_depth = Math.round(parseFloat(tpap_param.clip.depth));
							if(anatomo_clip_fix_check && anatomo_clip_fix_check.rendered) anatomo_clip_fix_check.setValue(true);
						}else{
							if(prm_record.data.clip_paramA != 0){
								clip = 'RL';
								clip_param = prm_record.data.clip_paramA;
							}else if(prm_record.data.clip_paramB != 0){
								clip = 'FB';
								clip_param = prm_record.data.clip_paramB;
							}else if(prm_record.data.clip_paramC != 0){
								clip = 'TB';
								clip_param = prm_record.data.clip_paramC;
							}
							anatomo_clip_predifined_plane.setValue(clip);
							clip_depth = Math.round(parseFloat(tpap_param.clip.paramD*clip_param*-1));
						}
					}
					if(clip_param<0 && anatomo_clip_reverse_check && anatomo_clip_reverse_check.rendered) anatomo_clip_reverse_check.setValue(true);

					if(anatomo_clip_slider && anatomo_clip_slider.rendered) anatomo_clip_slider.setValue(clip_depth);
					if(anatomo_clip_value_text && anatomo_clip_value_text.rendered) anatomo_clip_value_text.setValue(clip_depth);

					if(anatomo_clip_method_combo && anatomo_clip_method_combo.rendered) anatomo_clip_method_combo.setValue(tpap_param.clip.method);

					if(anatomo_clip_method_combo && anatomo_clip_method_combo.rendered) anatomo_clip_method_combo.show();
					if(anatomo_clip_predifined_plane && anatomo_clip_predifined_plane.rendered) anatomo_clip_predifined_plane.show();
					if(anatomo_clip_fix_check && anatomo_clip_fix_check.rendered && clip=='FREE') anatomo_clip_fix_check.show();
					if(anatomo_clip_reverse_check && anatomo_clip_reverse_check.rendered) anatomo_clip_reverse_check.show();
					if(anatomo_clip_slider && anatomo_clip_slider.rendered) anatomo_clip_slider.show();
					if(anatomo_clip_value_text && anatomo_clip_value_text.rendered) anatomo_clip_value_text.show();

					if(anatomo_clip_slider_up_button) anatomo_clip_slider_up_button.show();
					if(anatomo_clip_slider_down_button) anatomo_clip_slider_down_button.show();
					if(anatomo_clip_text_up_button) anatomo_clip_text_up_button.show();
					if(anatomo_clip_text_down_button) anatomo_clip_text_down_button.show();
					if(anatomo_clip_unit_label) anatomo_clip_unit_label.show();
					if(clip!='FREE' && clipImgDiv) clipImgDiv.show();

					if(anatomo_clip_predifined_plane && anatomo_clip_predifined_plane.rendered){
						if(anatomo_clip_predifined_plane.getValue() == "FB") {
							setClipImage(90,0,setClipLine);
						}else{
							setClipImage(0,0,setClipLine);
						}
					}

					if(anatomo_clip_check) anatomo_clip_check.on('check',oncheck_anatomo_clip_check);
					if(anatomo_clip_method_combo) anatomo_clip_method_combo.on('select',onselect_anatomo_clip_method_combo);
					if(anatomo_clip_predifined_plane) anatomo_clip_predifined_plane.on('select',onselect_anatomo_clip_predifined_plane);
					if(anatomo_clip_fix_check) anatomo_clip_fix_check.on('check',oncheck_anatomo_clip_fix_check);
					if(anatomo_clip_reverse_check) anatomo_clip_reverse_check.on('check',oncheck_anatomo_clip_reverse_check);
					if(anatomo_clip_slider) anatomo_clip_slider.on('change',onchange_anatomo_clip_slider);
					if(anatomo_clip_value_text) anatomo_clip_value_text.on('change',onchange_anatomo_clip_value_text);
				}
				prm_record.commit();
				prm_record.endEdit();
			}

			var new_recs = [];
//_dump("tpap_param.parts=["+tpap_param.parts.length+"]");
			if(tpap_param.parts && tpap_param.parts.length>0){
				for(var i=0,len=tpap_param.parts.length;i<len;i++){
					var part = tpap_param.parts[i];
					var f_id = part.id;
					if(!f_id && part.f_id) f_id = part.f_id;
//_dump("f_id=["+i+"]["+f_id+"]");
					if(Ext.isEmpty(fma_rec[f_id])) continue;
					var record = fma_rec[f_id];
					record.beginEdit();

//_dump("part.color=["+part.color+"]");
					if(!Ext.isEmpty(part.show)){
						record.set('color',(part.color=="NANANA"?"":"#"+part.color));
						record.set('value',(part.value=="NANANANANANA"?"":parseFloat((part.value.substr(0,1)=="M"?"-":"")+part.value.substr(1))));
						record.set('zoom', (part.show=="Z"?true:false));
						record.set('opacity',(parseFloat(part.opacity)/100));
					}else{
						record.set('color',  (!Ext.isEmpty(part.color)?('#'+part.color):'#'+prm_record.data.color_rgb));
						record.set('value',  part.value);
						record.set('zoom',   false);
						record.set('exclude',part.exclude);
						record.set('opacity',part.opacity);
						record.set('point',  part.point);
					}
					record.set('representation',(part.representation=="S"?"surface":(part.representation=="W"?"wireframe":(part.representation=="P"?"points":""))));

//_dump("record.data.color=["+record.data.color+"]");

					record.commit(true);
					record.endEdit();
					new_recs.push(record);
//_dump("record.data.tg_id=["+record.data.tg_id+"]");
				}
			}
//_dump("new_recs=["+new_recs.length+"]");


			if(tpap_param.point_parts && tpap_param.point_parts.length>0){
				for(var i=0,len=tpap_param.point_parts.length;i<len;i++){
					var part = tpap_param.point_parts[i];
					var f_id = part.id;
					if(!f_id && part.f_id) f_id = part.f_id;
//_dump("f_id=["+i+"]["+f_id+"]");
					if(Ext.isEmpty(fma_rec[f_id])) continue;
					var record = fma_rec[f_id];
					record.beginEdit();
					record.set('color',  (!Ext.isEmpty(part.color)?('#'+part.color):'#'+prm_record.data.point_color_rgb));
					record.set('value',  part.value);
					record.set('zoom',   false);
					record.set('exclude',part.exclude);
					record.set('opacity',part.opacity);
					record.set('point',  false);
					record.set('representation',(part.representation=="S"?"surface":(part.representation=="W"?"wireframe":(part.representation=="P"?"points":""))));

//_dump("record.data.color=["+record.data.color+"]");

					record.commit(true);
					record.endEdit();
					new_recs.push(record);
//_dump("record.data.tg_id=["+record.data.tg_id+"]");
				}
			}


			var ag_parts_gridpanel = Ext.getCmp('ag-parts-gridpanel');
			if(ag_parts_gridpanel){
				var store = ag_parts_gridpanel.getStore();
				store.add(new_recs);
				getConvertIdList(new_recs,store);
			}

			var anatomo_comment_store = null;
			var ag_pin_grid_panel = Ext.getCmp('anatomography-pin-grid-panel');
			if(ag_pin_grid_panel) anatomo_comment_store = ag_pin_grid_panel.getStore();

			if(anatomo_comment_store){
				anatomo_comment_store.removeAll();
				if(tpap_param.comments && tpap_param.comments.length>0){
					for (var i = 0, len = tpap_param.comments.length; i < len; i++) {
						var comment = tpap_param.comments[i];
						anatomo_comment_store.loadData([[parseIntTPAP(comment.no), comment.id, comment.name, parseFloatTPAP(comment.c3d.x), parseFloatTPAP(comment.c3d.y), parseFloatTPAP(comment.c3d.z), comment.point.rgb, comment.comment]], true);
					}
				}else if(tpap_param.pins && tpap_param.pins.length>0 && ag_comment_store_fields){
					var newRecord = Ext.data.Record.create(ag_comment_store_fields);
					var addrecs = [];
					for(var i=0,len=tpap_param.pins.length;i<len;i++){
						var pin = tpap_param.pins[i];
						var addrec = new newRecord({
							no: pin.no,
							x3d: pin.x3d,
							y3d: pin.y3d,
							z3d: pin.z3d,
							avx3d: pin.avx3d,
							avy3d: pin.avy3d,
							avz3d: pin.avz3d,
							uvx3d: pin.uvx3d,
							uvy3d: pin.uvy3d,
							uvz3d: pin.uvz3d,
							color: pin.color,
							oid: pin.organid,
							organ: pin.organname,
							comment: (pin.comment?pin.comment:""),
							coord: pin.coord
						});

						if(window.ag_extensions && ag_extensions.global_pin){
							addrec.beginEdit();
							if(!Ext.isEmpty(pin.PinID)) addrec.set("PinID",pin.PinID);
							if(!Ext.isEmpty(pin.PinGroupID)) addrec.set("PinGroupID",pin.PinGroupID);
							addrec.commit(true);
							addrec.endEdit();
						}
						addrecs.push(addrec);

						if(Ext.isEmpty(init_anatomo_pin_number_draw)) init_anatomo_pin_number_draw = pin.drawnm ? true : false;
						if(Ext.isEmpty(init_anatomo_pin_description_draw)) init_anatomo_pin_description_draw = pin.draw ? true : false;
						if(Ext.isEmpty(init_anatomo_pin_shape)) init_anatomo_pin_shape = pin.shape;

					}
					anatomo_comment_store.add(addrecs);

					var cmp = Ext.getCmp('anatomo_pin_number_draw_check');
					if(cmp && cmp.rendered) cmp.setValue(init_anatomo_pin_number_draw);

					var cmp = Ext.getCmp('anatomo_pin_description_draw_check');
					if(cmp && cmp.rendered) cmp.setValue(init_anatomo_pin_description_draw);

					var cmp = Ext.getCmp('anatomo_pin_description_draw_pin_indication_line_combo');
					if(cmp && cmp.rendered){
						if(init_anatomo_pin_description_draw){
							cmp.enable();
						}else{
							cmp.disable();
						}
					}
					var cmp = Ext.getCmp('anatomo_pin_shape_combo');
					if(cmp && cmp.rendered) cmp.setValue(init_anatomo_pin_shape);

				}
			}

			init_anatomography_image_comment_title = '';
			init_anatomography_image_comment_legend = '';
			init_anatomography_image_comment_author = '';

			if(!Ext.isEmpty(tpap_param.legendinfo)){
				if(!Ext.isEmpty(tpap_param.legendinfo.title)) init_anatomography_image_comment_title = tpap_param.legendinfo.title;
				if(!Ext.isEmpty(tpap_param.legendinfo.legend)) init_anatomography_image_comment_legend = tpap_param.legendinfo.legend;
				if(!Ext.isEmpty(tpap_param.legendinfo.author)) init_anatomography_image_comment_author = tpap_param.legendinfo.author;
				if(!Ext.isEmpty(tpap_param.legendinfo.position) && !Ext.isEmpty(tpap_param.legendinfo.color)){
					init_anatomography_image_comment_draw = true;
				}else{
					init_anatomography_image_comment_draw = false;
				}
			}

			var cmp = Ext.getCmp("anatomography_image_comment_title");
			if(cmp && cmp.rendered) cmp.setValue(init_anatomography_image_comment_title);

			var cmp = Ext.getCmp("anatomography_image_comment_legend");
			if(cmp && cmp.rendered) cmp.setValue(init_anatomography_image_comment_legend);

			var cmp = Ext.getCmp("anatomography_image_comment_author");
			if(cmp && cmp.rendered) cmp.setValue(init_anatomography_image_comment_author);

			var cmp = Ext.getCmp('anatomography_image_comment_draw_check');
			if(cmp && cmp.rendered) cmp.setValue(init_anatomography_image_comment_draw);


//2011-09-28 コメントアウト
//			if(tpap_param.parts && tpap_param.parts.length>0 && records.length>0 && contents_tabs) contents_tabs.setActiveTab('contents-tab-anatomography-panel');
//

			if(!Ext.isEmpty(gParams.tp_md) && gParams.tp_md == 1){
//_dump("CALL updateAnatomo()");
				setImageWindowSize();
			}

		}
//_dump("bp3d_contents_store.load():prm_record.data.clip_depth=["+prm_record.data.clip_depth+"]");
//	}catch(e){
//		_dump("bp3d_contents_store.load():"+e);
//	}

	if(Ext.Ajax.isLoading()){
		var runner = new Ext.util.TaskRunner();
		var task = {
			run: function(){
//				console.log("BEFORE CALL updateAnatomo()");
				if(Ext.Ajax.isLoading()) return;
				runner.stop(task);
//				console.log("CALL updateAnatomo()");
//				console.log("Ext.Ajax.isLoading():["+Ext.Ajax.isLoading()+"]");
				updateAnatomo();
			},
			interval: 1000 //1 second
		}
		runner.start(task);

	}else{
//		console.log("CALL updateAnatomo()");
//		console.log("Ext.Ajax.isLoading():["+Ext.Ajax.isLoading()+"]");
		updateAnatomo();
	}
};

get_bp3d_buildup_logic = function(){
	var bul_id = init_bp3d_params['bul_id'] ? init_bp3d_params['bul_id'] : 3;
	try{
		bul_id = Ext.getCmp('bp3d-tree-type-combo').getValue();
	}catch(e){}
	return bul_id;
};

/////////////////////////////////////////////////////////////////////////////////////////////////////

afterLayout = function(panel){
	try{
		if(!Ext.isIE) return;
		if(!panel.rendered) return;
		if(panel.collapsed) panel.expand(false);
		var box = panel.getBox();
		if(box.x==0 && box.y==0) return;
		var width  = Ext.isEmpty(panel.initialConfig.minWidth) ?box.width :panel.initialConfig.minWidth;
		var height = Ext.isEmpty(panel.initialConfig.minHeight)?box.height:panel.initialConfig.minHeight;
		if((box.width<width && height > 0) || (width > 0 && box.height<height)){
			panel.setSize(width,height);
			panel.ownerCt.doLayout();
		}
	}catch(e){
		_dump("afterLayout():"+e);
	}
};


Ext.menu.RangeMenu.prototype.icons = {
	gt: 'css/greater_then.png',
	lt: 'css/less_then.png',
	eq: 'css/equals.png'
};
Ext.grid.filter.StringFilter.prototype.icon = 'css/find.png';

if(!String.prototype.ellipse) {
	String.prototype.ellipse = function(maxLength){
//		if(this.length > maxLength){
//			return this.substr(0, maxLength-3) + '...';
//		}
		return this;
	};
}

if(!String.prototype.sprintf) {
	String.prototype.sprintf = function(args___) {
		var rv = [], i = 0, v, width, precision, sign, idx, argv = arguments, next = 0;
		var s = (this + "     ").split(""); // add dummy 5 chars.
		var unsign = function(val) { return (val >= 0) ? val : val % 0x100000000 + 0x100000000; };
		var getArg = function() { return argv[idx ? idx - 1 : next++]; };

		for(;i<s.length-5;++i){
			if(s[i] !== "%"){
				rv.push(s[i]);
				continue;
			}
			++i, idx = 0, precision = undefined;

			// arg-index-specifier
			if (!isNaN(parseInt(s[i])) && s[i + 1] === "$") { idx = parseInt(s[i]); i += 2; }
			// sign-specifier
			sign = (s[i] !== "#") ? false : ++i, true;
			// width-specifier
			width = (isNaN(parseInt(s[i]))) ? 0 : parseInt(s[i++]);
			// precision-specifier
			if (s[i] === "." && !isNaN(parseInt(s[i + 1]))) { precision = parseInt(s[i + 1]); i += 2; }

			switch(s[i]){
				case "d": v = parseInt(getArg()).toString(); break;
				case "u": v = parseInt(getArg()); if (!isNaN(v)) { v = unsign(v).toString(); } break;
				case "o": v = parseInt(getArg()); if (!isNaN(v)) { v = (sign ? "0"  : "") + unsign(v).toString(8); } break;
				case "x": v = parseInt(getArg()); if (!isNaN(v)) { v = (sign ? "0x" : "") + unsign(v).toString(16); } break;
				case "X": v = parseInt(getArg()); if (!isNaN(v)) { v = (sign ? "0X" : "") + unsign(v).toString(16).toUpperCase(); } break;
				case "f": v = parseFloat(getArg()).toFixed(precision); break;
				case "c": width = 0; v = getArg(); v = (typeof v === "number") ? String.fromCharCode(v) : NaN; break;
				case "s": width = 0; v = getArg().toString(); if (precision) { v = v.substring(0, precision); } break;
				case "%": width = 0; v = s[i]; break;
				default:  width = 0; v = "%" + ((width) ? width.toString() : "") + s[i].toString(); break;
			}
			if(isNaN(v)){ v = v.toString(); }
			(v.length < width) ? rv.push(" ".repeat(width - v.length), v) : rv.push(v);
		}
		return rv.join("");
	};
}
if(!String.prototype.repeat){
	String.prototype.repeat = function(n) {
		var rv = [], i = 0, sz = n || 1, s = this.toString();
		for (; i < sz; ++i) { rv.push(s); }
		return rv.join("");
	};
}

function parseFloatTPAP(str){
	try{
		return str=="NANANANANANA"?NaN:parseFloat((str.substr(0,1)=="M"?"-":"")+str.substr(1).replace(/^0+/,""));
	}catch(e){
		return NaN;
	}
}

function parseIntTPAP(str){
	try{
		return parseInt(str.replace(/^0+/,""));
	}catch(e){
		return NaN;
	}
}

function analyzeTPAP(tp_ap,aOpts){

	var defOpts = {
		pin: {
			url_prefix : null
		}
	};
	aOpts = aOpts||{};
	var convOpts = {};
	for(var key in defOpts){
		convOpts[key] = Ext.apply({},aOpts[key]||{},defOpts[key]);
	}

	var param = {};
	var param_arr = tp_ap.split("|");
	if(param_arr.length<1) return undefined;
	if(param_arr.length==1){

		//修正中（とりあえず、パーツの情報を受け取れるように修正）2009/09/09
		var tp_ap_obj = Ext.urlDecode(tp_ap,true);
		if(tp_ap_obj && Ext.isEmpty(tp_ap_obj.av)) tp_ap_obj.av = "09051901";

		if(tp_ap_obj && tp_ap_obj.av){
			if(tp_ap_obj.av == "09051901"){
				param.common = {};
				param.common.version = tp_ap_obj.av;
				param.common.pin = 0;
				param.common.pinno = 1;

				if(!Ext.isEmpty(tp_ap_obj.iw)) param.common.image_w = tp_ap_obj.iw;
				if(!Ext.isEmpty(tp_ap_obj.ih)) param.common.image_h = tp_ap_obj.ih;
				if(!Ext.isEmpty(tp_ap_obj.bcl)) param.common.bg_rgb = tp_ap_obj.bcl.toUpperCase();
				if(!Ext.isEmpty(tp_ap_obj.bga)) param.common.bg_transparent = tp_ap_obj.bga;
				if(!Ext.isEmpty(tp_ap_obj.sx)) param.common.scalar_max = tp_ap_obj.sx;
				if(!Ext.isEmpty(tp_ap_obj.sn)) param.common.scalar_min = tp_ap_obj.sn;
				if(!Ext.isEmpty(tp_ap_obj.cf)) param.common.colorbar_f = tp_ap_obj.cf;
				if(!Ext.isEmpty(tp_ap_obj.hf)) param.common.heatmap_f = tp_ap_obj.hf;
				if(!Ext.isEmpty(tp_ap_obj.model)) param.common.model = tp_ap_obj.model;
				if(!Ext.isEmpty(tp_ap_obj.bv)) param.common.bp3d_version = tp_ap_obj.bv;
				if(!Ext.isEmpty(tp_ap_obj.tn)) param.common.treename = tp_ap_obj.tn;
				if(!Ext.isEmpty(tp_ap_obj.dt)) param.common.date = tp_ap_obj.dt;
				if(!Ext.isEmpty(tp_ap_obj.dl)) param.common.legend = tp_ap_obj.dl;
				if(!Ext.isEmpty(tp_ap_obj.dp)) param.common.pin = tp_ap_obj.dp-0;
				if(!Ext.isEmpty(tp_ap_obj.zm)) param.common.zoom = tp_ap_obj.zm;
				if(!Ext.isEmpty(tp_ap_obj.crd)) param.common.coord = tp_ap_obj.crd;
				if(!Ext.isEmpty(tp_ap_obj.fcl)) param.common.color_rgb = tp_ap_obj.fcl;

				if(!Ext.isEmpty(tp_ap_obj.np)) param.common.pinno = tp_ap_obj.np-0;

				if(!Ext.isEmpty(tp_ap_obj.gdr)){
					param.common.grid = (tp_ap_obj.gdr=='true'?'1':'0');
				}else{
					param.common.grid = '0';
				}
				if(!Ext.isEmpty(tp_ap_obj.gcl)) param.common.grid_color = tp_ap_obj.gcl;
				if(!Ext.isEmpty(tp_ap_obj.gtc)) param.common.grid_len = tp_ap_obj.gtc;

				if(
					!Ext.isEmpty(tp_ap_obj.cx) || !Ext.isEmpty(tp_ap_obj.cy) || !Ext.isEmpty(tp_ap_obj.cz) ||
					!Ext.isEmpty(tp_ap_obj.tx) || !Ext.isEmpty(tp_ap_obj.ty) || !Ext.isEmpty(tp_ap_obj.tz) ||
					!Ext.isEmpty(tp_ap_obj.ux) || !Ext.isEmpty(tp_ap_obj.uy) || !Ext.isEmpty(tp_ap_obj.uz)
				){
					param.camera = {};
					if(!Ext.isEmpty(tp_ap_obj.cx) && !Ext.isEmpty(tp_ap_obj.cy) && !Ext.isEmpty(tp_ap_obj.cz) && !isNaN(tp_ap_obj.cx) && !isNaN(tp_ap_obj.cy) && !isNaN(tp_ap_obj.cz)){
						param.camera.cameraPos = {};
						if(!Ext.isEmpty(tp_ap_obj.cx)) param.camera.cameraPos.x = parseFloat(tp_ap_obj.cx);
						if(!Ext.isEmpty(tp_ap_obj.cy)) param.camera.cameraPos.y = parseFloat(tp_ap_obj.cy);
						if(!Ext.isEmpty(tp_ap_obj.cz)) param.camera.cameraPos.z = parseFloat(tp_ap_obj.cz);
					}
					if(!Ext.isEmpty(tp_ap_obj.tx) && !Ext.isEmpty(tp_ap_obj.ty) && !Ext.isEmpty(tp_ap_obj.tz) && !isNaN(tp_ap_obj.tx) && !isNaN(tp_ap_obj.ty) && !isNaN(tp_ap_obj.tz)){
						param.camera.targetPos = {};
						if(!Ext.isEmpty(tp_ap_obj.tx)) param.camera.targetPos.x = parseFloat(tp_ap_obj.tx);
						if(!Ext.isEmpty(tp_ap_obj.ty)) param.camera.targetPos.y = parseFloat(tp_ap_obj.ty);
						if(!Ext.isEmpty(tp_ap_obj.tz)) param.camera.targetPos.z = parseFloat(tp_ap_obj.tz);
					}
					if(!Ext.isEmpty(tp_ap_obj.ux) && !Ext.isEmpty(tp_ap_obj.uy) && !Ext.isEmpty(tp_ap_obj.uz) && !isNaN(tp_ap_obj.ux) && !isNaN(tp_ap_obj.uy) && !isNaN(tp_ap_obj.uz)){
						param.camera.upVec = {};
						if(!Ext.isEmpty(tp_ap_obj.ux)) param.camera.upVec.x = parseFloat(tp_ap_obj.ux);
						if(!Ext.isEmpty(tp_ap_obj.uy)) param.camera.upVec.y = parseFloat(tp_ap_obj.uy);
						if(!Ext.isEmpty(tp_ap_obj.uz)) param.camera.upVec.z = parseFloat(tp_ap_obj.uz);
					}
				}

				if(
					!Ext.isEmpty(tp_ap_obj.cm)  || !Ext.isEmpty(tp_ap_obj.cd)  || !Ext.isEmpty(tp_ap_obj.ct)  ||
					!Ext.isEmpty(tp_ap_obj.cpa) || !Ext.isEmpty(tp_ap_obj.cpb) || !Ext.isEmpty(tp_ap_obj.cpc) || !Ext.isEmpty(tp_ap_obj.cpd)
				){
					param.clip = {};
					if(!Ext.isEmpty(tp_ap_obj.cm)) param.clip.type = tp_ap_obj.cm;
					if(!Ext.isEmpty(tp_ap_obj.cd)) param.clip.depth = tp_ap_obj.cd;
					if(!Ext.isEmpty(tp_ap_obj.ct)) param.clip.method = tp_ap_obj.ct;
					if(!Ext.isEmpty(tp_ap_obj.cpa)) param.clip.paramA = parseFloat(tp_ap_obj.cpa);
					if(!Ext.isEmpty(tp_ap_obj.cpb)) param.clip.paramB = parseFloat(tp_ap_obj.cpb);
					if(!Ext.isEmpty(tp_ap_obj.cpc)) param.clip.paramC = parseFloat(tp_ap_obj.cpc);
					if(!Ext.isEmpty(tp_ap_obj.cpd)) param.clip.paramD = parseFloat(tp_ap_obj.cpd);
				}

				if(!Ext.isEmpty(tp_ap_obj.oid001) || !Ext.isEmpty(tp_ap_obj.onm001)){
					var prm_record = ag_param_store.getAt(0);
					param.parts = [];
					for(var i=0;;i++){
						var num = makeAnatomoOrganNumber(i+1);
						if(Ext.isEmpty(tp_ap_obj['oid'+num]) && Ext.isEmpty(tp_ap_obj['onm'+num])) break;
						var parts = {
							color   : prm_record.data.color_rgb,
							value   : '',
							exclude : false,
							zoom    : false,
							opacity : 1.0,
							representation : 'S',
							point   : false
						};
						if(!Ext.isEmpty(tp_ap_obj['oid'+num])) parts.f_id = tp_ap_obj['oid'+num];
						if(!Ext.isEmpty(tp_ap_obj['onm'+num])) parts.f_nm = tp_ap_obj['onm'+num];
						if(!Ext.isEmpty(tp_ap_obj['ocl'+num])) parts.color = tp_ap_obj['ocl'+num].toUpperCase();
						if(!Ext.isEmpty(tp_ap_obj['osc'+num])) parts.value = tp_ap_obj['osc'+num];
						if(!Ext.isEmpty(tp_ap_obj['osz'+num])){
							if(tp_ap_obj['osz'+num] == 'H'){
								parts.exclude = true;
							}else if(tp_ap_obj['osz'+num] == 'Z'){
								parts.zoom = true;
							}
						}
						if(!Ext.isEmpty(tp_ap_obj['oop'+num])) parts.opacity = tp_ap_obj['oop'+num];
						if(!Ext.isEmpty(tp_ap_obj['orp'+num])) parts.representation = tp_ap_obj['orp'+num];
						if(!Ext.isEmpty(tp_ap_obj['ov'+num])) parts.version = tp_ap_obj['ov'+num];
						if(!Ext.isEmpty(tp_ap_obj['odcp'+num])) parts.point = tp_ap_obj['odcp'+num]=='1'?true:false;
//_dump("parts.point=["+parts.point+"]");
						param.parts.push(parts);
					}
				}
				if(!Ext.isEmpty(tp_ap_obj.lp) || !Ext.isEmpty(tp_ap_obj.lc) || !Ext.isEmpty(tp_ap_obj.lt) || !Ext.isEmpty(tp_ap_obj.le) || !Ext.isEmpty(tp_ap_obj.la)){
					param.legendinfo = {};
					if(!Ext.isEmpty(tp_ap_obj.lp)) param.legendinfo.position = tp_ap_obj.lp;
					if(!Ext.isEmpty(tp_ap_obj.lc)) param.legendinfo.color = tp_ap_obj.lc.toUpperCase();
					if(!Ext.isEmpty(tp_ap_obj.lt)) param.legendinfo.title = tp_ap_obj.lt;
					if(!Ext.isEmpty(tp_ap_obj.le)) param.legendinfo.legend = tp_ap_obj.le;
					if(!Ext.isEmpty(tp_ap_obj.la)) param.legendinfo.author = tp_ap_obj.la;
				}
				if(!Ext.isEmpty(tp_ap_obj.pno001)){
					param.pins = [];

					var pinRecord = Ext.data.Record.create(ag_comment_store_fields);

					for(var i=0;;i++){
						var num = makeAnatomoOrganNumber(i+1);
						if(Ext.isEmpty(tp_ap_obj['pno'+num])) break;
						var pin = {};
						pin.no = i+1;
						if(!Ext.isEmpty(tp_ap_obj['px'+num]))  pin.x3d = tp_ap_obj['px'+num]-0;
						if(!Ext.isEmpty(tp_ap_obj['py'+num]))  pin.y3d = tp_ap_obj['py'+num]-0;
						if(!Ext.isEmpty(tp_ap_obj['pz'+num]))  pin.z3d = tp_ap_obj['pz'+num]-0;
						if(!Ext.isEmpty(tp_ap_obj['pax'+num])) pin.avx3d = tp_ap_obj['pax'+num]-0;
						if(!Ext.isEmpty(tp_ap_obj['pay'+num])) pin.avy3d = tp_ap_obj['pay'+num]-0;
						if(!Ext.isEmpty(tp_ap_obj['paz'+num])) pin.avz3d = tp_ap_obj['paz'+num]-0;
						if(!Ext.isEmpty(tp_ap_obj['pux'+num])) pin.uvx3d = tp_ap_obj['pux'+num]-0;
						if(!Ext.isEmpty(tp_ap_obj['puy'+num])) pin.uvy3d = tp_ap_obj['puy'+num]-0;
						if(!Ext.isEmpty(tp_ap_obj['puz'+num])) pin.uvz3d = tp_ap_obj['puz'+num]-0;
						if(!Ext.isEmpty(tp_ap_obj['pdd'+num])) pin.draw = tp_ap_obj['pdd'+num]-0;
						if(!Ext.isEmpty(tp_ap_obj['pnd'+num])) pin.drawnm = tp_ap_obj['pnd'+num]-0;
						if(!Ext.isEmpty(tp_ap_obj['pdc'+num])) pin.tcolor = tp_ap_obj['pdc'+num].toUpperCase();
						if(!Ext.isEmpty(tp_ap_obj['ps'+num]))  pin.shape = tp_ap_obj['ps'+num];
						if(!Ext.isEmpty(tp_ap_obj['pcl'+num])) pin.color = tp_ap_obj['pcl'+num].toUpperCase();
						if(!Ext.isEmpty(tp_ap_obj['poi'+num])){
							pin.oid = tp_ap_obj['poi'+num];
							pin.organid = tp_ap_obj['poi'+num];
						}
						if(!Ext.isEmpty(tp_ap_obj['pon'+num])){
							pin.organ = tp_ap_obj['pon'+num];
							pin.organname = tp_ap_obj['pon'+num];
						}
						if(!Ext.isEmpty(tp_ap_obj['pd'+num]))  pin.comment = tp_ap_obj['pd'+num];
						if(!Ext.isEmpty(tp_ap_obj['pcd'+num])) pin.coord = tp_ap_obj['pcd'+num];
						if(window.ag_extensions && ag_extensions.global_pin){
							if(!Ext.isEmpty(tp_ap_obj['pid'+num])) pin.PinID = tp_ap_obj['pid'+num];
							if(!Ext.isEmpty(tp_ap_obj['pgid'+num])) pin.PinGroupID = tp_ap_obj['pgid'+num];
						}

						if(convOpts.pin.url_prefix){
							var newPartsRecord = Ext.data.Record.create(bp3d_parts_store_fields);
							var numParts = makeAnatomoOrganNumber(1);
							var prm_record = ag_param_store.getAt(0);
							var parts_record = new newPartsRecord({
								'f_id'          : pin.oid,
								'exclude'       : false,
								'color'         : '#'+prm_record.data.color_rgb,
								'value'         : '',
								'zoom'          : false,
								'opacity'       : '1.0',
								'representation': 'surface',
								'point'         : false
							});
							var prmParts = "oid" + numParts + "=" + pin.oid;
							prmParts += makeAnatomoOrganPrm(numParts,parts_record,null,null);

							var newPinRecord = new pinRecord(pin);
							var pinPrm = makeAnatomoPrm_Pin(newPinRecord,undefined,undefined,{no:1});

							var params = Ext.urlDecode(prmParts);
							if(pinPrm) params = Ext.apply({},Ext.urlDecode(pinPrm),params);

							if(pinPrm) pin.url = convOpts.pin.url_prefix + encodeURIComponent(Ext.urlEncode(params));

							newPartsRecord = undefined;
							numParts = undefined;
							prm_record = undefined;
							parts_record = undefined;
							newPinRecord = undefined;
						}
						param.pins.push(pin);
					}
					pinRecord = undefined;
				}

				if(!Ext.isEmpty(tp_ap_obj.poid001)){
					var prm_record = ag_param_store.getAt(0);
					param.point_parts = [];
					for(var i=0;;i++){
						var num = makeAnatomoOrganNumber(i+1);
						if(Ext.isEmpty(tp_ap_obj['poid'+num])) break;
						var parts = {
							color   : prm_record.data.point_color_rgb,
							value   : '',
							exclude : false,
							zoom    : false,
							opacity : 1.0,
							representation : 'S',
							point   : false
						};
						if(!Ext.isEmpty(tp_ap_obj['poid'+num])) parts.f_id = tp_ap_obj['poid'+num];
						if(!Ext.isEmpty(tp_ap_obj['pocl'+num])) parts.color = tp_ap_obj['pocl'+num].toUpperCase();
						if(!Ext.isEmpty(tp_ap_obj['porm'+num])) parts.exclude = tp_ap_obj['porm'+num]=='1'?true:false;
						if(!Ext.isEmpty(tp_ap_obj['poop'+num])) parts.opacity = tp_ap_obj['poop'+num];
						if(!Ext.isEmpty(tp_ap_obj['pore'+num])) parts.representation = tp_ap_obj['pore'+num];
						if(!Ext.isEmpty(tp_ap_obj['posh'+num])){
							parts.point_sphere = tp_ap_obj['posh'+num];
							param.common.point_sphere = tp_ap_obj['posh'+num];
						}
						param.point_parts.push(parts);
					}
				}
				if(!Ext.isEmpty(tp_ap_obj.dpod)) param.common.point_desc = tp_ap_obj.dpod;
				if(!Ext.isEmpty(tp_ap_obj.dpl)) param.common.point_pin_line = tp_ap_obj.dpl;
				if(!Ext.isEmpty(tp_ap_obj.dpol)) param.common.point_point_line = tp_ap_obj.dpol;
				return param;
			}else{
				return undefined;
			}
		}else{
			return undefined;
		}
	}

	var prm_info = param_arr.shift();
	var p = prm_info.split(":");
	param.common = {};
	param.common.version = p[0];

	if(param.common.version == "08020601" || param.common.version == "08110101"){
		param.common.method = p[1].substr(0,1);
		param.common.viewpoint = p[1].substr(1,1);
		param.common.rotate_h = parseIntTPAP(p[1].substr(2,3));
		param.common.rotate_v = parseIntTPAP(p[1].substr(5,3));
		param.common.image_w = parseIntTPAP(p[1].substr(8,4));
		param.common.image_h = parseIntTPAP(p[1].substr(12,4));
		param.common.bg_rgb = p[1].substr(16,6);
		param.common.autoscalar_f = p[1].substr(22,1);
		param.common.scalar_max = parseFloatTPAP(p[1].substr(23,12));
		param.common.scalar_min = parseFloatTPAP(p[1].substr(35,12));
		param.common.colorbar_f = p[1].substr(47,1);
		param.common.drawsort_f = p[1].substr(48,1);
		param.common.mov_len = parseIntTPAP(p[1].substr(49,2));
		param.common.mov_fps = parseIntTPAP(p[1].substr(51,2));

	}else if(param.common.version == "09011601"){
		param.common.method = p[1].substr(0,1);
		param.common.viewpoint = p[1].substr(1,1);
		param.common.rotate_h = parseIntTPAP(p[1].substr(2,3));
		param.common.rotate_v = parseIntTPAP(p[1].substr(5,3));
		param.common.image_w = parseIntTPAP(p[1].substr(8,4));
		param.common.image_h = parseIntTPAP(p[1].substr(12,4));
		param.common.bg_rgb = p[1].substr(16,6);
		param.common.autoscalar_f = p[1].substr(22,1);
		param.common.scalar_max = parseFloatTPAP(p[1].substr(23,12));
		param.common.scalar_min = parseFloatTPAP(p[1].substr(35,12));
		param.common.colorbar_f = p[1].substr(47,1);
		param.common.drawsort_f = p[1].substr(48,1);
		param.common.mov_len = parseIntTPAP(p[1].substr(49,2));
		param.common.mov_fps = parseIntTPAP(p[1].substr(51,2));

		param.common.zoom = parseFloatTPAP(p[1].substr(53,12));
		param.common.move_x = parseFloatTPAP(p[1].substr(65,12));
		param.common.move_y = parseFloatTPAP(p[1].substr(77,12));
		param.common.move_z = parseFloatTPAP(p[1].substr(89,12));
		param.common.clip_depth = parseFloatTPAP(p[1].substr(101,12));
		param.common.clip_method = p[1].substr(113,1);
	}

	if(param_arr.length>0 && param.common.version == "08020601"){
		param.parts = [];
		for(var i=0,len=param_arr.length;i<len;i++){
			var p = param_arr[i].split(":");
			param.parts.push({
				id : p[0],
				color : (p.length<=2?p[1]:"").substr(0,6),
				value : (p.length<=2?p[1]:"").substr(6,12),
				show : (p.length<=2?p[1]:"").substr(18,1),
				opacity : (p.length<=2?p[1]:"").substr(19,3),
				representation : (p.length<=2?p[1]:"").substr(22,1)
			});
		}
	}else if(param_arr.length>0 && (param.common.version == "08110101" || param.common.version == "09011601")){
		param.parts = [];
		var parts_info = param_arr.shift();
		var parts_arr = parts_info.split("@");
		for(var i=0,len=parts_arr.length;i<len;i++){
			var p = parts_arr[i].split(":");
			param.parts.push({
				id : p[0],
				color : (p.length<=2?p[1]:"").substr(0,6),
				value : (p.length<=2?p[1]:"").substr(6,12),
				show : (p.length<=2?p[1]:"").substr(18,1),
				opacity : (p.length<=2?p[1]:"").substr(19,3),
				representation : (p.length<=2?p[1]:"").substr(22,1)
			});
		}
	}

	if(param_arr.length>0 && (param.common.version == "08110101" || param.common.version == "09011601")){
		param.comments = [];

		var comments_info = param_arr.shift();
		var comments_arr = comments_info.split("@");
		for(var i=0,len=comments_arr.length;i<len;i++){
			var p = comments_arr[i].split(":");
			param.comments.push({
				no : p[0].substr(0,3),
				c3d : {
					x : p[0].substr(3,12),
					y : p[0].substr(15,12),
					z : p[0].substr(27,12)
				},
				point : {
					shape : (p.length>=2?p[1]:"").substr(0,2),
					rotation : (p.length>=2?p[1]:"").substr(2,3),
					rgb : (p.length>=2?p[1]:"").substr(5,6),
					edge_rgb : (p.length>=2?p[1]:"").substr(11,6)
				},
				id : (p.length>=3?p[2]:""),
				name : (p.length>=4?p[3]:""),
				comment : (p.length>=5?p[4]:"")
			});
		}

	}
	return param;
}

function URI2Text(aURIString,aOpts){
	if(Ext.isEmpty(aURIString)) return undefined;

	var defOpts = {
		target: {
			common: true,
			camera: true,
			clip: true,
			parts: true,
			point_parts: true,
			legendinfo: true,
			pins: true
		},
		pin: {
			url_prefix : null
		}
	};
	aOpts = aOpts||{};
	var convOpts = {};
	for(var key in defOpts){
		convOpts[key] = Ext.apply({},aOpts[key]||{},defOpts[key]);
	}

	var tpap_param;
	if(typeof aURIString == 'string'){
		var search = "";
		if(aURIString.indexOf("?")>=0){
//			search = aURIString.replace(/^.+\?(.*)$/g,"$1");
			search = aURIString.replace(/^.*\?(.*)$/g,"$1");
		}else{
			return undefined;
		}
		var params = Ext.urlDecode(search);
		if(Ext.isEmpty(params.tp_ap)) params.tp_ap = search;
		tpap_param = analyzeTPAP(params.tp_ap,convOpts);
	}else if(typeof aURIString == 'object'){
		tpap_param = aURIString;
	}
	if(Ext.isEmpty(tpap_param)) return undefined;

	var key_len = 9;
	var text_value = "";
	var key_value;
	if(convOpts.target.common && !Ext.isEmpty(tpap_param.common)){

		//Version of script
		if(!Ext.isEmpty(tpap_param.common.version)){
			key_value = 'VERSION';
			while(key_value.length<key_len) key_value += ' ';
			text_value += key_value + " - " + tpap_param.common.version + "\n";
		}

		//Screen size
		if(!Ext.isEmpty(tpap_param.common.image_w) && !Ext.isEmpty(tpap_param.common.image_h)){
			key_value = 'SIZE';
			while(key_value.length<key_len) key_value += ' ';
			text_value += key_value + " - W:" + tpap_param.common.image_w + ';H:' + tpap_param.common.image_h + "\n";
		}

		//back ground color
		if(!Ext.isEmpty(tpap_param.common.bg_rgb)){
			key_value = 'BGCOLOR';
			while(key_value.length<key_len) key_value += ' ';
			text_value += key_value + " - " + tpap_param.common.bg_rgb + "\n";
		}
		if(!Ext.isEmpty(tpap_param.common.bg_transparent)){
			key_value = 'BGTRANS';
			while(key_value.length<key_len) key_value += ' ';
			text_value += key_value + " - " + "1\n";
		}

		//max and min for scholor color system、with ot w/o color bars
		if(!Ext.isEmpty(tpap_param.common.scalar_max) && !Ext.isEmpty(tpap_param.common.scalar_min)){
			key_value = 'SCCOLOR';
			while(key_value.length<key_len) key_value += ' ';
			text_value += key_value + " - MAX:" + tpap_param.common.scalar_max + ';MIN:' + tpap_param.common.scalar_min + "\n";
		}
		if(!Ext.isEmpty(tpap_param.common.colorbar_f)){
			key_value = 'COLORBAR';
			while(key_value.length<key_len) key_value += ' ';
			text_value += key_value + " - " + tpap_param.common.colorbar_f + "\n";
		}
		if(!Ext.isEmpty(tpap_param.common.heatmap_f)){
			key_value = 'HEATMAP';
			while(key_value.length<key_len) key_value += ' ';
			text_value += key_value + " - " + tpap_param.common.heatmap_f + "\n";
		}

		//BodyParts3Dのバージョン
		if(!Ext.isEmpty(tpap_param.common.bp3d_version)){
			key_value = 'BP3DVER';
			while(key_value.length<key_len) key_value += ' ';
			text_value += key_value + " - " + tpap_param.common.bp3d_version + "\n";
		}

		//Tree Name
		if(!Ext.isEmpty(tpap_param.common.treename)){
			key_value = 'TREENAME';
			while(key_value.length<key_len) key_value += ' ';
			text_value += key_value + " - " + tpap_param.common.treename + "\n";
		}

		//作成日付
		if(!Ext.isEmpty(tpap_param.common.date)){
			key_value = 'DATE';
			while(key_value.length<key_len) key_value += ' ';
			var date_str = tpap_param.common.date;
			if(date_str.match(/^([0-9]{4})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})$/)){
				var date = new Date(RegExp.$1, RegExp.$2, RegExp.$3, RegExp.$4, RegExp.$5, RegExp.$6);
				date_str = date.toString();
				date_str = date_str.replace(/\(.+$/,"").replace(/\s+$/,"");
			}
			text_value += key_value + " - " + date_str + "\n";
		}

		//Legend描画フラグ
		if(!Ext.isEmpty(tpap_param.common.legend)){
			key_value = 'DRAWNOTE';
			while(key_value.length<key_len) key_value += ' ';
			text_value += key_value + " - " + tpap_param.common.legend + "\n";
		}

		//Pin描画フラグ
		if(!Ext.isEmpty(tpap_param.common.pin)){
			key_value = 'DRAWPIN';
			while(key_value.length<key_len) key_value += ' ';
			text_value += key_value + " - " + tpap_param.common.pin + "\n";
		}
		if(!Ext.isEmpty(tpap_param.common.pinno)){
			key_value = 'DRAWPINNO';
			while(key_value.length<key_len) key_value += ' ';
			text_value += key_value + " - " + tpap_param.common.pinno + "\n";
		}
		if(!Ext.isEmpty(tpap_param.common.point_pin_line)){
			key_value = 'DRAWPINLI';
			while(key_value.length<key_len) key_value += ' ';
			text_value += key_value + " - " + tpap_param.common.point_pin_line + "\n";
		}

		//Zoom
		if(!Ext.isEmpty(tpap_param.common.zoom)){
			key_value = 'ZOOM';
			while(key_value.length<key_len) key_value += ' ';
			text_value += key_value + " - " + ((tpap_param.common.zoom*5)+1) + "\n";
		}

		//Grid
		if(!Ext.isEmpty(tpap_param.common.grid)){
			key_value = 'GRID';
			while(key_value.length<key_len) key_value += ' ';
			text_value += key_value + " - " + tpap_param.common.grid + "\n";
			if(!Ext.isEmpty(tpap_param.common.grid_color)){
				key_value = '  COLOR';
				while(key_value.length<key_len) key_value += ' ';
				text_value += key_value + " - " + tpap_param.common.grid_color + "\n";
			}
			if(!Ext.isEmpty(tpap_param.common.grid_len)){
				key_value = '  INTER';
				while(key_value.length<key_len) key_value += ' ';
				text_value += key_value + " - " + tpap_param.common.grid_len + "\n";
			}
		}

		//coordinate_system
		if(!Ext.isEmpty(tpap_param.common.coord)){
			key_value = 'COORD';
			while(key_value.length<key_len) key_value += ' ';
			text_value += key_value + " - " + tpap_param.common.coord + "\n";
		}

//		//Point
//		if(!Ext.isEmpty(tpap_param.common.point_desc) && tpap_param.common.point_desc){
//			key_value = 'POINTDESC';
//			text_value += key_value + "\n";
//			key_value = '  SHOW';
//			while(key_value.length<key_len) key_value += ' ';
//			text_value += key_value + " - " + tpap_param.common.point_desc + "\n";
//
//			if(!Ext.isEmpty(tpap_param.common.point_pin_line)){
//				key_value = '  PIN';
//				while(key_value.length<key_len) key_value += ' ';
//				text_value += key_value + " - " + tpap_param.common.point_pin_line + "\n";
//			}
//
//			if(!Ext.isEmpty(tpap_param.common.point_point_line)){
//				key_value = '  POINT';
//				while(key_value.length<key_len) key_value += ' ';
//				text_value += key_value + " - " + tpap_param.common.point_point_line + "\n";
//			}
//
//			if(!Ext.isEmpty(tpap_param.common.point_sphere)){
//				key_value = '  SPHERE';
//				while(key_value.length<key_len) key_value += ' ';
//				text_value += key_value + " - " + (tpap_param.common.point_sphere=='SL'?'Large':tpap_param.common.point_sphere=='SM'?'Medium':'Small') + "\n";
//			}
//
//		}
	}

	if(convOpts.target.camera && !Ext.isEmpty(tpap_param.camera)){
		key_value = 'CAMERA';
//		while(key_value.length<key_len) key_value += ' ';
		text_value += key_value + "\n";

		if(!Ext.isEmpty(tpap_param.camera.cameraPos)){
			key_value = '  COORD';	//coordination of camera and object(x,y,z)
			while(key_value.length<key_len) key_value += ' ';
			text_value += key_value + " - X:" + tpap_param.camera.cameraPos.x + ';Y:' + tpap_param.camera.cameraPos.y + ';Z:' + tpap_param.camera.cameraPos.z + "\n";
		}
		if(!Ext.isEmpty(tpap_param.camera.targetPos)){
			key_value = '  VECTOR';	//direction of camera(x,y,z)
			while(key_value.length<key_len) key_value += ' ';
			text_value += key_value + " - X:" + tpap_param.camera.targetPos.x + ';Y:' + tpap_param.camera.targetPos.y + ';Z:' + tpap_param.camera.targetPos.z + "\n";
		}
		if(!Ext.isEmpty(tpap_param.camera.upVec)){
			key_value = '  UP';	//magnify
			while(key_value.length<key_len) key_value += ' ';
			text_value += key_value + " - X:" + tpap_param.camera.upVec.x + ';Y:' + tpap_param.camera.upVec.y + ';Z:' + tpap_param.camera.upVec.z + "\n";
		}
	}




	if(convOpts.target.parts && !Ext.isEmpty(tpap_param.parts) && tpap_param.parts.length>0){
		key_value = 'PARTS';
		text_value += key_value + "\n";

		for(var p=0,len=tpap_param.parts.length;p<len;p++){
			var part = tpap_param.parts[p];

			if(!Ext.isEmpty(part.f_id)){
				key_value = '  ID';	//臓器ID(FMAID)
				while(key_value.length<key_len) key_value += ' ';
				text_value += key_value + " - " + part.f_id + "\n";
			}
			if(!Ext.isEmpty(part.f_nm)){
				key_value = '  NAME';	//臓器NAME
				while(key_value.length<key_len) key_value += ' ';
				text_value += key_value + " - " + part.f_nm + "\n";
			}
			if(!Ext.isEmpty(part.version)){
				key_value = '  VERSION';	//バージョン
				while(key_value.length<key_len) key_value += ' ';
				text_value += key_value + " - " + part.version + "\n";
			}
			if(!Ext.isEmpty(part.color)){
				key_value = '  COLOR';	//臓器色(RGB)
				while(key_value.length<key_len) key_value += ' ';
				text_value += key_value + " - " + part.color + "\n";
			}
			if(!Ext.isEmpty(part.value)){
				key_value = '  SCALAR';	//スカラー値
				while(key_value.length<key_len) key_value += ' ';
				text_value += key_value + " - " + part.value + "\n";
			}
			if(!Ext.isEmpty(part.opacity)){
				key_value = '  OPACITY';	//不透明度
				while(key_value.length<key_len) key_value += ' ';
				text_value += key_value + " - " + part.opacity + "\n";
			}
			if(!Ext.isEmpty(part.representation)){
				key_value = '  REPRE';	//表現方法
				while(key_value.length<key_len) key_value += ' ';
				text_value += key_value + " - " + (part.representation=='P'?'points':(part.representation=='W'?'wireframe':'surface')) + "\n";
			}
			if(!Ext.isEmpty(part.exclude) || !Ext.isEmpty(part.zoom)){
				key_value = '  STATE';	//状態フラグ
				while(key_value.length<key_len) key_value += ' ';
				text_value += key_value + " - " + (part.exclude?'delete':(part.zoom?'focus':'show')) + "\n";
			}
//			if(!Ext.isEmpty(part.point)){
//				key_value = '  POINT';	//POINT表示フラグ
//				while(key_value.length<key_len) key_value += ' ';
//				text_value += key_value + " - " + (part.point?1:0) + "\n";
//			}
		}
	}


//	if(convOpts.target.point_parts && !Ext.isEmpty(tpap_param.point_parts) && tpap_param.point_parts.length>0){
//		key_value = 'POINTPARTS';
//		text_value += key_value + "\n";
//
//		for(var p=0,len=tpap_param.point_parts.length;p<len;p++){
//			var part = tpap_param.point_parts[p];
//
//			if(!Ext.isEmpty(part.f_id)){
//				key_value = '  ID';	//臓器ID(FMAID)
//				while(key_value.length<key_len) key_value += ' ';
//				text_value += key_value + " - " + part.f_id + "\n";
//			}
//			if(!Ext.isEmpty(part.f_nm)){
//				key_value = '  NAME';	//臓器NAME
//				while(key_value.length<key_len) key_value += ' ';
//				text_value += key_value + " - " + part.f_nm + "\n";
//			}
//			if(!Ext.isEmpty(part.version)){
//				key_value = '  VERSION';	//バージョン
//				while(key_value.length<key_len) key_value += ' ';
//				text_value += key_value + " - " + part.version + "\n";
//			}
//			if(!Ext.isEmpty(part.color)){
//				key_value = '  COLOR';	//臓器色(RGB)
//				while(key_value.length<key_len) key_value += ' ';
//				text_value += key_value + " - " + part.color + "\n";
//			}
//			if(!Ext.isEmpty(part.value)){
//				key_value = '  SCALAR';	//スカラー値
//				while(key_value.length<key_len) key_value += ' ';
//				text_value += key_value + " - " + part.value + "\n";
//			}
//			if(!Ext.isEmpty(part.opacity)){
//				key_value = '  OPACITY';	//不透明度
//				while(key_value.length<key_len) key_value += ' ';
//				text_value += key_value + " - " + part.opacity + "\n";
//			}
//			if(!Ext.isEmpty(part.representation)){
//				key_value = '  REPRE';	//表現方法
//				while(key_value.length<key_len) key_value += ' ';
//				text_value += key_value + " - " + (part.representation=='P'?'points':(part.representation=='W'?'wireframe':'surface')) + "\n";
//			}
//			if(!Ext.isEmpty(part.exclude) || !Ext.isEmpty(part.zoom)){
//				key_value = '  STATE';	//状態フラグ
//				while(key_value.length<key_len) key_value += ' ';
//				text_value += key_value + " - " + (part.exclude?'delete':(part.zoom?'focus':'show')) + "\n";
//			}
//		}
//	}


	if(convOpts.target.legendinfo && !Ext.isEmpty(tpap_param.legendinfo)){
		key_value = 'NOTE';
//		while(key_value.length<key_len) key_value += ' ';
		text_value += key_value + "\n";

		if(!Ext.isEmpty(tpap_param.legendinfo.title)){
			key_value = '  TITLE';
			while(key_value.length<key_len) key_value += ' ';
			text_value += key_value + " - ";
			text_value += tpap_param.legendinfo.title;
			text_value += "\n";
		}

		if(!Ext.isEmpty(tpap_param.legendinfo.legend)){
			key_value = '  LEGEND';
			while(key_value.length<key_len) key_value += ' ';
			var text_arr = tpap_param.legendinfo.legend.replace(/0x0d0x0a|0x0d|0x0a|\r\n/g,"\n").replace(/\n$/g,"").split("\n");
			text_value += key_value + " - " + text_arr[0] + "\n";
			if(text_arr.length>1){
				key_value = '';
				while(key_value.length<key_len) key_value += ' ';
				for(var text_cnt=1;text_cnt<text_arr.length;text_cnt++){
					text_value += key_value + "   " + text_arr[text_cnt] + "\n";
				}
			}
		}

		if(!Ext.isEmpty(tpap_param.legendinfo.author)){
			key_value = '  AUTHOR';
			while(key_value.length<key_len) key_value += ' ';
			text_value += key_value + " - ";
			text_value += tpap_param.legendinfo.author;
			text_value += "\n";
		}

		if(!Ext.isEmpty(tpap_param.legendinfo.position)){
			key_value = '  DISP';
			while(key_value.length<key_len) key_value += ' ';
			text_value += key_value + " - ";
			text_value += tpap_param.legendinfo.position;
			text_value += "\n";
		}

		if(!Ext.isEmpty(tpap_param.legendinfo.color)){
			key_value = '  COLOR';
			while(key_value.length<key_len) key_value += ' ';
			text_value += key_value + " - ";
			text_value += tpap_param.legendinfo.color;
			text_value += "\n";
		}
	}

	if(convOpts.target.pins && !Ext.isEmpty(tpap_param.pins) && tpap_param.pins.length>0){
		key_value = 'PIN';
//		while(key_value.length<key_len) key_value += ' ';
		text_value += key_value + "\n";

		for(var p=0,len=tpap_param.pins.length;p<len;p++){
			var pin = tpap_param.pins[p];

			if(!Ext.isEmpty(pin.no)){
				key_value = '  NO';	//ピン番号
				while(key_value.length<key_len) key_value += ' ';
				text_value += key_value + " - " + pin.no + "\n";
			}

			if(!Ext.isEmpty(pin.organid)){
				key_value = '  ID';	//臓器ID (FMAID)
				while(key_value.length<key_len) key_value += ' ';
				text_value += key_value + " - " + pin.organid + "\n";
			}

			if(!Ext.isEmpty(pin.organname)){
				key_value = '  ORGAN';	//臓器名
				while(key_value.length<key_len) key_value += ' ';
				text_value += key_value + " - " + pin.organname + "\n";
			}

			if(!Ext.isEmpty(pin.comment)){
				key_value = '  DESC';	//PINの説明
				while(key_value.length<key_len) key_value += ' ';
				var text_arr = pin.comment.replace(/0x0d0x0a|0x0d|0x0a|\r\n/g,"\n").replace(/\n$/g,"").split("\n");
				text_value += key_value + " - " + text_arr[0] + "\n";
				if(text_arr.length>1){
					key_value = '';
					while(key_value.length<key_len) key_value += ' ';
					for(var text_cnt=1;text_cnt<text_arr.length;text_cnt++){
						text_value += key_value + "   " + text_arr[text_cnt] + "\n";
					}
				}
			}

			if(!Ext.isEmpty(pin.shape)){
				key_value = '  SHAPE';	//PINの形状
				while(key_value.length<key_len) key_value += ' ';
				text_value += key_value + " - " + (pin.shape=='PSS'?'Pin SS':(pin.shape=='PS'?'Pin S':(pin.shape=='PM'?'Pin M':(pin.shape=='PL'?'Pin L':(pin.shape=='CC'?'Corn':'Circle'))))) + "\n";
			}

			if(!Ext.isEmpty(pin.color)){
				key_value = '  PCOLOR';	//PINの色
				while(key_value.length<key_len) key_value += ' ';
				text_value += key_value + " - " + pin.color + "\n";
			}

			if(!Ext.isEmpty(pin.tcolor)){
				key_value = '  TCOLOR';	//説明の色
				while(key_value.length<key_len) key_value += ' ';
				text_value += key_value + " - " + pin.tcolor + "\n";
			}

			if(!Ext.isEmpty(pin.draw)){
				key_value = '  DRAW';	//PINの説明表示・非表示
				while(key_value.length<key_len) key_value += ' ';
				text_value += key_value + " - " + pin.draw + "\n";
			}

			if(!Ext.isEmpty(pin.drawnm)){
				key_value = '  DRAWNO';	//PINの説明表示・非表示
				while(key_value.length<key_len) key_value += ' ';
				text_value += key_value + " - " + pin.drawnm + "\n";
			}

			if(!Ext.isEmpty(pin.x3d) && !Ext.isEmpty(pin.y3d) && !Ext.isEmpty(pin.z3d)){
				key_value = '  COORD';	//ピン座標
				while(key_value.length<key_len) key_value += ' ';
				text_value += key_value + " - X:" + pin.x3d + ";Y:" + pin.y3d + ";Z:" + pin.z3d + "\n";
			}

			if(!Ext.isEmpty(pin.avx3d) && !Ext.isEmpty(pin.avy3d) && !Ext.isEmpty(pin.avz3d)){
				key_value = '  VECTOR';	//法線ベクトル
				while(key_value.length<key_len) key_value += ' ';
				text_value += key_value + " - X:" + pin.avx3d + ";Y:" + pin.avy3d + ";Z:" + pin.avz3d + "\n";
			}

			if(!Ext.isEmpty(pin.uvx3d) && !Ext.isEmpty(pin.uvy3d) && !Ext.isEmpty(pin.uvz3d)){
				key_value = '  UP';	//上方向を示す座標
				while(key_value.length<key_len) key_value += ' ';
				text_value += key_value + " - X:" + pin.uvx3d + ";Y:" + pin.uvy3d + ";Z:" + pin.uvz3d + "\n";
			}

			if(!Ext.isEmpty(pin.coord)){
				key_value = '  SCOORD';	//描画座標系
				while(key_value.length<key_len) key_value += ' ';
				text_value += key_value + " - " + pin.coord + "\n";
			}

			if(window.ag_extensions && ag_extensions.global_pin){
				if(!Ext.isEmpty(pin.PinID)){
					key_value = '  PID';
					while(key_value.length<key_len) key_value += ' ';
					text_value += key_value + " - " + pin.PinID + "\n";
				}
				if(!Ext.isEmpty(pin.PinGroupID)){
					key_value = '  PGID';
					while(key_value.length<key_len) key_value += ' ';
					text_value += key_value + " - " + pin.PinGroupID + "\n";
				}
			}

			if(!Ext.isEmpty(pin.url)){
				key_value = '  URL';	//描画座標系
				while(key_value.length<key_len) key_value += ' ';
				text_value += key_value + " - " + pin.url + "\n";
			}
		}
	}

	if(text_value == "") return undefined;
	return text_value + '//\n\n';
}

function Text2URI(aFlatTextString,aOpts){
	if(!aFlatTextString) return "";

	var defOpts = {
		target: {
			common: true,
			camera: true,
			clip: true,
			parts: true,
			point_parts: true,
			legendinfo: true,
			pins: true
		}
	};
	aOpts = aOpts||{};
	var convOpts = {};
	for(var key in defOpts){
		convOpts[key] = Ext.apply({},aOpts[key]||{},defOpts[key]);
	}

	var text_arr = aFlatTextString.replace(/0x0d0x0a|0x0d|0x0a|\r\n/g,"\n").replace(/\n$/g,"").split("\n");
	var param = {};
	var camera = 0;
	var clip = 0;
	var parts = 0;
	var point_parts = 0;
	var note = 0;
	var pin = 0;
	var grid = 0;
	var point_desc = 0;
	var parts_no = "";
	var pin_no = "";
	for(var i=0,len=text_arr.length;i<len;i++){
		next_line:
		if(convOpts.target.common && text_arr[i].match(/^VERSION\s+-\s+([0-9]{8})$/)){
			param.av = RegExp.$1;
		}else if(convOpts.target.common && text_arr[i].match(/^SIZE\s+-\s+W:([0-9]+);H:([0-9]+)$/)){
			param.iw = RegExp.$1;
			param.ih = RegExp.$2;
		}else if(convOpts.target.common && text_arr[i].match(/^BGCOLOR\s+-\s+([0-9A-Fa-f]{6})$/)){
			param.bcl = RegExp.$1;
		}else if(convOpts.target.common && text_arr[i].match(/^BGTRANS\s+-\s+([0-9]+)$/)){
			param.bga = "0";
		}else if(convOpts.target.common && text_arr[i].match(/^SCCOLOR\s+-\s+MAX:([0-9]+);MIN:([0-9]+)$/)){
			param.sx = RegExp.$1;
			param.sn = RegExp.$2;
		}else if(convOpts.target.common && text_arr[i].match(/^COLORBAR\s+-\s+([0-9]+)$/)){
			param.cf = RegExp.$1;
		}else if(convOpts.target.common && text_arr[i].match(/^HEATMAP\s+-\s+([0-9]+)$/)){
			param.hf = RegExp.$1;
		}else if(convOpts.target.common && text_arr[i].match(/^BP3DVER\s+-\s+([0-9\.]+)$/)){
			param.bv = RegExp.$1;
		}else if(convOpts.target.common && text_arr[i].match(/^TREENAME\s+-\s+([A-Za-z]+)$/)){
			param.tn = RegExp.$1;
		}else if(convOpts.target.common && text_arr[i].match(/^DATE\s+-\s+(\S.+)$/)){
			param.dt = RegExp.$1;
			if(param.dt.match(/[^0-9]+/)){
				var date = new Date(param.dt);
				var yy = date.getYear();
				var mm = date.getMonth();
				var dd = date.getDate();
				var h = date.getHours();
				var m = date.getMinutes();
				var s = date.getSeconds();
				if(yy < 2000) { yy += 1900; }
				if(mm < 10) { mm = "0" + mm; }
				if(dd < 10) { dd = "0" + dd; }
				param.dt = "" + yy + mm + dd + h + m + s;
			}
		}else if(convOpts.target.common && text_arr[i].match(/^DRAWNOTE\s+-\s+([0-9]+)$/)){
			param.dl = RegExp.$1;
		}else if(convOpts.target.common && text_arr[i].match(/^DRAWPIN\s+-\s+([0-9]+)$/)){
			param.dp = RegExp.$1;
		}else if(convOpts.target.common && text_arr[i].match(/^DRAWPINNO\s+-\s+([01]+)$/)){
			param.np = RegExp.$1;
		}else if(convOpts.target.common && text_arr[i].match(/^DRAWPINLI\s+-\s+([01]+)$/)){
			param.dpl = RegExp.$1;
		}else if(convOpts.target.common && text_arr[i].match(/^ZOOM\s+-\s+([0-9]+)$/)){
			param.zm = RegExp.$1;
			param.zm = (param.zm-1)/5;
		}else if(convOpts.target.common && (text_arr[i].match(/^GRID\s+-\s+([01]+)$/) || grid)){
			if(!grid){
				param.gdr = RegExp.$1;
				param.gdr = param.gdr=='1'?'true':'false';
				grid = 1;
			}else if(text_arr[i].match(/^\s+COLOR\s+-\s+([0-9A-Fa-f]{6})$/)){
				param.gcl = RegExp.$1;
			}else if(text_arr[i].match(/^\s+INTER\s+-\s+([0-9]+)$/)){
				param.gtc = RegExp.$1;
			}else{
				grid = 0;
				i--;
				continue;
			}

		}else if(convOpts.target.common && (text_arr[i].match(/^POINTDESC\s*$/) || point_desc)){
			if(!point_desc){
				point_desc = 1;
				param.dpod = 1;
			}else if(text_arr[i].match(/^PIN\s+-\s+([012]+)$/)){
				param.dpl = RegExp.$1;
			}else if(text_arr[i].match(/^POINT\s+-\s+([012]+)$/)){
				param.dpol = RegExp.$1;
			}else{
				point_desc = 0;
				i--;
				continue;
			}

		}else if(convOpts.target.common && text_arr[i].match(/^COORD\s+-\s+([A-Za-z0-9]+)$/)){
			param.crd = RegExp.$1;
		}else if(convOpts.target.camera && (text_arr[i].match(/^CAMERA\s*$/) || camera)){
			if(!camera){
				camera = 1;
			}else if(text_arr[i].match(/^\s+COORD\s+-\s+X:([0-9\.\-]+);Y:([0-9\.\-]+);Z:([0-9\.\-]+)$/)){
				param.cx = RegExp.$1;
				param.cy = RegExp.$2;
				param.cz = RegExp.$3;
			}else if(text_arr[i].match(/^\s+VECTOR\s+-\s+X:([0-9\.\-]+);Y:([0-9\.\-]+);Z:([0-9\.\-]+)$/)){
				param.tx = RegExp.$1;
				param.ty = RegExp.$2;
				param.tz = RegExp.$3;
			}else if(text_arr[i].match(/^\s+UP\s+-\s+X:([0-9\.\-]+);Y:([0-9\.\-]+);Z:([0-9\.\-]+)$/)){
				param.ux = RegExp.$1;
				param.uy = RegExp.$2;
				param.uz = RegExp.$3;
			}else{
				camera = 0;
				i--;
				continue;
			}
		}else if(convOpts.target.clip && (text_arr[i].match(/^CLIP\s*$/) || clip)){
			if(!clip){
				clip = 1;
			}else if(text_arr[i].match(/^\s+TYPE\s+-\s+(\S+)$/)){
				param.cm = RegExp.$1;
				if(param.cm == 'depth'){
					param.cm = 'D';
				}else if(param.cm == 'plane'){
					param.cm = 'P';
				}else{
					param.cm = 'N';
				}
			}else if(text_arr[i].match(/^\s+DEPTH\s+-\s+(\S+)$/)){
				param.cd = RegExp.$1;
			}else if(text_arr[i].match(/^\s+METHOD\s+-\s+(\S+)$/)){
				param.ct = RegExp.$1;
				if(param.ct == 'section1'){
					param.ct = 'S';
				}else if(param.ct == 'section1_normal'){
					param.ct = 'NS';
				}else{
					param.ct = 'N';
				}
			}else if(text_arr[i].match(/^\s+PARAM\s+-\s+A:([0-9\.\-]+);B:([0-9\.\-]+);C:([0-9\.\-]+);D:([0-9\.\-]+)$/)){
				param.cpa = RegExp.$1;
				param.cpb = RegExp.$2;
				param.cpc = RegExp.$3;
				param.cpd = RegExp.$4;
			}else{
				clip = 0;
				i--;
				continue;
			}
		}else if(convOpts.target.parts && (text_arr[i].match(/^PARTS\s*$/) || parts)){
			if(!parts){
				parts = 1;
			}else if(text_arr[i].match(/^\s+ID\s+-\s+(\S+)$/)){
				var val = RegExp.$1;
				parts++;
//				parts_no = (parts-1)+"";
//				while (parts_no.length < 3) parts_no = "0" + parts_no;
				parts_no = makeAnatomoOrganNumber(parts-1);
				param["oid"+parts_no] = val;
			}else if(text_arr[i].match(/^\s+NAME\s+-\s+(.+)$/)){
				var val = RegExp.$1;
				parts++;
//				parts_no = (parts-1)+"";
//				while (parts_no.length < 3) parts_no = "0" + parts_no;
				parts_no = makeAnatomoOrganNumber(parts-1);
				param["onm"+parts_no] = val;
			}else if(text_arr[i].match(/^\s+VERSION\s+-\s+([0-9\.]+)$/)){
				param["ov"+parts_no] = RegExp.$1;
			}else if(text_arr[i].match(/^\s+COLOR\s+-\s+#*([0-9A-Fa-f]{6})$/)){
				param["ocl"+parts_no] = RegExp.$1;
			}else if(text_arr[i].match(/^\s+SCALAR\s+-\s+(\S+)$/)){
				param["osc"+parts_no] = RegExp.$1;
			}else if(text_arr[i].match(/^\s+OPACITY\s+-\s+([0-9\.]+)$/)){
				param["oop"+parts_no] = RegExp.$1;
			}else if(text_arr[i].match(/^\s+REPRE\s+-\s+(\S+)$/)){
				param["orp"+parts_no] = RegExp.$1;
				if(param["orp"+parts_no] == 'surface'){
					param["orp"+parts_no] = 'S';
				}else if(param["orp"+parts_no] == 'wireframe'){
					param["orp"+parts_no] = 'W';
				}else if(param["orp"+parts_no] == 'points'){
					param["orp"+parts_no] = 'P';
				}
			}else if(text_arr[i].match(/^\s+STATE\s+-\s+(\S+)$/)){
				param["osz"+parts_no] = RegExp.$1;
				if(param["osz"+parts_no] == 'show'){
					param["osz"+parts_no] = 'S';
				}else if(param["osz"+parts_no] == 'focus'){
					param["osz"+parts_no] = 'Z';
				}else if(param["osz"+parts_no] == 'delete'){
					param["osz"+parts_no] = 'H';
				}
			}else if(text_arr[i].match(/^\s+POINT\s+-\s+(\S+)$/)){
				param["odcp"+parts_no] = RegExp.$1;
			}else{
				parts = 0;
				i--;
				continue;
			}
		}else if(convOpts.target.point_parts && (text_arr[i].match(/^POINTPARTS\s*$/) || point_parts)){
			if(!point_parts){
				point_parts = 1;
			}else if(text_arr[i].match(/^\s+ID\s+-\s+(\S+)$/)){
				var val = RegExp.$1;
				parts++;
//				parts_no = (parts-1)+"";
//				while (parts_no.length < 3) parts_no = "0" + parts_no;
				parts_no = makeAnatomoOrganNumber(parts-1);
				param["oid"+parts_no] = val;
			}else if(text_arr[i].match(/^\s+NAME\s+-\s+(.+)$/)){
				var val = RegExp.$1;
				parts++;
//				parts_no = (parts-1)+"";
//				while (parts_no.length < 3) parts_no = "0" + parts_no;
				parts_no = makeAnatomoOrganNumber(parts-1);
				param["onm"+parts_no] = val;
			}else if(text_arr[i].match(/^\s+VERSION\s+-\s+([0-9\.]+)$/)){
				param["ov"+parts_no] = RegExp.$1;
			}else if(text_arr[i].match(/^\s+COLOR\s+-\s+#*([0-9A-Fa-f]{6})$/)){
				param["ocl"+parts_no] = RegExp.$1;
			}else if(text_arr[i].match(/^\s+SCALAR\s+-\s+(\S+)$/)){
				param["osc"+parts_no] = RegExp.$1;
			}else if(text_arr[i].match(/^\s+OPACITY\s+-\s+([0-9\.]+)$/)){
				param["oop"+parts_no] = RegExp.$1;
			}else if(text_arr[i].match(/^\s+REPRE\s+-\s+(\S+)$/)){
				param["orp"+parts_no] = RegExp.$1;
				if(param["orp"+parts_no] == 'surface'){
					param["orp"+parts_no] = 'S';
				}else if(param["orp"+parts_no] == 'wireframe'){
					param["orp"+parts_no] = 'W';
				}else if(param["orp"+parts_no] == 'points'){
					param["orp"+parts_no] = 'P';
				}
			}else if(text_arr[i].match(/^\s+STATE\s+-\s+(\S+)$/)){
				param["osz"+parts_no] = RegExp.$1;
				if(param["osz"+parts_no] == 'show'){
					param["osz"+parts_no] = 'S';
				}else if(param["osz"+parts_no] == 'focus'){
					param["osz"+parts_no] = 'Z';
				}else if(param["osz"+parts_no] == 'delete'){
					param["osz"+parts_no] = 'H';
				}
			}else{
				point_parts = 0;
				i--;
				continue;
			}
		}else if(convOpts.target.legendinfo && (text_arr[i].match(/^NOTE\s*$/) || note)){
			if(!note){
				note = 1;
			}else if(text_arr[i].match(/^\s+TITLE\s+-\s+(\S.*)$/)){
				param.lt = RegExp.$1;
			}else if(text_arr[i].match(/^\s+LEGEND\s+-\s+(\S.*)$/) || text_arr[i].match(/^\s{9,}(\S.*)$/)){
				if(text_arr[i].match(/^\s+LEGEND\s+-\s+(\S.*)$/)){
					param.le = RegExp.$1;
				}else if(text_arr[i].match(/^\s{9,}(\S.*)$/)){
					param.le += ' ' + RegExp.$1;
				}
			}else if(text_arr[i].match(/^\s+AUTHOR\s+-\s+(\S.*)$/)){
				param.la = RegExp.$1;
			}else if(text_arr[i].match(/^\s+DISP\s+-\s+(\S.*)$/)){
				param.lp = RegExp.$1;
			}else if(text_arr[i].match(/^\s+COLOR\s+-\s+#*([0-9A-Fa-f]{6})$/)){
				param.lc = RegExp.$1;
			}else{
				note = 0;
				i--;
				continue;
			}
		}else if(convOpts.target.pins && (text_arr[i].match(/^PIN\s*$/) || pin)){
			if(!pin){
				pin = 1;
			}else if(text_arr[i].match(/^\s+NO\s+-\s+([0-9]+)$/)){
				var val = RegExp.$1;
//				pin_no = val+"";
//				while (pin_no.length < 3) pin_no = "0" + pin_no;
				pin_no = makeAnatomoOrganNumber(val-0);
				param["pno"+pin_no] = val;
			}else if(text_arr[i].match(/^\s+ID\s+-\s+(\S.*)$/)){
				param["poi"+pin_no] = RegExp.$1;
			}else if(text_arr[i].match(/^\s+ORGAN\s+-\s+(\S.*)$/)){
				param["pon"+pin_no] = RegExp.$1;
			}else if(text_arr[i].match(/^\s+DESC\s+-\s+(\S.*)$/) || text_arr[i].match(/^\s{9,}(\S.*)$/)){
				param["pd"+pin_no] = RegExp.$1;
			}else if(text_arr[i].match(/^\s+SHAPE\s+-\s+(\S.*)$/)){
				param["ps"+pin_no] = RegExp.$1;
				if(param["ps"+pin_no] == 'Corn'){
					param["ps"+pin_no] = 'CC';
				}else if(param["ps"+pin_no] == 'Pin L'){
					param["ps"+pin_no] = 'PL';
				}else if(param["ps"+pin_no] == 'Pin M'){
					param["ps"+pin_no] = 'PM';
				}else if(param["ps"+pin_no] == 'Pin S'){
					param["ps"+pin_no] = 'PS';
				}else if(param["ps"+pin_no] == 'Pin SS'){
					param["ps"+pin_no] = 'PSS';
				}else{
					param["ps"+pin_no] = 'SC';
				}
			}else if(text_arr[i].match(/^\s+PCOLOR\s+-\s+#*([0-9A-Fa-f]{6})$/)){
				param["pcl"+pin_no] = RegExp.$1;
			}else if(text_arr[i].match(/^\s+TCOLOR\s+-\s+#*([0-9A-Fa-f]{6})$/)){
				param["pdc"+pin_no] = RegExp.$1;
			}else if(text_arr[i].match(/^\s+DRAW\s+-\s+(\S.*)$/)){
				param["pdd"+pin_no] = RegExp.$1;
			}else if(text_arr[i].match(/^\s+DRAWNO\s+-\s+(\S.*)$/)){
				param["pnd"+pin_no] = RegExp.$1;
			}else if(text_arr[i].match(/^\s+COORD\s+-\s+X:([0-9\.\-]+);Y:([0-9\.\-]+);Z:([0-9\.\-]+)$/)){
				param["px"+pin_no] = RegExp.$1;
				param["py"+pin_no] = RegExp.$2;
				param["pz"+pin_no] = RegExp.$3;
			}else if(text_arr[i].match(/^\s+VECTOR\s+-\s+X:([0-9\.\-]+);Y:([0-9\.\-]+);Z:([0-9\.\-]+)$/)){
				param["pax"+pin_no] = RegExp.$1;
				param["pay"+pin_no] = RegExp.$2;
				param["paz"+pin_no] = RegExp.$3;
			}else if(text_arr[i].match(/^\s+UP\s+-\s+X:([0-9\.\-]+);Y:([0-9\.\-]+);Z:([0-9\.\-]+)$/)){
				param["pux"+pin_no] = RegExp.$1;
				param["puy"+pin_no] = RegExp.$2;
				param["puz"+pin_no] = RegExp.$3;
			}else if(text_arr[i].match(/^\s+SCOORD\s+-\s+(\S.*)$/)){
				param["coord"+pin_no] = RegExp.$1;
			}else if(text_arr[i].match(/^\s+URL\s+-\s+(\S.*)$/)){
			}else if(text_arr[i].match(/^\s+PID\s+-\s+(\S.*)$/)){
				if(window.ag_extensions && ag_extensions.global_pin) param["pid"+pin_no] = RegExp.$1;
			}else if(text_arr[i].match(/^\s+PGID\s+-\s+(\S.*)$/)){
				if(window.ag_extensions && ag_extensions.global_pin) param["pgid"+pin_no] = RegExp.$1;
			}else{
				pin = 0;
				i--;
				continue;
			}
		}
	}


	var search = Ext.urlEncode(param);
	var editURL = getEditUrl();
	editURL = editURL + "?tp_ap=" + encodeURIComponent(search);
	return editURL;
}


var bp3d_parts_store_fields = [
	{name:'f_id'},
	{name:'b_id'},
	{name:'name_j'},
	{name:'name_e'},
	{name:'name_k'},
	{name:'name_l'},
	{name:'phase'},
	{name:'version'},
	{name:'tg_id',convert:function(v,r){
		if(Ext.isEmpty(v)){
			return r.md_id;
		}else{
			return v;
		}
	}},
	{name:'tgi_id',convert:function(v,r){
		if(Ext.isEmpty(v)){
			return r.mv_id;
		}else{
			return v;
		}
	}},
	{name:'entry',type: 'date', dateFormat: 'timestamp'},
	{name:'xmin',type:'float'},
	{name:'xmax',type:'float'},
	{name:'ymin',type:'float'},
	{name:'ymax',type:'float'},
	{name:'zmin',type:'float'},
	{name:'zmax',type:'float'},
	{name:'volume',type:'float'},
	'taid',
	{name:'organsys'},
	{name:'color'},
	{name:'value'},
	{name:'zoom',type:'boolean'},
	{name:'exclude',type:'boolean'},
	{name:'opacity',type:'float'},
	{name:'representation'},
	{name:'def_color'},
	{name:'conv_id'},
	{name:'common_id'},
	{name:'point',type:'boolean'},
	{name:'elem_type'},
	{name:'point_label'},
	{name:'bul_id',type:'int'},
	{name:'cb_id',type:'int'},
	{name:'ci_id',type:'int'},
	{name:'md_id',type:'int'},
	{name:'mv_id',type:'int'},
	{name:'mr_id',type:'int'},
	{name:'but_cnum',type:'int'},
	{name:'icon',type:'string'},

	{name:'tweet_num',type:'int',defaultValue:0},
	{name:'tweets',type:'auto'},

	'segment',
	'seg_color',
	'seg_thum_bgcolor',
	'seg_thum_bocolor',

	'model',
	'model_version',
	'concept_info',
	'concept_build',
	'buildup_logic',
	{name:'bu_revision',type:'int'}
];

bp3d_parts_store = new Ext.data.SimpleStore({
	fields : bp3d_parts_store_fields,
	root   : 'records',
	listeners : {
		"add" : function(store,records,index){
			addPartslistGrid(store,records,index);
		},
		"remove" : function(store,record,index){
			removePartslistGrid(store,record,index);
		},
		"update" : function(store,record,operation){
			updatePartslistGrid(store,record,operation);
		},
		"clear" : function(store){
		}
	}
})
bp3d_parts_store.loadData([]);

var ag_comment_store_fields = [
	{name:'no', type:'int'},
	{name:'oid', type:'string'},
	{name:'organ', type:'string'},
	{name:'x3d', type:'float'},
	{name:'y3d', type:'float'},
	{name:'z3d', type:'float'},
	{name:'avx3d', type:'float'},
	{name:'avy3d', type:'float'},
	{name:'avz3d', type:'float'},
	{name:'uvx3d', type:'float'},
	{name:'uvy3d', type:'float'},
	{name:'uvz3d', type:'float'},
	{name:'color', type:'string'},
	{name:'comment', type:'string'},
	{name:'name_j', type:'string'},
	{name:'name_k', type:'string'},
	{name:'name_l', type:'string'},
	{name:'coord', type:'string'}
];
if(window.ag_extensions && ag_extensions.global_pin){
	if(ag_extensions.global_pin.store_field_pin) ag_comment_store_fields = ag_comment_store_fields.concat(ag_extensions.global_pin.store_field_pin());
	if(ag_extensions.global_pin.store_field_pin_group) ag_comment_store_fields = ag_comment_store_fields.concat(ag_extensions.global_pin.store_field_pin_group());
}

var ag_comment_store = new Ext.data.SimpleStore({
	fields : ag_comment_store_fields,
	root : 'records',
	listeners : {
		'add' : function(store,records,index){
			if(Ext.isEmpty(records) || records.length==0 || index<0) return;

			var grid = Ext.getCmp('anatomography-pin-grid-panel');
			if(grid && grid.rendered){
				setTimeout(function(){try{
					grid.getView().focusRow(index);
					grid.getSelectionModel().selectRow(index);
				}catch(e){}},100);
			}

			var pick_data = {f_ids:[]};
			for(var i=0;i<records.length;i++){
				if(Ext.isEmpty(records[i].data.organ)) pick_data.f_ids.push(records[i].data.oid);
			}
			if(pick_data.f_ids.length>0){
				pick_data.f_ids = Ext.util.JSON.encode(pick_data.f_ids);
				try{pick_data.version = Ext.getCmp('bp3d-version-combo').getValue();}catch(e){pick_data.version=init_bp3d_version;}

				if(init_bp3d_params.version) pick_data.version = init_bp3d_params.version;
				if(init_bp3d_params.t_type) pick_data.t_type = init_bp3d_params.t_type;
				if(init_bp3d_params.tgi_id) pick_data.tgi_id = init_bp3d_params.tgi_id;
				if(init_bp3d_params.md_id) pick_data.md_id = init_bp3d_params.md_id;
				if(init_bp3d_params.mv_id) pick_data.mv_id = init_bp3d_params.mv_id;
				if(init_bp3d_params.mr_id) pick_data.mr_id = init_bp3d_params.mr_id;
				if(init_bp3d_params.bul_id) pick_data.bul_id = init_bp3d_params.bul_id;
				if(init_bp3d_params.cb_id) pick_data.cb_id = init_bp3d_params.cb_id;
				if(init_bp3d_params.ci_id) pick_data.ci_id = init_bp3d_params.ci_id;

				Ext.Ajax.request({
					url     : 'get-contents.cgi',
					method  : 'POST',
					params  : Ext.urlEncode(pick_data),
					success : function(conn,response,options){
						try{var results = Ext.util.JSON.decode(conn.responseText);}catch(e){}
						if(results && results.images && results.images.length>0){
							for(var i=0;i<results.images.length;i++){
								var startIndex = 0;
								while(1){
									var rtnIndex = ag_comment_store.find('oid',new RegExp("^"+results.images[i].f_id+"$"),startIndex,true,true);
									if(rtnIndex>=startIndex){
										var rec = ag_comment_store.getAt(rtnIndex);
										if(rec){
											rec.beginEdit();
											rec.set("organ", results.images[i].name_e);
											rec.set("name_j",results.images[i].name_j);
											rec.set("name_k",results.images[i].name_k);
											rec.set("name_l",results.images[i].name_l);
											rec.commit();
											rec.endEdit();
										}
										startIndex = rtnIndex +1;
									}else{
										break;
									}
								}
							}
						}
						updateAnatomo();
					},
					failure : function(conn,response,options){
						updateAnatomo();
					}
				});
			}else{
				updateAnatomo();
			}
		},
		'remove' : function(store,record,index){
		},
		'update' : function(store,record,operation){
		},
		'clear' : function(store){
		}
	}
});

fma_search_store = new Ext.data.JsonStore({
	url: 'get-fma.cgi',
	pruneModifiedRecords : true,
	totalProperty : 'total',
	root: 'records',
//	remoteSort: true,
//	sortInfo: {field: 'volume', direction: 'DESC'},
	fields: [
		'f_id',
		'b_id',
		'name_j',
		'name_e',
		'name_k',
		'name_l',
		'syn_j',
		'syn_e',
		'def_e',
		'organsys_j',
		'organsys_e',
		'text',
		'name',
		'organsys',
		'phase',
		{name:'xmin',   type:'float'},
		{name:'xmax',   type:'float'},
		{name:'ymin',   type:'float'},
		{name:'ymax',   type:'float'},
		{name:'zmin',   type:'float'},
		{name:'zmax',   type:'float'},
		{name:'volume', type:'float'},
		'taid',
		'physical',
		{name:'phy_id',type:'int'},
		'segment',
		'seg_color',
		'seg_thum_bgcolor',
		'seg_thum_bocolor',
		{name:'seg_id',type:'int'},
		'version',
		'tg_id',
		'tgi_id',
		{name:'md_id',type:'int'},
		{name:'mv_id',type:'int'},
		{name:'mr_id',type:'int'},
		{name:'ci_id',type:'int'},
		{name:'cb_id',type:'int'},
		{name:'bul_id',type:'int'},

		{name:'tweet_num',type:'int',defaultValue:0},
		{name:'tweets',type:'auto'},

		'model',
		'model_version',
		'concept_info',
		'concept_build',
		'buildup_logic',
		{name:'icon',type:'string'},
		{name:'bu_revision',type:'int'},
		'state',
		'def_color',
		{name:'entry', type:'date', dateFormat:'timestamp'},
		{name:'lastmod', type:'date', dateFormat:'timestamp'}
	],
	listeners: {
		'beforeload' : {
			fn:function(self,options){
				try{
					self.baseParams = self.baseParams || {};
					delete gParams.parent;
					if(!Ext.isEmpty(gParams.parent)) self.baseParams.parent = gParams.parent;
					self.baseParams.lng = gParams.lng;
					try{var bp3d_version = Ext.getCmp('bp3d-version-combo').getValue();}catch(e){_dump("fma_search_store.beforeload():e=["+e+"]");bp3d_version='4.1';}
					if(!Ext.isEmpty(bp3d_version)) self.baseParams.version = bp3d_version;
				}catch(e){
					_dump("fma_search_store.beforeload():"+e);
				}
				for(var key in init_bp3d_params){
					if(key.match(/_id$/)) self.baseParams[key] = init_bp3d_params[key];
				}

				try{
					var store = Ext.getCmp('bp3d-version-combo').getStore();
					var idx = store.findBy(function(record,id){
						if(record.data.tgi_version==self.baseParams.version) return true;
					});
					if(idx>=0){
						var record = store.getAt(idx);
						if(record){
							self.baseParams.md_id = record.data.md_id;
							self.baseParams.mv_id = record.data.mv_id;
							self.baseParams.mr_id = record.data.mr_id;
							self.baseParams.ci_id = record.data.ci_id;
							self.baseParams.cb_id = record.data.cb_id;
						}
					}
				}catch(e){}
			},
			scope:this
		},
		'load': {
			fn:function(self,records,options){
			},
			scope:this,
			single:true
		},
		'datachanged':{
			fn:function(self){
			},scope:this
		},
		'loadexception': {
			fn:function(){
			},scope:this
		}
	}
});

var addPartslistGrid_timer = null;
function addPartslistGrid(store,records,index){
	var zoom = false;
//_dump("addPartslistGrid():gDispAnatomographyPanel=["+gDispAnatomographyPanel+"]");
	if(!gDispAnatomographyPanel){
		zoom = true;
		for(var i=store.getCount()-1;i>=0;i--){
			try{
				var record = store.getAt(i);
				if(record) record.set('zoom',true);
			}catch(e){}
		}
	}

	ag_parts_store = store;
	if(zoom){
		if(addPartslistGrid_timer) clearTimeout(addPartslistGrid_timer);
		addPartslistGrid_timer = setTimeout(function(){
			addPartslistGrid_timer = null;
			ag_focus(true);
		},500);
	}else{
		if(!updateClipImage()) updateAnatomo();
	}
	update_anatomography_point_grid(records);
	try{update_ag_fma_search_grid(records);}catch(e){}

	setTimeout(function(){
		try{
			var sel = ag_parts_gridpanel.getSelectionModel();
			try{sel.clearSelections();}catch(e){}
			var g_store = ag_parts_gridpanel.getStore();
			var g_count = g_store.getCount();
			for(var i=0;i<g_count;i++){
				var record = g_store.getAt(i);
				if(record.get('zoom') && !sel.isSelected(i)) sel.selectRow(i,true);
			}
		}catch(e){}
	},0);
	setEmptyGridText();
}

function removePartslistGrid(store,record,index){
	if(store.getCount()==0){
		var cmp = Ext.getCmp('contents-tab-panel');
		if(cmp && cmp.getActiveTab().id == 'contents-tab-bodyparts-panel'){
			gDispAnatomographyPanel = false;
		}
		Ext.getCmp('bp3d-home-group-btn').disable();
		try{
			var bp3d_grid = Ext.getCmp('control-tab-partslist-panel');
			if(bp3d_grid){
				var cmodel = bp3d_grid.getColumnModel();
				var index = cmodel.getIndexById('conv_id');
				cmodel.setHidden(index,true);
			}else{
				bp3d_grid = undefined;
			}
		}catch(e){}
		try{
			var ag_grid = Ext.getCmp('ag-parts-gridpanel');
			if(ag_grid){
				var cmodel = ag_grid.getColumnModel();
				var index = cmodel.getIndexById('conv_id');
				cmodel.setHidden(index,true);
			}else{
				ag_grid = undefined;
			}
		}catch(e){}
	}

	ag_parts_store = store;
	if(!updateClipImage()) updateAnatomo();
	update_anatomography_point_grid(record);
	try{update_ag_fma_search_grid(record);}catch(e){}

	setTimeout(function(){
		try{
			var sel = ag_parts_gridpanel.getSelectionModel();
			try{sel.clearSelections();}catch(e){}
			var g_store = ag_parts_gridpanel.getStore();
			var g_count = g_store.getCount();
			for(var i=0;i<g_count;i++){
				var record = g_store.getAt(i);
				if(record.get('zoom') && !sel.isSelected(i)) sel.selectRow(i,true);
			}
		}catch(e){
			_dump("removePartslistGrid():"+e);
		}
	},0);
	setEmptyGridText();
}

function updatePartslistGrid(store,record,operation){
	ag_parts_store = store;
	if(!updateClipImage()) updateAnatomo();
	update_anatomography_point_grid(record);
	try{update_ag_fma_search_grid(record);}catch(e){}
}

var resizeGridPanelColumns = function(grid){
	try{
		var column = grid.getColumnModel();
		var innerWidth = grid.getInnerWidth();
		var totalWidth = column.getTotalWidth(false);
		var columnCount = column.getColumnCount();
		var columnNum = 0;
		for(var i=0;i<columnCount;i++){
			if(column.isHidden(i)){
				continue;
			}
			if(column.isHidden(i) || column.isFixed(i) || !column.isResizable(i) || column.config[i].resizable){
				innerWidth -= column.getColumnWidth(i);
				continue;
			}
			if(column.isResizable(i)) columnNum++;
		}
		if(columnNum==0) return;
		var columnWidth = parseInt((innerWidth-21)/columnNum);
		for(var i=0;i<columnCount;i++){
			if(column.isHidden(i) || column.isFixed(i) || !column.isResizable(i) || column.config[i].resizable) continue;
			if(column.isResizable(i)) column.setColumnWidth(i,columnWidth);
		}
	}catch(e){
		for(var ekey in e){
			_dump('resizeGridPanelColumns():'+ekey+'=['+e[ekey]+']');
		}
	}
};

var saveHiddenGridPanelColumns = function(grid,id){
	if(Ext.isEmpty(id)) id = grid.getId();
	var columnModel = grid.getColumnModel();
	var count = columnModel.getColumnCount();
	var hash = {};
	for(var i=0;i<count;i++){
		if(columnModel.isFixed(i)) continue;
		hash[columnModel.getColumnId(i)] = columnModel.isHidden(i);
	}
	glb_us_state[id+'-columns-hidden'] = hash;

	ag_put_usersession_task.delay(1000);

//	var json = Ext.util.JSON.encode(hash);
//	Cookies.set(id+'-columns-hidden',json);
Cookies.clear(id+'-columns-hidden');
//_dump("saveHiddenGridPanelColumns():"+json);
};

var isPointDataRecord = function(record){
	if(record.data.elem_type=='bp3d_point') return true;
	return false;
};
var isNoneDataRecord = function(record){
	if(!Ext.isEmpty(record.data.zmax)) return false;
	if(!Ext.isEmpty(record.data.elem_type) && isPointDataRecord(record)) return false;
	return true;
};

var restoreHiddenGridPanelColumns = function(grid,id){
	if(Ext.isEmpty(id)) id = grid.getId();
	if(Ext.isEmpty(glb_us_state[id+'-columns-hidden'])) return;
	var hash = glb_us_state[id+'-columns-hidden'];

//	var json = Cookies.get(id+'-columns-hidden');
//_dump("restoreHiddenGridPanelColumns():"+json);
//	if(!json) return;
	var columnModel = grid.getColumnModel();
//	var hash = Ext.util.JSON.decode(json);
	for(var key in hash){
		var index = columnModel.getIndexById(key);
		if(index<0) continue;
		if(columnModel.isFixed(index)) continue;
		columnModel.setHidden(index,hash[key]);
	}
};

setEmptyGridText = function(){
	return;
};

var point_search = function(imgX,imgY,voxelRadius){
	if(Ext.isEmpty(voxelRadius) || (voxelRadius-0)<5) voxelRadius = 5;
	try{
		ag_comment_tabpanel.getActiveTab().loadMask.show();

		$(Ext.getCmp('ag-point-search-editorgrid-panel').getBottomToolbar().items.last().el).text('- / -')

		Ext.getCmp('ag-point-search-header-content-more-button').setDisabled(true);

		clear_point_f_id();
//		var params = makeAnatomoPrm();
//		_loadAnatomo(params,true);

		var store = Ext.getCmp('ag-point-search-editorgrid-panel').getStore();
		store.removeAll();
		delete store.baseParams.f_id;

		Ext.getCmp('ag-point-search-header-content-screen-x-text').setValue(imgX);
		Ext.getCmp('ag-point-search-header-content-screen-y-text').setValue(imgY);
		var cr = Ext.getCmp('ag-point-search-header-content-voxel-range-text');
		if(cr){
			cr.setValue(voxelRadius);
			cr.fireEvent('change',cr,voxelRadius);
		}

		var cx = Ext.getCmp('ag-point-search-header-content-coordinate-x-text');
		if(cx){
			cx.setValue('');
			cx.fireEvent('change',cx,'');
		}
		var cy = Ext.getCmp('ag-point-search-header-content-coordinate-y-text');
		if(cy){
			cy.setValue('');
			cy.fireEvent('change',cy,'');
		}
		var cz = Ext.getCmp('ag-point-search-header-content-coordinate-z-text');
		if(cz){
			cz.setValue('');
			cz.fireEvent('change',cz,'');
		}

		var urlStr = cgipath.pointSearch;
		var params = Ext.urlDecode(makeAnatomoPrm(null,1),true);
		params.px = imgX;
		params.py = imgY;
		params.vr = voxelRadius;

		var jsonStr = null;
		try{
			jsonStr = ag_extensions.toJSON.URI2JSON(params,{
				toString:true,
				mapPin:false,
				callback:undefined
			});
		}catch(e){jsonStr = null;}

		Ext.Ajax.request({
			url    : urlStr,
			method : 'POST',
			params : jsonStr ? jsonStr : params,
			success: function (response, options) {
				try{var pointData = Ext.util.JSON.decode(response.responseText);}catch(e){_dump(e);}
				if(Ext.isEmpty(pointData) || Ext.isEmpty(pointData.id)){
					ag_comment_tabpanel.getActiveTab().loadMask.hide();
					if(ag_extensions && ag_extensions.pick_point && ag_extensions.pick_point.hide) ag_extensions.pick_point.hide();
					return;
				}

				Ext.getCmp('ag-point-search-header-content-more-button').setDisabled(false);

				var tx = parseInt(parseFloat(pointData.worldPosX)*1000)/1000;
				var ty = parseInt(parseFloat(pointData.worldPosY)*1000)/1000;
				var tz = parseInt(parseFloat(pointData.worldPosZ)*1000)/1000;

				var cx = Ext.getCmp('ag-point-search-header-content-coordinate-x-text');
				if(cx){
					cx.setValue(tx);
					cx.fireEvent('change',cx,tx);
				}
				var cy = Ext.getCmp('ag-point-search-header-content-coordinate-y-text');
				if(cy){
					cy.setValue(ty);
					cy.fireEvent('change',cy,ty);
				}
				var cz = Ext.getCmp('ag-point-search-header-content-coordinate-z-text');
				if(cz){
					cz.setValue(tz);
					cz.fireEvent('change',cz,tz);
				}

				var store = Ext.getCmp('ag-point-search-editorgrid-panel').getStore();
				store.baseParams.f_id = pointData.id;
				var newRecord = Ext.data.Record.create(ag_point_search_fields);
				var recs = [];
				Ext.each(pointData.ids,function(o,i,a){
					recs.push(new newRecord(o));
				});
				store.add(recs)

				$(Ext.getCmp('ag-point-search-editorgrid-panel').getBottomToolbar().items.last().el).text(pointData.ids.length + ' / ' + pointData.total)

				Ext.getCmp('ag-point-search-header-content-more-button').setDisabled(pointData.ids.length<pointData.total?true:false);

				set_point_f_id(pointData.id);
				var params = makeAnatomoPrm();
				_loadAnatomo(params,true);
				ag_comment_tabpanel.getActiveTab().loadMask.hide();
				if(ag_extensions && ag_extensions.pick_point && ag_extensions.pick_point.hide) ag_extensions.pick_point.hide();
			},
			failure: function (response, options) {
				try{alert(cgipath.pointSearch+":failure():"+response.status+":"+response.statusText);}catch(e){}
				ag_comment_tabpanel.getActiveTab().loadMask.hide();
				if(ag_extensions && ag_extensions.pick_point && ag_extensions.pick_point.hide) ag_extensions.pick_point.hide();
			}
		});
	}catch(e){
		try{
			ag_comment_tabpanel.getActiveTab().loadMask.hide();
		}catch(e){}
	}
};



function add_bp3d_parts_store_parts_from_TPAP(tp_ap,aCB){
	var tpap_param = analyzeTPAP(tp_ap);
	if(Ext.isEmpty(tpap_param)) return;
	var newRecord = Ext.data.Record.create(bp3d_parts_store_fields);
	var addrecs = [];

	if(tpap_param.parts && tpap_param.parts.length>0 && bp3d_parts_store_fields){
		var prm_record = ag_param_store.getAt(0);
//		console.log(tpap_param.parts);
		for(var j=0,len=tpap_param.parts.length;j<len;j++){
			var parts = tpap_param.parts[j];

			var idx=-1;
			if(!Ext.isEmpty(parts.f_id)){
				idx = bp3d_parts_store.find('f_id',new RegExp('^'+parts.f_id+'$'));
			}else if(!Ext.isEmpty(parts.b_id)){
				idx = bp3d_parts_store.find('b_id',new RegExp('^'+parts.b_id+'$'));
			}
			if(idx>=0) continue;

			var addrec = new newRecord({});
			addrec.beginEdit();
			for(var fcnt=0;fcnt<addrec.fields.items.length;fcnt++){
				var fname = addrec.fields.items[fcnt].name;
				var fdefaultValue = addrec.fields.items[fcnt].defaultValue;
				addrec.set(fname,fdefaultValue);
			}

			if(!Ext.isEmpty(parts.f_id)) addrec.set("f_id",parts.f_id);
			if(!Ext.isEmpty(parts.f_nm)) addrec.set("name_e",parts.f_nm);
			if(!Ext.isEmpty(parts.color)) addrec.set("color",'#'+parts.color);
			if(!Ext.isEmpty(parts.value)) addrec.set("value",parts.value);
			if(!Ext.isEmpty(parts.exclude)) addrec.set("exclude",parts.exclude);
			if(!Ext.isEmpty(parts.zoom)) addrec.set("zoom",parts.zoom);
			if(!Ext.isEmpty(parts.opacity)) addrec.set("opacity",parts.opacity);
			if(!Ext.isEmpty(parts.representation)) addrec.set("representation",parts.representation);
			if(!Ext.isEmpty(parts.point)) addrec.set("point",parts.point);
			if(!Ext.isEmpty(parts.b_id)){
				addrec.set("b_id",parts.b_id);
				if(!Ext.isEmpty(parts.conv_id)){
					addrec.set("conv_id",parts.conv_id);
				}else{
					addrec.set("conv_id",parts.b_id);
				}
			}

			addrec.commit(true);
			addrec.endEdit();
			addrecs.push(addrec);
		}
	}
	if(addrecs.length>0) bp3d_parts_store.add(addrecs);
	return addrecs;
}

function add_comment_store_pins_from_TPAP(tp_ap){
	var tpap_param = analyzeTPAP(tp_ap);
	if(Ext.isEmpty(tpap_param)) return;

	var newRecord = Ext.data.Record.create(ag_comment_store_fields);
	var addrecs = [];
	var pin_no = ag_comment_store.getCount();

	if(tpap_param.comments && tpap_param.comments.length>0){
		for (var i = 0, len = tpap_param.comments.length; i < len; i++) {
			var comment = tpap_param.comments[i];
			var addrec = new newRecord({});
			addrec.beginEdit();
			for(var fcnt=0;fcnt<addrec.fields.items.length;fcnt++){
				var fname = addrec.fields.items[fcnt].name;
				var fdefaultValue = addrec.fields.items[fcnt].defaultValue;
				addrec.set(fname,fdefaultValue);
			}
			addrec.set("no",   ++pin_no);
			addrec.set("x3d",    parseFloatTPAP(comment.c3d.x));
			addrec.set("y3d",    parseFloatTPAP(comment.c3d.y));
			addrec.set("z3d",    parseFloatTPAP(comment.c3d.z));
			addrec.set("avx3d",  "");
			addrec.set("avy3d",  "");
			addrec.set("avz3d",  "");
			addrec.set("uvx3d",  "");
			addrec.set("uvy3d",  "");
			addrec.set("uvz3d",  "");
			addrec.set("color",  comment.point.rgb);
			addrec.set("oid",    comment.id);
			addrec.set("organ",  comment.name);
			addrec.set("comment",(comment.comment?comment.comment:""));
			addrec.set("coord",  "");
			addrec.commit(true);
			addrec.endEdit();
			addrecs.push(addrec);
		}
	}else if(tpap_param.pins && tpap_param.pins.length>0 && ag_comment_store_fields){
		for(var j=0,len=tpap_param.pins.length;j<len;j++){
			var pin = tpap_param.pins[j];
			var addrec = new newRecord({});
			addrec.beginEdit();
			for(var fcnt=0;fcnt<addrec.fields.items.length;fcnt++){
				var fname = addrec.fields.items[fcnt].name;
				var fdefaultValue = addrec.fields.items[fcnt].defaultValue;
				addrec.set(fname,fdefaultValue);
			}
			addrec.set("no",++pin_no);
			addrec.set("x3d",pin.x3d);
			addrec.set("y3d",pin.y3d);
			addrec.set("z3d",pin.z3d);
			addrec.set("avx3d",pin.avx3d);
			addrec.set("avy3d",pin.avy3d);
			addrec.set("avz3d",pin.avz3d);
			addrec.set("uvx3d",pin.uvx3d);
			addrec.set("uvy3d",pin.uvy3d);
			addrec.set("uvz3d",pin.uvz3d);
			addrec.set("color",pin.color);
			addrec.set("oid",pin.organid);
			addrec.set("organ",pin.organname);
			addrec.set("comment",(pin.comment?pin.comment:""));
			addrec.set("coord",  pin.coord);
			if(window.ag_extensions && ag_extensions.global_pin){
				if(!Ext.isEmpty(pin.PinID)) addrec.set("PinID", pin.PinID);
				if(!Ext.isEmpty(pin.PinGroupID)) addrec.set("PinGroupID", pin.PinGroupID);
			}
			addrec.commit(true);
			addrec.endEdit();
			addrecs.push(addrec);
		}
	}
	if(addrecs.length>0) ag_comment_store.add(addrecs);
}


function export_parts_pins(aOpts){

	aOpts = Ext.apply({},aOpts||{},{
		title    : 'Export',
		width    : 500,
		height   : 500,
		plain    : true,
		modal    : true,
		resizable: true,
		animateTarget: null
	});

	var cur_text = URI2Text(glb_anatomo_editor_url,{target:{pins:false}});
	var cur_url = Text2URI(cur_text,{target:{pins:false}});

	var convOpts = {
		target: {
			common: false,
			camera: false,
			clip: false,
			parts: true,
			point_parts: false,
			legendinfo: false,
			pins: true
		},
		pin: {
			url_prefix : cur_url+encodeURIComponent('&')
		}
	};


	function get_text(){
		var value = URI2Text(glb_anatomo_editor_url,convOpts);
		return value;
	}
	var text_value = get_text();
	if(Ext.isEmpty(text_value)) return;

	var url_short_value = "";
	var url_long_value = Text2URI(text_value,convOpts);
	if(Ext.isEmpty(url_long_value)) return;

	function change_checked(field,checked){
		convOpts.target[field.name] = checked;
		text_value = get_text();
		url_short_value = "";
		url_long_value = "";
		if(text_value != ""){
			url_long_value = Text2URI(text_value,convOpts);
			if(url_long_value != ""){
				update_open_url2text(url_long_value,function(url){
					url_short_value = url;
					Ext.getCmp('ag_export_short_url_textfield').setValue(url_short_value);
				});
			}
		}
		Ext.getCmp('ag_export_table_textarea').setValue(text_value);
		Ext.getCmp('ag_export_long_url_textfield').setValue(url_long_value);
		Ext.getCmp('ag_export_short_url_textfield').setValue(url_short_value);
	}

	var win = new Ext.Window({
		title       : aOpts.title,
		animateTarget: aOpts.animateTarget,
		width       : aOpts.width,
		height      : aOpts.height,
		plain       : aOpts.plain,
		bodyStyle   : 'padding:5px;',
		buttonAlign : 'right',
		modal       : aOpts.modal,
		resizable   : aOpts.resizable,
		items       : [{
			xtype:'fieldset',
			title: 'Export',
			autoHeight: true,
			layout: 'table',
			layoutConfig: {
				columns: 2
			},
			items:[{
				xtype: 'checkbox',
				boxLabel: 'Parts',
				name: 'parts',
				checked: convOpts.target.parts,
				width: 100,
				listeners: {
					check: change_checked
				}
			},{
				xtype: 'checkbox',
				boxLabel: 'Pins',
				name: 'pins',
				checked: convOpts.target.pins,
				width: 100,
				listeners: {
					check: change_checked
				}
			}]
		},{
			xtype:'fieldset',
			title: 'Message URL',
			autoHeight: true,
			labelAlign: 'right',
			labelWidth: 40,
			items:[{
				xtype         : 'textfield',
				id            : 'ag_export_short_url_textfield',
				fieldLabel    : 'Short',
				anchor        : '100%',
				readOnly      : true,
				selectOnFocus : true,
				value         : url_short_value,
				listeners: {
					render: function(comp){
						update_open_url2text(url_long_value,function(url){
							comp.setValue(url);
						});
					}
				}
			},{
				xtype         : 'textfield',
				id            : 'ag_export_long_url_textfield',
				fieldLabel    : 'Long',
				anchor        : '100%',
				readOnly      : true,
				selectOnFocus : true,
				value         : url_long_value
			}]
		},{
			xtype:'fieldset',
			title: 'Table',
			autoHeight: true,
			layout: 'fit',
			items: [{
				xtype: 'textarea',
				id: 'ag_export_table_textarea',
				style: 'font-family:Courier;monospace;',
				readOnly: true,
				selectOnFocus: true,
				value: text_value,
				anchor: '100%',
				height: 220
			}]
		}],
		buttons : [{
			text: 'Close',
			handler: function(){
				win.close();
			}
		}]
	});
	win.show();
}
/////////////////////////////////////////////////////////////////////////////////////////////////////
// ag_common_js.cgiから移植（ここまで）
/////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////
// anatomography_js.cgiから移植（ここから）
/////////////////////////////////////////////////////////////////////////////////////////////////////
Ext.ux.SliderTip = Ext.extend(Ext.Tip, {
	minWidth: 10,
	offsets : [20, 20],
	init : function(slider){
		slider.on('dragstart', this.onSlide, this);
		slider.on('drag', this.onSlide, this);
		slider.on('dragend', this.hide, this);
		slider.on('destroy', this.destroy, this);
	},
	onSlide : function(slider){
		this.show();
		this.body.update(this.getText(slider));
		this.doAutoWidth();
		this.el.alignTo(slider.thumb, 'b-t?', this.offsets);
	},
	getText : function(slider){
		return slider.getValue() + 1;
	}
});

var tip = new Ext.ux.SliderTip ({
	getText: function(slider) {
//		return String.format('<b>{0}</b>', parseInt(slider.getValue()) -1000);
		return String.format('<b>{0}</b>', parseInt(slider.getValue()));
	}
});

var tip_depth = new Ext.ux.SliderTip ({
	getText: function(slider) {
//		return String.format('<b>{0}</b>', parseInt(slider.getValue()) -1000);
		return String.format('<b>{0}</b>', parseInt(slider.getValue()));
	}
});

var ag_parts_gridpanel_col_opacity_arr = [
	['1.0',  '1.0'],
	['0.8',  '0.8'],
	['0.6',  '0.6'],
	['0.4',  '0.4'],
	['0.3',  '0.3'],
	['0.2',  '0.2'],
	['0.1',  '0.1'],
	['0.05', '0.05'],
	['0.0',  '0.0']
];

var ag_parts_gridpanel_col_representation_arr = [
	['surface', 'surface'],
	['wireframe', 'wireframe'],
	['points', 'points']
];

var ag_parts_gridpanel_color_cell_style = function (val) {
	return '<span style="background-color:' + val + '">&nbsp;&nbsp;&nbsp;&nbsp;</span>';
};

function tabChange(tabPanel,tab){
	//タブが変更された時にコールされる
	updateAnatomo();
}

function ag_focus(aClearZoom,aCenteringOnly) {
//_dump('focus()');
	if(Ext.isEmpty(aClearZoom)) aClearZoom = false;
	if(Ext.isEmpty(aCenteringOnly)) aCenteringOnly = false;

//	var urlStr = cgipath.focus+'?' + makeAnatomoPrm();

	var params = Ext.urlDecode(makeAnatomoPrm());
	var jsonStr = null;
	try{
		jsonStr = ag_extensions.toJSON.URI2JSON(params,{
			toString:true,
			mapPin:false,
			callback:undefined
		});
	}catch(e){jsonStr = null;}

	var urlStr = cgipath.focus;
	Ext.Ajax.request({
		url     : urlStr,
		method  : 'POST',
		params  : jsonStr ? jsonStr : params,
		success : function (response, options) {
			try{
				var targetXYZYRange = Ext.util.JSON.decode(response.responseText);
			}catch(e){
				_dump(e);
				return;
			}
			if(targetXYZYRange.Camera){
				m_ag.cameraPos.x = parseFloat(m_ag.cameraPos.x) + parseFloat(targetXYZYRange.Camera.TargetX) - parseFloat(m_ag.targetPos.x);
				m_ag.cameraPos.y = parseFloat(m_ag.cameraPos.y) + parseFloat(targetXYZYRange.Camera.TargetY) - parseFloat(m_ag.targetPos.y);
				m_ag.cameraPos.z = parseFloat(m_ag.cameraPos.z) + parseFloat(targetXYZYRange.Camera.TargetZ) - parseFloat(m_ag.targetPos.z);
				m_ag.targetPos.x = parseFloat(targetXYZYRange.Camera.TargetX);
				m_ag.targetPos.y = parseFloat(targetXYZYRange.Camera.TargetY);
				m_ag.targetPos.z = parseFloat(targetXYZYRange.Camera.TargetZ);

//				m_ag.cameraPos.x = parseFloat(targetXYZYRange.Camera.CameraX);
//				m_ag.cameraPos.y = parseFloat(targetXYZYRange.Camera.CameraY);
//				m_ag.cameraPos.z = parseFloat(targetXYZYRange.Camera.CameraZ);
//				m_ag.targetPos.x = parseFloat(targetXYZYRange.Camera.TargetX);
//				m_ag.targetPos.y = parseFloat(targetXYZYRange.Camera.TargetY);
//				m_ag.targetPos.z = parseFloat(targetXYZYRange.Camera.TargetZ);
//				m_ag.upVec.x = parseFloat(targetXYZYRange.Camera.CameraUpVectorX);
//				m_ag.upVec.y = parseFloat(targetXYZYRange.Camera.CameraUpVectorY);
//				m_ag.upVec.z = parseFloat(targetXYZYRange.Camera.CameraUpVectorZ);

			}else{
				m_ag.cameraPos.x = parseFloat(m_ag.cameraPos.x) + parseFloat(targetXYZYRange.targetPosX) - parseFloat(m_ag.targetPos.x);
				m_ag.cameraPos.y = parseFloat(m_ag.cameraPos.y) + parseFloat(targetXYZYRange.targetPosY) - parseFloat(m_ag.targetPos.y);
				m_ag.cameraPos.z = parseFloat(m_ag.cameraPos.z) + parseFloat(targetXYZYRange.targetPosZ) - parseFloat(m_ag.targetPos.z);
				m_ag.targetPos.x = parseFloat(targetXYZYRange.targetPosX);
				m_ag.targetPos.y = parseFloat(targetXYZYRange.targetPosY);
				m_ag.targetPos.z = parseFloat(targetXYZYRange.targetPosZ);
			}

			setCameraAndTarget(m_ag.cameraPos, m_ag.targetPos, m_ag.upVec, true);

			if(!aCenteringOnly){
				var slider = Ext.getCmp('zoom-slider');
				var sliderValue = 0;
				if(targetXYZYRange.Camera){
					sliderValue = targetXYZYRange.Camera.Zoom;
				}else{
					sliderValue = Math.round((parseFloat(Math.log(1800) / Math.LN2) - parseFloat(Math.log(targetXYZYRange.yrange) / Math.LN2)) * 5 - 0.5);
				}
				glb_zoom_slider = sliderValue+1;
				if(slider && slider.rendered){
					slider.setValue(sliderValue);
				}else{
					var prm_record =ag_param_store.getAt(0);
					prm_record.beginEdit();
					prm_record.set('zoom', glb_zoom_slider / 5);
					prm_record.endEdit();
					prm_record.commit();
				}
			}
			updateAnatomo();

			if(aClearZoom){
				var grid = Ext.getCmp('ag-parts-gridpanel');
				try{grid.getSelectionModel().clearSelections();}catch(e){}
				var store = grid.getStore();
				var records = store.getRange();
				for(var i=records.length-1;i>=0;i--){
					var record = records[i];
					if(record){
						record.beginEdit();
						record.set('zoom',false);
						record.commit(true);
						record.endEdit();
					}
				}
			}
		}
	});
}

function oncheck_anatomo_clip_check(checkbox, fChecked){
	try{
		var prm_record =ag_param_store.getAt(0);
		var method = Ext.getCmp('anatomo-clip-method-combo');
		var plane = Ext.getCmp('anatomo-clip-predifined-plane');
		var fix = Ext.getCmp('anatomo-clip-fix-check');
		var reverse = Ext.getCmp('anatomo-clip-reverse-check');
		var slider = Ext.getCmp('anatomo-clip-slider');
		var buttonUp = document.getElementById('anatomo-clip-up-button');
		var buttonDown = document.getElementById('anatomo-clip-down-button');
		var textField = Ext.getCmp('anatomo-clip-value-text');
		var clipImgDiv = document.getElementById('clipImgDiv');

		var buttonSliderUp = Ext.get('anatomo-clip-slider-up-button');
		var buttonSliderDown = Ext.get('anatomo-clip-slider-down-button');
		var buttonTextUp = Ext.get('anatomo-clip-text-up-button');
		var buttonTextDown = Ext.get('anatomo-clip-text-down-button');
		var labelClipUnit = Ext.get('anatomo-clip-unit-label');
		var clipImgDiv = Ext.get('clipImgDiv');

		prm_record.beginEdit();
		if (fChecked) {
			method.show();
			plane.show();
			fix.show();
			reverse.show();
			slider.show();
			textField.show();

			if(buttonSliderUp) buttonSliderUp.show();
			if(buttonSliderDown) buttonSliderDown.show();
			if(buttonTextUp) buttonTextUp.show();
			if(buttonTextDown) buttonTextDown.show();
			if(labelClipUnit) labelClipUnit.show();
			if(clipImgDiv) clipImgDiv.show();

			prm_record.set('clip_type', 'D');
			prm_record.set('clip_depth', slider.getValue());
			prm_record.set('clipped_cameraX', m_ag.cameraPos.x);
			prm_record.set('clipped_cameraY', m_ag.cameraPos.y);
			prm_record.set('clipped_cameraZ', m_ag.cameraPos.z);
			prm_record.set('clipped_targetX', m_ag.targetPos.x);
			prm_record.set('clipped_targetY', m_ag.targetPos.y);
			prm_record.set('clipped_targetZ', m_ag.targetPos.z);
			prm_record.set('clipped_upVecX', m_ag.upVec.x);
			prm_record.set('clipped_upVecY', m_ag.upVec.y);
			prm_record.set('clipped_upVecZ', m_ag.upVec.z);
			anatomoClipDepthMode = true;
//			var urlStr = cgipath.clip+'?' + makeAnatomoPrm();
			var urlStr = cgipath.clip;
//			_dump("oncheck_anatomo_clip_check():urlStr=["+urlStr+"]");

			var params = Ext.urlDecode(makeAnatomoPrm());
			var jsonStr = null;
			try{
				jsonStr = ag_extensions.toJSON.URI2JSON(params,{
					toString:true,
					mapPin:false,
					callback:undefined
				});
			}catch(e){jsonStr = null;}

			Ext.Ajax.request({
				url     : urlStr,
				method  : 'POST',
				params  : jsonStr ? jsonStr : params,
				success : function (response, options) {
					try{
//						_dump("oncheck_anatomo_clip_check():"+cgipath.clip+":success():response.responseText=["+response.responseText+"]");
						var responseObj = Ext.util.JSON.decode(response.responseText);
						var prm_record = ag_param_store.getAt(0);
						prm_record.beginEdit();
						prm_record.set('clip_paramA', parseFloat(responseObj.Clip.ClipPlaneA));
						prm_record.set('clip_paramB', parseFloat(responseObj.Clip.ClipPlaneB));
						prm_record.set('clip_paramC', parseFloat(responseObj.Clip.ClipPlaneC));
						prm_record.set('clip_paramD', parseFloat(responseObj.Clip.ClipPlaneD));

						prm_record.set('clip_type', 'P');
						prm_record.endEdit();
						prm_record.commit();
						anatomoClipDepthMode = false;
						updateAnatomo();
						plane.fireEvent('select',plane);
					}catch(e){
						_dump("oncheck_anatomo_clip_check():"+cgipath.clip+":success():"+e);
					}
				},
				failure : function (response, options) {
					_dump("oncheck_anatomo_clip_check():"+cgipath.clip+":failure():response.responseText=["+response.responseText+"]");
				}
			});
		} else {
			method.hide();
			plane.hide();
			fix.hide();
			reverse.hide();
			slider.hide();
			textField.hide();

			if(buttonSliderUp) buttonSliderUp.hide();
			if(buttonSliderDown) buttonSliderDown.hide();
			if(buttonTextUp) buttonTextUp.hide();
			if(buttonTextDown) buttonTextDown.hide();
			if(labelClipUnit) labelClipUnit.hide();
			if(clipImgDiv) clipImgDiv.hide();

			prm_record.set('clip_type', 'N');
			prm_record.set('clip_depth', NaN);
			anatomoClipDepthMode = false;
		}
		prm_record.endEdit();
		prm_record.commit();
		updateAnatomo();
	}catch(e){
		_dump("oncheck_anatomo_clip_check():"+e);
	}
}
function oncheck_anatomo_clip_fix_check(checkbox, fChecked){
	if(fChecked){
		Ext.getCmp('anatomo-clip-reverse-check').enable();
	}else{
		Ext.getCmp('anatomo-clip-reverse-check').setValue(false);
		Ext.getCmp('anatomo-clip-reverse-check').disable();
	}
	onload_ag_img();
}
function oncheck_anatomo_clip_reverse_check(checkbox, fChecked){
	var prm_record = ag_param_store.getAt(0);
	prm_record.beginEdit();
	prm_record.set('clip_paramA', prm_record.get('clip_paramA')*-1);
	prm_record.set('clip_paramB', prm_record.get('clip_paramB')*-1);
	prm_record.set('clip_paramC', prm_record.get('clip_paramC')*-1);
	prm_record.set('clip_paramD', prm_record.get('clip_paramD')*-1);
	prm_record.set('clip_depth',  prm_record.get('clip_depth') *-1);
	prm_record.endEdit();
	prm_record.commit();
	stopUpdateAnatomo();
	_updateAnatomo();
}
function onselect_anatomo_clip_method_combo(combo, record, index){
	var prm_record = ag_param_store.getAt(0);
	prm_record.beginEdit();
	prm_record.set('clip_method', record.data.value);
	prm_record.endEdit();
	prm_record.commit();
	updateAnatomo();
}
function onselect_anatomo_clip_predifined_plane(combo, record, index){
	var value = combo.getValue();
	var reverse = Ext.getCmp('anatomo-clip-reverse-check').getValue();

	var clip_slider = Ext.getCmp('anatomo-clip-slider');
	var clip_text = Ext.getCmp('anatomo-clip-value-text');
	if(clip_slider && clip_text){
		if(value == "FREE"){
			clip_slider.minValue = -1000;
			clip_slider.maxValue = 1000;
		}else{
			clip_slider.minValue = -350;
			clip_slider.maxValue = 1800;
		}
	}

	if(value == "FB"){
		if(reverse){
			setClipImageHV(90,0,180,0);
		}else{
			setClipImageHV(90,0,0,0);
		}
	}else if(value == "RL"){
		if(reverse){
			setClipImageHV(0,0,90,0);
		}else{
			setClipImageHV(0,0,270,0);
		}
	}else if(value == "TB"){
		if(reverse){
			setClipImageHV(0,0,180,90);
		}else{
			setClipImageHV(0,0,0,270);
		}
	}else if(value == "FREE"){
		Ext.getCmp('anatomo-clip-fix-check').setValue(false);
		Ext.getCmp('anatomo-clip-reverse-check').setValue(false);
		Ext.getCmp('anatomo-clip-reverse-check').disable();
		setClipImageHV(0,0,0,0);
	}
}
function onchange_anatomo_clip_slider(slider, value){
	var clip;
	try{clip = Ext.getCmp('anatomo-clip-predifined-plane').getValue();}catch(e){clip = undefined;}

	var prm_record = ag_param_store.getAt(0);
	prm_record.beginEdit();
	if(clip == 'FB'){
		prm_record.set('clip_depth', (value*-1*prm_record.data.clip_paramB));
	}else if(clip == 'RL'){
		prm_record.set('clip_depth', (value*-1*prm_record.data.clip_paramA));
	}else if(clip == 'TB'){
		prm_record.set('clip_depth', (value*-1*prm_record.data.clip_paramC));
	}else if(clip == 'FREE'){
		prm_record.set('clip_depth', value);
	}
	prm_record.endEdit();
	prm_record.commit();

	anatomoUpdateClipValueText(value);
	updateClipPlane();

	var textCmp = Ext.getCmp('anatomo-clip-value-text');
	if(textCmp) textCmp.fireEvent('change',textCmp,value);
}
function onchange_anatomo_clip_value_text(textField, newValue, oldValue){
//_dump("onchange_anatomo_clip_value_text():"+anatomoUpdateClipValue);
	try{

	if (anatomoUpdateClipValue) {
		return;
	}
	var value = isNaN(parseInt(newValue, 10))?oldValue:Math.round(newValue);

	var clip;
	try{clip = Ext.getCmp('anatomo-clip-predifined-plane').getValue();}catch(e){clip = undefined;}
	var clip_slider = Ext.getCmp('anatomo-clip-slider');

	if(clip == 'FB' || clip == 'RL' || clip == 'TB'){
		if (value < clip_slider.minValue) {
			value = clip_slider.minValue;
		}
		if (value > clip_slider.maxValue) {
			value = clip_slider.maxValue
		}
		textField.setValue(value);
		clip_slider.setValue(value);
	}else{
		if (value < -1000) {
			value = -1000;
		}
		if (value > 1000) {
			value = 1000
		}
		textField.setValue(value);
//		clip_slider.setValue(value + 1000);
		clip_slider.setValue(value);
	}

	setClipLine();

	}catch(e){
		_dump("onchange_anatomo_clip_value_text():"+e);
	}
}

function onload_image_sample(){
	var elem = Ext.get("clipImg");
	elem.un("load", onload_image_sample);

	Ext.getCmp("anatomo-clip-check").on('check',oncheck_anatomo_clip_check);
	Ext.getCmp("anatomo-clip-method-combo").on('select',onselect_anatomo_clip_method_combo);
	Ext.getCmp("anatomo-clip-predifined-plane").on('select',onselect_anatomo_clip_predifined_plane);
	Ext.getCmp("anatomo-clip-reverse-check").on('check',oncheck_anatomo_clip_reverse_check);
	Ext.getCmp("anatomo-clip-slider").on('change',onchange_anatomo_clip_slider);
	Ext.getCmp("anatomo-clip-value-text").on('change',onchange_anatomo_clip_value_text);
}

function loadSaveData(record,latestVersion){
	if(latestVersion == undefined) latestVersion = false;
	var partslist = Ext.getCmp('control-tab-partslist-panel');
	var store = partslist.getStore();

	partslist.stopEditing();

	if(record && record.data){

		var prm_record = ag_param_store.getAt(0);
		prm_record.beginEdit();
		for(var i=0;i<ag_param_store_fields.length;i++){
			prm_record.set(ag_param_store_fields[i],ag_param_store_data[i]);
		}
		prm_record.commit();
		prm_record.endEdit();

		m_ag.cameraPos = new AGVec3d(2.7979888916016167, -998.4280435445771, 809.7306805551052);
		m_ag.targetPos = new AGVec3d(2.7979888916015625, -110.37168800830841, 809.7306805551052);
		m_ag.upVec = new AGVec3d(0, 0, 1);
		m_ag.longitude = 0;
		m_ag.latitude = 0;
		m_ag.distance = 0;

		setRotateHorizontalValue(0);
		setRotateVerticalValue(0);

		Ext.getCmp("anatomo-clip-check").setValue(false);
		Ext.getCmp("zoom-value-text").setValue(1);
		Ext.getCmp("anatomo-width-combo").setValue(400);
		Ext.getCmp("anatomo-height-combo").setValue(400);
		Ext.getCmp("anatomo-bgcp").setValue('#FFFFFF');
		Ext.getCmp("anatomo-bgcolor-transparent-check").setValue(false);
		Ext.getCmp("scalar-max-textfield").setValue('');
		Ext.getCmp("scalar-min-textfield").setValue('');
		Ext.getCmp("show-colorbar-check").setValue(false);

		Ext.getCmp("ag-command-grid-show-check").setValue(false);
		Ext.getCmp("ag-command-grid-color-field").setValue('#008000');
		Ext.getCmp("ag-command-grid-len-combobox").setValue(10);

		Ext.getCmp("ag-coordinate-system-combo").setValue('bp3d');

		var tg_id = '$tg_id';
		var tgi_version = '$tgi_version';

		Ext.getCmp("bp3d-tree-group-combo").setValue('$tg_id');
		Ext.getCmp("bp3d-version-combo").setValue('$tgi_version');
		Ext.getCmp("bp3d-tree-type-combo").setValue('$bul_id');

		Ext.getCmp("anatomo-tree-group-combo").setValue('$tg_id');
		Ext.getCmp("anatomo-version-combo").setValue('$tgi_version');
		Ext.getCmp("bp3d-tree-type-combo-ag").setValue('$bul_id');

		if(record.data.baseparam){
			prm_record.beginEdit();
			for(var reckey in record.data.baseparam){
				if(typeof record.data.baseparam[reckey] == "function") continue;
				prm_record.set(reckey,Ext.isEmpty(record.data.baseparam[reckey])?NaN:record.data.baseparam[reckey]);
			}
			prm_record.commit();
			prm_record.endEdit();

			if(record.data.baseparam.bg_rgb){
				Ext.getCmp("anatomo-bgcp").setValue('#'+record.data.baseparam.bg_rgb);
			}
			if(!Ext.isEmpty(record.data.baseparam.bg_transparent)){
				Ext.getCmp("anatomo-bgcolor-transparent-check").setValue(true);
			}

			if(record.data.baseparam.grid){
				Ext.getCmp("ag-command-grid-show-check").setValue(record.data.baseparam.grid);
			}
//_dump("loadSaveData():record.data.baseparam.grid_len=["+record.data.baseparam.grid_len+"]");
			if(record.data.baseparam.grid_len){
				Ext.getCmp("ag-command-grid-len-combobox").setValue(record.data.baseparam.grid_len);
			}
			if(record.data.baseparam.grid_color){
				Ext.getCmp("ag-command-grid-color-field").setValue('#'+record.data.baseparam.grid_color);
			}

			if(record.data.baseparam.coord){
				Ext.getCmp("ag-coordinate-system-combo").setValue(record.data.baseparam.coord);
			}

			if(record.data.cameraprm){
				setCameraAndTarget(record.data.cameraprm.m_ag.cameraPos, record.data.cameraprm.m_ag.targetPos, record.data.cameraprm.m_ag.upVec, true);
			}
			if(record.data.environment){
				if(record.data.environment.rotate){
					setRotateHorizontalValue(record.data.environment.rotate.H);
					setRotateVerticalValue(record.data.environment.rotate.V);
				}
				if(record.data.environment.zoom){
					Ext.getCmp("zoom-value-text").setValue(record.data.environment.zoom);
				}

//_dump("loadSaveData():record.data.environment.bp3dversion=["+record.data.environment.bp3dversion+"]");
				if(record.data.environment.bp3dversion){
					if(record.data.environment.tg_id){
						tg_id = record.data.environment.tg_id;
					}else if(record.data.environment.model){
						tg_id = model2tg[record.data.environment.model].tg_id;
					}else{
						tg_id = version2tg[record.data.environment.bp3dversion].tg_id;
					}
//_dump("loadSaveData():tg_id=["+tg_id+"]");
//_dump("loadSaveData():tgi_version=["+tgi_version+"]");
					if(latestVersion){
						tgi_version = latestversion[tg_id];
					}else{
						if(version2tg[record.data.environment.bp3dversion].tgi_delcause){
							if(Ext.isEmpty(latestversion[tg_id])) return;
							tgi_version = latestversion[tg_id];
						}else{
							tgi_version = record.data.environment.bp3dversion;
						}
					}
//_dump("loadSaveData():tgi_version=["+tgi_version+"]");

					Ext.getCmp("anatomo-version-combo").setValue(tgi_version);
					Ext.getCmp("bp3d-version-combo").setValue(tgi_version);

					Ext.getCmp("anatomo-tree-group-combo").setValue(tg_id);
					Ext.getCmp("bp3d-tree-group-combo").setValue(tg_id);

					if(record.data.environment.treename){
_dump("loadSaveData():record.data.environment.treename=["+record.data.environment.treename+"]");
						Ext.getCmp("bp3d-tree-type-combo").setValue(record.data.environment.treename);
						Ext.getCmp("bp3d-tree-type-combo-ag").setValue(record.data.environment.treename);
					}

					Ext.getCmp("bp3d-version-combo").getStore().reload({
						callback : function(records,options,success){
							Ext.getCmp("anatomo-version-combo").setValue(tgi_version);
							Ext.getCmp("bp3d-version-combo").setValue(tgi_version);
							if(record.data.environment.treename){
								Ext.getCmp("bp3d-tree-type-combo").setValue(record.data.environment.treename);
								Ext.getCmp("bp3d-tree-type-combo-ag").setValue(record.data.environment.treename);
								Ext.getCmp("bp3d-tree-type-combo").getStore().reload({
									callback : function(records,options,success){
										Ext.getCmp("bp3d-tree-type-combo").setValue(record.data.environment.treename);
										Ext.getCmp("bp3d-tree-type-combo-ag").setValue(record.data.environment.treename);
									}
								});
							}else{
								Ext.getCmp("bp3d-tree-type-combo").getStore().reload({
									callback : function(records,options,success){
										Ext.getCmp("bp3d-tree-type-combo").setValue('1');
										Ext.getCmp("bp3d-tree-type-combo-ag").setValue('1');
									}
								});
							}
							try{Ext.getCmp("anatomo-tree-type-combo").getStore().reload();}catch(e){}
						}
					});

				}
				if(record.data.environment.size){
					Ext.getCmp("anatomo-width-combo").setValue(record.data.environment.size.width);
					Ext.getCmp("anatomo-height-combo").setValue(record.data.environment.size.height);
				}
				if(record.data.environment.colormap){
					Ext.getCmp("scalar-max-textfield").setValue(record.data.environment.colormap.max);
					Ext.getCmp("scalar-min-textfield").setValue(record.data.environment.colormap.min);
					Ext.getCmp("show-colorbar-check").setValue(record.data.environment.colormap.bar);
				}
				if(record.data.environment.clip){
					Ext.getCmp("anatomo-clip-check").un('check',oncheck_anatomo_clip_check);
					Ext.getCmp("anatomo-clip-method-combo").un('select',onselect_anatomo_clip_method_combo);
					Ext.getCmp("anatomo-clip-predifined-plane").un('select',onselect_anatomo_clip_predifined_plane);
					Ext.getCmp("anatomo-clip-reverse-check").un('check',oncheck_anatomo_clip_reverse_check);
					Ext.getCmp("anatomo-clip-slider").un('change',onchange_anatomo_clip_slider);
					Ext.getCmp("anatomo-clip-value-text").un('change',onchange_anatomo_clip_value_text);

					Ext.getCmp("anatomo-clip-check").setValue(true);
					Ext.getCmp("anatomo-clip-method-combo").setValue(record.data.environment.clip.method);
					Ext.getCmp("anatomo-clip-predifined-plane").setValue(record.data.environment.clip.predifined);
					Ext.getCmp("anatomo-clip-fix-check").setValue(record.data.environment.clip.fix);
					Ext.getCmp("anatomo-clip-reverse-check").setValue(record.data.environment.clip.reverse);
					Ext.getCmp("anatomo-clip-slider").setValue(record.data.environment.clip.value);
					Ext.getCmp("anatomo-clip-value-text").setValue(record.data.environment.clip.value);

					var method = Ext.getCmp('anatomo-clip-method-combo');
					var plane = Ext.getCmp('anatomo-clip-predifined-plane');
					var fix = Ext.getCmp('anatomo-clip-fix-check');
					var reverse = Ext.getCmp('anatomo-clip-reverse-check');
					var slider = Ext.getCmp('anatomo-clip-slider');
					var buttonUp = document.getElementById('anatomo-clip-up-button');
					var buttonDown = document.getElementById('anatomo-clip-down-button');
					var textField = Ext.getCmp('anatomo-clip-value-text');
					var clipImgDiv = document.getElementById('clipImgDiv');
					var buttonSliderUp = Ext.get('anatomo-clip-slider-up-button');
					var buttonSliderDown = Ext.get('anatomo-clip-slider-down-button');
					var buttonTextUp = Ext.get('anatomo-clip-text-up-button');
					var buttonTextDown = Ext.get('anatomo-clip-text-down-button');
					var labelClipUnit = Ext.get('anatomo-clip-unit-label');
					var clipImgDiv = Ext.get('clipImgDiv');
					var comboboxPanel = Ext.getCmp('anatomography-control-clip-combobox-panel');

					method.show();
					plane.show();
					fix.show();
					reverse.show();
					slider.show();
					if(comboboxPanel) comboboxPanel.show();
					textField.show();

					if(buttonSliderUp) buttonSliderUp.show();
					if(buttonSliderDown) buttonSliderDown.show();
					if(buttonTextUp) buttonTextUp.show();
					if(buttonTextDown) buttonTextDown.show();
					if(labelClipUnit) labelClipUnit.show();
					if(clipImgDiv) clipImgDiv.show();


					if(record.data.environment.clip.clipprm){

						var elem = Ext.get("clipImg");
						elem.on("load", onload_image_sample);
						var value = plane.getValue();
						if(value == "FB") {
							setClipImage(90,0,setClipLine);
						} else if (value == "RL") {
							setClipImage(0,0,setClipLine);
						} else if (value == "TB") {
							setClipImage(0,0,setClipLine);
						}


					}else{
						onload_image_sample();
					}
				}
			}
		}
		updateRotateImg();
		setCameraAndTarget(m_ag.cameraPos, m_ag.targetPos, m_ag.upVec, true);

		var cmp = Ext.getCmp('bp3d_dataview');
		if(cmp && cmp.rendered) cmp.store.reload();


		var cmp = Ext.getCmp('anatomography_image_comment_draw_check');
		if(cmp && cmp.rendered) cmp.setValue(false);
		var cmp = Ext.getCmp("anatomography_image_comment_title");
		if(cmp && cmp.rendered) cmp.setValue("");
		var cmp = Ext.getCmp("anatomography_image_comment_legend");
		if(cmp && cmp.rendered) cmp.setValue("");
		var cmp = Ext.getCmp("anatomography_image_comment_author");
		if(cmp && cmp.rendered) cmp.setValue("");
		var cmp = Ext.getCmp('anatomo_pin_description_draw_check');
		if(cmp && cmp.rendered) cmp.setValue(false);
		var cmp = Ext.getCmp('anatomo_pin_shape_combo');
		if(cmp && cmp.rendered){
			try{var value = cmp.initialConfig.store.getAt(0).get(cmp.initialConfig.valueField);}catch(e){value='SC';}
			cmp.setValue(value);
		}
		ag_comment_store.removeAll();

		if(record.data.anatomoprm){
			// Legend Parameters
			var cmp = Ext.getCmp('anatomography_image_comment_draw_check');
			if(cmp && cmp.rendered) cmp.setValue(record.data.anatomoprm.lp?true:false);

			var cmp = Ext.getCmp("anatomography_image_comment_title");
			if(cmp && cmp.rendered) cmp.setValue(record.data.anatomoprm.lt);

			var cmp = Ext.getCmp("anatomography_image_comment_legend");
			if(cmp && cmp.rendered) cmp.setValue(record.data.anatomoprm.le);

			var cmp = Ext.getCmp("anatomography_image_comment_author");
			if(cmp && cmp.rendered) cmp.setValue(record.data.anatomoprm.la);

			var newRecord = Ext.data.Record.create(ag_comment_store_fields);
			var addrecs = [];
			var f_ids = {};
			for(var i=0;;i++){
				var num = i+1;
				while ((num+"").length < 3) {
					num = "0" + num;
				}
				if(!record.data.anatomoprm["pno"+num]) break;
				var addrec = new newRecord({});
				addrec.beginEdit();
				addrec.set("no",     record.data.anatomoprm["pno"+num]);
				addrec.set("x3d",    record.data.anatomoprm["px"+num]);
				addrec.set("y3d",    record.data.anatomoprm["py"+num]);
				addrec.set("z3d",    record.data.anatomoprm["pz"+num]);
				addrec.set("avx3d",  record.data.anatomoprm["pax"+num]);
				addrec.set("avy3d",  record.data.anatomoprm["pay"+num]);
				addrec.set("avz3d",  record.data.anatomoprm["paz"+num]);
				addrec.set("uvx3d",  record.data.anatomoprm["pux"+num]);
				addrec.set("uvy3d",  record.data.anatomoprm["puy"+num]);
				addrec.set("uvz3d",  record.data.anatomoprm["puz"+num]);
				addrec.set("color",  record.data.anatomoprm["pcl"+num]);
				addrec.set("oid",    record.data.anatomoprm["poi"+num]);
				addrec.set("organ",  record.data.anatomoprm["pon"+num]);
				addrec.set("comment",record.data.anatomoprm["pd"+num]);
				addrec.set("coord",  record.data.anatomoprm["pcd"+num]);
				if(window.ag_extensions && ag_extensions.global_pin){
					if(!Ext.isEmpty(record.data.anatomoprm["pid"+num])) addrec.set("PinID",  record.data.anatomoprm["pid"+num]);
					if(!Ext.isEmpty(record.data.anatomoprm["pgid"+num])) addrec.set("PinGroupID",  record.data.anatomoprm["pgid"+num]);
				}
				addrec.commit();
				addrec.endEdit();
				addrecs.push(addrec);

				f_ids[record.data.anatomoprm["poi"+num]] = record.data.anatomoprm["pno"+num];

				var cmp = Ext.getCmp('anatomo_pin_number_draw_check');
				if(cmp && cmp.rendered) cmp.setValue(record.data.anatomoprm["pnd"+num]);

				var cmp = Ext.getCmp('anatomo_pin_description_draw_check');
				if(cmp && cmp.rendered) cmp.setValue(record.data.anatomoprm["pdd"+num]);

				var cmp = Ext.getCmp('anatomo_pin_shape_combo');
				if(cmp && cmp.rendered) cmp.setValue(record.data.anatomoprm["ps"+num]);

			}
			ag_comment_store.add(addrecs);
		}

		if(record.data.partslist){
			var conv_flag = false;

			var records = store.getRange();
			while(records.length){
				store.remove(records[records.length-1]);
				records = store.getRange();
			}

			var newRecord = Ext.data.Record.create(bp3d_parts_store_fields);
			try{
				var prm_record = ag_param_store.getAt(0);
				var addrecs = [];
				for(var i=0;i<record.data.partslist.length;i++){
					var addrec = new newRecord({
						'exclude'       : false,
						'color'         : '#'+prm_record.data.color_rgb,
						'value'         : '',
						'zoom'          : false,
						'exclude'       : false,
						'opacity'       : '1.0',
						'representation': 'surface',
						'point'         : false
					});
					addrec.beginEdit();
					for(var fcnt=0;fcnt<addrec.fields.items.length;fcnt++){
						var fname = addrec.fields.items[fcnt].name;
						var fdefaultValue = addrec.fields.items[fcnt].defaultValue;
						if(Ext.isEmpty(record.data.partslist[i][fname])){
							addrec.set(fname,fdefaultValue);
						}else{
							addrec.set(fname,record.data.partslist[i][fname]);
						}
					}
					if((!addrec.data.b_id || addrec.data.b_id == "") && record.data.partslist[i].f_id) addrec.data.b_id = record.data.partslist[i].f_id;
					if((!addrec.data.entry || addrec.data.entry == "") && record.data.partslist[i].lastmod) addrec.data.entry = record.data.partslist[i].lastmod;
					if(addrec.data.entry.match(/^[0-9]+$/)){
						addrec.data.entry = Date.parseDate(parseInt(addrec.data.entry), "U");
					}else if(addrec.data.entry.match(/^[0-9]{4}\-[0-9]{2}\-[0-9]{2}T/)){
						if(addrec.data.entry.match(/^[0-9]{4}\-[0-9]{2}\-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}$/)) addrec.data.entry+='Z';
						addrec.data.entry = Date.parseDate(addrec.data.entry, "c");
					}
					addrec.set('zoom',false);
					if(!addrec.get('color')) addrec.set('color','#'+prm_record.data.color_rgb);

					if(!addrec.data.tg_id || addrec.data.tg_id == ""){
						addrec.set('tg_id',tg_id);
					}else if(addrec.data.tg_id != tg_id){
						conv_flag = true;
					}
					if(!addrec.data.version || addrec.data.version == "") addrec.set('version',tgi_version);

					addrec.commit(true);
					addrec.endEdit();
					addrecs.push(addrec);
				}
				store.add(addrecs);
				clearConvertIdList(addrecs);
				getConvertIdList(addrecs,store);

				if(conv_flag){

					var btn = Ext.getCmp('bp3d-home-group-btn');
					if(btn && btn.rendered){
						if(store.getCount()>0 && store.find('tg_id', new RegExp('^'+tg_id+'$')) == -1){
							btn.enable();
							btn.el.dom.setAttribute('tg_id',addrecs[0].data.tg_id);
						}else{
							btn.disable();
						}
					}

				}

			}catch(e){
				_dump("ag_sample_dataview():"+e);
			}
		}
		setImageWindowSize();
	}

}

/////////////////////////////////////////////////////////////////////////////////////////////////////
// anatomography_js.cgiから移植（ここまで）
/////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////
// ag_annotation_js.cgiから移植（ここから）
/////////////////////////////////////////////////////////////////////////////////////////////////////

function click_locale(){
	if(gParams.lng == "ja"){
		gParams.lng = "en";
	}else{
		gParams.lng = "ja";
	}
	Cookies.set('ag_annotation.locale',gParams.lng);
//	location.reload(true);
	try{
		var params = Ext.urlDecode(window.location.search.substring(1));
	}catch(e){alert("3:"+e);}
	params.lng = gParams.lng;
	location.search = Ext.urlEncode(params);
}

function getActivePartsList(){
	var partslist = null;
	var contents_tabs = Ext.getCmp('contents-tab-panel');
	if(contents_tabs){
		if(contents_tabs.getActiveTab().id == 'contents-tab-bodyparts-panel'){
			partslist = Ext.getCmp('control-tab-partslist-panel');
		}else if(contents_tabs.getActiveTab().id == 'contents-tab-anatomography-panel'){
			partslist = Ext.getCmp('ag-parts-gridpanel');
		}
	}
	return partslist;
};

/////////////////////////////////////////////////////////////////////////////////////////////////////
// ag_annotation_js.cgiから移植（ここまで）
/////////////////////////////////////////////////////////////////////////////////////////////////////


var versionListTpl = new Ext.XTemplate(
	'<table style="width:100%;border-spacing: 2px 0;">',
	'<thead style="background:#f0f0f0;"><tr>',
	'<th nowrap style="font-weight:bold;padding-right:10px;">'+ag_lang.DATA_VERSION+'</th>',
	'<th nowrap style="font-weight:bold;padding-right:10px;">'+ag_lang.OBJECTS_SET+'</th>',
	'<th nowrap style="font-weight:bold;padding-right:10px;">'+ag_lang.TREE_VERSION+'</th>',
	'<th nowrap style="font-weight:bold;padding-right:10px;">'+ag_lang.PART_OF_RELATION+'</th>',
	'<th nowrap style="font-weight:bold;">'+ag_lang.PART_OF_RELATION_BP3D+'</th>',
	'</tr></thead>',
	'<tbody>',
	'<tpl for="."><tr class="x-combo-list-item">',
		'<td style="padding-right:10px;">{tgi_name}</td>',
		'<td style="padding-right:10px;">{tgi_objects_set}</td>',
		'<td style="padding-right:10px;">{tgi_tree_version}</td>',
		'<td style="padding-right:10px;">{tgi_part_of_relation}</td>',
		'<td style="">{tgi_part_of_relation_bp3d}</td>',
	'</tr></tpl>',
	'</tbody>',
	'</table>'
//	,'<div style="background:#f0f0f0;border-top:1px solid #ddd;margin-top:2px;padding:0 2px;">',
//	'<label id="bp3-version-information" style="font-size:10px;color:#000000;">'+ag_lang.VERSION_INFORMATION+'</label>',
//	'</div>'
);


// /bp3d/ag-in-service/htdocs/ag_common_js.cgiより自動生成
var gCOMMON_TPAP;
var gSelNode = null;

var model2tg;
var tg2model;
var version2tg;
var latestversion;
var cgipath = {"calcRotAxis":"API/calcRotAxis","focusClip":"API/focusClip","globalPin":{"pin":{"auth":"API/globalpin/pin/auth","search":"API/globalpin/pin/search","adding":"API/globalpin/pin/post","get":"API/globalpin/pin/get","delete":"API/globalpin/pin/remove","update":"API/globalpin/pin/update","getlist":"API/globalpin/pin/getlist"},"group":{"link":"API/globalpin/group/link","getattr":"API/globalpin/group/getattr","search":"API/globalpin/group/search","getlist":"API/globalpin/group/getlist","auth":"API/globalpin/group/auth","unlink":"API/globalpin/group/unlink","adding":"API/globalpin/group/post","delete":"API/globalpin/group/remove","get":"API/globalpin/group/get","update":"API/globalpin/group/update"}},"pick":"API/pick","focus":"API/focus","print":"API/print","image":"API/image","pointSearch":"API/pointSearch","map":"API/map","clip":"API/clip","point":"API/point","animation":"API/animation"};
var glb_us_state = {};
var glb_us_keymap = [];
//glb_us_keymap.length = 0;
if(glb_us_keymap.length==0){
	glb_us_keymap = [
	{
		'order': 2,
		'key'  : 'F9',
		'code' : Ext.EventObject.F9,
		'stop' : true,
		'cmd'  : 'ag-command-menu-image-move-focus-center'
	},{
		'order': 3,
		'key'  : 'F10',
		'code' : Ext.EventObject.F10,
		'stop' : true,
		'cmd'  : 'ag-command-menu-image-move-focus-zoom'
	},{
		'order': 4,
		'key'  : 'UP',
		'code' : Ext.EventObject.UP,
		'shift': true,
		'stop' : true,
		'cmd'  : 'ag-command-menu-image-move-up'
	},{
		'order': 5,
		'key'  : 'DOWN',
		'code' : Ext.EventObject.DOWN,
		'shift': true,
		'stop' : true,
		'cmd'  : 'ag-command-menu-image-move-down'
	},{
		'order': 6,
		'key'  : 'LEFT',
		'code' : Ext.EventObject.LEFT,
		'shift': true,
		'stop' : true,
		'cmd'  : 'ag-command-menu-image-move-left'
	},{
		'order': 7,
		'key'  : 'RIGHT',
		'code' : Ext.EventObject.RIGHT,
		'shift': true,
		'stop' : true,
		'cmd'  : 'ag-command-menu-image-move-right'
	},{
		'order': 8,
		'key'  : 'UP',
		'code' : Ext.EventObject.UP,
		'ctrl' : true,
		'stop' : true,
		'cmd'  : 'ag-command-menu-image-rotation-up'
	},{
		'order': 9,
		'key'  : 'DOWN',
		'code' : Ext.EventObject.DOWN,
		'ctrl' : true,
		'stop' : true,
		'cmd'  : 'ag-command-menu-image-rotation-down'
	},{
		'order': 10,
		'key'  : 'LEFT',
		'code' : Ext.EventObject.LEFT,
		'ctrl' : true,
		'stop' : true,
		'cmd'  : 'ag-command-menu-image-rotation-left'
	},{
		'order': 11,
		'key'  : 'RIGHT',
		'code' : Ext.EventObject.RIGHT,
		'ctrl' : true,
		'stop' : true,
		'cmd'  : 'ag-command-menu-image-rotation-right'
	},{
		'order': 12,
		'key'  : 'UP',
		'code' : Ext.EventObject.UP,
		'alt'  : true,
		'stop' : true,
		'cmd'  : 'ag-command-menu-image-zoom-up'
	},{
		'order': 13,
		'key'  : 'DOWN',
		'code' : Ext.EventObject.DOWN,
		'alt'  : true,
		'stop' : true,
		'cmd'  : 'ag-command-menu-image-zoom-down'
	}];
	for(var i=0;i<glb_us_keymap.length;i++){
		glb_us_keymap[i].order = i+1;
	}
}

var ag_parts_store;
var ag_param_store_fields = ['version', 'method', 'viewpoint', 'rotate_h', 'rotate_v', 'image_w', 'image_h', 'bg_rgb', 'bg_transparent', 'autoscalar_f', 'scalar_max', 'scalar_min', 'colorbar_f', 'heatmap_f', 'drawsort_f', 'mov_len', 'mov_fps', 'zoom', 'move_x', 'move_y', 'move_z', 'clip_type', 'clip_depth', 'clip_paramA', 'clip_paramB', 'clip_paramC', 'clip_paramD', 'clip_method', 'clipped_cameraX', 'clipped_cameraY', 'clipped_cameraZ', 'clipped_targetX', 'clipped_targetY', 'clipped_targetZ', 'clipped_upVecX', 'clipped_upVecY', 'clipped_upVecZ', 'grid', 'grid_len', 'grid_color', 'color_rgb', 'coord', 'point_color_rgb', 'point_label', 'point_desc', 'point_pin_line', 'point_point_line', 'point_sphere'];
var ag_param_store_data = [
	'09011601',	// version
	'I',				// method
	'C',				// viewpoint
	0,					// rotate_h
	0,					// rotate_v
	400,				// image_w
	400,				// image_h
	'FFFFFF',		// bg_rgb
	NaN,				// bg_transparent
	'1',				// autoscalar_f
	NaN,				// scalar_max
	NaN,				// scalar_min
	'0',				// colorbar_f
	'0',				// heatmap_f
	'0',				// drawsort_f
	60,					// mov_len
	60,					// mov_fps
	0,					// zoom
	0,					// move_x
	0,					// move_y
	0,					// move_z
	'N',				// clip_type
	NaN,				// clip_depth
	NaN,				// clip_paramA
	NaN,				// clip_paramB
	NaN,				// clip_paramC
	NaN,				// clip_paramD
	'NS',				// clip_method
	0,					// clipped_cameraX
	0,					// clipped_cameraY
	0,					// clipped_cameraZ
	0,					// clipped_targetX
	0,					// clipped_targetY
	0,					// clipped_targetZ
	0,					// clipped_upVecX
	0,					// clipped_upVecY
	0,					// clipped_upVecZ
	'0',				// grid
	10,					// grid_len
	'008000',		// grid_color
	'f0d2a0',		// color_rgb
	'bp3d',			// coordinate_system
	'0000ff',		// point_color_rgb
	'FMA',			// point_label
	1,					// point_desc
	0,					// point_pin_line
	0,					// point_point_line
	'SM'				//point_sphere
];
var ag_param_store = new Ext.data.SimpleStore ({
	fields : ag_param_store_fields,
	data : [ag_param_store_data]
});
var anatomoImgDrag = false;
var anatomoImgDragStartX = 0;
var anatomoImgDragStartY = 0;
var anatomoPickMode = false;
var anatomoPointMode = false;
var anatomoImgEvent = false;
var anatomoMoveMode = false;
var anatomoClipDepthMode = false;
var anatomoDragModeMove = false;
var anatomoUpdateZoomValue = false;
var anatomoUpdateClipValue = false;

var DEF_ZOOM_MAX = 100;

var YRangeFromServer = null;
var glb_rotateH = 0;
var glb_rotateV = 0;
var glb_zoom_slider = 1;
var glb_zoom_timer = null;
var glb_zoom_xy = null;
var glb_zoom_delta = 0;
var glb_mousedown_timer = null;
var glb_mousedown_toggle = false;

//Pick時にパーツのＩＤを設定される
var glb_point_f_id = null;
var glb_point_color = 'FF0000';
var glb_point_pallet_index = null;
var glb_point_transactionId = null;

function remove_point_f_id(store,record,index){
//	if(record.get('f_id')==glb_point_f_id || store.getCount()==0) clear_point_f_id();
	clear_point_f_id();
}
function set_point_f_id(f_id){
	if(Ext.isEmpty(f_id)){
		clear_point_f_id();
	}else{
		glb_point_f_id = f_id;
		ag_parts_gridpanel.getStore().on('update',remove_point_f_id);
		ag_parts_gridpanel.getStore().on('remove',remove_point_f_id);
	}
}
function get_point_f_id(){
	return glb_point_f_id;
}
function clear_point_f_id(){
	if(glb_point_f_id){
		glb_point_f_id = null;
		_loadAnatomo(makeAnatomoPrm(),true);
	}
	ag_parts_gridpanel.getStore().un('update',remove_point_f_id);
	ag_parts_gridpanel.getStore().un('remove',remove_point_f_id);
}


function set_point_color(color){
	glb_point_color = color;
}
function get_point_color(){
	return glb_point_color;
}

var init_bp3d_params = {};
//var init_bp3d_md_id;
//var init_bp3d_mv_id;
//var init_bp3d_mr_id;

var init_tree_group;
var init_bp3d_version;

//PIN関連の初期値
var init_anatomo_pin_number_draw = true;
//var init_anatomo_pin_description_draw = false;
var init_anatomo_pin_description_draw = true;
var init_anatomo_pin_description_line = 0;
//var init_anatomo_pin_shape = 'SC';
var init_anatomo_pin_shape = 'PL';

var init_anatomography_image_comment_draw = false;
var init_anatomography_image_comment_title = '';
var init_anatomography_image_comment_legend = '';
var init_anatomography_image_comment_author = '';

//_dump("init_tree_group=["+init_tree_group+"]");
//_dump("init_bp3d_version=["+init_bp3d_version+"]");

var _glb_no_clip = false;

var glb_anatomo_image_url = '';
var glb_anatomo_image_still = '';
var glb_anatomo_image_rotate = '';
var glb_anatomo_editor_url = '';
//var glb_anatomo_embedded_url = '';

var glb_transactionId = null;
var glb_time = null;

var m_ag = {
	initCameraPos: new AGVec3d(2.7979888916016167, -998.4280435445771, 809.7306805551052),
	cameraPos: new AGVec3d(2.7979888916016167, -998.4280435445771, 809.7306805551052),
	initTargetPos: new AGVec3d(2.7979888916015625, -110.37168800830841, 809.7306805551052),
	targetPos: new AGVec3d(2.7979888916015625, -110.37168800830841, 809.7306805551052),
	initUpVec: new AGVec3d(0, 0, 1),
	upVec: new AGVec3d(0, 0, 1),
	initDistance: 0,
	distance: 0,
	initLongitude: 0,
	longitude: 0,
	initLatitude: 0,
	latitude: 0,
	orthoYRange: 1800,
	initOrthoYRange: 1800,
	nearClip: 1,
	farClip: 10000,
	epsilon: 0.0000001,
	PI: 3.141592653589793238462643383279,
	Camera_YRange_Min: 1.0
};


var  timeoutAnatomoID = null;
function stopUpdateAnatomo(){
	if(timeoutAnatomoID) clearTimeout(timeoutAnatomoID);
	timeoutAnatomoID=null;
}

function updateAnatomo () {
//	console.log("updateAnatomo()");
	if(Ext.isEmpty(gParams.tp_md) || gParams.tp_md != 1){
		var contentsPanel = Ext.getCmp("contents-tab-panel");
		if (!contentsPanel) {
			return;
		}
		var activePanel;
		if(contentsPanel.getXType()=='tabpanel'){
			activePanel = contentsPanel.getActiveTab();
		}else if(contentsPanel.getXType()=='panel'){
			activePanel = contentsPanel.getLayout().activeItem;
		}
		if (!activePanel || !activePanel.id || (activePanel.id != "contents-tab-anatomography-panel")) {
			return;
		}
	}
	stopUpdateAnatomo();
	timeoutAnatomoID = setTimeout(function(){ _updateAnatomo();stopUpdateAnatomo(); },100);
}

var  _timeoutAnatomoID = null;

function _loadAnatomo (params,loadMask) {
//	console.log("_loadAnatomo()");
	if(loadMask){
		try{
			var comp = Ext.getCmp('anatomography-image');
			if(Ext.isEmpty(comp.loadMask)) comp.loadMask = new Ext.LoadMask(comp.body,{removeMask:false,  msg:'REDRAWING...'});
			comp.loadMask.show();
		}catch(e){_dump(e);}
	}

	var jsonStr = null;
	try{
		jsonStr = ag_extensions.toJSON.URI2JSON(params,{
			toString:true,
			mapPin:false,
			callback:undefined
		});
	}catch(e){jsonStr = null;}

	glb_time = (new Date()).getTime();

	var img = Ext.getDom('ag_img');

	var href = '';
	if(location.href.match(/^(.+\/)/)){
		href = RegExp.$1;
	}
	href += cgipath.image + "?" + (jsonStr ? encodeURIComponent(jsonStr) : params);
	if(href.length<=2083){
		img.src = cgipath.image+"?" + (jsonStr ? encodeURIComponent(jsonStr) : params);
	}else{
		var params_obj = Ext.urlDecode(params);
		if(!Ext.isEmpty(glb_transactionId)){
//			console.log("_loadAnatomo():abort()");
//			console.log(glb_transactionId);
//			console.log("Ext.Ajax.abort():["+Ext.Ajax.isLoading(glb_transactionId)+"]");
			if(Ext.Ajax.isLoading(glb_transactionId)) Ext.Ajax.abort(glb_transactionId);
		}
		glb_transactionId = Ext.Ajax.request({
			url     : cgipath.image,
			method  : 'POST',
			params  : jsonStr ? jsonStr : params,
			success : function(conn,response,options){
				glb_transactionId = null;
				try{var results = Ext.util.JSON.decode(conn.responseText);}catch(e){}
				try{
					var src;
					if(results && results.data){
						if(params_obj.dt != results.dt) return;
						src = results.data;
					}else{
						src = conn.responseText;
					}
					if(src && src != img.src){
						img.src = src;
					}else{
						load_ag_img();
					}
				}catch(e){
					alert(e);
				}
//				console.log("_loadAnatomo():success()");
			},
			failure : function(conn,response,options){
				glb_transactionId = null;
				try{var results = Ext.util.JSON.decode(conn.responseText);}catch(e){}
				var msg = '[';
				if(results && results.msg){
					msg += results.msg+' ]';
				}else{
					msg += conn.status+" "+conn.statusText+' ]';
				}
				var rotateAuto = false;
				try{rotateAuto = Ext.getCmp('ag-command-image-controls-rotateAuto').getValue();}catch(e){}
				if(conn.status==400) img.src = Ext.BLANK_IMAGE_URL;
//				console.log("_loadAnatomo():failure():"+msg);
//				console.log(conn);
//				console.log(response);
//				console.log(options);
				Ext.Msg.show({
					title:' ',
					buttons: Ext.Msg.OK,
					closable: false,
					icon: Ext.Msg.ERROR,
					modal : true,
					msg : msg
				});
			},
			callback : function(options,success,response){
//				console.log("_loadAnatomo():callback()");
//				console.log(options);
//				console.log(success);
//				console.log(response);
			}
		});
//		console.log("_loadAnatomo():exec()");
//		console.log(glb_transactionId);
	}
}

function setImageTransformOrigin(aOrigin){
//_dump("setImageTransformOrigin():["+aOrigin+"]");
	if(Ext.isGecko){

		var img_org = Ext.getDom('ag_img');
		var img = Ext.getDom('ag_img_dummy');
		if(!img && img_org){
			img = img_org.ownerDocument.createElement('img');
			img.setAttribute('id','ag_img_dummy');
			img.style.position = 'absolute';
			img.style.display = 'none';
			img_org.parentNode.appendChild(img);
		}

		if(img){
			img.style.left = '0px';
			img.style.top = '0px';
			img.style.width = img_org.offsetWidth + 'px';
			img.style.height = img_org.offsetHeight + 'px';
			img.src = img_org.src;
			img.style.opacity = '1.0';

			img.style.MozTransformOrigin = aOrigin;
			img.style.webkitTransformOrigin = aOrigin;
			img.style.transformOrigin = aOrigin;

		}

	}else if(Ext.isChrome || Ext.isSafari){
		var img = Ext.getDom('ag_img');
		if(img){
			img.style.webkitTransformOrigin = aOrigin;
			img.style.transformOrigin = aOrigin;
		}
	}
}

function setImageTransform(aTransform,aDisplay){
//_dump("setImageTransform():["+aTransform+"]["+aDisplay+"]");
	if(Ext.isGecko){

		if(!aDisplay) aDisplay = false;
		var img_org = Ext.getDom('ag_img');
		var img = Ext.getDom('ag_img_dummy');
		if(!img && img_org){
			img = img_org.ownerDocument.createElement('img');
			img.setAttribute('id','ag_img_dummy');
			img.style.position = 'absolute';
			img_org.parentNode.appendChild(img);
		}

		if(img){
			img.style.left = '0px';
			img.style.top = '0px';
			img.style.width = img_org.offsetWidth + 'px';
			img.style.height = img_org.offsetHeight + 'px';
			img.src = img_org.src;
			img.style.opacity = '1.0';
			img.style.display = aDisplay ? '' : 'none';

			img.style.MozTransform = aTransform;
			img.style.webkitTransform = aTransform;
			img.style.transform = aTransform;

			if(img_org){
				if(aDisplay){
					img_org.style.opacity = '0.0';
				}else{
					img_org.style.opacity = '1.0';
				}
			}
		}

	}else if(Ext.isChrome || Ext.isSafari){
		var img = Ext.getDom('ag_img');
		if(img){
			img.style.webkitTransform = aTransform;
			img.style.transform = aTransform;
		}
	}
}

function anatomoImgMouseWheel(e,t) {
//_dump("anatomoImgMouseWheel():"+t.id);
	if(!t || (t.id!='ag_img' && t.id!='ag_img_dummy')) return;
	try {
		e.stopPropagation();
		e.preventDefault();
	} catch (ex) {
		e.returnValue = false;
		e.cancelBubble = true;
	}


	try{
		var delta = e.getWheelDelta();
		if(delta){
			if(anatomoClipDepthMode){
				var slider = Ext.getCmp('anatomo-clip-slider');
				if(slider && slider.rendered) slider.setValue(slider.getValue() + delta);
			}else{
				var slider = Ext.getCmp('zoom-slider');
				if(slider && slider.rendered){
					glb_zoom_delta += delta;
					if(Math.abs(Math.round(glb_zoom_delta))>=1){

						var slider_value = slider.getValue();
						if(slider_value+glb_zoom_delta>=0 && slider_value+glb_zoom_delta<DEF_ZOOM_MAX){
							var val;
							if(Ext.isGecko){
								val = (Math.round(glb_zoom_delta) / 10);
								if(val>=0){
									val += (val*0.5);
								}else{
									val += (val*0.3);
								}
								val += 1;
							}else if(Ext.isChrome || Ext.isSafari){
								val = (Math.round(glb_zoom_delta) / 10);
								val += 1;
//_dump("anatomoImgMouseWheel():val=["+val+"]");
							}
							var elemImg = Ext.get('ag_img');
							var xyImg = elemImg.getXY();
							var sizeImg = elemImg.getSize();
							var mouseX = e.xy[0] - glbImgXY[0];
							var mouseY = e.xy[1] - glbImgXY[1];

//_dump("anatomoImgMouseWheel():e.xy=["+e.xy[0]+"]["+e.xy[1]+"]["+xyImg[0]+"]["+xyImg[1]+"]["+elemImg.getLeft()+"]["+elemImg.getLeft(true)+"]["+sizeImg.width+"]["+sizeImg.height+"]");

							setImageTransformOrigin(mouseX+'px '+mouseY+'px');
							setImageTransform('scale('+val+')',true);

//_dump("anatomoImgMouseWheel():slider.getValue()=["+slider.getValue()+"]");
							if(glb_zoom_timer) clearTimeout(glb_zoom_timer);
							glb_zoom_timer = setTimeout(function(){
								glb_zoom_xy = [];
								glb_zoom_xy[0] = e.xy[0];
								glb_zoom_xy[1] = e.xy[1];
								slider.setValue(slider.getValue() + glb_zoom_delta);
								glb_zoom_delta = 0;
								glb_zoom_timer = null;
							},500);
						}
					}
				}else{
					if(Math.round(glb_zoom_slider + glb_zoom_delta + delta)>=0){
						glb_zoom_delta += delta;
						glb_zoom_slider = glb_zoom_slider + glb_zoom_delta;

						glb_zoom_xy = [];
						glb_zoom_xy[0] = e.xy[0];
						glb_zoom_xy[1] = e.xy[1];

						if(glb_zoom_xy){
							var elemImg = Ext.get('ag_img');
							var xyImg = elemImg.getXY();

							var mouseX = glb_zoom_xy[0] - xyImg[0];
							var mouseY = glb_zoom_xy[1] - xyImg[1];

							var centerX = parseInt((ag_param_store.getAt(0).data.image_w /2) -  mouseX);
							var centerY = parseInt((ag_param_store.getAt(0).data.image_h /2) -  mouseY);

							setCameraAndTarget(m_ag.cameraPos, m_ag.targetPos, m_ag.upVec, true);
							moveTargetByMouseForOrtho(ag_param_store.getAt(0).data.image_h, centerX / parseFloat(Math.pow(2, ag_param_store.getAt(0).data.zoom)), centerY / parseFloat(Math.pow(2, ag_param_store.getAt(0).data.zoom)));
						}

						var prm_record = ag_param_store.getAt(0);
						prm_record.beginEdit();
						prm_record.set('zoom', glb_zoom_slider / 5);
						prm_record.endEdit();
						prm_record.commit();

						if(glb_zoom_xy){

							var elemImg = Ext.get('ag_img');
							var xyImg = elemImg.getXY();

							var mouseX = glb_zoom_xy[0] - xyImg[0];
							var mouseY = glb_zoom_xy[1] - xyImg[1];

							var moveX = parseInt(mouseX - (ag_param_store.getAt(0).data.image_w /2));
							var moveY = parseInt(mouseY - (ag_param_store.getAt(0).data.image_h /2));

							setCameraAndTarget(m_ag.cameraPos, m_ag.targetPos, m_ag.upVec, true);
							moveTargetByMouseForOrtho(ag_param_store.getAt(0).data.image_h, moveX / parseFloat(Math.pow(2, ag_param_store.getAt(0).data.zoom)), moveY / parseFloat(Math.pow(2, ag_param_store.getAt(0).data.zoom)));

						}
						updateAnatomo();
						updateClipImage();

						if(glb_zoom_xy) glb_zoom_xy = null;
						glb_zoom_delta = 0;
					}
				}
			}
		}
		e.stopEvent();
	}catch(e){
		_dump("anatomoImgMouseWheel():"+e);
	}
}

function anatomoIsPickMode () {
	return anatomoPickMode;
}

function anatomoIsPointMode () {
	return anatomoPointMode;
}

function anatomoImgMouseOut(e) {
}

function anatomoImgMouseDown(e,t) {
//_dump("anatomoImgMouseDown():"+t.id);
_dump("anatomoImgMouseDown():e.button=["+e.button+"]:e.which=["+e.which+"]:e.ctrlKey=["+e.ctrlKey+"]");
	if(!t || t.id!='ag_img') return;
//	if(e.button == 2) return;
	if(e.button != 0) return;
	try {
		e.stopPropagation();
		e.preventDefault();
	} catch (ex) {
		e.returnValue = false;
		e.cancelBubble = true;
	}
	anatomoImgDrag = true;
	anatomoImgDragStartX = e.xy[0];
	anatomoImgDragStartY = e.xy[1];
	if(e.ctrlKey || e.button == 1){
		anatomoMoveMode = true;
	} else {
		anatomoMoveMode = false;
	}
_dump("anatomoImgMouseDown():anatomoImgDrag=["+anatomoImgDrag+"]:anatomoMoveMode=["+anatomoMoveMode+"]");

	if(anatomoImgDrag){
		var rotateAuto = false;
		try{rotateAuto = Ext.getCmp('ag-command-image-controls-rotateAuto').getValue();}catch(e){}
		if(rotateAuto){
		}
	}

	if(anatomoDragModeMove){
		document.body.style.cursor = 'move';
	}else{
		document.body.style.cursor = 'default';
	}
	if(glb_mousedown_timer) clearTimeout(glb_mousedown_timer);
	if(e.button == 0){
		glb_mousedown_timer = setTimeout(function(){
			glb_mousedown_timer = null;

			if(anatomoDragModeMove){
				document.body.style.cursor = 'move';
			}else{
				document.body.style.cursor = 'default';
			}
			glb_mousedown_toggle = true;

			var target = (anatomoDragModeMove?Ext.get('ag-command-btn-rotate'):Ext.get('ag-command-btn-move'));
			if(!target) return;
			ag_command_toggle_exec(target);
//		},400);
		},1000); //2011-09-07
	}
}

function anatomoImgMouseMove(e) {

	if(glb_mousedown_timer){
		clearTimeout(glb_mousedown_timer);
		glb_mousedown_timer = null;
	}

	if (anatomoImgDrag) {
		try {
			e.stopPropagation();
			e.preventDefault();
		} catch (ex) {
			e.returnValue = false;
			e.cancelBubble = true;
		}
		var rotateAuto = false;
		try{rotateAuto = Ext.getCmp('ag-command-image-controls-rotateAuto').getValue();}catch(e){}
		if(rotateAuto) return;
		var dX = e.xy[0] - anatomoImgDragStartX;
		var dY = e.xy[1] - anatomoImgDragStartY;
		if(anatomoMoveMode || anatomoDragModeMove) {
			document.body.style.cursor = 'move';
			var rotImgDiv = Ext.getDom("rotImgDiv");
			rotImgDiv.style.visibility = "hidden";

			setImageTransform('scale(1) translate(' + dX + 'px, ' + dY + 'px)',true);

		}else{

			var prm_record = ag_param_store.getAt(0);
			deg = (isNaN(prm_record.data.rotate_h))?0:prm_record.data.rotate_h;


			document.body.style.cursor = 'default';
			// rotateH
			var degH = Math.round(getRotateHorizontalValue()/15)*15;
			degH = degH - 15 * Math.floor(dX / 20);
			while (degH >= 360) {
				degH = degH - 360;
			}
			while (degH < 0) {
				degH = degH + 360;
			}
			// rotateV
			var degV = Math.round(getRotateVerticalValue()/15)*15;
			degV = degV + 15 * Math.floor(dY / 20);
			while (degV >= 360) {
				degV = degV - 360;
			}
			while (degV < 0) {
				degV = degV + 360;
			}

			degH = degH.toString();
			degV = degV.toString();

			var rotateHSpan = Ext.getDom("rotImgDivRotateH");
			if(rotateHSpan){
				rotateHSpan.innerHTML = "H:"+degH;
			}

			var rotateVSpan = Ext.getDom("rotImgDivRotateV");
			if(rotateVSpan){
				rotateVSpan.innerHTML = "V:"+degV;
			}

			var rotImgDiv = Ext.getDom("rotImgDiv");
			rotImgDiv.style.visibility = "visible";
			rotImgDiv.style.left = (parseInt(e.xy[0]) + 10) + "px";
			rotImgDiv.style.top = (parseInt(e.xy[1]) + 10) + "px";
			rotImgDiv.style.backgroundPosition = degH /15 * (-80) + "px " + degV / 15 * (-80) + "px";
		}
	}
}

function anatomoImgMouseUp(e) {
	if(glb_mousedown_timer){
		clearTimeout(glb_mousedown_timer);
		glb_mousedown_timer = null;
	}

	document.body.style.cursor = 'default';

	var dX = e.xy[0] - anatomoImgDragStartX;
	var dY = e.xy[1] - anatomoImgDragStartY;

	var bp3d_home_group_btn_disabled = true;
	try{bp3d_home_group_btn_disabled = Ext.getCmp('bp3d-home-group-btn').disabled;}catch(e){}

	if(bp3d_home_group_btn_disabled && anatomoIsPickMode() && !dX && !dY){
		var imgX = 0;
		var imgY = 0;
		if (e.browserEvent.offsetX) {
			// IE
			imgX = e.browserEvent.offsetX;
			imgY = e.browserEvent.offsetY;
		} else {
			// FF
			var img = Ext.getDom('ag_img');
			imgX = e.browserEvent.layerX - img.offsetLeft;
			imgY = e.browserEvent.layerY - img.offsetTop;
		}
		try {
			Ext.getCmp('anatomography-pin-grid-panel').loadMask.show();
			var params = Ext.urlDecode(makeAnatomoPrm(null,1),true);
			params.px = imgX;
			params.py = imgY;

			var jsonStr = null;
			try{
				jsonStr = ag_extensions.toJSON.URI2JSON(params,{
					toString:true,
					mapPin:false,
					callback:undefined
				});
			}catch(e){jsonStr = null;}

			var urlStr = cgipath.pick;
			Ext.Ajax.request({
				url     : urlStr,
				method  : 'POST',
				params  : jsonStr ? jsonStr : params,
				success : function (response, options) {
					try{
						var pickDataAry = [];
						var obj = Ext.util.JSON.decode(response.responseText);
//_dump(cgipath.pick+":success():obj=["+(typeof obj)+"]");
						pickDataAry = obj.Pin;
//_dump(cgipath.pick+":success():pickDataAry=["+(typeof pickDataAry)+"]");
						var pickDepth = parseInt(Ext.getCmp('anatomo_comment_pick_depth').getValue());
						var pin_no = ag_comment_store.getCount();
						var newRecord = Ext.data.Record.create(ag_comment_store_fields);
						var addrecs = [];
						for (var i=0;i<pickDataAry.length;i++){
							if(i == pickDepth) break;
							var pickData = pickDataAry[i];
//_dump(cgipath.pick+":success():pickData.PinPartID=["+(typeof pickData.PinPartID)+"]["+(pickData.PinPartID)+"]");
							if(pickData.PinPartID.match(/^clipPlaneRect_(.+)$/)) pickData.PinPartID = RegExp.$1;
							var addrec = new newRecord({
								no:   ++pin_no,
								oid:   pickData.PinPartID,
								organ: pickData.PinPartName,
								x3d:   pickData.PinX,
								y3d:   pickData.PinY,
								z3d:   pickData.PinZ,
								avx3d: pickData.PinArrowVectorX,
								avy3d: pickData.PinArrowVectorY,
								avz3d: pickData.PinArrowVectorZ,
								uvx3d: pickData.PinUpVectorX,
								uvy3d: pickData.PinUpVectorY,
								uvz3d: pickData.PinUpVectorZ,
								color: '0000FF',
								comment:'',
								coord: pickData.PinCoordinateSystemName
							});
/*
							addrec.beginEdit();
							addrec.set("no",   ++pin_no);
							addrec.set("oid",   pickData.PinPartID);
							addrec.set("organ", '');
							addrec.set("x3d",   pickData.PinX);
							addrec.set("y3d",   pickData.PinY);
							addrec.set("z3d",   pickData.PinZ);
							addrec.set("avx3d", pickData.PinArrowVectorX);
							addrec.set("avy3d", pickData.PinArrowVectorY);
							addrec.set("avz3d", pickData.PinArrowVectorZ);
							addrec.set("uvx3d", pickData.PinUpVectorX);
							addrec.set("uvy3d", pickData.PinUpVectorY);
							addrec.set("uvz3d", pickData.PinUpVectorZ);
							addrec.set("color", '0000FF');
							addrec.set("comment",'');
							addrec.set("coord", pickData.PinCoordinateSystemName);
							addrec.commit(true);
							addrec.endEdit();
*/
							addrecs.push(addrec);

						}
						if(addrecs.length>0){
							ag_comment_store.add(addrecs);
						}else{
							if(window.ag_extensions && window.ag_extensions.pick_point) window.ag_extensions.pick_point.hide();
						}

					}catch(e){_dump(e);}
					Ext.getCmp('anatomography-pin-grid-panel').loadMask.hide();
				},
				failure: function (response, options) {
					alert(cgipath.pick+":failure():"+response.statusText);
					Ext.getCmp('anatomography-pin-grid-panel').loadMask.hide();
				}
			});
		} catch (ex) {
			alert(ex.toString());
		}
	}

	//Pick or Pallet タブがアクティブの場合
	if(
		!anatomoIsPickMode() && !dX && !dY && Ext.getCmp('anatomo_comment_point_button') &&
		ag_comment_tabpanel && ag_comment_tabpanel.rendered &&

		(
			(
				window.ag_extensions &&
				window.ag_extensions.pallet_element &&
				(ag_comment_tabpanel.getActiveTab().id == window.ag_extensions.pallet_element.getId() || ag_comment_tabpanel.getActiveTab().id == 'anatomography-point-grid-panel' || ag_comment_tabpanel.getActiveTab().id == 'ag-parts-gridpanel')
			)
			||
			(
				(!window.ag_extensions || !window.ag_extensions.pallet_element) &&
				(ag_comment_tabpanel.getActiveTab().id == 'anatomography-point-grid-panel' || ag_comment_tabpanel.getActiveTab().id == 'ag-parts-gridpanel')
			)
		)
	) {


		if(ag_comment_tabpanel.getActiveTab().id == 'ag-parts-gridpanel'){
			if(window.ag_extensions && window.ag_extensions.pallet_element){
				window.ag_extensions.pallet_element.setActiveTab();
			}else{
				ag_comment_tabpanel.setActiveTab('anatomography-point-grid-panel');
			}
		}
		Ext.getCmp('anatomo_comment_point_button').toggle(false);
		Ext.getCmp('anatomo_comment_point_button').disable();
		var imgX = 0;
		var imgY = 0;
		if (e.browserEvent.offsetX) {
			// IE
			imgX = e.browserEvent.offsetX;
			imgY = e.browserEvent.offsetY;
		} else {
			// FF
			var img = Ext.getDom('ag_img');
			imgX = e.browserEvent.layerX - img.offsetLeft;
			imgY = e.browserEvent.layerY - img.offsetTop;
		}
		try {
			if(window.ag_extensions && window.ag_extensions.pallet_element){
				if(ag_comment_tabpanel.getActiveTab().id == window.ag_extensions.pallet_element.getId()) window.ag_extensions.pallet_element.showLoadMask();
			}
			if(ag_comment_tabpanel.getActiveTab().id == 'anatomography-point-grid-panel') Ext.getCmp('anatomography-point-editorgrid-panel').loadMask.show();

			Ext.getCmp('ag-parts-gridpanel').loadMask.show();
			var urlStr = cgipath.point;
			var params = Ext.urlDecode(makeAnatomoPrm(null,1),true);
			params.px = imgX;
			params.py = imgY;

			var jsonStr = null;
			try{
				jsonStr = ag_extensions.toJSON.URI2JSON(params,{
					toString:true,
					mapPin:false,
					callback:undefined
				});
			}catch(e){jsonStr = null;}

			if(glb_point_transactionId){
				Ext.Ajax.abort(glb_point_transactionId);
			}

			glb_point_transactionId = Ext.Ajax.request({
				url    : urlStr,
				method : 'POST',
				params : jsonStr ? jsonStr : params,
				callback: function(options,success,response){
					glb_point_transactionId = null;
				},
				success: function (response, options) {
//					_dump(cgipath.point+":success():"+response.responseText);
//					_dump(cgipath.point+":success():"+ag_comment_tabpanel.getActiveTab().id);
					try{var pointData = Ext.util.JSON.decode(response.responseText);}catch(e){_dump(e);}
					if(Ext.isEmpty(pointData) || Ext.isEmpty(pointData.id)){
						Ext.getCmp('anatomography-point-editorgrid-panel').loadMask.hide();
						Ext.getCmp('ag-parts-gridpanel').loadMask.hide();
						clear_point_f_id();
						var loader = Ext.getCmp('anatomography-point-editorgrid-panel').getStore();
						loader.removeAll();
						loader.baseParams = {};
						var elem = Ext.getDom('ag-point-grid-content-route');
						if(elem) elem.innerHTML = '&nbsp;';

						if(window.ag_extensions){
							if(window.ag_extensions.pallet_element){
								window.ag_extensions.pallet_element.hideLoadMask();
								window.ag_extensions.pallet_element.selectPointElement(null);
							}
							if(window.ag_extensions.pick_point) window.ag_extensions.pick_point.hide();
						}
						return;
					}

					var f_id = pointData.id;
					try{
						var tx = parseInt(parseFloat(pointData.worldPosX)*1000)/1000;
						var ty = parseInt(parseFloat(pointData.worldPosY)*1000)/1000;
						var tz = parseInt(parseFloat(pointData.worldPosZ)*1000)/1000;

						var txCmp = Ext.getCmp('anatomography-point-grid-bbar-tx-text');
						var tyCmp = Ext.getCmp('anatomography-point-grid-bbar-ty-text');
						var tzCmp = Ext.getCmp('anatomography-point-grid-bbar-tz-text');
						var dxCmp = Ext.getCmp('ag-point-grid-footer-content-distance-x-text');
						var dyCmp = Ext.getCmp('ag-point-grid-footer-content-distance-y-text');
						var dzCmp = Ext.getCmp('ag-point-grid-footer-content-distance-z-text');
						var distanceCmp = Ext.getCmp('anatomography-point-grid-bbar-distance-text');

						var txP = txCmp.getValue();txP=(txP==''?'':parseFloat(txP));
						var tyP = tyCmp.getValue();tyP=(tyP==''?0:parseFloat(tyP));
						var tzP = tzCmp.getValue();tzP=(txP==''?0:parseFloat(tzP));

						if(!isNaN(tx)){
							txCmp.setValue(tx);
							tyCmp.setValue(ty);
							tzCmp.setValue(tz);
						}

						if(!isNaN(tx) && txP != ''){
							dxCmp.setValue(parseInt(parseFloat(txP-tx)*1000)/1000);
							dyCmp.setValue(parseInt(parseFloat(tyP-ty)*1000)/1000);
							dzCmp.setValue(parseInt(parseFloat(tzP-tz)*1000)/1000);

							var distance = parseInt(Math.sqrt(Math.pow(tx-txP,2)+Math.pow(ty-tyP,2)+Math.pow(tz-tzP,2))*1000)/1000;
							distanceCmp.setValue(distance);
						}else{
							dxCmp.setValue('');
							dyCmp.setValue('');
							dzCmp.setValue('');
							distanceCmp.setValue('');
						}

					}catch(e){}

					if(f_id.match(/^clipPlaneRect_(.+)$/)){
						f_id = RegExp.$1;
					}else if(f_id != ""){

					}else{
						Ext.getCmp('anatomo_comment_point_button').enable();

						var loader = Ext.getCmp('anatomography-point-editorgrid-panel').getStore();
						loader.removeAll();
						loader.baseParams = {};
						var elem = Ext.getDom('ag-point-grid-content-route');
						if(elem) elem.innerHTML = '&nbsp;';
						Ext.getCmp('anatomography-point-editorgrid-panel').loadMask.hide();
						Ext.getCmp('ag-parts-gridpanel').loadMask.hide();
						if(window.ag_extensions){
							if(window.ag_extensions.pallet_element){
								window.ag_extensions.pallet_element.hideLoadMask();
								window.ag_extensions.pallet_element.selectPointElement(null);
							}
							if(window.ag_extensions.pick_point) window.ag_extensions.pick_point.hide();
						}
						return;
					}

					if(window.ag_extensions && window.ag_extensions.pallet_element) window.ag_extensions.pallet_element.selectPointElement(f_id);
					if(get_point_f_id() == f_id){
						Ext.getCmp('anatomography-point-editorgrid-panel').loadMask.hide();
						Ext.getCmp('ag-parts-gridpanel').loadMask.hide();
						if(window.ag_extensions){
							if(window.ag_extensions.pallet_element) window.ag_extensions.pallet_element.hideLoadMask();
							if(window.ag_extensions.pick_point) window.ag_extensions.pick_point.hide();
						}
						return;
					}
					var loader = Ext.getCmp('anatomography-point-editorgrid-panel').getStore();
					loader.removeAll();
					loader.baseParams = {};
					var elem = Ext.getDom('ag-point-grid-content-route');
					if(elem) elem.innerHTML = '&nbsp;';


					if(get_point_f_id() != f_id){
						set_point_f_id(f_id);
						var params = makeAnatomoPrm();
						_loadAnatomo(params,true);
					}
					if(ag_comment_tabpanel.getActiveTab().id == 'anatomography-point-grid-panel'){

						var point_loader = null;
						var pallet_loader = null;

						point_loader = anatomography_point_conventional_root_store;
						var toggle_partof = Ext.getCmp('anatomo_comment_point_toggle_partof');
						if(toggle_partof && toggle_partof.rendered) toggle_partof.toggle(true);

						var cmp = Ext.getCmp('anatomo-tree-type-combo');
						if(cmp && cmp.rendered){
							var type = cmp.getValue();
							if(toggle_partof.pressed){
								if(type == '4'){
									point_loader = anatomography_point_partof_store;
								}else if(type == '3'){
									point_loader = anatomography_point_isa_store;
								}else if(type == '1'){
									point_loader = anatomography_point_conventional_root_store;
								}
							}else if(Ext.getCmp('anatomo_comment_point_toggle_haspart').pressed){
								if(type == '4'){
									point_loader = anatomography_point_haspart_store;
								}else if(type == '3'){
									point_loader = anatomography_point_hasmember_store;
								}else if(type == '1'){
									point_loader = anatomography_point_conventional_child_store;
								}
							}
						}
						pallet_loader = anatomography_pallet_point_conventional_root_store;
						var cmp = Ext.getCmp('bp3d-tree-type-combo-ag');
						if(cmp && cmp.rendered){
							var type = cmp.getValue();
							if(type == '4'){
								pallet_loader = anatomography_pallet_point_partof_store;
							}else if(type == '3'){
								pallet_loader = anatomography_pallet_point_isa_store;
							}else if(type == '1'){
								pallet_loader = anatomography_pallet_point_conventional_root_store;
							}
						}
						if(point_loader || pallet_loader){
							if(point_loader){
								point_loader.baseParams = point_loader.baseParams || {};
								point_loader.baseParams.f_id = f_id;
								point_loader.load();
							}
							if(pallet_loader){
								pallet_loader.baseParams = pallet_loader.baseParams || {};
								pallet_loader.baseParams.f_id = f_id;
								pallet_loader.load();
							}
						}else{
							var loader = Ext.getCmp('anatomography-point-editorgrid-panel').getStore();
							loader.removeAll();
							loader.baseParams = {};
							var elem = Ext.getDom('ag-point-grid-content-route');
							if(elem) elem.innerHTML = '&nbsp;';
							Ext.getCmp('anatomography-point-editorgrid-panel').loadMask.hide();
							Ext.getCmp('ag-parts-gridpanel').loadMask.hide();
							if(window.ag_extensions){
								if(window.ag_extensions.pallet_element) window.ag_extensions.pallet_element.hideLoadMask();
								if(window.ag_extensions.pick_point) window.ag_extensions.pick_point.hide();
							}
						}
					}else{
						Ext.getCmp('anatomography-point-editorgrid-panel').loadMask.hide();
						Ext.getCmp('ag-parts-gridpanel').loadMask.hide();
						if(window.ag_extensions){
							if(window.ag_extensions.pallet_element) window.ag_extensions.pallet_element.hideLoadMask();
							if(window.ag_extensions.pick_point) window.ag_extensions.pick_point.hide();
						}
					}
					Ext.getCmp('anatomo_comment_point_button').enable();
				},
				failure: function (response, options) {
					try{alert(cgipath.point+":failure():"+response.status+":"+response.statusText);}catch(e){}
					Ext.getCmp('anatomo_comment_point_button').enable();
					Ext.getCmp('anatomography-point-editorgrid-panel').loadMask.hide();
					Ext.getCmp('ag-parts-gridpanel').loadMask.hide();
					if(window.ag_extensions){
						if(window.ag_extensions.pallet_element) window.ag_extensions.pallet_element.hideLoadMask();
						if(window.ag_extensions.pick_point) window.ag_extensions.pick_point.hide();
					}
				}
			});
		} catch (ex) {
			alert(ex.toString());
			Ext.getCmp('anatomo_comment_point_button').enable();
		}
	}


	//Point Search タブがアクティブの場合
	if(
		!anatomoIsPickMode() && !dX && !dY && Ext.getCmp('anatomo_comment_point_button') &&
		ag_comment_tabpanel && ag_comment_tabpanel.rendered &&
		(ag_comment_tabpanel.getActiveTab().id == 'anatomography-point-search-panel')
	) {
		var imgX = 0;
		var imgY = 0;
		if (e.browserEvent.offsetX) {
			// IE
			imgX = e.browserEvent.offsetX;
			imgY = e.browserEvent.offsetY;
		} else {
			// FF
			var img = Ext.getDom('ag_img');
			imgX = e.browserEvent.layerX - img.offsetLeft;
			imgY = e.browserEvent.layerY - img.offsetTop;
		}
		point_search(imgX,imgY);
	}


//	_dump("anatomoImgMouseUp():anatomoImgDrag=["+anatomoImgDrag+"]");

	if(anatomoImgDrag){
		try {
			e.stopPropagation();
			e.preventDefault();
		} catch (ex) {
			e.returnValue = false;
			e.cancelBubble = true;
		}
		var rotImgDiv = Ext.getDom("rotImgDiv");
		rotImgDiv.style.visibility = "hidden";
		anatomoImgDrag = false;

//		_dump("anatomoImgMouseUp():dX=["+dX+"]");
//		_dump("anatomoImgMouseUp():dY=["+dY+"]");

		if(dX || dY){

//			_dump("anatomoImgMouseUp():anatomoMoveMode=["+anatomoMoveMode+"]");
//			_dump("anatomoImgMouseUp():anatomoDragModeMove=["+anatomoDragModeMove+"]");

			if(anatomoMoveMode || anatomoDragModeMove){

				// calc camera target
				setCameraAndTarget(m_ag.cameraPos, m_ag.targetPos, m_ag.upVec, true);
				moveTargetByMouseForOrtho(ag_param_store.getAt(0).data.image_h, dX / parseFloat(Math.pow(2, ag_param_store.getAt(0).data.zoom)), dY / parseFloat(Math.pow(2, ag_param_store.getAt(0).data.zoom)));

			} else {


				var rotateAuto = false;
				try{rotateAuto = Ext.getCmp('ag-command-image-controls-rotateAuto').getValue();}catch(e){}
//				_dump("anatomoImgMouseUp():rotateAuto=["+rotateAuto+"]");
				if(rotateAuto){
				}else{

					// rotateH
					var deg = getRotateHorizontalValue();
					deg = deg - 15 * Math.floor(dX / 20);
					while (deg >= 360) {
						deg = deg - 360;
					}
					while (deg < 0) {
						deg = deg + 360;
					}
					setRotateHorizontalValue(deg);

					// rotateV
					var deg = getRotateVerticalValue();
					deg = deg + 15 * Math.floor(dY / 20);
					while (deg >= 360) {
						deg = deg - 360;
					}
					while (deg < 0) {
						deg = deg + 360;
					}
					setRotateVerticalValue(deg);

					if(Ext.isEmpty(gParams.tp_md) || gParams.tp_md != 1){
						if(updateRotateImg) updateRotateImg();
					}

					// calc camera target
					setCameraAndTarget(m_ag.cameraPos, m_ag.targetPos, m_ag.upVec, true);
					addLongitude(-15 * Math.floor(dX / 20));
					addLatitude(15 * Math.floor(dY / 20));

				}

			}
			updateAnatomo();
		}
	}

	if(glb_mousedown_toggle){
		if(anatomoDragModeMove){
			ag_command_toggle_exec(Ext.get('ag-command-btn-rotate'));
		}else{
			ag_command_toggle_exec(Ext.get('ag-command-btn-move'));
		}
		document.body.style.cursor = 'default';
		glb_mousedown_toggle = false;
	}
	anatomoMoveMode = false;
}


function makeAnatomoOrganPrm(num,record,mode,aOpacity){
	var prm = "";

	if(get_point_f_id() && (Ext.isEmpty(mode) || mode!=2) && get_point_f_id() == record.data.f_id){
		prm = prm + "&ocl" + num + "=" + glb_point_color;
	}else{
		// color
		var colorstr = record.data.color.substr(1, 6);
		if(colorstr.length == 6) prm = prm + "&ocl" + num + "=" + colorstr;
	}

	// value
	if (isNaN(parseFloat(record.data.value))) {
	} else {
		prm = prm + "&osc" + num + "=" + parseFloat(record.data.value);
	}

	// Show
	if (record.data.exclude || (!Ext.isEmpty(aOpacity) && !isNaN(parseFloat(aOpacity)) && parseFloat(aOpacity) > record.data.opacity)) {
		prm = prm + "&osz" + num + "=H";
	}else if (record.data.zoom) {
		prm = prm + "&osz" + num + "=Z";
	}else{
		prm = prm + "&osz" + num + "=S";
	}
	// Opacity
//	if(record.data.opacity==0.1){
//		prm = prm + "&oop" + num + "=0.05";
//	}else{
		prm = prm + "&oop" + num + "=" + record.data.opacity;
//	}
	// representation
	if (record.data.representation == "surface") {
		prm = prm + "&orp" + num + "=S";
	} else if (record.data.representation == "wireframe") {
		prm = prm + "&orp" + num + "=W";
	} else if (record.data.representation == "points") {
		prm = prm + "&orp" + num + "=P";
	}

	//Organ Draw Child Point Flag
	prm = prm + "&odcp" + num + "=" + (record.data.point?1:0);

	return prm;
}



function makeAnatomoPrm(aMode,aOpacity){
	try{

	var prm = "";
	var prm_record = ag_param_store.getAt(0);

	// General Parameters
	var version = "09051901";
	prm = "av=" + version;
	if(!Ext.isEmpty(gParams.tp_md) && gParams.tp_md == 1){
		var size = Ext.getBody().getSize();
		prm = prm + "&iw=" + size.width;
		prm = prm + "&ih=" + size.height;
	}else{
		prm = prm + "&iw=" + prm_record.data.image_w;
		prm = prm + "&ih=" + prm_record.data.image_h;
	}
	prm = prm + "&bcl=" + prm_record.data.bg_rgb;
	if(!isNaN(prm_record.data.bg_transparent)) prm = prm + "&bga=0";

	if (isNaN(prm_record.data.scalar_max)) {
	} else {
		prm = prm + "&sx=" + prm_record.data.scalar_max;
	}
	if (isNaN(prm_record.data.scalar_min)) {
	} else {
		prm = prm + "&sn=" + prm_record.data.scalar_min;
	}
	if (prm_record.data.colorbar_f) {
		prm = prm + "&cf=" + prm_record.data.colorbar_f;
	}
	if (prm_record.data.heatmap_f) {
		prm = prm + "&hf=" + prm_record.data.heatmap_f;
	}
	// Bodyparts Version
	var bp3d_tree_group_value = init_tree_group;
	var bp3d_tree_group = Ext.getCmp('anatomo-tree-group-combo');
	if(bp3d_tree_group && bp3d_tree_group.rendered) bp3d_tree_group_value = bp3d_tree_group.getValue();
	prm = prm + "&model=" + encodeURIComponent(tg2model[bp3d_tree_group_value].tg_model);

//	if(!Ext.isEmpty(gParams.tp_md) && gParams.tp_md == 1){
//		console.log(gCOMMON_TPAP);
//	}

	var bp3d_version_value;
	var bp3d_version = Ext.getCmp('anatomo-version-combo');
	if(bp3d_version && bp3d_version.rendered){
		bp3d_version_value = bp3d_version.getValue();
	}
//_dump("makeAnatomoPrm(1):bp3d_version_value=["+bp3d_version_value+"]");
	if(!Ext.isEmpty(gParams.tp_md) && gParams.tp_md == 1){
		if(Ext.isEmpty(bp3d_version_value) && gCOMMON_TPAP) bp3d_version_value = gCOMMON_TPAP.bv;
	}
//_dump("makeAnatomoPrm(2):bp3d_version_value=["+bp3d_version_value+"]");
	if(Ext.isEmpty(bp3d_version_value)) bp3d_version_value = init_bp3d_version;

	prm = prm + "&bv=" + bp3d_version_value;

//_dump("makeAnatomoPrm(3):bp3d_version_value=["+bp3d_version_value+"]");
//_dump("makeAnatomoPrm():bp3d_tree_group_value=["+bp3d_tree_group_value+"]");

	var bp3d_type_value;
	var bp3d_type = Ext.getCmp('bp3d-tree-type-combo');
	if(bp3d_type && bp3d_type.rendered){
		bp3d_type_value = bp3d_type.getValue();
		if(!Ext.isEmpty(bp3d_type_value)){
			if(bp3d_type_value=='3' || bp3d_type_value=='is_a'){
				bp3d_type_value = 'isa';
			}else if(bp3d_type_value=='4' || bp3d_type_value=='part_of'){
				bp3d_type_value = 'partof';
			}else{
//				bp3d_type_value = 'conventional';
			}
		}
	}
	if(!Ext.isEmpty(gParams.tp_md) && gParams.tp_md == 1){
		if(Ext.isEmpty(bp3d_type_value) && gCOMMON_TPAP) bp3d_type_value = gCOMMON_TPAP.tn;
	}
	if(Ext.isEmpty(bp3d_type_value)) bp3d_type_value = 'isa';

	prm = prm + "&tn=" + bp3d_type_value;

//_dump("makeAnatomoPrm():bp3d_type_value=["+bp3d_type_value+"]");
//_dump("makeAnatomoPrm():tn=["+bp3d_type_value+"]");

	// Date
	prm = prm + "&dt=" + getDateString();

	// Draw Legend Flag
	var drawCheck = Ext.getCmp('anatomography_image_comment_draw_check');
	if(drawCheck && drawCheck.rendered){
		if(drawCheck.getValue()) prm = prm + "&dl=1";
	}else if(init_anatomography_image_comment_draw){
		prm = prm + "&dl=1";
	}
	// Draw Pin Number Flag
	var drawCheck = Ext.getCmp('anatomo_pin_number_draw_check');
	if(drawCheck && drawCheck.rendered){
		if(!drawCheck.getValue()) prm = prm + "&np=0";
	}else if(!init_anatomo_pin_number_draw){
		prm = prm + "&np=0";
	}
	// Draw Pin Description Flag
	var drawCheck = Ext.getCmp('anatomo_pin_description_draw_check');
	if(drawCheck && drawCheck.rendered){
		if(drawCheck.getValue()) prm = prm + "&dp=1";
	}else if(init_anatomo_pin_description_draw){
		prm = prm + "&dp=1";
	}

	// Camera Parameters
	// 何れかの値が不正な場合
	if(isNaN(m_ag.cameraPos.x) || isNaN(m_ag.cameraPos.y) || isNaN(m_ag.cameraPos.z) ||
		 isNaN(m_ag.targetPos.x) || isNaN(m_ag.targetPos.y) || isNaN(m_ag.targetPos.z) ||
		 isNaN(m_ag.upVec.x) || isNaN(m_ag.upVec.y) || isNaN(m_ag.upVec.z)){
		if(isNaN(m_ag.cameraPos.x) || isNaN(m_ag.cameraPos.y) || isNaN(m_ag.cameraPos.z)) m_ag.cameraPos = new AGVec3d(2.7979888916016167, -998.4280435445771, 809.7306805551052);
		if(isNaN(m_ag.targetPos.x) || isNaN(m_ag.targetPos.y) || isNaN(m_ag.targetPos.z)) m_ag.targetPos = new AGVec3d(2.7979888916015625, -110.37168800830841, 809.7306805551052);
		if(isNaN(m_ag.upVec.x) || isNaN(m_ag.upVec.y) || isNaN(m_ag.upVec.z)) m_ag.upVec = new AGVec3d(0, 0, 1);
		setCameraAndTarget(m_ag.cameraPos, m_ag.targetPos, m_ag.upVec, true);
		var deg = calcRotateDeg();
		setRotateHorizontalValue(deg.H);
		setRotateVerticalValue(deg.V);

		if(updateRotateImg) updateRotateImg();
	}

	prm = prm + "&cx=" + roundPrm(m_ag.cameraPos.x);
	prm = prm + "&cy=" + truncationPrm(m_ag.cameraPos.y);
	prm = prm + "&cz=" + roundPrm(m_ag.cameraPos.z);
	prm = prm + "&tx=" + roundPrm(m_ag.targetPos.x);
	prm = prm + "&ty=" + truncationPrm(m_ag.targetPos.y);
	prm = prm + "&tz=" + roundPrm(m_ag.targetPos.z);
	prm = prm + "&ux=" + roundPrm(m_ag.upVec.x);
	prm = prm + "&uy=" + roundPrm(m_ag.upVec.y);
	prm = prm + "&uz=" + roundPrm(m_ag.upVec.z);
	prm = prm + "&zm=" + prm_record.data.zoom;
//_dump("prm_record.data.zoom=["+prm_record.data.zoom+"]");
	var rotateAuto = false;
	try{rotateAuto = Ext.getCmp('ag-command-image-controls-rotateAuto').getValue();}catch(e){}
	if(rotateAuto){
		var orax = roundPrm(agRotateAuto.rotAxis.x);
		var oray = roundPrm(agRotateAuto.rotAxis.y);
		var oraz = roundPrm(agRotateAuto.rotAxis.z);
		var orcx = roundPrm(m_ag.targetPos.x);
		var orcy = truncationPrm(m_ag.targetPos.y);
		var orcz = roundPrm(m_ag.targetPos.z);
		if(isNaN(orax) || isNaN(oray) || isNaN(oraz) || isNaN(orcx) || isNaN(orcy) || isNaN(orcz)){
			try{Ext.getCmp('ag-command-image-controls-rotateAuto').setValue(false);}catch(e){}
			Ext.MessageBox.show({
				title   : 'Auto rotation',
				msg     : 'Value of the coordinate calculation is incorrect.',
				buttons : Ext.MessageBox.OK,
				icon    : Ext.MessageBox.ERROR
			});
		}else{
			prm = prm + "&orax=" + orax;
			prm = prm + "&oray=" + oray;
			prm = prm + "&oraz=" + oraz;
			prm = prm + "&orcx=" + orcx;
			prm = prm + "&orcy=" + orcy;
			prm = prm + "&orcz=" + orcz;
			prm = prm + "&ordg=" + agRotateAuto.angle;
			prm = prm + "&autorotate=" + agRotateAuto.dt_time;
		}
	}

	if(!_glb_no_clip){
		// Clip Parameters
		prm = prm + "&cm=" + prm_record.data.clip_type;
		if(prm_record.data.clip_type == 'N'){
		}else{

			var clip;
			try{clip = Ext.getCmp('anatomo-clip-predifined-plane').getValue();}catch(e){clip = undefined;}
//			if(!clip || clip == 'FREE'){
			if(clip && clip == 'FREE'){
				prm = prm + "&cd="  + (isNaN(prm_record.data.clip_depth)?'NaN':prm_record.data.clip_depth);
				prm = prm + "&cpa=" + (isNaN(prm_record.data.clip_paramA)?'NaN':roundPrm(prm_record.data.clip_paramA));
				prm = prm + "&cpb=" + (isNaN(prm_record.data.clip_paramB)?'NaN':roundPrm(prm_record.data.clip_paramB));
				prm = prm + "&cpc=" + (isNaN(prm_record.data.clip_paramC)?'NaN':roundPrm(prm_record.data.clip_paramC));
				prm = prm + "&cpd=" + (isNaN(prm_record.data.clip_paramD)?'NaN':roundPrm(prm_record.data.clip_paramD));
				prm = prm + "&ct=" + prm_record.data.clip_method;
			}else{
				prm = prm + "&cd=0";
				prm = prm + "&cpa=" + (isNaN(prm_record.data.clip_paramA)?'NaN':roundPrm(prm_record.data.clip_paramA));
				prm = prm + "&cpb=" + (isNaN(prm_record.data.clip_paramB)?'NaN':roundPrm(prm_record.data.clip_paramB));
				prm = prm + "&cpc=" + (isNaN(prm_record.data.clip_paramC)?'NaN':roundPrm(prm_record.data.clip_paramC));
				prm = prm + "&cpd=" + (isNaN(prm_record.data.clip_depth)?'NaN':prm_record.data.clip_depth);
				prm = prm + "&ct=" + prm_record.data.clip_method;
			}
		}
	}

	// Organ Parameters
	if (ag_parts_store && ag_parts_store.getCount() > 0) {

		var onum = 1;
		var pnum = 1;
		var num;

		for (var i = 0; i < ag_parts_store.getCount(); i++) {
			var record = ag_parts_store.getAt(i);
			if (!record || !record.data || (!record.data.f_id && !record.data.name_e)) return;

			if(!Ext.isEmpty(aMode) && aMode == 2){	//保存モード

				if(isPointDataRecord(record)){
					if(!record.data.f_id) continue;
					num = makeAnatomoOrganNumber(pnum);
					prm = prm + "&poid" + num + "=" + record.data.f_id;
					prm = prm + makeAnatomoOrganPointPrm(num,record);
					prm = prm + "&polb" + num + "=" + record.data.point_label;
					pnum++;
				}else{
					num = makeAnatomoOrganNumber(onum);
					if(record.data.f_id){
						prm = prm + "&oid" + num + "=" + record.data.f_id;
					}else if(record.data.name_e){
						prm = prm + "&onm" + num + "=" + record.data.name_e;
					}else{
						continue;
					}
					if(record.data.version) prm = prm + "&ov" + num + "=" + record.data.version;
					prm = prm + makeAnatomoOrganPrm(num,record,aMode,aOpacity);
					onum++;
				}
				continue;
			}

			if(record.data.tg_id == bp3d_tree_group_value){
				if(isPointDataRecord(record)){
					if(!record.data.f_id) continue;
					if(!Ext.isEmpty(prm_record.data.point_label) && record.data.point_label != prm_record.data.point_label) continue;
					num = makeAnatomoOrganNumber(pnum);
					prm = prm + "&poid" + num + "=" + record.data.f_id;
					prm = prm + makeAnatomoOrganPointPrm(num,record);
					pnum++;
					continue;
				}else{
					num = makeAnatomoOrganNumber(onum);
					if(record.data.f_id){
						prm = prm + "&oid" + num + "=" + record.data.f_id;
					}else if(record.data.name_e){
						prm = prm + "&onm" + num + "=" + record.data.name_e;
					}else{
						continue;
					}
					prm = prm + makeAnatomoOrganPrm(num,record,undefined,aOpacity);
					onum++;
					continue;
				}
			}else{
				if(Ext.isEmpty(aMode)){	//通常モード
					if(record.data.conv_id){
						var id_arr = record.data.conv_id.split(",");
						for(var ocnt=0;ocnt<id_arr.length;ocnt++){
							if(isPointDataRecord(record)){
								if(!Ext.isEmpty(prm_record.data.point_label) && record.data.point_label != prm_record.data.point_label) continue;
								num = makeAnatomoOrganNumber(pnum);
								prm = prm + "&poid" + num + "=" + id_arr[ocnt];
								prm = prm + makeAnatomoOrganPointPrm(num,record);
								pnum++;
							}else{
								num = makeAnatomoOrganNumber(onum);
								prm = prm + "&oid" + num + "=" + id_arr[ocnt];
								prm = prm + makeAnatomoOrganPrm(num,record,undefined,aOpacity);
								onum++;
							}
						}
					}else{
						if(isPointDataRecord(record)){
							if(!Ext.isEmpty(prm_record.data.point_label) && record.data.point_label != prm_record.data.point_label) continue;
							num = makeAnatomoOrganNumber(pnum);
							prm = prm + "&poid" + num + "=" + record.data.f_id;
							prm = prm + makeAnatomoOrganPointPrm(num,record);
							pnum++;
						}else{
							num = makeAnatomoOrganNumber(onum);
							prm = prm + "&onm" + num + "=" + record.data.name_e;
							prm = prm + makeAnatomoOrganPrm(num,record,undefined,aOpacity);
							onum++;
						}
					}
				}else{	//Linkモード
					if(isPointDataRecord(record)){
						if(!Ext.isEmpty(prm_record.data.point_label) && record.data.point_label != prm_record.data.point_label) continue;
						num = makeAnatomoOrganNumber(pnum);
						prm = prm + "&poid" + num + "=" + record.data.f_id;
						prm = prm + makeAnatomoOrganPointPrm(num,record);
						pnum++;
					}else{
						num = makeAnatomoOrganNumber(onum);
						prm = prm + "&oid" + num + "=" + record.data.f_id;
						if(record.data.version) prm = prm + "&ov" + num + "=" + record.data.version;
						prm = prm + makeAnatomoOrganPrm(num,record,undefined,aOpacity);
						onum++;
					}
				}
			}
		}

		if(get_point_f_id() && (Ext.isEmpty(aMode) || aMode != 2)){	//保存モード
			//Palletに存在しないパーツがピックされた場合
			var num = makeAnatomoOrganNumber(onum);
			prm = prm + "&oid" + num + "=" + get_point_f_id();
			prm = prm + "&ocl" + num + "=" + glb_point_color;
			onum++;
		}

//		if(onum>1){
//dpl	0,1,2	ピンからPin Descriptionへの線描画指定(0：ピンからDescriptionへの線描画無し、1：ピンの先端からDescriptionへの線描画、2：ピンの終端からDescriptionへの線描画）。Descriptionが描画されていないと線も描画しない。
//dpod	0,1	点構造のDescription
//dpol	0,1,2	点からPoint Descriptionへの線描画指定(0：点からDescriptionへの線描画無し、1：点の先端からDescriptionへの線描画、2：点の終端からDescriptionへの線描画）。Descriptionが描画されていないと線も描画しない。
//			prm = prm + "&dpl="+prm_record.data.point_pin_line;
//			prm = prm + "&dpod="+prm_record.data.point_desc;
//			prm = prm + "&dpol="+prm_record.data.point_point_line;
//		}
	}
	//dpl	0,1,2	ピンからPin Descriptionへの線描画指定(0：ピンからDescriptionへの線描画無し、1：ピンの先端からDescriptionへの線描画、2：ピンの終端からDescriptionへの線描画）。Descriptionが描画されていないと線も描画しない。
	prm = prm + "&dpl="+prm_record.data.point_pin_line;

	// Legend Parameters
	var drawCheck = Ext.getCmp('anatomography_image_comment_draw_check');
	if(drawCheck && drawCheck.rendered){
		if(drawCheck.getValue()){
			prm = prm + "&lp=UL";
			prm = prm + "&lc=646464";
		}
	}else if(init_anatomography_image_comment_draw){
		prm = prm + "&lp=UL";
		prm = prm + "&lc=646464";
	}

//	prm = prm + "&lt=" + encodeURIComponent(Ext.getCmp("anatomography_image_comment_title").getValue());
	var cmp = Ext.getCmp("anatomography_image_comment_title");
	if(cmp && cmp.rendered){
		var value = encodeURIComponent(cmp.getValue());
		if(value != '') prm = prm + "&lt=" + value;
	}

//	prm = prm + "&le=" + encodeURIComponent(Ext.getCmp("anatomography_image_comment_legend").getValue());
	var cmp = Ext.getCmp("anatomography_image_comment_legend");
	if(cmp && cmp.rendered){
		var value = encodeURIComponent(cmp.getValue());
		if(value != '') prm = prm + "&le=" + value;
	}

//	prm = prm + "&la=" + encodeURIComponent(Ext.getCmp("anatomography_image_comment_author").getValue());
	var cmp = Ext.getCmp("anatomography_image_comment_author");
	if(cmp && cmp.rendered){
		var value = encodeURIComponent(cmp.getValue());
		if(value != '') prm = prm + "&la=" + value;
	}

	//Grid
	if (prm_record.data.grid && prm_record.data.grid=='1') {
		prm = prm + "&gdr=true";
		prm = prm + "&gcl="+prm_record.data.grid_color;
		prm = prm + "&gtc="+prm_record.data.grid_len;
	}

	var anatomo_pin_shape_combo_value;
	try{
		anatomo_pin_shape_combo_value = Ext.getCmp("anatomo_pin_shape_combo").getValue();
	}catch(e){
		anatomo_pin_shape_combo_value = init_anatomo_pin_shape;
	}

	// color_rgb (Default parts color)
	if(!Ext.isEmpty(aMode) && aMode == 2){	//保存モード
		prm = prm + "&fcl="+prm_record.data.color_rgb;
	}

	//coordinate_system
	var coordinate_system;
	try{
		coordinate_system = Ext.getCmp("ag-coordinate-system-combo").getValue();
	}catch(e){
		coordinate_system = prm_record.data.coord;
	}
	prm = prm + "&crd="+coordinate_system;

	// Pin Parameters
	if (ag_comment_store && ag_comment_store.getCount() > 0) {

		for (var i = 0; i < ag_comment_store.getCount(); i++) {
			var prmPin = makeAnatomoPrm_Pin(ag_comment_store.getAt(i),anatomo_pin_shape_combo_value,coordinate_system);
			if(Ext.isEmpty(prmPin)) continue;
			prm = prm + '&' + prmPin;
		}
	}

	return prm;
	}catch(e){
		_dump("makeAnatomoPrm():"+e);
	}
}

oncheck_anatomo_grid_check = function(checkbox, fChecked){
	var prm_record = ag_param_store.getAt(0);
	prm_record.beginEdit();
	if (fChecked) {
		prm_record.set('grid', '1');
	} else {
		prm_record.set('grid', '0');
	}
	prm_record.endEdit();
	prm_record.commit();

	if(fChecked){
		try{
			Ext.get('ag-command-grid-len-label').show(false);
			Ext.get('ag-command-grid-color-label').show(false);
		}catch(e){}
		try{
			Ext.get('ag-image-grid-box').setHeight(66,{
				callback:function(){
					try{
						Ext.getCmp('ag-command-grid-len-combobox').enable();
						Ext.getCmp('ag-command-grid-len-combobox').show(false);
					}catch(e){}
					Ext.getCmp('ag-command-grid-color-field').enable();
					Ext.getCmp('ag-command-grid-color-field').show(false);
				}
			});
		}catch(e){}
	}else{
		try{
			Ext.get('ag-command-grid-len-label').hide(false);
			Ext.get('ag-command-grid-color-label').hide(false);
		}catch(e){}
		try{
			Ext.get('ag-image-grid-box').setHeight(19,true);
		}catch(e){}

		try{
			Ext.getCmp('ag-command-grid-len-combobox').hide(false);
			Ext.getCmp('ag-command-grid-len-combobox').disable();
		}catch(e){}
		Ext.getCmp('ag-command-grid-color-field').hide(false);
		Ext.getCmp('ag-command-grid-color-field').disable();
	}
	updateAnatomo();
}

/* iPad用 */
var anatomoImgDragStart_dX = null;
var anatomoImgDragStart_dY = null;
var anatomoImgDragStart_degH = null;
var anatomoImgDragStart_degV = null;

var anatomoImgMoveStartX = null;
var anatomoImgMoveStartY = null;
var anatomoImgMoveStart_dX = null;
var anatomoImgMoveStart_dY = null;

var curScale = null;
var chgScale = null;
var curRotation = null;

is_iPad = function(){
	if(navigator.userAgent.match(/^Mozilla\/5\.0\s\(iPad;\s*U;\s(CPU\s*[^;]+);[^\)]+\)/)){
		return true;
	}else{
		return false;
	}
}

imgTouchStart = function(e){
	e.preventDefault();
//_dump("imgTouchStart()");

	if(!e.touches) e.touches = [];
	for(var key in e){
		if(typeof e[key] == "function"){
		}else{
//			_dump('touchstart():'+key+"=["+e[key]+"]");
		}
	}

	if(e.touches && e.touches.length>1){
		anatomoImgDragStartX = null;
		anatomoImgDragStartY = null;
		anatomoImgDragStart_dX = null;
		anatomoImgDragStart_dY = null;

		anatomoImgMoveStartX = e.targetTouches[0].pageX;
		anatomoImgMoveStartY = e.targetTouches[0].pageY;
		anatomoImgMoveStart_dX = 0;
		anatomoImgMoveStart_dY = 0;
		return;
	}else{
		if(e.targetTouches && e.targetTouches.length>0){
			anatomoImgDragStartX = e.targetTouches[0].pageX;
			anatomoImgDragStartY = e.targetTouches[0].pageY;
		}else{
			anatomoImgDragStartX = e.pageX;
			anatomoImgDragStartY = e.pageY;
		}
		anatomoImgDragStart_dX = null;
		anatomoImgDragStart_dY = null;

		anatomoImgMoveStartX = null;
		anatomoImgMoveStartY = null;
		anatomoImgMoveStart_dX = null;
		anatomoImgMoveStart_dY = null;
	}
};
imgTouchMove = function(e){
	e.preventDefault();
//_dump("imgTouchMove(2)");

//_dump('touchmove:'+e.touches.length+","+e.targetTouches[0].pageX+","+e.targetTouches[0].pageY+","+chgScale+","+chgScale);

	if(anatomoImgDragStartX == null || anatomoImgDragStartY == null){
		if(anatomoImgMoveStartX != null && anatomoImgMoveStartY != null){
			anatomoImgMoveStart_dX = e.targetTouches[0].pageX - anatomoImgMoveStartX;
			anatomoImgMoveStart_dY = e.targetTouches[0].pageY - anatomoImgMoveStartY;

			if(chgScale == null) e.target.style.webkitTransform = 'translate(' + anatomoImgMoveStart_dX + 'px, ' + anatomoImgMoveStart_dY + 'px)';

		}
		return;
	}


	var dX = e.targetTouches[0].pageX - anatomoImgDragStartX;
	var dY = e.targetTouches[0].pageY - anatomoImgDragStartY;

//_dump('touchmove:'+e.touches.length+","+e.targetTouches[0].pageX+","+e.targetTouches[0].pageY+","+dX+","+dY);

	anatomoImgDragStart_dX = dX;
	anatomoImgDragStart_dY = dY;

	if(e.touches.length>1){
		return;
	}

	var rotateHSpan = document.getElementById("rotateH");
	var rotateVSpan = document.getElementById("rotateV");

	var degH = getRotateHorizontalValue();
	degH = degH - 15 * Math.floor(dX / 20);
	while (degH >= 360) {
		degH = degH - 360;
	}
	while (degH < 0) {
		degH = degH + 360;
	}

	var degV = getRotateVerticalValue();
	degV = degV + 15 * Math.floor(dY / 20);
	while (degV >= 360) {
		degV = degV - 360;
	}
	while (degV < 0) {
		degV = degV + 360;
	}

	degH = degH.toString();
	degV = degV.toString();

	anatomoImgDragStart_degH = degH;
	anatomoImgDragStart_degV = degV;

	var rotateHSpan = document.getElementById("rotImgDivRotateH");
	if(rotateHSpan){
		rotateHSpan.innerHTML = "H:"+degH;
	}

	var rotateVSpan = document.getElementById("rotImgDivRotateV");
	if(rotateVSpan){
		rotateVSpan.innerHTML = "V:"+degV;
	}

	var rotImgDiv = document.getElementById("rotImgDiv");
	if(rotImgDiv){
		rotImgDiv.style.left = (parseInt(e.targetTouches[0].pageX) - 130) + "px";
		rotImgDiv.style.top  = (parseInt(e.targetTouches[0].pageY) + 0)   + "px";

		var posX = (degH / 15 * (-80));
		var posY = (degV / 15 * (-80));

		if(posX<=-960 && posY<=-960){
			posX += 960;
			posY += 960;
			rotImgDiv.style.backgroundImage = "url(iphone/img/rotImg_iphone_rb.png)";
		}else if(posX<=-960){
			posX += 960;
			rotImgDiv.style.backgroundImage = "url(iphone/img/rotImg_iphone_rt.png)";
		}else if(posY<=-960){
			posY += 960;
			rotImgDiv.style.backgroundImage = "url(iphone/img/rotImg_iphone_lb.png)";
		}else{
			rotImgDiv.style.backgroundImage = "url(iphone/img/rotImg_iphone_lt.png)";
		}
		rotImgDiv.style.backgroundPositionX = posX + "px";
		rotImgDiv.style.backgroundPositionY = posY + "px";

		rotImgDiv.style.visibility = "visible";
	}

//_dump("degH=["+degH+"],degV=["+degV+"]");
//_dump(rotImgDiv.style.backgroundPosition);
};
imgTouchEnd = function(e){
	e.preventDefault();
//_dump("imgTouchEnd()");

//_dump('touchend:'+anatomoImgDragStart_dX+","+anatomoImgDragStart_dY);

	var rotImgDiv = document.getElementById("rotImgDiv");
	if(rotImgDiv) rotImgDiv.style.visibility = "hidden";

	if(anatomoImgDragStartX == null || anatomoImgDragStartY == null || anatomoImgDragStart_dX == null || anatomoImgDragStart_dY == null){
		if(anatomoImgMoveStartX == null || anatomoImgMoveStartY == null || anatomoImgMoveStart_dX == null || anatomoImgMoveStart_dY == null){
			if(anatomoImgDragStartX == null || anatomoImgDragStartY == null){
			 element_selected(e);
			}else{
				try{
					var img = document.getElementById('ag_img');
					var imgX = anatomoImgDragStartX - img.x;
					var imgY = anatomoImgDragStartY - img.y;
//_dump('touchend():&px=' + img.x + '&py=' +img.y);
				}catch(ex){
					alert(ex);
					return;
				}

//_dump('touchend():&px=' + imgX + '&py=' +imgY);

//				var urlStr = cgipath.point+'?' + makeAnatomoPrm() + '&px=' + imgX + '&py=' +imgY;

				var params = Ext.urlDecode(makeAnatomoPrm());
				params.px = imgX;
				params.py = imgY;

				var jsonStr = null;
				try{
					jsonStr = ag_extensions.toJSON.URI2JSON(params,{
						toString:true,
						mapPin:false,
						callback:undefined
					});
				}catch(e){jsonStr = null;}

				Ext.Ajax.request({
					url     : cgipath.point,
					method  : 'POST',
					params  : jsonStr ? jsonStr : params,
					success : function (response, options) {

//						var f_id = response.responseText;
						var f_id;
						try{var pointData = Ext.util.JSON.decode(response.responseText);}catch(e){_dump(e);}
						if(pointData) f_id = pointData.id;



						if(!f_id || !f_id.match(/^(?:FMA|BP)\d+/)){
							return;
						}

						getPickList(f_id,'partof');

					},
					failure: function (response, options) {
						alert(cgipath.point+":failure():"+response.statusText);
					}
				});
			}
		}
		anatomoImgDragStart_dX = null;
		anatomoImgDragStartdY = null;
		return;
	}

	var dX = anatomoImgDragStart_dX;
	var dY = anatomoImgDragStart_dY;

	try{
		setRotateHorizontalValue(anatomoImgDragStart_degH);
		setRotateVerticalValue(anatomoImgDragStart_degV);

		setCameraAndTarget(m_ag.cameraPos, m_ag.targetPos, m_ag.upVec, true);
		addLongitude(-15 * Math.floor(dX / 20));
		addLatitude(15 * Math.floor(dY / 20));

		updateAnatomo();

		anatomoImgDragStart_dX = null;
		anatomoImgDragStart_dY = null;

	}catch(ex){
		_dump(ex);
	}
};
imgGestureStart = function(e){
	e.preventDefault();
//_dump("imgGestureStart()");
	if(curScale == null) curScale = 1;
};
imgGestureChange = function(e){
	e.preventDefault();
//_dump("imgGestureChange()");

	chgScale = e.scale;
	chgScale *= curScale;
	if(chgScale<1) chgScale = 1;

//_dump("gesturechange:["+ e.scale + "]["+ curScale + "]["+ chgScale + "]");

	e.target.style.webkitTransform = 'scale(' + e.scale + ') translate(' + anatomoImgMoveStart_dX + 'px, ' + anatomoImgMoveStart_dY + 'px)';

	var value = chgScale - 1;
	if(value<0) value = 0;
	if(value>6) value = 6;

	var prm_record = ag_param_store.getAt(0);
	prm_record.beginEdit();
	prm_record.set('zoom', value);
	prm_record.endEdit();
	prm_record.commit();

	var rotImgDiv = document.getElementById("rotImgDiv");
	if(rotImgDiv) rotImgDiv.style.visibility = "hidden";
};
imgGestureEnd = function(e){
	e.preventDefault();
//_dump("imgGestureEnd()");

	var dX = anatomoImgMoveStart_dX;
	var dY = anatomoImgMoveStart_dY;

	setCameraAndTarget(m_ag.cameraPos, m_ag.targetPos, m_ag.upVec, true);
	moveTargetByMouseForOrtho(ag_param_store.getAt(0).data.image_h, dX / parseFloat(Math.pow(2, ag_param_store.getAt(0).data.zoom)), dY / parseFloat(Math.pow(2, ag_param_store.getAt(0).data.zoom)));

	updateAnatomo();

	curScale = chgScale;
	chgScale = null;
};

ag_command_zoom_menu_slider_syncThumb_task = new Ext.util.DelayedTask(function(){
	var slider = Ext.getCmp('zoom-slider');
	if(!slider || !slider.rendered) return;
	slider.syncThumb();
});

anatomography_image_render = function(comp,aOptions,aCB){
//	try{
		if(Ext.isEmpty(gParams.tp_md)){
			gParams.tp_ct = 1;
			gParams.tp_bt = 1;
			gParams.tp_ro = 1;
			gParams.tp_gr = 1;
			gParams.tp_zo = 1;
		}

		if(window.top != window && is_iPad()){
			delete gParams.tp_ct;
			delete gParams.tp_bt;
			delete gParams.tp_ro;
			delete gParams.tp_gr;
			delete gParams.tp_zo;
		}

		if(is_iPad()){
			var imageElem = document.getElementById('ag_img');
			if(imageElem){
				imageElem.addEventListener('touchstart',imgTouchStart,false);
				imageElem.addEventListener('touchmove', imgTouchMove, false);
				imageElem.addEventListener('touchend',  imgTouchEnd,  false);

				imageElem.addEventListener('gesturestart', imgGestureStart,  false);
				imageElem.addEventListener('gesturechange',imgGestureChange, false);
				imageElem.addEventListener('gestureend',   imgGestureEnd,    false);

				imageElem.addEventListener('load',function(e){
					e.target.style.webkitTransform = 'scale(1) translate(0px, 0px)';
					e.target.style.webkitTransformStyle = 'flat';
					e.target.style.left = '0px';
					e.target.style.top  = '0px';
				},false);
			}
			Ext.getDom('ag-image-command-box').style.opacity = '1';
			if(false){
				Ext.get('ag-command-ipad').removeClass('x-hide-display');
			}
		}

		comp.on("resize", function(comp,adjWidth,adjHeight,rawWidth,rawHeight){
			setImageWindowSize();
		});

		var ag_img = Ext.get('ag_img');
		if(ag_img){
			ag_img.on("load", function(e){
				var ag_img_frame = Ext.get("ag_img_frame");
				if(ag_img_frame){
					var load_image = e.getTarget();
					ag_img_frame.dom.style.width = load_image.width + 'px';
					ag_img_frame.dom.style.height = load_image.height + 'px';
				}
				var cmp = Ext.getCmp('anatomography-image');
				if(cmp && cmp.rendered && cmp.loadMask) cmp.loadMask.hide();
			});
			ag_img.on("contextmenu", function(e){
//				_dump("contextmenu");
//				e.stopEvent();
			});
		}



		if(Ext.isEmpty(gParams.tp_ct)){
			Ext.get('ag-image-command-box').setVisibilityMode(Ext.Element.DISPLAY);
			Ext.get('ag-image-command-box').hide();
		}

		Ext.get('ag-image-rotate-box').removeClass('x-hide-display');

		if(Ext.isEmpty(gParams.tp_bt)){
			Ext.get('ag-image-button-box').setVisibilityMode(Ext.Element.DISPLAY);
			Ext.get('ag-image-button-box').hide();
		}

		if(is_iPad()){
			Ext.get('ag-image-zoom-text-box').setVisibilityMode(Ext.Element.DISPLAY);
			Ext.get('ag-image-zoom-text-box').hide();
		}

		var prm_record = ag_param_store.getAt(0);

		setTimeout(function(){
			if(Ext.isEmpty(gParams.tp_zo)){
				Ext.get('ag-image-zoom-box').setVisibilityMode(Ext.Element.DISPLAY);
				Ext.get('ag-image-zoom-box').hide();
			}else if(Ext.isIE){
/* IEで表示しなので修正の必要あり
				var elem = Ext.getDom('ag-command-zoom-btn-down');
				if(elem){
					var parentNode = elem.parentNode;
					parentNode.removeChild(elem);
					elem = parentNode.ownerDocument.createElement('a');
					elem.setAttribute('id','ag-command-zoom-btn-down');
					parentNode.appendChild(elem);
				}
*/
			}
			var d_height = 190;
			if(Ext.isEmpty(gParams.tp_ro) && Ext.isEmpty(gParams.tp_gr)){
				d_height -= 90;
			}else if(Ext.isEmpty(gParams.tp_ro)){
				d_height -= 26;
			}else if(Ext.isEmpty(gParams.tp_gr)){
				d_height -= 74;
			}
			if(is_iPad()) d_height -= 24;

			var size = comp.getSize();
			var slider_height = size.height-d_height;
			if(slider_height<20) slider_height = 20;
			if(slider_height>100) slider_height = 100;
			Ext.get('ag-command-zoom-slider-render').setHeight(slider_height);
			new Ext.Slider({
				renderTo: 'ag-command-zoom-slider-render',
				id: 'zoom-slider',
				value : prm_record.data.zoom,
				height: slider_height,
				vertical: true,
				hidden : Ext.isEmpty(gParams.tp_zo),
				minValue: 0,
				maxValue: DEF_ZOOM_MAX-1,
				increment: 1,
				plugins: new Ext.ux.SliderTip(),
				listeners: {
					'change' : {
						fn : function (slider, value) {
//_dump("zoom-slider.change():value=["+value+"]");
							if(glb_zoom_xy){
								var elemImg = Ext.get('ag_img');
//								var xyImg = elemImg.getXY();
								var xyImg = glbImgXY;
								var mouseX = glb_zoom_xy[0] - xyImg[0];
								var mouseY = glb_zoom_xy[1] - xyImg[1];
								var centerX = parseInt((ag_param_store.getAt(0).data.image_w /2) -  mouseX);
								var centerY = parseInt((ag_param_store.getAt(0).data.image_h /2) -  mouseY);
								setCameraAndTarget(m_ag.cameraPos, m_ag.targetPos, m_ag.upVec, true);
								moveTargetByMouseForOrtho(ag_param_store.getAt(0).data.image_h, centerX / parseFloat(Math.pow(2, ag_param_store.getAt(0).data.zoom)), centerY / parseFloat(Math.pow(2, ag_param_store.getAt(0).data.zoom)));
							}
							var prm_record = ag_param_store.getAt(0);
							prm_record.beginEdit();
							prm_record.set('zoom', value / 5);
							prm_record.endEdit();
							prm_record.commit();
							anatomoUpdateZoomValueText(value + 1);
							if(glb_zoom_xy){
								var elemImg = Ext.get('ag_img');
//								var xyImg = elemImg.getXY();
								var xyImg = glbImgXY;
								var mouseX = glb_zoom_xy[0] - xyImg[0];
								var mouseY = glb_zoom_xy[1] - xyImg[1];
								var moveX = parseInt(mouseX - (ag_param_store.getAt(0).data.image_w /2));
								var moveY = parseInt(mouseY - (ag_param_store.getAt(0).data.image_h /2));
								setCameraAndTarget(m_ag.cameraPos, m_ag.targetPos, m_ag.upVec, true);
								moveTargetByMouseForOrtho(ag_param_store.getAt(0).data.image_h, moveX / parseFloat(Math.pow(2, ag_param_store.getAt(0).data.zoom)), moveY / parseFloat(Math.pow(2, ag_param_store.getAt(0).data.zoom)));
							}
							updateAnatomo();
							updateClipImage();
							if(glb_zoom_xy) glb_zoom_xy = null;
						},
						scope  : this
					},
					'render' : {
						fn : function(slider){
							if(glb_zoom_slider){
								var textField = Ext.getCmp('zoom-value-text');
								var slider = Ext.getCmp('zoom-slider');
								if(slider && slider.rendered && textField && textField.rendered){
//_dump("zoom-slider.render():glb_zoom_slider=["+glb_zoom_slider+"]");
									slider.setValue(glb_zoom_slider-1);
									glb_zoom_slider = null;
									ag_command_zoom_menu_slider_syncThumb_task.delay(1000);
								}
							}
						},
						scope:this
					}
				}
			});
		},100);

		new Ext.form.NumberField ({
			ctCls : 'x-small-editor',
			renderTo: 'ag-command-zoom-text-render',
			id: 'zoom-value-text',
			width: 28,
			value : prm_record.data.zoom+1,
			allowBlank : false,
			allowDecimals : false,
			allowNegative : false,
			selectOnFocus : true,
			hidden : Ext.isEmpty(gParams.tp_zo),
			maxValue : DEF_ZOOM_MAX,
			minValue : 1,
			listeners: {
				'change': {
					fn : function(textField,newValue,oldValue){
						if (anatomoUpdateZoomValue) {
							return;
						}
						var value = isNaN(parseInt(newValue, 10))?oldValue:parseInt(newValue, 10);
						if (value < 1) {
							value = 1;
						}
						if (value > DEF_ZOOM_MAX) {
							value = DEF_ZOOM_MAX
						}
						textField.setValue(value);
						var slider = Ext.getCmp('zoom-slider');
						if(slider && slider.rendered){
//_dump("zoom-value-text.change():["+value+"]");
							slider.setValue(value - 1);
							ag_command_zoom_menu_slider_syncThumb_task.delay(1000);
						}
					},
					scope:this
				},
				'valid': {
					fn : function(textField){
						var value = textField.getValue();
						var slider = Ext.getCmp('zoom-slider');
						if(slider && slider.rendered){
//_dump("zoom-value-text.valid():["+value+"]");
							slider.setValue(value - 1);
							ag_command_zoom_menu_slider_syncThumb_task.delay(1000);
						}
					},
					scope:this
				},
				'render': {
					fn : function(textField){
						if(glb_zoom_slider){
							var slider = Ext.getCmp('zoom-slider');
							if(slider && slider.rendered){
//_dump("zoom-value-text.render():glb_zoom_slider=["+glb_zoom_slider+"]");
								slider.setValue(glb_zoom_slider-1);
								glb_zoom_slider = null;
								ag_command_zoom_menu_slider_syncThumb_task.delay(1000);
							}
						}
					},
					scope:this
				}
			}
		});

		var ag_command_rotate_menu_hide_task = new Ext.util.DelayedTask(function(){
			var button = Ext.getCmp('ag-command-rotate-button');
			if(!button || !button.rendered) return;
			if(button.hasVisibleMenu()) button.hideMenu();
		});
		new Ext.Button({
			ctCls : 'x-small-editor',
			renderTo: 'ag-command-rotate-button-render',
			id: 'ag-command-rotate-button',
			width: 30,
			text:'Rotate',
			hidden : Ext.isEmpty(gParams.tp_ro),
			menu: {
				id: 'ag-command-rotate-menu',
				cls : 'ag-command-rotate-menu',
				items : [{
					text   : 'H:0,V:0',
					icon   : "img_angle/000_000.png",
					itemCls: 'x-menu-item ag-command-rotate-menu-item',
					handler: function(){ setRotate(0,0); }
				},{
					text   : 'H:45,V:0',
					icon   : "img_angle/045_000.png",
					itemCls: 'x-menu-item ag-command-rotate-menu-item',
					handler: function(){ setRotate(45,0); }
				},{
					text   : 'H:90,V:0',
					icon   : "img_angle/090_000.png",
					itemCls: 'x-menu-item ag-command-rotate-menu-item',
					handler: function(){ setRotate(90,0); }
				},{
					text   : 'H:180,V:0',
					icon   : "img_angle/180_000.png",
					itemCls: 'x-menu-item ag-command-rotate-menu-item',
					handler: function(){ setRotate(180,0); }
				},{
					text   : 'H:270,V:0',
					icon   : "img_angle/270_000.png",
					itemCls: 'x-menu-item ag-command-rotate-menu-item',
					handler: function(){ setRotate(270,0); }
				},{
					text   : 'H:315,V:0',
					icon   : "img_angle/315_000.png",
					itemCls: 'x-menu-item ag-command-rotate-menu-item',
					handler: function(){ setRotate(315,0); }
				},{
					text   : 'H:180,V:90',
					icon   : "img_angle/180_090.png",
					itemCls: 'x-menu-item ag-command-rotate-menu-item',
					handler: function(){ setRotate(180,90); }
				},{
					text   : 'H:0,V:270',
					icon   : "img_angle/000_270.png",
					itemCls: 'x-menu-item ag-command-rotate-menu-item',
					handler: function(){ setRotate(0,270); }
				}]
			}
		});


		Ext.QuickTips.register({
			target: 'ag-command-btn-rotate',
			text: get_ag_lang('TOOLTIP_ROTATE')
		});
		Ext.QuickTips.register({
			target: 'ag-command-btn-move',
			text: get_ag_lang('TOOLTIP_MOVE')
		});
		Ext.QuickTips.register({
			target: 'ag-command-focus-center-button',
			text: get_ag_lang('TOOLTIP_FOCUS_CENTER')
		});
		Ext.QuickTips.register({
			target: 'ag-command-focus-button',
			text: get_ag_lang('TOOLTIP_FOCUS')
		});

		new Ext.form.Checkbox({
			ctCls    : 'x-small-editor',
			id       : 'ag-command-autorotate-chechbox',
			checked  : false,
			listeners: {
				'check': function(checkbox,checked){
					Ext.getCmp('ag-command-image-controls-rotateAuto').setValue(checked);
				},
				scope:this
			}
		}).render('ag-command-autorotate-chechbox-render','ag-command-autorotate-chechbox-label');
		if(gDispAnatomographyPanel){
			var elem = Ext.get('ag-command-autorotate-chechbox-render');
			if(elem){
				elem.setVisibilityMode(Ext.Element.DISPLAY);
				elem.hide();
			}
			Ext.get('ag-command-autorotate-chechbox-label').hide();
		}

		if(Ext.isEmpty(gParams.tp_gr)){
			try{
				Ext.get('ag-image-grid-box').setVisibilityMode(Ext.Element.DISPLAY);
				Ext.get('ag-image-grid-box').hide();
			}catch(e){}
		}

		new Ext.form.Checkbox ({
			ctCls : 'x-small-editor',
			renderTo: 'ag-command-grid-render',
			id: 'ag-command-grid-show-check',
			width: 45,
			checked: (prm_record.data.grid=='1')?true:false,
			hidden : Ext.isEmpty(gParams.tp_gr),
			listeners: {
				'render': function(checkbox){
					checkbox.on('check',oncheck_anatomo_grid_check);
					if(checkbox.checked){
						try{Ext.get('ag-image-grid-box').setHeight(66);}catch(e){}
						try{Ext.getCmp('ag-command-grid-len-combobox').show();}catch(e){}
					}else{
						try{Ext.getCmp('ag-command-grid-len-combobox').hide();}catch(e){}
						try{Ext.get('ag-image-grid-box').setHeight(19);}catch(e){}
					}
				},
				scope:this
			}
		});

		new Ext.ux.ColorField({
			ctCls : 'x-small-editor',
			width: 54,
			renderTo:'ag-command-grid-color-render',
			id:'ag-command-grid-color-field',
			value:prm_record.data.grid_color,
			disabled: (prm_record.data.grid=='1')?false:true,
			hidden: (prm_record.data.grid=='1')?false:true,
			editable: false,
			hideTrigger : is_iPad(),
			colors: palette_color2,
			colorsItemCls: 'x-color-palette x-color-palette-grid',
			colorsOptionMenu: false,
			listeners: {
				select: function (e, color) {
					var prm_record = ag_param_store.getAt(0);
					prm_record.beginEdit();
					prm_record.set('grid_color', color);
					prm_record.endEdit();
					prm_record.commit();
					updateAnatomo();
				},
				render: function(checkbox){
					try{
						if(prm_record.data.grid=='1'){
							Ext.get('ag-command-grid-color-label').show(false);
						}else{
							Ext.get('ag-command-grid-color-label').hide(false);
						}
					}catch(e){}
				},
				scope:this
			}
		});

		new Ext.form.ComboBox({
			ctCls : 'x-small-editor',
			renderTo:'ag-command-grid-len-render',
			id: 'ag-command-grid-len-combobox',
			editable: false,
			mode: 'local',
			lazyInit: false,
			displayField: 'disp',
			valueField: 'value',
			width: 54,
			value: (isNaN(prm_record.data.grid_len))?'':prm_record.data.grid_len,
			disabled: (prm_record.data.grid=='1')?false:true,
			hidden: (prm_record.data.grid=='1')?false:true,
			hideTrigger : is_iPad(),
			triggerAction: 'all',
			store: new Ext.data.SimpleStore({
				fields: ['disp', 'value'],
				data : [
					['1mm', 1],
					['5mm', 5],
					['10mm', 10],
					['50mm', 50],
					['100mm', 100]
				]
			}),
			listeners: {
				'render': function(combo){
					try{
						if(prm_record.data.grid=='1'){
							Ext.get('ag-command-grid-len-label').show(false);
						}else{
							Ext.get('ag-command-grid-len-label').hide(false);
						}
					}catch(e){}
				},
				'select' : function(combo, record, index) {
					var prm_record = ag_param_store.getAt(0);
					prm_record.beginEdit();
					prm_record.set('grid_len', record.data.value);
					prm_record.endEdit();
					prm_record.commit();
					updateAnatomo();
				},
				scope:this
			}
		});

		if(aCB) (aCB)();
//	}catch(e){
//		_dump("anatomography_image_render():"+e);
//	}
};


function ag_init(){
//_dump("ag_init():["+Ext.isEmpty(gParams.tp_ap)+"]");

	if(!Ext.isEmpty(gParams.tp_md) && gParams.tp_md == 1){
		gDispAnatomographyPanel = true;
		var anatomography_image = new Ext.Panel({
			contentEl  : 'anatomography-image-contentEl',
			id         : 'anatomography-image',
			region     : 'center',
			autoScroll : false,
			border     : false,
			bodyStyle  : 'background-color:#f8f8f8;overflow:hidden;',
			listeners : {
				"render": function(comp){
					comp.loadMask = new Ext.LoadMask(comp.body,{removeMask:false});
					setTimeout(function(){ comp.loadMask.show(); },0);
					anatomography_image_render(comp,undefined,function(){
						anatomography_init();
						setImageWindowSize();
						comp.loadMask.hide();
					});
				},
				scope:this
			}
		});

		var viewport = new Ext.Viewport({
			layout:'border',
			monitorResize:true,
			items:anatomography_image,
			listeners : {
				'resize' : function(){
				},scope:this
			}
		});
		makeRotImgDiv();

		Ext.get('ag-copyright').removeClass('x-hide-display');
		Ext.getDom('ag-copyright-link').setAttribute("href",location.pathname+"?tp_ap="+encodeURIComponent(gParams.tp_ap));
	}

	if(gParams && !Ext.isEmpty(gParams.tp_ap)){
		try{var position = Ext.getCmp('positionSelect').getValue();}catch(e){}
		var f_ids = [];
		var t_type = '3';
		var tpap_param = analyzeTPAP(gParams.tp_ap);
		if(tpap_param && ((tpap_param.parts && tpap_param.parts.length>0) || (tpap_param.point_parts && tpap_param.point_parts.length>0) || (tpap_param.pins && tpap_param.pins.length>0))){

			var tgi_version = null;
			if(tpap_param.common && tpap_param.common.bp3d_version){
//_dump("ag_init():tpap_param.common.bp3d_version=["+tpap_param.common.bp3d_version+"]");
				tgi_version = tpap_param.common.bp3d_version;
				var tg_id = tpap_param.common.tg_id ? tpap_param.common.tg_id : undefined;
				if(tg_id==undefined && tpap_param.common.model && model2tg[tpap_param.common.model]) tg_id = model2tg[tpap_param.common.model].tg_id;
				if(tg_id==undefined && version2tg[tgi_version]) tg_id = version2tg[tgi_version].tg_id;
				if(tg_id && (!version2tg[tgi_version] || version2tg[tgi_version].tgi_delcause)){
					if(Ext.isEmpty(latestversion[tg_id])) return;
					tgi_version = latestversion[tg_id];
				}

//_dump("ag_init():tgi_version=["+tgi_version+"]");

				var cmp = Ext.getCmp('bp3d-version-combo');
				if(cmp && cmp.rendered) cmp.setValue(tgi_version);
				var cmp = Ext.getCmp('anatomo-version-combo');
				if(cmp && cmp.rendered) cmp.setValue(tgi_version);
			}

			if(tpap_param.common && tpap_param.common.treename){
				if(tpap_param.common.treename=='isa'){
					t_type = '3';
				}else if(tpap_param.common.treename=='partof'){
					t_type = '4';
				}
				var cmp = Ext.getCmp('bp3d-tree-type-combo');
				if(cmp && cmp.rendered) cmp.setValue(t_type);
				var cmp = Ext.getCmp('bp3d-tree-type-combo-ag');
				if(cmp && cmp.rendered) cmp.setValue(t_type);
			}

			if(tpap_param.parts && tpap_param.parts.length>0){
//_dump("ag_init():tpap_param.parts.length=["+tpap_param.parts.length+"]");
				for(var i=0,len=tpap_param.parts.length;i<len;i++){
//_dump("ag_init():["+i+"]:id=["+tpap_param.parts[i].id+"]");
//_dump("ag_init():["+i+"]:f_id=["+tpap_param.parts[i].f_id+"]");
					if(tpap_param.parts[i].id){
						if(Ext.isEmpty(tpap_param.parts[i].version)){
							f_ids.push({f_id:tpap_param.parts[i].id});
						}else{
							f_ids.push({f_id:tpap_param.parts[i].id,version:tpap_param.parts[i].version});
						}
					}else if(tpap_param.parts[i].f_id){
						if(Ext.isEmpty(tpap_param.parts[i].version)){
							f_ids.push({f_id:tpap_param.parts[i].f_id});
						}else{
							f_ids.push({f_id:tpap_param.parts[i].f_id,version:tpap_param.parts[i].version});
						}
					}
				}
			}
//_dump("ag_init():f_ids.length=["+f_ids.length+"]");

			if(tpap_param.point_parts && tpap_param.point_parts.length>0){
				for(var i=0,len=tpap_param.point_parts.length;i<len;i++){
					if(tpap_param.point_parts[i].id){
						if(Ext.isEmpty(tpap_param.point_parts[i].version)){
							f_ids.push({f_id:tpap_param.point_parts[i].id});
						}else{
							f_ids.push({f_id:tpap_param.point_parts[i].id,version:tpap_param.point_parts[i].version});
						}
					}else if(tpap_param.point_parts[i].f_id){
						if(Ext.isEmpty(tpap_param.point_parts[i].version)){
							f_ids.push({f_id:tpap_param.point_parts[i].f_id});
						}else{
							f_ids.push({f_id:tpap_param.point_parts[i].f_id,version:tpap_param.point_parts[i].version});
						}
					}
				}
			}
//_dump("ag_init():f_ids.length=["+f_ids.length+"]");
			if(f_ids.length>0){
				var params = {
					objs : Ext.util.JSON.encode(f_ids)
				};
//_dump("ag_init():params.objs=["+params.objs+"]");
				if(!Ext.isEmpty(position)) params.position = position;
				if(tgi_version){
					params.version = tgi_version;
				}
//_dump("ag_init():params.version=["+params.version+"]");
				if(tpap_param.common && tpap_param.common.model){
					params.model = tpap_param.common.model;
				}

				params.t_type = t_type;
//				bp3d_contents_store.on('load',load_bp3d_contents_store,this,{single:true});
//				bp3d_contents_store.load({params:params});

				bp3d_contents_load_store.on('load',load_bp3d_contents_store,this,{single:true});
				bp3d_contents_load_store.load({params:params});

			}else{

				var runner = new Ext.util.TaskRunner();
				var task = {
					run: function(){
						var contents_tabs = Ext.getCmp('contents-tab-panel');
						if(contents_tabs){
							runner. stop(this);
							load_bp3d_contents_store(bp3d_contents_load_store,[],{});
						}
					},
					interval: 1000 //1 second
				}
				runner.start(task);

//				setTimeout(function(){
//					load_bp3d_contents_store(bp3d_contents_load_store,[],{});
//				},5000);
			}
		}
	}
}



function get_bp3d_contents_store_fields(){
	return [
		'id',
		'pid',
		't_type',
		'name',
		'src',
		'srcstr',
		'f_id',
		'b_id',
		'common_id',
		'name_j',
		'name_e',
		'name_k',
		'name_l',
		'syn_j',
		'syn_e',
		'def_e',
		'organsys_j',
		'organsys_e',
		'organsys',
		'phase',
		{name:'xmin',   type:'float'},
		{name:'xmax',   type:'float'},
		{name:'ymin',   type:'float'},
		{name:'ymax',   type:'float'},
		{name:'zmin',   type:'float'},
		{name:'zmax',   type:'float'},
		{name:'volume', type:'float'},
		{name:'density', type:'float'},
		'used_parts',
		{name:'used_parts_num',type:'int'},
		'density_icon',
		'density_ends',
		{name:'density_ends_num',type:'int'},
		{name:'primitive',type:'boolean'},
		'taid',
		'physical',
		{name:'phy_id',type:'int'},
		'segment',
		'seg_color',
		'seg_thum_bgcolor',
		'seg_thum_bocolor',
		{name:'seg_id',type:'int'},
		'lsdb_term',
		'version',
		{name:'tg_id',type:'int',convert:function(v,r){
			if(Ext.isEmpty(v)){
				return r.md_id;
			}else{
				return v;
			}
		}},
		{name:'tgi_id',type:'int',convert:function(v,r){
			if(Ext.isEmpty(v)){
				return r.mv_id;
			}else{
				return v;
			}
		}},
		{name:'bul_id',type:'int'},
		{name:'cb_id',type:'int'},
		{name:'ci_id',type:'int'},
		{name:'md_id',type:'int'},
		{name:'mv_id',type:'int'},
		{name:'mr_id',type:'int'},
		{name:'but_cnum',type:'int'},
		{name:'icon',type:'string'},

		{name:'tweet_num',type:'int',defaultValue:0},
		{name:'tweets',type:'auto'},
		'mca_id',

		'model',
		'model_version',
		'concept_info',
		'concept_build',
		'buildup_logic',
		{name:'bu_revision',type:'int'},

		'state',
		'def_color',
		{name:'point',type:'boolean'},
		'elem_type',
		'point_label',
		'point_parent',
		'point_children',
		{name:'entry', type:'date', dateFormat:'timestamp'},
		{name:'lastmod', type:'date', dateFormat:'timestamp'},
		'search_c_path',
		'c_path',
		'u_path',
		'is_a',
		'part_of',
		'has_part',
		'is_a_path2root',
		'is_a_brother',
		'is_a_children',
		'partof_path2root',
		'partof_path2root_circular',
		'partof_brother',
		'partof_children'
	];
}

bp3d_contents_store = new Ext.data.JsonStore({
	url: 'get-contents.cgi',
	pruneModifiedRecords : true,
	root: 'images',
	fields: get_bp3d_contents_store_fields(),
	listeners: {
		'beforeload' : {
			fn:function(self,options){
//				_dump("bp3d_contents_store.beforeload()");
				try{
					self.baseParams = self.baseParams || {};
					delete gParams.parent;
					if(!Ext.isEmpty(gParams.parent)) self.baseParams.parent = gParams.parent;
					self.baseParams.lng = gParams.lng;

					delete self.baseParams.t_type;
					try{var treeType = Ext.getCmp('bp3d-tree-type-combo').getValue();}catch(e){treeType=undefined;}
					if(!Ext.isEmpty(treeType)) self.baseParams.t_type = treeType;

					try{var position = Ext.getCmp('positionSelect').getValue();}catch(e){position=undefined;}
					if(!Ext.isEmpty(position)) self.baseParams.position = position;

					self.baseParams.sorttype = '';
					try{var bp3d_sorttype = Ext.getCmp('sortSelect').getValue();}catch(e){_dump("bp3d_contents_store.beforeload():e=["+e+"]");bp3d_sorttype=undefined;}
					if(!Ext.isEmpty(bp3d_sorttype)) self.baseParams.sorttype = bp3d_sorttype;


					delete self.baseParams.version;
					if(options.params && options.params.version){
						self.baseParams.version = options.params.version;
						init_bp3d_version = options.params.version;
					}else{
						try{
							self.baseParams.version = Ext.getCmp('bp3d-version-combo').getValue();
						}catch(e){
							_dump("bp3d_contents_store.beforeload():e=["+e+"]");
						}
					}
					if(Ext.isEmpty(self.baseParams.version)) self.baseParams.version = init_bp3d_version;

					try{var detailEl = Ext.getCmp('img-detail-panel').body;}catch(e){}
					try{var commentDetailEl = Ext.getCmp('comment-detail-panel').body;}catch(e){}

					if(detailEl) detailEl.update('<div style="padding:10px;font-size:11px;"><img src="ext-2.2.1/resources/images/default/tree/loading.gif">データ読込中 ...</div>');
					if(commentDetailEl) commentDetailEl.update('<div style="padding:10px;font-size:11px;"><img src="ext-2.2.1/resources/images/default/tree/loading.gif">データ読込中 ...</div>');

					var bp3d_contents_detail_annotation_panel = Ext.getCmp('bp3d-contents-detail-annotation-panel');
					if(bp3d_contents_detail_annotation_panel){
						bp3d_contents_detail_annotation_panel.disable();
						if(bp3d_contents_detail_annotation_panel.bottomToolbar) bp3d_contents_detail_annotation_panel.bottomToolbar.disable();
					}
//					for(var key in self.baseParams){
//						_dump("bp3d_contents_store.beforeload():["+key+"]=["+self.baseParams[key]+"]");
//					}

					for(var key in init_bp3d_params){
						if(key.match(/_id$/)) self.baseParams[key] = init_bp3d_params[key];
					}

					try{var treeType = Ext.getCmp('bp3d-tree-type-combo').getValue();}catch(e){treeType=undefined;}
					if(!Ext.isEmpty(treeType)) self.baseParams.bul_id = treeType;

					try{
						var store = Ext.getCmp('bp3d-version-combo').getStore();
						var idx = store.findBy(function(record,id){
							if(record.data.tgi_version==self.baseParams.version) return true;
						});
						if(idx>=0){
							var record = store.getAt(idx);
							if(record){
								self.baseParams.md_id = record.data.md_id;
								self.baseParams.mv_id = record.data.mv_id;
								self.baseParams.mr_id = record.data.mr_id;
								self.baseParams.ci_id = record.data.ci_id;
								self.baseParams.cb_id = record.data.cb_id;
							}
						}
					}catch(e){}


					self.baseParams.degenerate_same_shape_icons = false;
					if($("input#bp3d-content-panel-header-content-degenerate-same-shape-icons:checked").val()) self.baseParams.degenerate_same_shape_icons = true;
//					console.log("self.baseParams.degenerate_same_shape_icons=["+self.baseParams.degenerate_same_shape_icons+"]");

				}catch(e){
					_dump("bp3d_contents_store.beforeload():"+e);
				}
			},
			scope:this
		},
		'datachanged':{
			fn:function(self){
//				_dump("bp3d_contents_store.datachanged()");
				try{
//					var bp3d_contents_dataview = Ext.getCmp('bp3d-contents-dataview');
					var bp3d_contents_dataview = getViewImages();
					if(bp3d_contents_dataview){
						setTimeout(function(){
							try{
								bp3d_contents_dataview.show();
								var num = -1;
								var id = null;
								var fmaid = Cookies.get('ag_annotation.images.fmaid');
//								_dump("bp3d_contents_store.datachanged():fmaid=["+fmaid+"]");
								if(fmaid){
									num = self.find("f_id",fmaid);
									if(num<0){
//										Cookies.set('ag_annotation.images.fmaid','');
									}else{
//										var record = self.getAt(num);
//										if(record) id = record.data.id;
									}
								}
//								_dump("bp3d_contents_store.datachanged():fmaid=["+fmaid+"]["+num+"]");
								if(num<0){
									num = 0;
								}
								if(num>=0){
									bp3d_contents_dataview.select(num);
/*
									var element = bp3d_contents_dataview.getEl();
									if(element){
										element.dom.scrollTop = 0;
										var dom = Ext.getDom("contents_"+id);
										if(id && dom){
											element.dom.parentNode.scrollTop = dom.offsetTop - 4;
										}else{
											element.dom.parentNode.scrollTop = 0;
										}
									}
*/
									var element = bp3d_contents_dataview.getEl();
									if(element){
										element.dom.scrollTop = 0;
										var nodes = bp3d_contents_dataview.getSelectedNodes();
										if(nodes && nodes.length){
											var dom = nodes[0];
											if(dom){
												element.dom.parentNode.scrollTop = dom.offsetTop - 4;
											}else{
												element.dom.parentNode.scrollTop = 0;
											}
										}
									}

								}else{
									showDetails();
								}
								var chooserCmp = Ext.getCmp('img-chooser-view');
								var detailCmp = Ext.getCmp('img-detail-panel');
								var chooserEl = chooserCmp.body;
								var filterCmp = Ext.getCmp('filter');
								var sortCmp = Ext.getCmp('sortSelect');
								var positionCmp = Ext.getCmp('positionSelect');
								var disptypeCmp = Ext.getCmp('disptypeSelect');
								var addcommentCmp = Ext.getCmp('btn-add-comment');

								if(bp3d_contents_dataview.store.getRange().length>0){
									if(chooserCmp) chooserCmp.show();
									if(detailCmp) detailCmp.show();
									if(chooserEl) chooserEl.show();
									if(filterCmp) filterCmp.enable();
									if(sortCmp) sortCmp.enable();
									if(positionCmp) positionCmp.enable();
									if(disptypeCmp) disptypeCmp.enable();
									if(addcommentCmp) addcommentCmp.enable();
								}else{
									if(addcommentCmp) addcommentCmp.disable();
								}

							}catch(e){alert(e)}
						},250);
					}
				}catch(e){
					_dump("bp3d_contents_store.datachanged():"+e);
				}
			},scope:this},
		'load': {
			fn: function(store,records){

//				_dump("bp3d_contents_store.load("+records.length+")");
				if(store.reader.jsonData){
//					_dump(store.reader.jsonData);
					for(var key in store.reader.jsonData){
						if(
							typeof store.reader.jsonData[key] != 'number' &&
							typeof store.reader.jsonData[key] != 'string' &&
							typeof store.reader.jsonData[key] != 'boolean'
						) continue;
						init_bp3d_params[key] = store.reader.jsonData[key];
//						_dump("bp3d_contents_store.load():["+key+"]=["+init_bp3d_params[key]+"]["+(typeof init_bp3d_params[key])+"]");
					}
				}
				var buildup_logic = ' Tree of ';
				var ci_name = 'FMA';
				var cb_name = '3.0';
				if(store.reader.jsonData.ci_name) ci_name = store.reader.jsonData.ci_name;
				if(store.reader.jsonData.cb_name) cb_name = store.reader.jsonData.cb_name;
				Ext.get('bp3d-buildup-logic-contents-label').update((init_bp3d_params.bul_id==3 ? 'IS-A' : 'HAS-PART')+buildup_logic+ci_name+cb_name);

				Ext.get('bp3d-concept-info-label').update(ci_name);
				Ext.get('bp3d-concept-build-label').update(cb_name);

				try{filter_func();}catch(e){}
			},scope:this
		},
		'loadexception': {
			fn:function(){

Ext.get('bp3d-buildup-logic-contents-label').update('');

				_dump("bp3d_contents_store.loadexception()");
				try{
					var viewport = Ext.getCmp('viewport');
					if(viewport && viewport.loadMask){
						viewport.loadMask.hide();
						delete viewport.loadMask;
						var contents_tabs = Ext.getCmp('contents-tab-panel');
						if(contents_tabs) contents_tabs.setActiveTab('contents-tab-bodyparts-panel');
					}
				}catch(e){}
				try{
//					var bp3d_contents_dataview = Ext.getCmp('bp3d-contents-dataview');
					var bp3d_contents_dataview = getViewImages();
					if(bp3d_contents_dataview) bp3d_contents_dataview.hide();

					var chooserEl = Ext.getCmp('img-chooser-view').body;
					if(chooserEl) chooserEl.hide();
					try{
						var detailEl = Ext.getCmp('img-detail-panel').body;
						if(detailEl) detailEl.update('');
					}catch(e){}

					var filterCmp = Ext.getCmp('filter');
					if(filterCmp) filterCmp.disable();

					var sortCmp = Ext.getCmp('sortSelect');
					if(sortCmp) sortCmp.disable();

					var positionCmp = Ext.getCmp('positionSelect');
					if(positionCmp) positionCmp.disable();

					var disptypeCmp = Ext.getCmp('disptypeSelect');
					if(disptypeCmp) disptypeCmp.disable();


					var addcommentCmp = Ext.getCmp('btn-add-comment');
					if(addcommentCmp) addcommentCmp.disable();
				}catch(e){
					_dump("bp3d_contents_store.loadexception():"+e);
				}
			},scope:this
		}
	}
});

bp3d_contents_load_store = new Ext.data.JsonStore({
	url: 'get-contents.cgi',
	pruneModifiedRecords : true,
	root: 'images',
	fields: get_bp3d_contents_store_fields(),
	listeners: {
		'beforeload' : {
			fn:function(self,options){
				_dump("bp3d_contents_load_store.beforeload()");
				_dump(options);
				try{
					self.baseParams = self.baseParams || {};
					delete gParams.parent;
					if(!Ext.isEmpty(gParams.parent)) self.baseParams.parent = gParams.parent;
					self.baseParams.lng = gParams.lng;

					delete self.baseParams.t_type;
					try{var treeType = Ext.getCmp('bp3d-tree-type-combo').getValue();}catch(e){treeType=undefined;}
					if(!Ext.isEmpty(treeType)) self.baseParams.t_type = treeType;

					try{var position = Ext.getCmp('positionSelect').getValue();}catch(e){position=undefined;}
					if(!Ext.isEmpty(position)) self.baseParams.position = position;

					self.baseParams.sorttype = '';
					try{var bp3d_sorttype = Ext.getCmp('sortSelect').getValue();}catch(e){_dump("bp3d_contents_store.beforeload():e=["+e+"]");bp3d_sorttype=undefined;}
					if(!Ext.isEmpty(bp3d_sorttype)) self.baseParams.sorttype = bp3d_sorttype;

					delete self.baseParams.version;
					if(options.params && options.params.version){
						self.baseParams.version = options.params.version;
						init_bp3d_version = options.params.version;
						try{
							var store = Ext.getCmp('bp3d-version-combo').getStore();
						}catch(e){
							_dump("bp3d_contents_load_store.beforeload():e=["+e+"]");
						}
					}else{
						try{
							self.baseParams.version = Ext.getCmp('bp3d-version-combo').getValue();
						}catch(e){
							_dump("bp3d_contents_load_store.beforeload():e=["+e+"]");
						}
					}
					if(Ext.isEmpty(self.baseParams.version)) self.baseParams.version = init_bp3d_version;

					_dump(self.baseParams);

				}catch(e){
					_dump("bp3d_contents_load_store.beforeload():"+e);
				}
			},
			scope:this
		},
		'datachanged' : {
			fn:function(self,options){
				_dump("bp3d_contents_load_store.datachanged()");
			}
		},
		load: {
			fn:function(store,records){
				_dump("bp3d_contents_load_store.load("+records.length+")");
				if(store.reader.jsonData){
					_dump(store.reader.jsonData);
					for(var key in store.reader.jsonData){
						if(
							typeof store.reader.jsonData[key] != 'number' &&
							typeof store.reader.jsonData[key] != 'string'
						) continue;
						init_bp3d_params[key] = store.reader.jsonData[key];
//						_dump("bp3d_contents_load_store.load():["+key+"]=["+init_bp3d_params[key]+"]["+(typeof init_bp3d_params[key])+"]");
					}
				}
			}
		},
		' loadexception' : {
			fn:function(self,records){
				_dump("bp3d_contents_load_store.loadexception()");
			}
		}
	}
});





var ag_put_usersession_task = new Ext.util.DelayedTask(function(){
//_dump("ag_put_usersession_task():["+makeAnatomoPrm()+"]");
//_dump("ag_put_usersession_task():["+makeAnatomoPrm(2)+"]");
	Ext.Ajax.request({
		url       : 'put-usersession.cgi',
		method    : 'POST',
		params    : {
			info  : makeAnatomoPrm(2),
			state : Ext.util.JSON.encode(glb_us_state),
			keymap : Ext.util.JSON.encode(glb_us_keymap)
		},
		success   : function(conn,response,options,aParam){
//			_dump("ag_put_usersession_task():put-usersession.cgi:success");
		},
		failure : function(conn,response,options){
//			_dump("ag_put_usersession_task():put-usersession.cgi:failure");
		}
	});
});

var ag_keymap_fields = [
	{name : 'order', type : 'int'},
	{name : 'key',   type : 'string'},
	{name : 'code',  type : 'int'},
	{name : 'shift', type : 'boolean', defaultValue : false},
	{name : 'ctrl',  type : 'boolean', defaultValue : false},
	{name : 'alt',   type : 'boolean', defaultValue : false},
	{name : 'stop',  type : 'boolean', defaultValue : true},
	{name : 'cmd',   type : 'string'}
];

var ag_keymap_store = new Ext.data.JsonStore({
	root   : 'keymaps',
	fields : ag_keymap_fields,
	sortInfo : {
		field     : 'order',
		direction : 'ASC'
	},
	totalProperty : glb_us_keymap.length,
	data : {
		keymaps : glb_us_keymap
	},
	listeners : {
		'add' : function(store,records,index){
//			_dump("ag_keymap_store:add()");
		},
		'remove' : function(store,record,index){
//			_dump("ag_keymap_store:remove()");
		},
		'update' : function(store,record,operation){
//			_dump("ag_keymap_store:update()");
		}
	}
});
//_dump("ag_keymap_store=["+ag_keymap_store.getCount()+"]");



function agKeyMapCB(k,e){
	var contents_tabs = Ext.getCmp('contents-tab-panel');
	if(contents_tabs.getActiveTab().id != 'contents-tab-anatomography-panel') return;
	var shiftKey = e.shiftKey?true:false;
	var ctrlKey = e.ctrlKey?true:false;
	var altKey = e.altKey?true:false;
	var index = ag_keymap_store.findBy(function(record,id){
		var key = record.get('key');
		var code = Ext.EventObject[key];
		var shift = record.get('shift');
		var ctrl = record.get('ctrl');
		var alt = record.get('alt');
		return (k==code && shift==shiftKey && ctrl==ctrlKey && alt==altKey)?true:false;
	});
//	_dump("agKeyMapCB():index=["+index+"]");
	if(index<0) return;
	var record = ag_keymap_store.getAt(index);
	var cmd = record.get('cmd');
	var stop = record.get('stop');
	var cmp = cmd?Ext.getCmp(cmd):undefined;
	if(!cmp) return;
	if(cmp.xtype=='checkbox'){
		cmp.show();
		cmp.setChecked(cmp.checked?false:true)
		cmp.hide();
		if(stop) e.stopEvent();
	}else{
		if(cmp.fireEvent('click',cmp) && stop) e.stopEvent();
	}
}
var agKeyMapNames = [];
var agKeyMapNameToCode = {};
var agKeyMapCodeToName = {};
for(var key in Ext.EventObject){
	if(typeof Ext.EventObject[key] != 'number') continue;
	switch (key){
		case 'button':
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case 'ZERO':
		case 'ONE':
		case 'TWO':
		case 'THREE':
		case 'FOUR':
		case 'FIVE':
		case 'SIX':
		case 'SEVEN':
		case 'EIGHT':
		case 'NINE':
		case 'NUM_ZERO':
		case 'NUM_ONE':
		case 'NUM_TWO':
		case 'NUM_THREE':
		case 'NUM_FOUR':
		case 'NUM_FIVE':
		case 'NUM_SIX':
		case 'NUM_SEVEN':
		case 'NUM_EIGHT':
		case 'NUM_NINE':
		case 'ALT':
		case 'CONTROL':
		case 'SHIFT':
			continue
	}
	agKeyMapNames.push(key);
	agKeyMapCodeToName[Ext.EventObject[key]] = key;
	agKeyMapNameToCode[key] = {
		code : Ext.EventObject[key]
	};
}
agKeyMapNames.sort();

var agKeyMap;
function agKeyMapExec(){
	if(window.agKeyMap){
		window.agKeyMap.disable();
		window.agKeyMap = undefined;
		delete window.agKeyMap;
	}
	var hash = {};
	var hash_key;
	var KeyMapConfig = [];
	var len = ag_keymap_store.getCount();
	var i;
	for(i=0;i<len;i++){
		var record = ag_keymap_store.getAt(i);
		var key = record.get('key');
		var code = Ext.EventObject[key];
		var shift = record.get('shift');
		var ctrl = record.get('ctrl');
		var alt = record.get('alt');
		var stop = record.get('stop');
//		_dump("["+i+"]:["+key+"]["+code+"]["+shift+"]["+ctrl+"]["+alt+"]["+stop+"]");
		hash_key = code;
		hash_key += '	'+shift;
		hash_key += '	'+ctrl;
		hash_key += '	'+alt;
		hash_key += '	'+stop;
		if(hash[hash_key]) continue;
		KeyMapConfig.push({
			key       : code,
			shift     : shift,
			ctrl      : ctrl,
			alt       : alt,
			fn        : agKeyMapCB,
			scope     : this,
			stopEvent : stop
		});
		hash[hash_key] = true;
	}
	window.agKeyMap = new Ext.KeyMap(document, KeyMapConfig);
	KeyMapConfig = undefined;
}
agKeyMapExec();
// /bp3d/ag-in-service/htdocs/ag_annotation_js.cgiより自動生成
var comment_status = [];
comment_status[1]="Pending";
comment_status[2]="OK";
var gBP3D_TPAP;
var gSelNode = null;
var gDispAnatomographyPanel = false;
var gID2TreeGroup = {"4":"SPL-PNL Brain Atlas","1":"BodyParts3D","3":"Atlas of the Human Brain","2":"Talairach Brain Atlas"};
var gTreeGroup2ID = {"BodyParts3D":"1","Talairach Brain Atlas":"2","Atlas of the Human Brain":"3","SPL-PNL Brain Atlas":"4"};

//isEditablePartsList = function(){
//	var disabled = true;
//	try{disabled = Ext.getCmp('bp3d-home-group-btn').disabled;}catch(e){}
//	return disabled;
//};

makeCopyListText = function(grid,records){
	try{
		var radio = Ext.getCmp('bp3d-pallet-copy-radio-tab');
		try{var copy_type = radio.getGroupValue();}catch(e){copy_type='tab';}
		var copy_type_obj;
//_dump("makeCopyListText():copy_type=["+copy_type+"]");
		if(copy_type=='csv'){
			copy_type_obj = CSVData;
		}else{
			copy_type_obj = TabData;
		}

		var copyText = "";
		var column = [];

		if(grid instanceof Ext.grid.GridPanel){
			var dataIndex;
			var data;
			var columnModel = grid.getColumnModel();
			var columnCount = columnModel.getColumnCount(false);
			for(var colIndex=0;colIndex<columnCount;colIndex++){
				if(columnModel.isHidden(colIndex)) continue;
				dataIndex = columnModel.getDataIndex(colIndex);
				if(dataIndex=='partslist'||dataIndex=='icon') continue;
				column.push(copy_type_obj.escape(columnModel.getColumnHeader(colIndex)));
			}
			copyText = column.join(copy_type_obj.colDelimiter)+"\n";

			for(var i=0;i<records.length;i++){
				column = [];
				for(var colIndex=0;colIndex<columnCount;colIndex++){
					if(columnModel.isHidden(colIndex)) continue;
					dataIndex = columnModel.getDataIndex(colIndex);
					if(dataIndex=='partslist'||dataIndex=='icon') continue;
					if(records[i].data){
						data = records[i].data[dataIndex];
					}else{
						data = records[i][dataIndex];
					}
					if(dataIndex=='tg_id') data = gID2TreeGroup[data];
					column.push(copy_type_obj.escape(data));
				}
				copyText += column.join(copy_type_obj.colDelimiter)+"\n";
			}
		}else if(grid instanceof Ext.DataView && records.length>0){
			var columnModel = Ext.getCmp('navigate-grid-panel').getColumnModel();
			var columnCount = columnModel.getColumnCount(false);
			for(var colIndex=0;colIndex<columnCount;colIndex++){
				dataIndex = columnModel.getDataIndex(colIndex);
				if(dataIndex=='partslist'||dataIndex=='icon') continue;
				column.push(copy_type_obj.escape(columnModel.getColumnHeader(colIndex)));
			}
			copyText = column.join(copy_type_obj.colDelimiter)+"\n";

			for(var i=0;i<records.length;i++){
				column = [];
				for(var colIndex=0;colIndex<columnCount;colIndex++){
					dataIndex = columnModel.getDataIndex(colIndex);
					if(dataIndex=='partslist'||dataIndex=='icon') continue;
					if(records[i].data){
						data = records[i].data[dataIndex];
					}else{
						data = records[i][dataIndex];
					}
					if(dataIndex=='tg_id') data = gID2TreeGroup[data];
					column.push(copy_type_obj.escape(data));
				}
				copyText += column.join(copy_type_obj.colDelimiter)+"\n";
			}
		}
		var textarea = Ext.getCmp('bp3d-pallet-copy-textarea');
		textarea.setValue(copyText);
		textarea.enable();
	}catch(e){
		_dump("makeCopyListText():"+e);
	}
};

copyListCB = function(grid,records,title){

	var bp3d_pallet_copy_window = new Ext.Window({
		id          : 'bp3d-pallet-copy-window',
		title       : title,
		width       : 600,
		height      : 300,
		layout      : 'form',
		plain       : true,
		bodyStyle   : 'padding:5px;text-align:right;',
		buttonAlign : 'center',
		modal       : true,
		resizable   : true,
		labelWidth  : 68,
		items       : [
		{
			xtype      : 'radiogroup',
			id         : 'bp3d-pallet-copy-radiogroup',
			fieldLabel : 'Copy Type',
//			columns    : [144,184],
			columns    : 2,
			height     : 22,
//			width      : 328,
			width      : 450,
			items      : [
				{boxLabel:'Tab-Separated Values',   id:'bp3d-pallet-copy-radio-tab', name:'copy-list-type', hideLabel:true, inputValue:'tab', checked: true},
				{boxLabel:'Comma-Separated Values', id:'bp3d-pallet-copy-radio-csv', name:'copy-list-type', hideLabel:true, inputValue:'csv', listeners:{'check':function(radio,checked){makeCopyListText(grid,records);},scope : this}}
			]
		},
		{
			xtype         : 'textarea',
			id            : 'bp3d-pallet-copy-textarea',
			hideLabel     : true,
			anchor        : '100% -30',
			selectOnFocus : true,
			disabled      : true,
			value         : "",
			listeners : {
				'render' : function(radiogroup){
					makeCopyListText(grid,records);
				}
			}
		}
		],
		buttons : [{
			text    : 'OK',
			handler : function(){
				bp3d_pallet_copy_window.close();
				bp3d_pallet_copy_window = undefined;
			}
		}]
	});
	bp3d_pallet_copy_window.show();
};

copyList = function(grid,store){
	if(store == undefined) store = grid.getStore();
//_dump("copyList():grid=["+(typeof grid)+"]["+((grid instanceof Ext.grid.GridPanel)?true:false)+"]");
	var window_title = get_ag_lang('COPY_TITLE');
	var records = [];
	if(grid instanceof Ext.grid.GridPanel){
		records = grid.getSelectionModel().getSelections();
	}else if(grid instanceof Ext.DataView){
		records = grid.getSelectedRecords();
		if(records.length==0) records = store.getRange();
	}
	if(records.length>0){
		copyListCB(grid,records,window_title);
	}else if(store.getCount() == store.getTotalCount()){
		copyListCB(grid,store.getRange(),window_title);
	}else{
		var baseParams = store.baseParams;
		var lastOptions = store.lastOptions;
		var params = {};
		for(var key in baseParams){
			params[key] = baseParams[key];
		}
		for(var key in lastOptions){
			params[key] = lastOptions[key];
		}
		delete params.start;
		delete params.limit;

		Ext.Ajax.request({
			url     : store.url,
			method  : 'POST',
			params  : params,
			success : function(conn,response,options){
				try{var results = Ext.util.JSON.decode(conn.responseText);}catch(e){}
				if(!results || results.success == false){
					var msg = '';
					if(results && results.msg) msg += ' ['+results.msg+' ]';
					Ext.MessageBox.show({
						title   : window_title,
						msg     : msg,
						buttons : Ext.MessageBox.OK,
						icon    : Ext.MessageBox.ERROR
					});
					return;
				}
				try{
					if(results.records) copyListCB(grid,results.records,window_title);
				}catch(e){
					_dump("501:"+e);
				}
			},
			failure : function(conn,response,options){
				try{var results = Ext.util.JSON.decode(conn.responseText);}catch(e){}
				var msg = '[';
				if(results && results.msg){
					msg += results.msg+' ]';
				}else{
					msg += conn.status+" "+conn.statusText+' ]';
				}
				Ext.MessageBox.show({
					title   : window_title,
					msg     : msg,
					buttons : Ext.MessageBox.OK,
					icon    : Ext.MessageBox.ERROR
				});
			}
		});
	}
};

TabData = {
	colDelimiter : '\t',
	parse : function(data){
		data = data.trim();
		var rows = data.split("\n");
		if(rows.length>=1) rows[0] = rows[0].replace(/^#+/g,"").split(TabData.colDelimiter);
		var i;
		for(i=1;i<rows.length;i++){
			rows[i] = rows[i].split("\t");
			rows[i][rows[i].length-1] = rows[i][rows[i].length-1].replace(/\s$/g,"")
		}
		return rows;
	},
	escape : function(value){
		return value;
	}
};

CSVData = {
	colDelimiter : ',',
	parse : function(data){
		var rows = new Array();
		var cols = new Array();
		var quated = false;
		var colStartIndex = 0;
		var quateCount = 0;
		var i;
		for(i=0;i<data.length;i++){
			var c = data.charAt(i);
			if(c == '"'){
				quateCount++;
				if(!quated){
					quated = true;
				}else{
					if(quateCount % 2 == 0 ){
						if(i == data.length - 1 || data.charAt(i + 1) != '"'){
							quated = false;
						}
					}
				}
			}
			if(quated) continue;
			if(c == CSVData.colDelimiter){
				var value = data.substring(colStartIndex, i);
				value = CSVData.unescape(value);
				cols.push(value);
				colStartIndex = i + 1;
			}else if(c == "\r"){
				var value = data.substring(colStartIndex, i);
				value = CSVData.unescape(value);
				cols.push(value);
				i += 1;
				colStartIndex = i + 1;
				rows.push(cols);
				cols = new Array();
			}else if(c == "\n"){
				var value = data.substring(colStartIndex, i);
				value = CSVData.unescape(value);
				cols.push(value);
				colStartIndex = i + 1;
				rows.push(cols);
				cols = new Array();
			}
		}
		if(cols.length>0 && colStartIndex<i-1){
			var value = data.substring(colStartIndex).replace(/\s+$/g,"");
			value = CSVData.unescape(value);
			cols.push(value);
			rows.push(cols);
		}
		return rows;
	},
	escape : function(value){
		if(Ext.isEmpty(value)) return value;
		if(typeof value == "string"){
			value = value.replace(/"/g, '""');
			value = '"' + value + '"';
		}
		return value;
	},
	unescape : function(value){
		if(typeof value == "string"){
			if(value.charAt(0) == '"' && value.charAt(value.length-1) == '"') value = value.substring(1, value.length-1);
			value = value.replace(/""/g, '"');
		}
		return value;
	}
};

pasteTextareaSpecialkeyCB = function(textarea, e){
	if(e.getKey() == e.TAB){
		e.stopEvent();
		var elem = textarea.el.dom;
		var value = (new String(elem.value)).replace(/0x0d0x0a|0x0d|0x0a|\r\n/g,"\n");
		var selectionStart = -1;
		var selectionEnd = -1;
		if(elem.selectionStart != undefined && elem.selectionEnd != undefined){
			selectionStart = elem.selectionStart;
			selectionEnd = elem.selectionEnd;
		}else if(Ext.isIE){
			elem.focus();
			var r = document.selection.createRange();
			var len = r.text.replace(/\r/g, "").length;
			var br = document.body.createTextRange();
			br.moveToElementText(elem);
			var all_len = br.text.replace(/\r/g, "").length;
			br.setEndPoint("StartToStart",r);
			selectionStart = all_len - br.text.replace(/\r/g, "").length;
			selectionEnd = selectionStart + len;
		}
		if(selectionStart<0 || selectionEnd<0) return;
		var l = value.substr(0,selectionStart)+"\t";
		var c = value.substr(selectionStart,selectionEnd-selectionStart);
		var r = value.substr(selectionEnd);
		textarea.setRawValue(l+r);
		if(elem.selectionStart != undefined && elem.selectionEnd != undefined){
			elem.selectionStart = elem.selectionEnd = l.length;
		}else if(Ext.isIE){
			var range = elem.createTextRange();
			range.move("character",l.length);
			range.select();
		}
	}
};

pasteList = function(pasteText){
	if(pasteText==undefined || typeof pasteText != 'string') pasteText = '';
	var title = get_ag_lang('PASTE_TITLE');
	if(pasteText!='') title += ' <label style="color:red;">Error!!</label>';
	var bp3d_pallet_paste_window = new Ext.Window({
		id          : 'bp3d-pallet-paste-window',
		title       : title,
		width       : 600,
		height      : 450,
		layout      : 'form',
		plain       : true,
		bodyStyle   : 'padding:5px;text-align:right;',
		buttonAlign : 'center',
		modal       : true,
		resizable   : true,
		labelWidth  : 68,
		items       : [
		{
			xtype           : 'textarea',
			id              : 'bp3d-pallet-paste-textarea',
			hideLabel       : true,
			anchor          : '100% -185',
			selectOnFocus   : true,
			allowBlank      : false,
			value           : pasteText,
			enableKeyEvents : Ext.isChrome,
			listeners       : {
				'keydown' : pasteTextareaSpecialkeyCB,
				'specialkey' : pasteTextareaSpecialkeyCB,
				'valid' : function (textarea){
					var button = Ext.getCmp('bp3d-pallet-paste-ok-button');
					if(button && button.rendered) button.enable();
				},
				scope: this
			}
		}
		,
		{
			xtype      : 'radiogroup',
			id         : 'bp3d-pallet-paste-radiogroup',
			fieldLabel : 'Paste Type',
			columns    : 2,
			height     : 22,
			width      : 450,
			items      : [{
				boxLabel:'Tab-Separated Values',
				id:'bp3d-pallet-paste-radio-tab',
				name:'paste-list-type',
				hideLabel:true,
				inputValue:'tab',
				checked: true,
				handler:function(checkbox,checked){
					if(!checked) return;
					try{
						Ext.getCmp('bp3d-pallet-paste-description').layout.setActiveItem('bp3d-pallet-paste-description-'+checkbox.getGroupValue());
					}catch(e){
						_dump(e);
					}
				}
			},{
				boxLabel:'Comma-Separated Values',
				id:'bp3d-pallet-paste-radio-csv',
				name:'paste-list-type',
				hideLabel:true,
				inputValue:'csv',
				handler:function(checkbox,checked){
					if(!checked) return;
					try{
						Ext.getCmp('bp3d-pallet-paste-description').layout.setActiveItem('bp3d-pallet-paste-description-'+checkbox.getGroupValue());
					}catch(e){
						_dump(e);
					}
				}
			}]
		}
		,
		{
			id         : 'bp3d-pallet-paste-description',
			hideLabel  : true,
			layout     :'card',
			frame      : true,
			anchor     : '100%',
			height     : 155,
			activeItem : 0,
			bodyStyle  : 'padding:2px;text-align:left;',
			autoScroll : true,
			defaults: {
				border:false
			},
			items: [{
				id  : 'bp3d-pallet-paste-description-tab',
				html: '<div style="margin-bottom:4px;">'+get_ag_lang('PASTE_DESC_TAB')+'</div><label>Sample:</label><br/><textarea wrap=off readonly style="font-size:12px;width:90%;height:60px;margin-left:1em;">'+get_ag_lang('CDI_NAME')+'	Value\nFMA7148	10000\nFMA7198	42000\nFMA7202	481\nFMA7204	-1589\nFMA7205	-20000</textarea>'
			},{
				id  : 'bp3d-pallet-paste-description-csv',
				html: '<div style="margin-bottom:4px;">'+get_ag_lang('PASTE_DESC_CSV')+'</div><label>Sample:</label><br/><textarea wrap=off readonly style="font-size:12px;width:90%;height:60px;margin-left:1em;">'+get_ag_lang('CDI_NAME')+',Value\nFMA7148,10000\nFMA7198,42000\nFMA7202,481\nFMA7204,-1589\nFMA7205,-20000</textarea>'
			}]
		}

		],
		buttons : [{
			text     : 'OK',
			id       : 'bp3d-pallet-paste-ok-button',
			handler  : function(b,e){
				var textarea = Ext.getCmp('bp3d-pallet-paste-textarea');
				if(!textarea.validate()) return;

				bp3d_pallet_paste_window.loadMask.show();
				b.disable();
				Ext.getCmp('bp3d-pallet-paste-cancel-button').disable();
				var pasteText = textarea.getValue();
				textarea.disable();
				setTimeout(function(){
					try{
						if(pasteText){
							try{var paste_type = Ext.getCmp('bp3d-pallet-paste-radio-tab').getGroupValue();}catch(e){paste_type='tab';}

							var cvs_arr = CSVData.parse(pasteText);
							var cvs_title_arr = cvs_arr.shift();
							var tab_arr = TabData.parse(pasteText);
							var tab_title_arr = tab_arr.shift();
							if(paste_type=='csv' && cvs_title_arr.length<tab_title_arr.length){
								Ext.Msg.show({
									title:'Paste Type?',
									msg: 'Is this a Comma-Separated Values ?',
									buttons: Ext.Msg.YESNO,
									fn: function(buttonId){
										if(buttonId=='no'){
											pasteCancel();
										}else{
											pasteCB(pasteText);
										}
									},
									icon: Ext.MessageBox.QUESTION
								});
							}else if(paste_type=='tab' && cvs_title_arr.length>tab_title_arr.length){
								Ext.Msg.show({
									title:'Paste Type?',
									msg: 'Is this a Tab-Separated Values ?',
									buttons: Ext.Msg.YESNO,
									fn: function(buttonId){
										if(buttonId=='no'){
											pasteCancel();
										}else{
											pasteCB(pasteText);
										}
									},
									icon: Ext.MessageBox.QUESTION
								});
							}else{
								pasteCB(pasteText);
							}
						}else{
							pasteCancel();
						}
					}catch(e){
						_dump(e);
						pasteCancel();
					}
				},0);
			}
		},{
			text    : 'Cancel',
			id      : 'bp3d-pallet-paste-cancel-button',
			handler : function(){
				bp3d_pallet_paste_window.close();
				bp3d_pallet_paste_window = undefined;
			}
		}],
		listeners : {
			'render': function(comp){
				comp.loadMask = new Ext.LoadMask(comp.body,{msg:'Please wait...'});
			},
			'close': function(comp){
				//keymapの有効・無効
				if(window.agKeyMap) window.agKeyMap.enable();
			},
			'hide': function(comp){
				//keymapの有効・無効
				if(window.agKeyMap) window.agKeyMap.enable();
			},
			'show': function(comp){
				//keymapの有効・無効
				if(window.agKeyMap) window.agKeyMap.disable();
			},
			scope: this
		}
	});
	bp3d_pallet_paste_window.show();


	var pasteCancel = function(){
		try{
			bp3d_pallet_paste_window.loadMask.hide();
			Ext.getCmp('bp3d-pallet-paste-textarea').enable();
			Ext.getCmp('bp3d-pallet-paste-ok-button').enable();
			Ext.getCmp('bp3d-pallet-paste-cancel-button').enable();
		}catch(e){
			_dump(e);
		}
	};

	var pasteCB = function(pasteText){
		try{
			var arr = [];
			if(pasteText){
				try{var paste_type = Ext.getCmp('bp3d-pallet-paste-radio-tab').getGroupValue();}catch(e){paste_type='tab';}
				if(paste_type=='csv'){
					arr = CSVData.parse(pasteText);
				}else{
					arr = TabData.parse(pasteText);
				}
			}
			if(pasteText && arr.length>1){
				var tg_id = init_tree_group;
				var version = init_bp3d_version;
				var t_type;

				var tgi_id;
				var md_id;
				var mv_id;
				var mr_id;
				var bul_id;
				var cb_id;
				var ci_id;
				if(!Ext.isEmpty(init_bp3d_params.md_id)){
					tg_id = md_id = init_bp3d_params.md_id;
				}
				if(!Ext.isEmpty(init_bp3d_params.mv_id)){
					tgi_id = mv_id = init_bp3d_params.mv_id;
				}
				if(!Ext.isEmpty(init_bp3d_params.bul_id)){
					t_type = bul_id = init_bp3d_params.bul_id;
				}
				if(!Ext.isEmpty(init_bp3d_params.mr_id)){
					mr_id = init_bp3d_params.mr_id;
				}
				if(!Ext.isEmpty(init_bp3d_params.cb_id)){
					cb_id = init_bp3d_params.cb_id;
				}
				if(!Ext.isEmpty(init_bp3d_params.ci_id)){
					ci_id = init_bp3d_params.ci_id;
				}
				if(!Ext.isEmpty(init_bp3d_params.version)){
					version = init_bp3d_params.version;
				}

				var combo_group;
				var combo_version;
				var combo_t_type;
				var partslist = null;
				var contents_tabs = Ext.getCmp('contents-tab-panel');
				if(contents_tabs.getActiveTab().id == 'contents-tab-bodyparts-panel'){
					combo_group = Ext.getCmp('bp3d-tree-group-combo');
					combo_version = Ext.getCmp('bp3d-version-combo');
					combo_t_type = Ext.getCmp('bp3d-tree-type-combo');
					partslist = Ext.getCmp('control-tab-partslist-panel');
				}else if(contents_tabs.getActiveTab().id == 'contents-tab-anatomography-panel'){
					combo_group = Ext.getCmp('anatomo-tree-group-combo');
					combo_version = Ext.getCmp('anatomo-version-combo');
					combo_t_type = Ext.getCmp('bp3d-tree-type-combo-ag');
					partslist = Ext.getCmp('ag-parts-gridpanel');
				}
				if(!partslist) return;
//				if(combo_group) tg_id = combo_group.getValue();
//				if(combo_version) version = combo_version.getValue();
//				if(combo_t_type) t_type = combo_t_type.getValue();

				var title_arr = arr.shift();
				var columnTitle = [];

				var columnModel = partslist.getColumnModel();
				var columnCount = columnModel.getColumnCount(false);
				var columnTitleHash = [];
				for(var colIndex=0;colIndex<columnCount;colIndex++){
					dataIndex = columnModel.getDataIndex(colIndex);
					if(dataIndex=='partslist'||dataIndex=='icon') continue;
					columnTitleHash[columnModel.getColumnHeader(colIndex).trim().toLowerCase()] = dataIndex;
				}
				for(var i=0;i<title_arr.length;i++){
					var title = title_arr[i].trim().toLowerCase();
					title_arr[i] = columnTitleHash[title] ? columnTitleHash[title] : undefined;
				}

				var prm_record = ag_param_store.getAt(0);
				var store = partslist.getStore();
				var conv_flag = false;
				var newRecord = Ext.data.Record.create(bp3d_parts_store_fields);
				var addrecs = [];
				for(var i=0;i<arr.length;i++){
					var data_arr = arr[i];
					var addrec = new newRecord({
						'tg_id'         : tg_id,
						'version'       : version,
						'exclude'       : false,
						'color'         : '#'+prm_record.data.color_rgb,
						'value'         : '',
						'zoom'          : true,
						'opacity'       : '1.0',
						'representation': 'surface',
						'point'         : false
					});
					addrec.beginEdit();
					for(var j=0;j<data_arr.length;j++){
						if(!title_arr[j]) continue;
						var title = title_arr[j].trim();
						var value = data_arr[j].trim();
						if(title=='tg_id' && gTreeGroup2ID[value]){
							if(gTreeGroup2ID[value] != tg_id) conv_flag=true;
							addrec.set(title,gTreeGroup2ID[value]);
						}else if(title=='exclude'){
							addrec.set(title,value.toLowerCase()=='true'?true:false);
						}else if(value.length>0){
							addrec.set(title,value);
						}
					}
					addrec.commit(true);
					addrec.endEdit();
					addrecs.push(addrec);

				}
				store.suspendEvents();
				try{
					store.add(addrecs);
					clearConvertIdList(addrecs);

					if(conv_flag){
						var btn = Ext.getCmp('bp3d-home-group-btn');
						if(btn && btn.rendered){
							if(store.getCount()>0 && store.find('tg_id', new RegExp('^'+tg_id+'$')) == -1){
								btn.enable();
								btn.el.dom.setAttribute('tg_id',addrecs[0].data.tg_id);
							}else{
								btn.disable();
							}
						}
					}

					var objs = [];
					for(var i=0;i<addrecs.length;i++){
						var obj = {
							id      : addrecs[i].id,
							version : addrecs[i].get('version')
						};
						if(!Ext.isEmpty(addrecs[i].get('f_id'))){
							obj.f_id = addrecs[i].get('f_id');
						}else{
							if(!Ext.isEmpty(addrecs[i].get('name_e'))) obj.name_e = addrecs[i].get('name_e');
							if(!Ext.isEmpty(addrecs[i].get('name_j'))) obj.name_j = addrecs[i].get('name_j');
							if(!Ext.isEmpty(addrecs[i].get('name_l'))) obj.name_l = addrecs[i].get('name_l');
							if(!Ext.isEmpty(addrecs[i].get('name_k'))) obj.name_k = addrecs[i].get('name_k');
						}
						if(obj.f_id || obj.name_e || obj.name_j || obj.name_l || obj.name_k) objs.push(obj);
					}
					if(objs.length>0){
						var params = {
							objs : Ext.util.JSON.encode(objs)
						};
						params.version = version;
						params.t_type = t_type;
						params.tgi_id = tgi_id;
						params.md_id = md_id;
						params.mv_id = mv_id;
						params.mr_id = mr_id;
						params.bul_id = bul_id;
						params.cb_id = cb_id;
						params.ci_id = ci_id;
						params.bul_all = true;
						bp3d_pallet_paste_store.load({
							params:params,
							callback:function(records,options,success){
								if(!success){
									store.resumeEvents();
									return;
								}

								var partslist = getActivePartsList();
								if(partslist) partslist.loadMask.show();
								getConvertIdList(records,store,function(){
									if(partslist) partslist.loadMask.hide();
								});
								store.resumeEvents();

							}
						});
					}else{
						setTimeout(function(){pasteList(pasteText);},0);
						for(var i=0;i<addrecs.length;i++){
							store.remove(addrecs[i]);
						}
						store.resumeEvents();
					}
				}catch(e){
					store.resumeEvents();
				}
			}else if(pasteText && arr.length==1){


			}
			bp3d_pallet_paste_window.close();
			bp3d_pallet_paste_window = undefined;
		}catch(e){
			_dump("802:"+e);
			pasteCancel();
		}
	};
};

var bp3d_pallet_paste_store_fields = [];
for(var i=0;i<bp3d_parts_store_fields.length;i++){
	var field = {};
	for(var key in bp3d_parts_store_fields[i]){
		field[key] = bp3d_parts_store_fields[i][key];
	}
	bp3d_pallet_paste_store_fields.push(field);
}
bp3d_pallet_paste_store_fields.push({name:'id'});
var bp3d_pallet_paste_store = new Ext.data.JsonStore({
	url: 'get-contents.cgi',
	pruneModifiedRecords : true,
	root: 'images',
	fields: bp3d_pallet_paste_store_fields,
	listeners: {
		'beforeload' : function(store,options){
			var partslist = getActivePartsList();
			if(!partslist) return;
			if(!partslist.loadMask) partslist.loadMask = new Ext.LoadMask(partslist.body,{msg:'Please wait...'});
			partslist.loadMask.show();
		},
		'load' : function(store,records,options){
			var partslist = getActivePartsList();
			if(!partslist) return;
			if(records.length==0){
				partslist.loadMask.hide();
				return;
			}
			try{
				var edit_store = partslist.getStore();
				var edit_records = [];
				var error_records = [];
				for(var i=0;i<records.length;i++){
					var id = records[i].get('id');
					var edit_record = edit_store.getById(id);
					if(Ext.isEmpty(edit_record)) continue;
					var b_id = records[i].get('b_id');
					if(!Ext.isEmpty(b_id)){
						edit_record = edit_record.copy();
						edit_record.beginEdit();
						for(var j=0;j<bp3d_parts_store_fields.length;j++){
							var name = bp3d_parts_store_fields[j].name;
							if(name == 'exclude' || name == 'color' || name == 'value' || name == 'zoom' || name == 'opacity' || name == 'representation' || name == 'point') continue;
							var value = records[i].get(name);
							if(!Ext.isEmpty(value)) edit_record.set(name,value);
						}
						edit_record.commit(true);
						edit_record.endEdit();
						edit_records.push(edit_record);
					}else{
						error_records.push(edit_record.copy());
					}
				}
				edit_store.removeAll();
				if(edit_records.length>0){
					edit_store.add(edit_records);
				}
				if(error_records.length>0){
					copyListCB(partslist,error_records,get_ag_lang('PASTE_TITLE')+' Error!!');
				}
			}catch(e){
				_dump("bp3d_pallet_paste_store.load:"+e);
			}
			partslist.loadMask.hide();
		},
		'loadexception' : function(){
			_dump("bp3d_pallet_paste_store.loadexception()");

			var partslist = getActivePartsList();
			if(partslist) partslist.loadMask.hide();

		},scope:this
	}
});

isEditablePartsList = function(tg_id){
	var editable = true;
	var group = Ext.getCmp('bp3d-tree-group-combo');
	if(group && group.rendered && group.getValue() != tg_id) editable = false; 
	return editable;
};

isAdditionPartsList = function(){
	var add = true;
	return add;
};

bp3s_parts_search_gridpanel_exists_parts_renderer = function(value,metadata,record,rowIndex,colIndex,store){
//	metadata.css += ' x-grid3-check-col-td'; 
////	return '<div class="x-grid3-cc-b_id"><img src="css/bullet_'+(Ext.isEmpty(value)? 'delete' : 'picture')+'.png" width="16" height="16"/></div>';
//	return '<div class="x-grid3-cc-b_id"><img src="css/bullet_'+(Ext.isEmpty(record.data.zmin)? 'delete' : 'picture')+'.png" width="16" height="16"/></div>';

		if(record.data.seg_color) metadata.attr = 'style="background:'+record.data.seg_color+';"'
		value = '<img src="css/bullet_'+(Ext.isEmpty(record.data.zmin)? 'delete' : 'picture')+'.png" width="16" height="16"/>';
		if(!Ext.isEmpty(record.data.icon)) value = '<img width=16 height=16 src='+record.data.icon+'>';
		return value;

};

bp3s_parts_gridpanel_group_renderer = function(value,metadata,record,rowIndex,colIndex,store){
	if(!isEditablePartsList(record.data.tg_id)){
		metadata.css += ' bp3d_parts_none_data';
	}else{
		if(Ext.isEmpty(record.data.conv_id)) metadata.css += ' bp3d_parts_none_version_data';
	}
	return gID2TreeGroup[value];
};
bp3s_parts_gridpanel_date_renderer = function(value,metadata,record,rowIndex,colIndex,store){
	if(!isEditablePartsList(record.data.tg_id)){
		metadata.css += ' bp3d_parts_none_data';
	}else{
		if(Ext.isEmpty(record.data.conv_id)) metadata.css += ' bp3d_parts_none_version_data';
	}
	return new Date(value).format("Y/m/d");
};
bp3s_parts_gridpanel_checkbox_renderer = function(value,metadata,record,rowIndex,colIndex,store){
	var id = Ext.getCmp('ag-parts-gridpanel').getColumnModel().getColumnId(colIndex);
	metadata.css += ' x-grid3-check-col-td'; 
	if(!isEditablePartsList(record.data.tg_id)){
		metadata.css += ' bp3d_parts_none_data';
	}else{
		if(Ext.isEmpty(record.data.conv_id)) metadata.css += ' bp3d_parts_none_version_data';
	}
	return '<div class="x-grid3-check-col'+(value?'-on':'')+' x-grid3-cc-'+id+'">&#160;</div>';
};
bp3s_parts_gridpanel_point_checkbox_renderer = function(value,metadata,record,rowIndex,colIndex,store){
	var id = Ext.getCmp('ag-parts-gridpanel').getColumnModel().getColumnId(colIndex);
	metadata.css += ' x-grid3-check-col-td'; 
	if(!isEditablePartsList(record.data.tg_id)){
		metadata.css += ' bp3d_parts_none_data';
	}else{
		if(Ext.isEmpty(record.data.conv_id)) metadata.css += ' bp3d_parts_none_version_data';
	}
	return '<div class="x-grid3-check-col'+(value?'-on':'')+' x-grid3-cc-'+id+'">&#160;</div>';
};

bp3s_parts_gridpanel_color_renderer = function (value,metadata,record,rowIndex,colIndex,store) {
	if(!isEditablePartsList(record.data.tg_id)){
		metadata.css += ' bp3d_parts_none_data';
	}else{
		if(Ext.isEmpty(record.data.conv_id)) metadata.css += ' bp3d_parts_none_version_data';
	}
	return '<span style="background-color:' + value + '">&nbsp;&nbsp;&nbsp;&nbsp;</span>';
};

bp3s_parts_gridpanel_combobox_renderer = function(value,metadata,record,rowIndex,colIndex,store){
	if(!isEditablePartsList(record.data.tg_id)){
		metadata.css += ' bp3d_parts_none_data';
	}else{
		if(Ext.isEmpty(record.data.conv_id)) metadata.css += ' bp3d_parts_none_version_data';
	}
	return value;
};


bp3s_parts_gridpanel_commonid_renderer = function(value,metadata,record,rowIndex,colIndex,store){
	if(!isEditablePartsList(record.data.tg_id)){
		if(Ext.isEmpty(record.data.conv_id)){
			metadata.css += ' bp3d_parts_none_common_data';
		}else{
			metadata.css += ' bp3d_parts_none_data';
		}
	}else{
		if(Ext.isEmpty(record.data.conv_id)) metadata.css += ' bp3d_parts_none_version_data';
	}
	return value;
}

bp3s_parts_gridpanel_renderer = function(value,metadata,record,rowIndex,colIndex,store){
	if(!isEditablePartsList(record.data.tg_id)){
		metadata.css += ' bp3d_parts_none_data';
	}else{
		if(Ext.isEmpty(record.data.conv_id)) metadata.css += ' bp3d_parts_none_version_data';
	}
	return value;
}

bp3s_parts_gridpanel_icon_renderer = function(value,metadata,record,rowIndex,colIndex,store){
	if(!isEditablePartsList(record.data.tg_id)){
		metadata.css += ' bp3d_parts_none_data';
	}else{
		if(Ext.isEmpty(record.data.conv_id)) metadata.css += ' bp3d_parts_none_version_data';
	}

	if(record.data.seg_color) metadata.attr = 'style="background:'+record.data.seg_color+';"'

	if(!Ext.isEmpty(value)) value = '<img width=16 height=16 src='+value+'>';
	return value;
}

hideConvIDColumn = function(){
	return;
	try{
		var bp3d_grid = Ext.getCmp('control-tab-partslist-panel');
		if(bp3d_grid){
			var cmodel = bp3d_grid.getColumnModel();
//			var index = cmodel.getIndexById('conv_id');
			var index = cmodel.getIndexById('common_id');
			if(index>=0 && !cmodel.isHidden(index)){
//				cmodel.setHidden(index,true);
				var size = bp3d_grid.getSize();
				if(size.width && size.height) resizeGridPanelColumns(bp3d_grid);
			}
		}else{
			bp3d_grid = undefined;
		}
	}catch(e){}

	try{
		var ag_grid = Ext.getCmp('ag-parts-gridpanel');
		if(ag_grid){
			var cmodel = ag_grid.getColumnModel();
//			var index = cmodel.getIndexById('conv_id');
			var index = cmodel.getIndexById('common_id');
			if(index>=0 && !cmodel.isHidden(index)){
//				cmodel.setHidden(index,true);
				var size = ag_grid.getSize();
				if(size.width && size.height) resizeGridPanelColumns(ag_grid);
			}
		}else{
			ag_grid = undefined;
		}
	}catch(e){}
};

showConvIDColumn = function(){
	return;
	try{
		var bp3d_grid = Ext.getCmp('control-tab-partslist-panel');
		if(bp3d_grid){
			var cmodel = bp3d_grid.getColumnModel();
//			var index = cmodel.getIndexById('conv_id');
			var index = cmodel.getIndexById('common_id');
			if(index>=0 && cmodel.isHidden(index)){
				cmodel.setHidden(index,false);
				var size = bp3d_grid.getSize();
				if(size.width && size.height) resizeGridPanelColumns(bp3d_grid);
			}
		}else{
			bp3d_grid = undefined;
		}
	}catch(e){}

	try{
		var ag_grid = Ext.getCmp('ag-parts-gridpanel');
		if(ag_grid){
			var cmodel = ag_grid.getColumnModel();
//			var index = cmodel.getIndexById('conv_id');
			var index = cmodel.getIndexById('common_id');
			if(index>=0 && cmodel.isHidden(index)){
				cmodel.setHidden(index,false);
				var size = ag_grid.getSize();
				if(size.width && size.height) resizeGridPanelColumns(ag_grid);
			}
		}else{
			ag_grid = undefined;
		}
	}catch(e){}
};

clearConvertIdList = function(records){
	for(var i=0;i<records.length;i++){
		records[i].beginEdit();
		records[i].set('conv_id',null);
//		records[i].set('common_id',null);
		records[i].commit(true);
		records[i].endEdit();
	}
	hideConvIDColumn();
};

tbarBodypartsLogout = function(b,e){};
chkOpenid = function(openid_url,aCB){};
tbarBodypartsLogin = function(b,e){};

function ag_ann_init(){
//try{
	var tree_expandnode = {};
	var thumbTemplate;
	var listTemplate;
	var contentsDetailsTemplate;
	var detailsTemplate;
	var detailsTemplate;
	var detailsConceptTemplate;
	var detailsTweetTemplate;
	var commentContentsDetailsTemplate;
	var commentDetailsTemplate;
	var commentContentsDetailsChildTemplate;
	var commentDetailsChildTemplate;
	var feedbackTemplate;
	var feedbackChildTemplate;
	var contents_tab_prev = null;
	var image_detailed_store_timer = null;

	var image_position = Cookies.get('ag_annotation.images.position');
	if(Ext.isEmpty(image_position)) image_position = 'front';
//	if(Ext.isEmpty(image_position)) image_position = 'rotate';
	var image_disptype = Cookies.get('ag_annotation.images.disptype');
	if(Ext.isEmpty(image_disptype)) image_disptype = 'thump';

	getViewImages = function(){
		var cmp = Ext.getCmp('img-chooser-view');
		if(!cmp || !cmp.rendered || !cmp.layout || !cmp.layout.activeItem) return undefined;
//		return bp3d_contents_thumbnail_dataview;
		return cmp.layout.activeItem.items.first();
	};

	click_point_children = function(fmaid,label){
		var tabCmp = Ext.getCmp('navigate-tab-panel');
		var tabpanel = createSearchGridPanel(label,{
			title : 'Label['+label+']',
			baseParams : {
				query : label,
				node  : 'label',
				f_pid  : fmaid
			}
		});
		if(tabpanel) tabCmp.setActiveTab(tabCmp.add(tabpanel));
	};

	click_conventional = function(fmaid,path){
		var tabCmp = Ext.getCmp('navigate-tab-panel');
		if(tabCmp && tabCmp.getActiveTab().id != 'navigate-tree-panel') tabCmp.setActiveTab('navigate-tree-panel')
		var navigate_tree_combobox = Ext.getCmp('bp3d-tree-type-combo');
		var regexp = new RegExp("^1$");
		var index = navigate_tree_combobox.store.find('t_type',regexp);
		if(index<0) return;
		tree_expandnode = {};
		Cookies.set('ag_annotation.images.fmaid',fmaid);
		Cookies.set('ag_annotation.images.path','/'+path);
		if(navigate_tree_combobox.getValue() != 1){
			navigate_tree_combobox.setValue(1);
			navigate_tree_combobox.fireEvent('select',navigate_tree_combobox,navigate_tree_combobox.store.getAt(index),index);
		}else{
			var treeCmp = Ext.getCmp('navigate-tree-panel');
			treeCmp.selectPath(Ext.isEmpty(path)?'':('/root/'+ path),'f_id',selectPathCB);
		}
	};


	var click_isa_partof_cb = function(fmaid,path,bul_id){
		_dump("click_isa_partof_cb():["+fmaid+"]["+path+"]["+bul_id+"]");
		var navigate_tree_combobox = Ext.getCmp('bp3d-tree-type-combo');
		var regexp = new RegExp("^"+bul_id+"$");
		var index = navigate_tree_combobox.store.find('t_type',regexp);
		if(index<0) return;
		tree_expandnode = {};

		var path_arr = path.split("/");
		if(path_arr[path_arr.length-1]==fmaid) path_arr.pop();
		path = path_arr.join("/");

		var treeCmp = Ext.getCmp('navigate-tree-panel');
		var baseParams = treeCmp.getLoader().baseParams;

		Cookies.set('ag_annotation.images.fmaid',fmaid);
		Cookies.set('ag_annotation.images.path','/'+path);
		if(navigate_tree_combobox.getValue() != bul_id){
			navigate_tree_combobox.setValue(bul_id);
			navigate_tree_combobox.fireEvent('select',navigate_tree_combobox,navigate_tree_combobox.store.getAt(index),index);
		}else if(baseParams.t_type!=bul_id){
			treeCmp.getRootNode().reload(function(){
				treeCmp.selectPath(Ext.isEmpty(path)?'':('/root/'+ path),'f_id',selectPathCB);
			});
		}
		treeCmp.selectPath(Ext.isEmpty(path)?'':('/root/'+ path),'f_id',selectPathCB);
	};

	click_isa = function(fmaid,path){
//		clickDensityEnds(fmaid);
//		return;

		var bul_id = 3;
		var tabCmp = Ext.getCmp('navigate-tab-panel');
		if(tabCmp && tabCmp.getActiveTab().id == 'navigate-tree-panel'){
			click_isa_partof_cb.defer(0, this, [fmaid,path,bul_id]);
		}else{
			var treeCmp = Ext.getCmp('navigate-tree-panel');
			treeCmp.on('show',function(){
				click_isa_partof_cb(fmaid,path,bul_id);
//				click_isa_partof_cb.defer(0, this, [fmaid,path,bul_id]);
			},this,{single:true,buffer:250});
			tabCmp.suspendEvents(false);
			tabCmp.setActiveTab('navigate-tree-panel');
			tabCmp.resumeEvents();
			bp3d_change_location(undefined,true);
			try{
				Ext.each(Ext.getCmp('bp3d-tree-type-combo').getStore().getRange(),function(r,i,a){
					$('label#navigate-north-panel-content-label-'+r.data.t_type).text('');
				});
			}catch(e){}
/*
			if(fmaid){
				var load_params = {};
				for(var key in bp3d_contents_store.baseParams){
					load_params[key] = bp3d_contents_store.baseParams[key];
				}
				load_params.t_type = bul_id;
				load_params.bul_id = bul_id;
				delete load_params.node;
				load_params.f_ids = Ext.util.JSON.encode([fmaid]);
				bp3d_change_location(Ext.urlEncode({params:Ext.urlEncode(load_params)}));
			}
*/
		}
	};

	click_partof = function(fmaid,path){
//		clickDensityEnds(fmaid);
//		return;

		var bul_id = 4;
		var tabCmp = Ext.getCmp('navigate-tab-panel');
		if(tabCmp && tabCmp.getActiveTab().id == 'navigate-tree-panel'){
			click_isa_partof_cb.defer(0, this, [fmaid,path,bul_id]);
		}else{
			var treeCmp = Ext.getCmp('navigate-tree-panel');
			treeCmp.on('show',function(){
				click_isa_partof_cb(fmaid,path,bul_id);
//				click_isa_partof_cb.defer(0, this, [fmaid,path,bul_id]);
			},this,{single:true,buffer:250});
			tabCmp.suspendEvents(false);
			tabCmp.setActiveTab('navigate-tree-panel');
			tabCmp.resumeEvents();
			bp3d_change_location(undefined,true);
			try{
				Ext.each(Ext.getCmp('bp3d-tree-type-combo').getStore().getRange(),function(r,i,a){
					$('label#navigate-north-panel-content-label-'+r.data.t_type).text('');
				});
			}catch(e){}
/*
//			if(fmaid){
//				var load_params = {};
//				for(var key in bp3d_contents_store.baseParams){
//					load_params[key] = bp3d_contents_store.baseParams[key];
//				}
//				load_params.t_type = bul_id;
//				load_params.bul_id = bul_id;
//				delete load_params.node;
//				load_params.f_ids = Ext.util.JSON.encode([fmaid]);
//				bp3d_change_location(Ext.urlEncode({params:Ext.urlEncode(load_params)}));
//			}
*/
		}
	};

	click_used_parts_list_all = function(rep_id){
//		alert(bu_id);

		w = window.open(
//			"get-table.cgi?type=html&table=art_file&rep_id="+encodeURIComponent(rep_id),
//			"get-table.cgi?type=html&table=representation_art&rep_id="+encodeURIComponent(rep_id)+"&lng=ja",
			"download-art_file-list.cgi?type=html&rep_id="+encodeURIComponent(rep_id)+"&lng=ja",
			"_blank",
			"menubar=yes,titlebar=no,toolbar=yes,status=no,resizable=yes,dependent=yes,alwaysRaised=yes,scrollbars=yes,width=800,height=600");

	};

	var prev_filter;
	filter_func = function(){
		var filterCmp = Ext.getCmp('filter');
		if(!filterCmp || filterCmp.disabled) return;
		var value = filterCmp.getValue();
		var store = getViewImages().store;
		if(prev_filter==value) return;
		store.clearFilter(false);
		store.filter('name', value,true);
		prev_filter=value;
	};
	bp3d_contents_store.on({
		beforeload: function(store){
//			_dump("bp3d_contents_store.beforeload(1)");
			prev_filter = undefined;
		}
	});

	var sortImages = function(){
		var v = Ext.getCmp('sortSelect').getValue();
		getViewImages().store.sort(v, v == 'name' ? 'asc' : 'desc');
		Cookies.set('ag_annotation.images.sort',v);
	};

	var getTreeFolderExpanded = function(node){
		var ids = [];
		if(!node) return ids;
		if(node.isExpanded()) ids.push(node.id);
		if(node.firstChild){
			node = node.firstChild;
			while(node){
				ids = ids.concat(getTreeFolderExpanded(node));
				node = node.nextSibling;
			}
		}
		return ids;
	};

	var selectPathCB = function(bSuccess, oSelNode){
_dump("selectPathCB()");
		var contentCmp = Ext.getCmp('content-card-panel');
		try{var position = Ext.getCmp('positionSelect').getValue();}catch(e){}
		try{var sorttype = Ext.getCmp('sortSelect').getValue();}catch(e){}

		//リストがアクティブの場合
		var tab_panel = navigate_tabs.getActiveTab();
		if(tab_panel.id == 'navigate-grid-panel'){
			var gridCmp = Ext.getCmp('navigate-grid-panel');
			var f_ids = [];
			var sels = gridCmp.getSelectionModel().getSelections();
			for(var i=0,len=sels.length;i<len;i++){
				f_ids.push(sels[i].data.b_id);
			}
			if(f_ids.length>0){
				var params = {
					f_ids : Ext.util.JSON.encode(f_ids)
				};
				if(!Ext.isEmpty(position)) params.position = position;
				var store = gridCmp.getStore();
				for(var key in store.lastOptions.params){
					params[key] = store.lastOptions.params[key];
				}
//				bp3d_contents_store.load({params:params});
//				_dump("CALL bp3d_change_location():1766");
				bp3d_change_location(Ext.urlEncode({params:Ext.urlEncode(params)}));
//_dump("selectPathCB(609):tab_panel.id=["+tab_panel.id+"]");
			}
			return;
		}
		if(tab_panel.id != 'navigate-tree-panel'){
			try{
				var f_ids = [];
				var sels = tab_panel.getSelectionModel().getSelections();
				if(sels.length == 0) sels = tab_panel.getStore().getRange();
				for(var i=0,len=sels.length;i<len;i++){
					f_ids.push(sels[i].data.f_id);
				}
				if(f_ids.length>0){
					var params = {
						fma_ids : Ext.util.JSON.encode(f_ids)
					};
					if(!Ext.isEmpty(position)) params.position = position;
					var store = tab_panel.getStore();
					for(var key in store.lastOptions.params){
						params[key] = store.lastOptions.params[key];
					}
//					bp3d_contents_store.load({params:params});
//					_dump("CALL bp3d_change_location():1790");
					bp3d_change_location(Ext.urlEncode({params:Ext.urlEncode(params)}));


//_dump("selectPathCB(630):tab_panel.id=["+tab_panel.id+"]");
				}
				return;
			}catch(e){
				_dump("selectPathCB():"+e);
			}
		}
//_dump("selectPathCB():gBP3D_TPAP=["+Ext.isEmpty(gBP3D_TPAP)+"]");


		if(!Ext.isEmpty(gBP3D_TPAP)){
			gBP3D_TPAP = undefined;
			return;
		}

//_dump("selectPathCB():gParams.fmaid=["+(!Ext.isEmpty(gParams.fmaid))+"]["+gParams.fmaid+"]");
//_dump("selectPathCB():gParams.txpath=["+(!Ext.isEmpty(gParams.txpath))+"]["+gParams.txpath+"]");
//_dump("selectPathCB():gParams.t_type=["+(!Ext.isEmpty(gParams.t_type))+"]["+gParams.t_type+"]");
//_dump("selectPathCB():gParams.version=["+(!Ext.isEmpty(gParams.version))+"]");
//_dump("selectPathCB():gParams.query=["+(!Ext.isEmpty(gParams.query))+"]");

		if(!Ext.isEmpty(gParams.fmaid) && !Ext.isEmpty(gParams.txpath) && !Ext.isEmpty(gParams.t_type)){
			gParams.node = gParams.fmaid;
			Cookies.set('ag_annotation.images.node',gParams.fmaid);
			Cookies.set('ag_annotation.images.path',gParams.txpath);
			delete gParams.fmaid;
			if(!Ext.isEmpty(gParams.tp_ap)) delete gParams.tp_ap;
//			_location.location.href = "location.html?" + Ext.urlEncode(gParams);
//			_dump("CALL bp3d_change_location():1829");
			bp3d_change_location(Ext.urlEncode(gParams));
			return;
		}
		if(!Ext.isEmpty(gParams.fmaid) && !Ext.isEmpty(gParams.query) && !Ext.isEmpty(gParams.t_type)){
			gParams.node = 'search';
			Cookies.set('ag_annotation.images.node',gParams.fmaid);
			delete gParams.fmaid;
			if(!Ext.isEmpty(gParams.tp_ap)) delete gParams.tp_ap;
//			_location.location.href = "location.html?" + Ext.urlEncode(gParams);
//			_dump("CALL bp3d_change_location():1839");
			bp3d_change_location(Ext.urlEncode(gParams));
			return;
		}

//_dump("selectPathCB():bSuccess=["+bSuccess+"]");

		if(Ext.isEmpty(bSuccess)) bSuccess = false;

//_dump("selectPathCB():gSelNode=["+Ext.isEmpty(gSelNode)+"]");
//_dump("selectPathCB():oSelNode=["+Ext.isEmpty(oSelNode)+"]");

		if(!bSuccess && Ext.isEmpty(gSelNode) && Ext.isEmpty(oSelNode)){
			var treeCmp = Ext.getCmp('navigate-tree-panel');
			if(treeCmp){
				oSelNode = treeCmp.getRootNode();
				if(oSelNode){
					treeCmp.getSelectionModel().select(oSelNode);
				}
			}
		}
		if(bSuccess){
			if(Ext.isEmpty(oSelNode)){
				try{
					var treeCmp = Ext.getCmp('navigate-tree-panel');
					if(treeCmp) oSelNode = treeCmp.getSelectionModel().getSelectedNode();
				}catch(e){
					_dump("selectPathCB():"+ e + "");
				}
			}
			gSelNode = oSelNode;
		}

//_dump("selectPathCB():gSelNode=["+(gSelNode?gSelNode.id:"")+"]");
//_dump("selectPathCB():oSelNode=["+(oSelNode?oSelNode.id:"")+"]");

//		if(gSelNode && gSelNode.id != "root"){
		if(gSelNode){
			var path;
			try{
				path = gSelNode.getPath('f_id');
			}catch(e){
				path = null;
			}
			if(path){
				_dump("selectPathCB():path=["+path+"]");
				path = path.replace(/^\/root/,"");
				_dump("selectPathCB():path=["+path+"]");

				if(gSelNode.id != "trash"){
					Cookies.set('ag_annotation.images.node',gSelNode.id);
					Cookies.set('ag_annotation.images.path',path);
				}

				gParams.node = gSelNode.attributes.f_id;
				gParams.txpath = path;
				if(!Ext.isEmpty(position)) gParams.position = position;

				var cookies_sort = Cookies.get('ag_annotation.images.sort');
				if(Ext.isEmpty(cookies_sort)) cookies_sort = '';

				if(cookies_sort != sorttype){
					gParams.sorttype = sorttype;
					Cookies.set('ag_annotation.images.sort',sorttype);
				}else{
					delete gParams.sorttype;
				}

				if(!Ext.isEmpty(gParams.query)) delete gParams.query;
				if(!Ext.isEmpty(gParams.tp_ap)) delete gParams.tp_ap;

				if(gSelNode.id != 'search'){
					bp3d_change_location(Ext.urlEncode(gParams));
				}else{
					gParams.query = gSelNode.text.replace(/^search:\[(.+)?\]/i,"$1");
					bp3d_change_location(Ext.urlEncode(gParams));
				}
			}
		}else if(oSelNode && oSelNode.id == "root"){
			gParams.node = oSelNode.id;
			gParams.txpath = '';
			if(!Ext.isEmpty(gParams.query)) delete gParams.query;
//			_location.location.href = "location.html?" + Ext.urlEncode(gParams);
//			_dump("CALL bp3d_change_location():1925");
			bp3d_change_location(Ext.urlEncode(gParams));


//			if(contentCmp) contentCmp.layout.setActiveItem(0);
//_dump("selectPathCB(3):Ext.urlEncode(gParams)=["+Ext.urlEncode(gParams)+"]");
		}
	};

	var WhatnewPanel = Ext.extend(Ext.DataView, {
		autoHeight   : true,
		frame        : true,
		cls          : 'demos',
		itemSelector : 'dd',
		overClass    : 'over',
		tpl : new Ext.XTemplate(
			'<div id="sample-ct">',
				'<tpl for=".">',
					'<div><h2><div>{title}</div></h2><dl>',
					'<tpl for="fma">',
						'<dd ext:txpath="/root/{txpath}" ext:id="{id}" ext:tg_id="{tg_id}" ext:version="{version}"><img style="width:90px;height:90px;margin:5px 0 0 5px;float:left;" src="{image}"/>',
							'<div><img style="width:16px;height:16px;margin:0 2px 0 0;float:left;" src="css/{icon}"/><h4>{name}</h4><p style="">{entry}<br/>{tg_name}<br/>{version}<br/>{detail}</p></div>',
						'</dd>',
					'</tpl>',
					'<div style="clear:left"></div></dl></div>',
				'</tpl>',
			'</div>'
		),
		onClick : function(e){
			var group = e.getTarget('h2', 3, true);
			if(group){
				group.up('div').toggleClass('collapsed');
			}else {
				var t = e.getTarget('dd', 5, true);
				if(t && !e.getTarget('a', 2)){
					var txpath = t.getAttributeNS('ext', 'txpath');
					var id = t.getAttributeNS('ext', 'id');
					var tg_id = t.getAttributeNS('ext', 'tg_id');
					var version = t.getAttributeNS('ext', 'version');

					var treeCmp = Ext.getCmp('navigate-tree-panel');
					var groupCmp = Ext.getCmp('bp3d-tree-group-combo');
					var versionCmp = Ext.getCmp('bp3d-version-combo');

					Cookies.set('ag_annotation.images.fmaid',id);

					if(treeCmp && groupCmp && versionCmp && groupCmp.getValue()==tg_id){
						if(txpath=='/root/') txpath += id;
						if(versionCmp.getValue()==version){
							treeCmp.selectPath(txpath,'f_id',selectPathCB);
						}else{
							txpath = txpath.replace(/^\/root/g,"")
							Cookies.set('ag_annotation.images.path',txpath);
							var store = versionCmp.getStore();
							var index = store.find('tgi_version', new RegExp('^'+version+'$'));
							versionCmp.setValue(version);
							versionCmp.fireEvent('select',versionCmp,store.getAt(index),index);
						}
					}else if(treeCmp && groupCmp && versionCmp && groupCmp.getValue()!=tg_id){
						var c_version_str = Cookies.get('ag_annotation.images.version');
						var c_version;
						if(c_version_str) c_version = Ext.util.JSON.decode(c_version_str);
						c_version = c_version || {};
						c_version[tg_id] = version;
						c_version_str = Ext.util.JSON.encode(c_version);
						Cookies.set('ag_annotation.images.version',c_version_str);

						var store = groupCmp.getStore();
						var index = store.find('tg_id', new RegExp('^'+tg_id+'$'));
						groupCmp.setValue(tg_id);
						groupCmp.fireEvent('select',groupCmp,store.getAt(index),index);
					}
				}
			}
			return WhatnewPanel.superclass.onClick.apply(this, arguments);
		}
	});

	var whatnew_store = new Ext.data.JsonStore({
		url: 'get-whatnew.cgi',
		root: 'whatnew',
		fields: ['title', 'fma'],
		baseParams    : {
			parent : (Ext.isEmpty(gParams.parent)?'':gParams.parent),
			lng    : gParams.lng
		}
	});

	var whatnew_panel = new Ext.Panel({
		title : get_ag_lang('TOP_WHATSNEW_TITLE'),
		hidden : true,
		id    : 'whatnew-panel',
		collapsible   : true,
		region: 'center',
		autoScroll : true,
		frame : true,
		items : new WhatnewPanel({ store : whatnew_store })
	});

	if(!true) whatnew_store.load();

	clickThumbTwisty = function(e,index,cPath){
		if(e.stopEvent) e.stopEvent();
		if(e.stopPropagation) e.stopPropagation();
		if(e.preventDefault) e.preventDefault();

		var dataview = getViewImages();
		if(!dataview) return;

		var record = dataview.store.getAt(index);

//console.log(record);

//		if(!record || !record.data || !record.data.f_id || !(record.data.c_path || record.data.u_path || record.data.search_c_path)) return;
		if(!record || !record.data || !record.data.f_id) return;

		var activeTab = Ext.getCmp('navigate-tab-panel').getActiveTab();
		if(activeTab.id == 'navigate-tree-panel'){

			if(!(record.data.c_path || record.data.u_path || record.data.search_c_path)) return;

			var treeCmp = Ext.getCmp('navigate-tree-panel');
			if(!treeCmp || !treeCmp.root) return;
			var txpath = "/root";
			if(record.data.c_path){
				txpath += Cookies.get('ag_annotation.images.path','') + '/' + record.data.f_id;
			}else if(record.data.u_path){
				var arr = Cookies.get('ag_annotation.images.path','').split('/');
				arr.pop()
				txpath += arr.join('/');
			}else if(record.data.search_c_path){
				txpath += '/' + record.data.search_c_path;
			}
			treeCmp.selectPath(txpath,'f_id',selectPathCB);
		}else{
			var fma_id;
			if(record.data.c_path){
				fma_id = record.data.c_path.split("/").pop();
			}else if(record.data.u_path){
				fma_id = record.data.u_path.split("/").pop();
			}else if(record.data.but_cnum){
				fma_id = record.data.f_id;
			}
			if(fma_id){
				var load_params = {};
				for(var key in bp3d_contents_store.baseParams){
					load_params[key] = bp3d_contents_store.baseParams[key];
				}
				load_params.node = fma_id;
//				bp3d_contents_store.load({params:load_params});

//				if(!Ext.isEmpty(gBP3D_TPAP)){
//					gBP3D_TPAP = undefined;
//					return;
//				}
//				_location.location.href = "location.html?" + Ext.urlEncode({params:Ext.urlEncode(load_params)});
//				_dump("CALL bp3d_change_location():2124");
				bp3d_change_location(Ext.urlEncode({params:Ext.urlEncode(load_params)}));

			}
		}
	};

	clickDensityEnds = function(f_id){
		if(f_id){
			var load_params = {};
			for(var key in bp3d_contents_store.baseParams){
				load_params[key] = bp3d_contents_store.baseParams[key];
			}
//			load_params.node = f_id;
			delete load_params.node;
			load_params.f_ids = Ext.util.JSON.encode([f_id]);
//			bp3d_contents_store.load({params:load_params});
//			_dump("CALL bp3d_change_location():2141");
			bp3d_change_location(Ext.urlEncode({params:Ext.urlEncode(load_params)}));
		}
	};

	clickFeedbackThumb = function(e,c_id,xindex){
		if(e.stopEvent) e.stopEvent();
		if(e.stopPropagation) e.stopPropagation();
		if(e.preventDefault) e.preventDefault();
		try{
			var index = contents_tab_feedback_store.find('c_id',c_id);
			if(index<0) return;
			var record = contents_tab_feedback_store.getAt(index);
			if(!record || !record.data || !record.data.c_fmas  || !record.data.c_fmas[xindex].fma_path || !record.data.c_fmas[xindex].fma_tree) return;
			var treeCmp = Ext.getCmp('navigate-tree-panel');
			if(!treeCmp || !treeCmp.root) return;

			var tree_combobox = Ext.getCmp('bp3d-tree-type-combo');
			try{var treeType = Ext.getCmp('bp3d-tree-type-combo').getValue();}catch(e){treeType=undefined;}

			if(treeType != record.data.c_fmas[xindex].fma_tree[0].t_type){
				var index = tree_combobox.store.find('name',treeType);
				if(index<0) return;
				tree_combobox.setValue(record.data.c_fmas[xindex].fma_tree[0].t_type);
				Cookies.set('ag_annotation.images.path','/'+record.data.c_fmas[xindex].fma_path[0]);
				tree_combobox.fireEvent('select',tree_combobox,tree_combobox.store.getAt(index),index);
			}else{

				Cookies.set('ag_annotation.images.fmaid',record.data.c_fmas[xindex].fma_id);

				var txpath = "/root/";
				txpath += record.data.c_fmas[xindex].fma_path[0];
//_dump("624:CALL selectPathCB()");
				treeCmp.selectPath(txpath,'f_id',selectPathCB);
			}
			contents_tabs.setActiveTab('contents-tab-bodyparts-panel');
		}catch(e){_dump("clickFeedbackThumb():"+e);}
	};

	openWiki = function(node){
		window.open(node.href, "_blank", "width=800,height=600,dependent=yes,scrollbars=yes,resizable=yes");
		return false;
	};

	var getDetailsTemplateArray = function(aID){
		var id = aID;
		return [
			'<div class="details">',
				'<tpl for=".">',

					'<tpl if="this.isEmpty(b_id) == false">',
						'<table cellpadding="0" cellspacing="0" boder="0"><tbody>',
						'<tr><td align="right"><b style="">'+get_ag_lang('REP_ID')+':</b></td>',
						'<td><span style="margin-left:0.5em;">{b_id}</span></td></tr>',
						'</tbody></table>',
					'</tpl>',

					'<div class="details-info" style="text-align:center;vertical-align:bottom;">',
						'<img src="{src}" width="120" height="120">',
//						'<br>',
						'&nbsp;<label style="font-size:1.2em;">[<a id="bp3d-link-a-link" href="#" onclick="return bp3d_open_link_window(\'{b_id}\');">Icon URL</a>]</label>',
					'</div>',
					'<div class="details-info">',
						'<tpl if="this.isEmpty(f_id) == false">',
							'<b style="display:inline;white-space:nowrap;">'+get_ag_lang('CDI_NAME')+':</b>',
							'<span style="display:inline;">{f_id}</span><br/>',
						'</tpl>',

						'<tpl if="this.isEmpty(used_parts) == false">',
							'<b style="display:inline;white-space:nowrap;">'+get_ag_lang('ART_NAME')+':</b>',
							'<span style="display:inline;white-space:nowrap;">{used_parts:ellipsis(21,false)}</span><br/>',
//							'<span style="white-space:nowrap;text-align:right;font-size:1.5em;">[<a href="#" style="white-space:nowrap;" onclick="click_used_parts_list_all(',"'{b_id}'",');return false;" style="font-weight:bold;white-space:nowrap;">download obj files</a>]</span>',
							'<span style="white-space:nowrap;text-align:right;margin-top:5px;"><a href="#" style="white-space:nowrap;" onclick="click_used_parts_list_all(',"'{b_id}'",');return false;" style="font-weight:bold;white-space:nowrap;"><img src="css/btn_dlobjfiles02.png"></a></span>',
						'</tpl>',

						'<tpl if="this.isEmpty(density_ends) == false">',
							'<b style="display:inline;white-space:nowrap;">'+get_ag_lang('REP_PRIMITIVE')+':</b>',
							'<span style="display:inline;white-space:nowrap;">',
							'<tpl if="primitive == true">',
								'{[Ext.util.Format.ellipsis("'+get_ag_lang('ELEMENT_PRIMARY')+'",12)]}',
							'</tpl>',
							'<tpl if="primitive == false">',
								'{[Ext.util.Format.ellipsis("'+get_ag_lang('COMPOUND_SECONDARY')+'",10)]}',
							'</tpl>',
							'</span><br/>',
						'</tpl>',
					'</div>',

					'<tpl if="this.isEmpty(b_id) == false">',
						'<div class="details-info">',
							'<b style="display:inline;white-space:nowrap;">Share comments on {b_id}</b>',
							'<span style="display:inline;white-space:nowrap;">({tweet_num}) <a href="#" onclick="clickThumbTweet(event);return false;"><img src="css/twitter_16x14.png" ext:qtip="Error report"></a></span><br/>',
							'<tpl if="this.isArray(tweets) == true">',
								'<tpl for="tweets">',
									'<tpl if="xindex &lt; 6">',
										'<span style="border-top:1px solid #ddd;"></span>',
										'<table style="">',
										'<tr><td rowspan="2" valign="top"><img src={user_piuhs}></td><td>{user_name} @{user_scname}</td>',
										'<td align="right" valign="top" nowrap>{[Ext.util.Format.date(this.toDate(values.created*1000),"d M")]}</td></tr>',
										'<tr><td colspan="2">{text}</td></tr>',
										'</table>',
									'</tpl>',
								'</tpl>',
								'<span style="border-top:1px solid #ddd;"><a href="#" onclick="showTweets(event);return false;">show all</a></span>',
							'</tpl>',
						'</div>',
					'</tpl>',

					'<tpl if="this.isEmpty(density_ends) == false">',
						'<div class="details-info">',
							'<b style="display:inline;white-space:nowrap;">'+get_ag_lang('REP_DENSITY')+':</b>',
							'<span style="display:inline;white-space:nowrap;">{density}%</span><br/>',

							'<tpl if="this.isArray(density_ends) == true">',

								'<b style="">Represented / missing component</b>',
								'<div style="max-height:440px;overflow:auto;">',

								'<table><tbody>',
								'<tpl for="density_ends">',
									'<tr><td valign="top">',
									'<tpl if="this.isEmpty(b_id) == false">',
										'{b_id}',
									'</tpl>',
									'<tpl if="this.isEmpty(b_id) == true">',
										'NONE',
									'</tpl>',
									':</td><td valign="top">',
									'<tpl if="primitive == true">',
										'<a href="#" style="',
										'color:#006400;white-space:nowrap;',
										'" onclick="clickDensityEnds(',"'",'{f_id}',"'",');return false;">{f_id}</a>',
									'</tpl>',
									'<tpl if="primitive == false">',
										'<label style="',
										'color:#dc143c;',
										'">{f_id}</label>',
									'</tpl>',

									'</td><td valign="top">:</td><td valign="top"',

									'<tpl if="primitive == true &amp;&amp; this.isEmpty(path) == false">',
										'>{name}</td><td valign="top"><img src="{path}" width=40 height=40>',
									'</tpl>',
									'<tpl if="primitive != true || this.isEmpty(path) == true">',
										' colspan=2>{name}',
									'</tpl>',
									'</td></tr>',
								'</tpl>',
								'</tbody></table>',
								'</div>',
							'</tpl>',
							'<tpl if="this.isArray(density_ends) == false">',
								'<span>{density_ends}</span>',
							'</tpl>',


						'</div>',
					'</tpl>',

					'<tpl if="this.isEmpty(f_id) == false">',
						'<div class="details-info">',
							'<b style="white-space: nowrap;">Concept labels for {f_id} (<label style="font-size:0.85em;">in {concept_info}{concept_build}</label>)</b>',
							'<tpl if="this.isEmpty(name_e) == false">',
								'<table cellpadding=0 cellspacing=0>',
								'<tr><td valign="top" nowrap><b>'+get_ag_lang('DETAIL_TITLE_NAME_E')+':</b></td>',
								'<td><span>{name_e}</span></td></tr>',
								'</table>',
							'</tpl>',
							'<tpl if="this.isEmpty(name_j) == false">',
								'<table cellpadding=0 cellspacing=0>',
								'<tr><td valign="top" nowrap><b>'+get_ag_lang('DETAIL_TITLE_NAME_J')+':</b></td>',
								'<td><span>{name_j}</span></td></tr>',
								'</table>',
							'</tpl>',
							'<tpl if="this.isEmpty(name_k) == false">',
								'<table cellpadding=0 cellspacing=0>',
								'<tr><td valign="top" nowrap><b>'+get_ag_lang('DETAIL_TITLE_NAME_K')+':</b></td>',
								'<td><span>{name_k}</span></td></tr>',
								'</table>',
							'</tpl>',
							'<tpl if="this.isEmpty(name_l) == false">',
								'<table cellpadding=0 cellspacing=0>',
								'<tr><td valign="top" nowrap><b>'+get_ag_lang('DETAIL_TITLE_NAME_L')+':</b></td>',
								'<td><span>{name_l}</span></td></tr>',
								'</table>',
							'</tpl>',
							'<tpl if="this.isEmpty(syn_e) == false">',
								'<table cellpadding=0 cellspacing=0>',
								'<tr><td valign="top" nowrap><b>'+get_ag_lang('DETAIL_TITLE_SYNONYM_E')+':</b></td>',
								'<td><span>{syn_e}</span></td></tr>',
								'</table>',
							'</tpl>',
							'<tpl if="this.isEmpty(syn_j) == false">',
								'<table cellpadding=0 cellspacing=0>',
								'<tr><td valign="top" nowrap><b>'+get_ag_lang('DETAIL_TITLE_SYNONYM_J')+':</b></td>',
								'<td><span>{syn_j}</span></td></tr>',
								'</table>',
							'</tpl>',
							'<tpl if="this.isEmpty(def_e) == false">',
								'<table cellpadding=0 cellspacing=0>',
								'<tr><td valign="top" nowrap><b>'+get_ag_lang('DETAIL_TITLE_DEFINITION_E')+':</b></td>',
								'<td><span>{def_e}</span></td></tr>',
								'</table>',
							'</tpl>',
						'</div>',
					'</tpl>',

					'<tpl if="this.isEmpty(b_id) == false">',
						'<div class="bp3d-info">',
							'<b>Model cluster coordinates</b>',
							'<div style="padding-left:5px;">',
								'<table>',
									'<tpl if="this.isEmpty(phase) == false">',
										'<tr>',
											'<th><b>Phase&nbsp;:</b></th>',
											'<td><span>{phase}</span></td>',
										'</tr>',
									'</tpl>',
									'<tpl if="this.isEmpty(xmin) == false">',
										'<tr>',
											'<th><b>'+get_ag_lang('DETAIL_TITLE_XMIN')+'&nbsp;:</b></th>',
											'<td><span>{xmin} mm</span></td>',
										'</tr>',
									'</tpl>',
									'<tpl if="this.isEmpty(xmax) == false">',
										'<tr>',
											'<th><b>'+get_ag_lang('DETAIL_TITLE_XMAX')+'&nbsp;:</b></th>',
											'<td><span>{xmax} mm</span></td>',
										'</tr>',
									'</tpl>',
									'<tpl if="this.isEmpty(ymin) == false">',
										'<tr>',
											'<th><b>'+get_ag_lang('DETAIL_TITLE_YMIN')+'&nbsp;:</b></th>',
											'<td><span>{ymin} mm</span></td>',
										'</tr>',
									'</tpl>',
									'<tpl if="this.isEmpty(ymax) == false">',
										'<tr>',
											'<th><b>'+get_ag_lang('DETAIL_TITLE_YMAX')+'&nbsp;:</b></th>',
											'<td><span>{ymax} mm</span></td>',
										'</tr>',
									'</tpl>',
									'<tpl if="this.isEmpty(zmin) == false">',
										'<tr>',
											'<th><b>'+get_ag_lang('DETAIL_TITLE_ZMIN')+'&nbsp;:</b></th>',
											'<td><span>{zmin} mm</span></td>',
										'</tr>',
									'</tpl>',
									'<tpl if="this.isEmpty(zmax) == false">',
										'<tr>',
											'<th><b>'+get_ag_lang('DETAIL_TITLE_ZMAX')+'&nbsp;:</b></th>',
											'<td><span>{zmax} mm</span></td>',
										'</tr>',
									'</tpl>',
									'<tpl if="this.isEmpty(volume) == false">',
										'<tr>',
											'<th><b>'+get_ag_lang('DETAIL_TITLE_VOLUME')+'&nbsp;:</b></th>',
											'<td><span>{volume} cm<sup>3</sup></span></td>',
										'</tr>',
									'</tpl>',
									'<tpl if="this.isEmpty(entryString) == false">',
										'<tr>',
											'<th><b>LastUpdate&nbsp;:</b></th>',
											'<td><span>{entryString}</span></td>',
										'</tr>',
									'</tpl>',
									'<tpl if="this.isEmpty(physical) == false">',
										'<tr>',
											'<th><b>Physical&nbsp;:</b></th>',
											'<td><span>{physical}</sup></span></td>',
										'</tr>',
									'</tpl>',
								'</table>',
							'</div>',
						'</div>',
					'</tpl>',

//					'<tpl if="this.isEmpty(srcstr) == false">',
//						'<div class="details-info">',
//							'<b>'+get_ag_lang('DETAIL_TITLE_ICON_URL')+':</b>',
//							'<span>Small&nbsp;:&nbsp;<a href="{srcstr}&amp;s=S" target="_blank">{srcstr}&amp;s=S</a></span>',
//							'<span>Large&nbsp;:&nbsp;<a href="{srcstr}&amp;s=L" target="_blank">{srcstr}&amp;s=L</a></span>',
//						'</div>',
//					'</tpl>',

//					'<div class="details-info">',
//						'<b>'+get_ag_lang('DETAIL_TITLE_LAST')+':</b>',
//						'<span>{dateString}</span>',
//					'</div>',
				'</tpl>',
			'</div>'
		];
	};

	var createDetailsTemplate = function(aID){
		var arr = getDetailsTemplateArray(aID);
		var template = new Ext.XTemplate(arr.join(''),{
			isEmpty:function(val){return Ext.isEmpty(val);},
			isArray:function(val){return Ext.isArray(val);},
			isNotEmptys:function(){for(var i=0;i<arguments.length;i++){if(!Ext.isEmpty(arguments[i])) return true;};return false;},
			isNotEmptyLSDBTermArray:function(lsdb_term_arr){
				for(var i=0;i<lsdb_term_arr.length;i++){
					if(!Ext.isEmpty(lsdb_term_arr[i].lsdb_term_e)) return true;
					if(!Ext.isEmpty(lsdb_term_arr[i].lsdb_term_l)) return true;
					if(!Ext.isEmpty(lsdb_term_arr[i].lsdb_term_j)) return true;
					if(!Ext.isEmpty(lsdb_term_arr[i].lsdb_term_k)) return true;
				};
				return false;
			},
			toDate:function(val){
				var dd = new Date();
				dd.setTime(val);
				return dd;
			}
		});
		template.compile();
		return template;
	};


	var createDetailsConceptTemplate = function(aID){
		var id = aID;
		var arr = [
			'<tpl if="this.isEmpty(f_id) == false">',
				get_ag_lang('FMA_DESCRIPTION_HTML'),
				'<div class="details-info" style="margin:0 5px;">',
					'<b style="white-space: nowrap;">Concept labels for <label>{f_id}</label> (<label style="font-size:0.85em;">in {concept_info}{concept_build}</label>)</b>',
					'<tpl if="this.isEmpty(name_e) == false">',
						'<table cellpadding=0 cellspacing=0>',
						'<tr><td valign="top" nowrap><b>'+get_ag_lang('DETAIL_TITLE_NAME_E')+':</b></td>',
						'<td><span>{name_e}</span></td></tr>',
						'</table>',
					'</tpl>',
					'<tpl if="this.isEmpty(name_j) == false">',
						'<table cellpadding=0 cellspacing=0>',
						'<tr><td valign="top" nowrap><b>'+get_ag_lang('DETAIL_TITLE_NAME_J')+':</b></td>',
						'<td><span>{name_j}</span></td></tr>',
						'</table>',
					'</tpl>',
					'<tpl if="this.isEmpty(name_k) == false">',
						'<table cellpadding=0 cellspacing=0>',
						'<tr><td valign="top" nowrap><b>'+get_ag_lang('DETAIL_TITLE_NAME_K')+':</b></td>',
						'<td><span>{name_k}</span></td></tr>',
						'</table>',
					'</tpl>',
					'<tpl if="this.isEmpty(name_l) == false">',
						'<table cellpadding=0 cellspacing=0>',
						'<tr><td valign="top" nowrap><b>'+get_ag_lang('DETAIL_TITLE_NAME_L')+':</b></td>',
						'<td><span>{name_l}</span></td></tr>',
						'</table>',
					'</tpl>',
					'<tpl if="this.isEmpty(syn_e) == false">',
						'<table cellpadding=0 cellspacing=0>',
						'<tr><td valign="top" nowrap><b>'+get_ag_lang('DETAIL_TITLE_SYNONYM_E')+':</b></td>',
						'<td><span>{syn_e}</span></td></tr>',
						'</table>',
					'</tpl>',
					'<tpl if="this.isEmpty(syn_j) == false">',
						'<table cellpadding=0 cellspacing=0>',
						'<tr><td valign="top" nowrap><b>'+get_ag_lang('DETAIL_TITLE_SYNONYM_J')+':</b></td>',
						'<td><span>{syn_j}</span></td></tr>',
						'</table>',
					'</tpl>',
					'<tpl if="this.isEmpty(def_e) == false">',
						'<table cellpadding=0 cellspacing=0>',
						'<tr><td valign="top" nowrap><b>'+get_ag_lang('DETAIL_TITLE_DEFINITION_E')+':</b></td>',
						'<td><span>{def_e}</span></td></tr>',
						'</table>',
					'</tpl>',
				'</div>',
				'<tpl if="this.isNotEmptys(is_a_path2root,is_a_brother,is_a_children,partof_path2root,partof_brother,partof_children)==false">',
					'<div class="details-info fmastratum-anchor">',
						'<div style="margin:0 5px;">',
							'<div id="',id,'"><span style="vertical-align:middle;"><img src="resources/images/default/tree/loading.gif"/>&nbsp;'+get_ag_lang('MSG_LOADING_DATA')+'</span><div>',
						'</div>',
					'</div>',
				'</tpl>',
			'</tpl>'
		];
		var template = new Ext.XTemplate(arr.join(''),{
			isEmpty:function(val){return Ext.isEmpty(val);},
			isArray:function(val){return Ext.isArray(val);},
			isNotEmptys:function(){for(var i=0;i<arguments.length;i++){if(!Ext.isEmpty(arguments[i])) return true;};return false;},
			toDate:function(val){
				var dd = new Date();
				dd.setTime(val);
				return dd;
			}
		});
		template.compile();
		return template;
	};

	var createDetailsTweetTemplate = function(aID){
		var id = aID;
		var arr = [
			'<tpl if="this.isEmpty(b_id) == false">',
				'<div class="details-info" style="border-width:0;margin:0 4px;">',
					'<b style="display:inline;white-space:nowrap;">Share comments on {b_id}</b>',
					'<span style="display:inline;white-space:nowrap;">({tweet_num}) <a href="#" onclick="clickThumbTweet(event);return false;"><img src="css/twitter_16x14.png" ext:qtip="Error report"></a></span><br/>',
					'<tpl if="this.isArray(tweets) == true && this.isEmpty(tweets) == false">',
						'<tpl for="tweets">',
							'<tpl if="xindex &lt; 6">',
								'<span style="border-top:1px solid #ddd;"></span>',
								'<table style="">',
								'<tr><td rowspan="2" valign="top"><img src={user_piuhs}></td><td>{user_name} @{user_scname}</td>',
								'<td align="right">{[Ext.util.Format.date(this.toDate(values.created*1000),"d M")]}</td></tr>',
								'<tr><td colspan="2">{text}</td></tr>',
								'</table>',
							'</tpl>',
						'</tpl>',
					'</tpl>',
					'<tpl if="this.isEmpty(tweets) == true">',
						'<span style="border-top:1px solid #ddd;margin-top:4px;"></span>',
						'<span style="color:#666;font-family: arial,tahoma,helvetica,sans-serif;">Please Share the problems you find on this representation.</span>',
					'</tpl>',
				'</div>',
			'</tpl>'
		];
		var template = new Ext.XTemplate(arr.join(''),{
			isEmpty:function(val){return Ext.isEmpty(val);},
			isArray:function(val){return Ext.isArray(val);},
			isNotEmptys:function(){for(var i=0;i<arguments.length;i++){if(!Ext.isEmpty(arguments[i])) return true;};return false;},
			toDate:function(val){
				var dd = new Date();
				dd.setTime(val);
				return dd;
			}
		});
		template.compile();
		return template;
	};

	var getCommentDetailsTemplateArray = function(aID){
		var id = aID;
		return [
			'<div class="details">',
				'<tpl for=".">',
					'<div class="comment-details-info" style="padding-bottom:0px;">',
						'<div class="comment-details-info-title">',
							'<div style="margin:0px;margin-bottom:2px;padding-bottom:2px;0px;border-bottom:1px dotted #ccc;">',
								'<span style="display:inline;margin:0px;float:right;font-weight:bold;color:#333;">{tgi_version}</span>',
								'<span style="display:inline;margin:0px;font-weight:bold;color:#333;">{t_name}</span>',
							'</div>',
							'<span class="status">{cs_name}</span><br style="clear:both;"/>',

							'<span style="float:right;">',
							'[<a class="comment-details-info-comment-reply"        c_id="{c_id}" href="#" style="text-decoration:none;" onclick="return false;">'+get_ag_lang('COMMENT_TITLE_REPLY')+'</a>]',
							'&nbsp;[<a class="comment-details-info-comment-edit"   c_id="{c_id}" href="#" style="text-decoration:none;" onclick="return false;">'+get_ag_lang('COMMENT_TITLE_EDIT')+'</a>]',
							'&nbsp;[<a class="comment-details-info-comment-delete" c_id="{c_id}" href="#" style="text-decoration:none;" onclick="return false;">'+get_ag_lang('COMMENT_TITLE_DELETE')+'</a>]',
							'</span>',
							'<tpl if="this.isEmpty(c_title) == false">',
								'<b>[{c_id}]:{c_title}</b>',
							'</tpl>',
						'</div>',
						'<tpl if="this.isEmpty(c_image) == false">',
							'<a class="comment-details-info-comment-thumb" href="{c_image}" target="_blank"><img src="{c_image_thumb}" align="right" border="0"></a>',
						'</tpl>',
						'<div class="comment-details-info-comment" c_id="{c_id}">{commentString}</div>',
						'<tpl if="this.isEmpty(nameString) == false">',
							'<div style="text-align:right;clear:both;"><b>Name:</b><span>{nameString}</span></div>',
						'</tpl>',
						'<div style="text-align:right;clear:both;"><span>{dateString}</span></div>',
						'<div class="comment-child" id="',id,'_comment_child_{c_id}"></div>',
					'</div>',
				'</tpl>',
			'</div>',
		];
	};
	var createCommentDetailsTemplate = function(aID){
		var arr = getCommentDetailsTemplateArray(aID);
		var template = new Ext.XTemplate(
			arr.join(''),
			{isEmpty:function(val){return Ext.isEmpty(val);}}
		);
		template.compile();
		return template;
	};

	var getCommentDetailsChildTemplateArray = function(aID){
		var id = aID;
		return [
			'<tpl for=".">',
				'<div class="comment-details-info-child">',
					'<div class="comment-details-info-title">',
						'<span style="float:right;">',
						'[<a class="comment-details-info-comment-reply"        c_id="{c_id}" href="#" style="text-decoration:none;" onclick="return false;">'+get_ag_lang('COMMENT_TITLE_REPLY')+'</a>]',
						'&nbsp;[<a class="comment-details-info-comment-edit"   c_id="{c_id}" href="#" style="text-decoration:none;" onclick="return false;">'+get_ag_lang('COMMENT_TITLE_EDIT')+'</a>]',
						'&nbsp;[<a class="comment-details-info-comment-delete" c_id="{c_id}" href="#" style="text-decoration:none;" onclick="return false;">'+get_ag_lang('COMMENT_TITLE_DELETE')+'</a>]',
						'</span>',
						'<tpl if="this.isEmpty(c_title) == false">',
							'<b>[{c_id}]:{c_title}</b>',
						'</tpl>',
					'</div>',
					'<tpl if="this.isEmpty(c_image) == false">',
						'<a class="comment-details-info-comment-thumb" href="{c_image}" target="_blank"><img src="{c_image_thumb}" align="right" border="0"></a>',
					'</tpl>',
					'<div class="comment-details-info-comment" c_id="{c_id}">{commentString}</div>',
					'<tpl if="this.isEmpty(nameString) == false">',
						'<div style="text-align:right;clear:both;"><b>Name:</b><span>{nameString}</span></div>',
					'</tpl>',
					'<div style="text-align:right;clear:both;"><span>{dateString}</span></div>',
					'<div class="comment-child" id=""',id,'_comment_child_{c_id}"></div>',
				'</div>',
			'</tpl>',
		];
	};
	var createCommentDetailsChildTemplate = function(aID){
		var arr = getCommentDetailsChildTemplateArray(aID);
		var template = new Ext.XTemplate(
			arr.join(''),
			{isEmpty:function(val){return Ext.isEmpty(val);}}
		);
		template.compile();
		return template;
	};

	jumpFmastratum = function(node,selector){
		try{
			var body = Ext.get(node).findParentNode('div.x-panel-body',undefined,true);
			var child = body.child(selector);
			var scroll = body.getScroll();
			var offset = child.getOffsetsTo(body);
			body.scrollTo('top',offset[1]+scroll.top,true);
		}catch(e){
			_dump("jumpFmastratum():"+e);
		}
	};

	clickThumbTweet = function(){
		var selRec;
		var oSelNode = null;
		var dataview = getViewImages();
		if(!dataview) return;
		var selRecs = dataview.getSelectedRecords();
		if(selRecs && selRecs.length>0){
			selRec = selRecs[0].data;
		}else if(oSelNode){
			selRec = oSelNode.attributes.attr;
		}
		if(selRec){
			var b_id = selRec.mca_id ? selRec.mca_id : selRec.b_id;
			var url = 'twitter/tweet-bp3d.html?hashtags=bp3d&text=' + encodeURIComponent(b_id+' '+selRec.name);
			window.open(url,'_blank','dependent=yes,width=800,height=600');
		}else{
			Ext.Msg.show({
				title:'Tweet',
				buttons: Ext.Msg.OK,
				icon: Ext.Msg.ERROR,
				modal : true,
				msg : "パーツが選択されていません"
			});
		}
	};

	showTweets = function(){
		Ext.getCmp('bp3d-contents-detail-panel').activate(Ext.getCmp('bp3d-contents-detail-tweet-panel'));
	};

	var initTemplates = function(){
		thumbTemplate = new Ext.XTemplate(
			'<tpl for=".">',
				'<div class="thumb-wrap" style="{style}" ext:qtip="{name}">',
					'<div class="thumb" style="background:{bgColor};border-color:{borderColor};" ext:qtip="{name}">',
						(Ext.isIE ? '<img src="{src}" alt="{name}" width="120" height="120" ext:qtip="{name}">' : '<img src="resources/images/default/s.gif" lsrc="{src}" alt="{name}" width="120" height="120" ext:qtip="{name}">'),
						'<tpl if="this.isEmpty(c_path) == false">',
							'<a class="thumb-twisty" href="#" onclick="clickThumbTwisty(event,{[xindex-1]});this.blur();return false;"></a>',
						'</tpl>',
						'<tpl if="this.isEmpty(search_c_path) == false">',
							'<a class="thumb-twisty" href="#" onclick="clickThumbTwisty(event,{[xindex-1]});this.blur();return false;"></a>',
						'</tpl>',
						'<tpl if="this.isEmpty(u_path) == false">',
							'<tpl if="this.isUPPath(u_path) == true">',
								'<a class="thumb-up" href="#" onclick="clickThumbTwisty(event,{[xindex-1]});this.blur();return false;"></a>',
							'</tpl>',
							'<tpl if="this.isUPPath(u_path) == false">',
								'<span class="thumb-up-dis"></span>',
							'</tpl>',
						'</tpl>',
//						'<tpl if="this.isEmpty(common_id) == false">',
//							'<a class="thumb-link" href="#" f_id="{common_id}" onclick="this.blur();"></a>',
//						'</tpl>',
						'<tpl if="this.isEmpty(density_icon) == false">',
							'<div class="thumb-density thumb-density-{density_icon}" ext:qtip="{density}%"><img src="css/{density_icon}.png" ext:qtip="{density}%"></div>',
						'</tpl>',
						'<tpl if="tweet_num &gt; 0">',
							'<div class="thumb-tweet" ext:qtip="Tweet"><a href="#" onclick="showTweets(event);return false;"><img src="css/twitter_16x14.png" ext:qtip="Tweet"></a></div>',
						'</tpl>',
					'</div>',
					'<tpl if="this.isEmpty(state) == true">',
						'<div class="thumb-shortname" ext:qtip="{name}"><span ext:qtip="{name}"><label ext:qtip="{name}">{shortName}</label></span></div>',
					'</tpl>',
					'<tpl if="this.isEmpty(state) == false">',
						'<div class="thumb-shortname thumb-shortname-{state}" ext:qtip="{name}"><span ext:qtip="{name}"><label ext:qtip="{name}">{shortName}</label></span></div>',
					'</tpl>',
				'</div>',
			'</tpl>',
			{
				isEmpty : function(val){
					return Ext.isEmpty(val);
				},
				isUPPath : function(val){
					return (!Ext.isEmpty(val) && val != 'ctg_' ? true : false);
				}
			}
		);
		thumbTemplate.compile();

		listTemplate = new Ext.XTemplate(
			'<tpl for=".">',
				'<div class="thumb-list-wrap" style="{style}">',
					'<table class="thumb-information"><tbody><tr>',
						'<td class="thumb-information-item">',
							'<div class="thumb" style="background:{bgColor};border-color:{borderColor};">',
								(Ext.isIE ? '<img src="{src}" alt="{name}" width="60" height="60">' : '<img src="resources/images/default/s.gif" lsrc="{src}" alt="{name}" width="60" height="60">'),
								'<tpl if="this.isEmpty(c_path) == false">',
									'<a class="thumb-twisty" href="#" onclick="clickThumbTwisty(event,{[xindex-1]});this.blur();return false;"></a>',
								'</tpl>',
								'<tpl if="this.isEmpty(search_c_path) == false">',
									'<a class="thumb-twisty" href="#" onclick="clickThumbTwisty(event,{[xindex-1]});this.blur();return false;"></a>',
								'</tpl>',
								'<tpl if="this.isEmpty(u_path) == false">',
									'<tpl if="this.isUPPath(u_path) == true">',
										'<a class="thumb-up" href="#" onclick="clickThumbTwisty(event,{[xindex-1]});this.blur();return false;"></a>',
									'</tpl>',
									'<tpl if="this.isUPPath(u_path) == false">',
										'<span class="thumb-up-dis"></span>',
									'</tpl>',
								'</tpl>',
								'<tpl if="this.isEmpty(density_icon) == false">',
									'<div class="thumb-density thumb-density-{density_icon}" ext:qtip="{density}%"><img src="css/{density_icon}.png" ext:qtip="{density}%"></div>',
								'</tpl>',

							'<tpl if="tweet_num &gt; 0">',
								'<div class="thumb-tweet" ext:qtip="Tweet"><a href="#" onclick="showTweets(event);return false;"><img src="css/twitter_16x14.png" ext:qtip="Tweet"></a></div>',
							'</tpl>',

							'</div>',
							'<tpl if="this.isEmpty(state) == false">',
								'<div class="thumb-shortname thumb-shortname-{state}"><span></span></div>',
							'</tpl>',
						'</td>',
						'<td class="thumb-information-item thumb-information-item-1">',
							'<table><tbody>',
							'<tpl if="this.isEmpty(b_id)==false">',
								'<tr><th>'+get_ag_lang('REP_ID')+':</th><td>{b_id}</td></tr>',
							'</tpl>',
							'<tr><th>'+get_ag_lang('CDI_NAME')+':</th><td>{f_id}</td></tr>',
							'<tr><th>TAID:</th><td><tpl if="this.isEmpty(taid) == false">{taid}</tpl></td></tr>',
							'</tbody></table>',
						'</td>',
						'<td class="thumb-information-item thumb-information-item-2">',
							'<table><tbody>',
							'<tr><th>'+get_ag_lang('DETAIL_TITLE_NAME_E')+':</th><td><tpl if="this.isEmpty(name_e) == false">{name_e}</tpl></td></tr>',
							'<tr><th>'+get_ag_lang('DETAIL_TITLE_NAME_J')+':</th><td><tpl if="this.isEmpty(name_j) == false">{name_j}</tpl></td></tr>',
							'<tr><th>'+get_ag_lang('DETAIL_TITLE_NAME_K')+':</th><td><tpl if="this.isEmpty(name_k) == false">{name_k}</tpl></td></tr>',
							'<tr><th>'+get_ag_lang('DETAIL_TITLE_NAME_L')+':</th><td><tpl if="this.isEmpty(name_l) == false">{name_l}</tpl></td></tr>',
							'</tbody></table>',
						'</td>',
						'<td class="thumb-information-item thumb-information-item-3">',
							'<table><tbody>',
							'<tr><th>'+get_ag_lang('DETAIL_TITLE_SYNONYM_E')+':</th><td><tpl if="this.isEmpty(syn_e) == false">{syn_e}</tpl></td></tr>',
							'<tr><th>'+get_ag_lang('DETAIL_TITLE_SYNONYM_J')+':</th><td><tpl if="this.isEmpty(syn_j) == false">{syn_j}</tpl></td></tr>',
							'</tbody></table>',
						'</td>',
					'</tr></tbody></table>',
				'</div>',
			'</tpl>',
			{
				isEmpty : function(val){
					return Ext.isEmpty(val);
				},
				isUPPath : function(val){
					return (!Ext.isEmpty(val) && val != 'ctg_' ? true : false);
				}
			}
		);
		listTemplate.compile();


		fmastratumTemplate = new Ext.XTemplate(
			'<tpl for=".">',
				'<tpl if="this.isNotEmptys(partof_path2root,partof_brother,partof_children,is_a_path2root,is_a_brother,is_a_children)">',
					'<b style="padding-top:5px;">',
					'<tpl if="this.isNotEmptys(partof_path2root,partof_brother,partof_children)">',
						'<span style="white-space:nowrap;margin:0px 0.5em 0px 0px;float:left;">',
							'<a href="#" onclick="jumpFmastratum(this,',"'b.fmastratum-anchor-partof'",');return false;">FMA part_of</a>',
							'<tpl if="this.isEmpty(partof_path2root) == false">',
								'(<a href="#" onclick="jumpFmastratum(this,',"'b.fmastratum-anchor-partof-path2root'",');return false;">r</a>)',
							'</tpl>',
							'<tpl if="this.isEmpty(partof_brother) == false">',
								'(<a href="#" onclick="jumpFmastratum(this,',"'b.fmastratum-anchor-partof-brother'",');return false;">b</a>)',
							'</tpl>',
							'<tpl if="this.isEmpty(partof_children) == false">',
								'(<a href="#" onclick="jumpFmastratum(this,',"'b.fmastratum-anchor-partof-children'",');return false;">c</a>)',
							'</tpl>',
						'</span>',
					'</tpl>',
					'<tpl if="this.isNotEmptys(is_a_path2root,is_a_brother,is_a_children)">',
						'<span style="white-space:nowrap;margin:0px;float:left;">',
							'<a href="#" onclick="jumpFmastratum(this,',"'b.fmastratum-anchor-is_a'",');return false;">FMA is_a</a>',
							'<tpl if="this.isEmpty(is_a_path2root) == false">',
								'(<a href="#" onclick="jumpFmastratum(this,',"'b.fmastratum-anchor-is_a-path2root'",');return false;">r</a>)',
							'</tpl>',
							'<tpl if="this.isEmpty(is_a_brother) == false">',
								'(<a href="#" onclick="jumpFmastratum(this,',"'b.fmastratum-anchor-is_a-brother'",');return false;">b</a>)',
							'</tpl>',
							'<tpl if="this.isEmpty(is_a_children) == false">',
								'(<a href="#" onclick="jumpFmastratum(this,',"'b.fmastratum-anchor-is_a-children'",');return false;">c</a>)',
							'</tpl>',
						'</span>',
					'</tpl>',

					'<br style="clear:left;"/>',
					'</b>',
				'</tpl>',


				'<tpl if="this.isNotEmptys(partof_path2root,partof_path2root_circular,partof_brother,partof_children)">',
					'<b style="padding-top:5px;" class="fmastratum-anchor-partof">FMA part_of</b>',
					'<tpl if="this.isEmpty(partof_path2root) == false">',
						'<div style="padding-left:5px;">',
							'<tpl for="partof_path2root">',
								'<tpl if="[xcount] == 1">',
									'<b style="padding-top:0px;text-decoration:underline;" class="fmastratum-anchor-partof-path2root">',
									'<a href="#" onclick="jumpFmastratum(this,',"'div.fmastratum-anchor'",');return false;" style="float:right;">Top</a>',
									'Path to root</b>',
									'<div style="padding-left:5px;padding-bottom:5px;">',
										'<table style="margin:0px;padding:0px;">',
											'<tpl for="fma">',
												'<tr><td valign="top">',
												'<tpl if="this.isEmpty(t_delcause) == true && this.isEmpty(c_path) == false">',
													'<a href="#" style="white-space:nowrap;" onclick="click_partof(', "'", '{f_id}', "'", ',', "'", '{c_path}', "'", ');return false;">{f_id}</a>',
												'</tpl>',
												'<tpl if="this.isEmpty(t_delcause) == false || this.isEmpty(c_path) == true">',
													'{f_id}',
												'</tpl>',
												'</td><td valign="top">:</td><td valign="top">{name}</td>',
												'<tpl if="this.isEmpty(potype) == false">',
													'<td valign="top">:</td><td valign="top">',
													'<tpl for="potype">',
														'<div class="potype {potabbr}" title="{potname}">{potabbr}</div>',
													'</tpl>',
												'</tpl>',
												'<tpl if="this.isEmpty(potype) == true">',
													'<td valign="top"></td><td valign="top">',
												'</tpl>',
												'</td></tr>',
											'</tpl>',
										'</table>',
									'</div>',
								'</tpl>',
								'<tpl if="[xcount] &gt; 1">',
									'<tpl if="[xindex] &lt;= 10">',
										'<b style="padding-top:0px;text-decoration:underline;"',
										'<tpl if="[xindex] == 1">',
											' class="fmastratum-anchor-partof-path2root"',
										'</tpl>',
										'><a href="#" onclick="jumpFmastratum(this,',"'div.fmastratum-anchor'",');return false;" style="float:right;">Top</a>',
										'Path to root({[xindex]})</b>',
										'<div style="padding-left:5px;padding-bottom:5px;">',
											'<table style="margin:0px;padding:0px;">',
												'<tpl for="fma">',
													'<tr><td valign="top">',
													'<tpl if="this.isEmpty(t_delcause) == true && this.isEmpty(c_path) == false">',
														'<a href="#" style="white-space:nowrap;" onclick="click_partof(', "'", '{f_id}', "'", ',', "'", '{c_path}', "'", ');return false;">{f_id}</a>',
													'</tpl>',
													'<tpl if="this.isEmpty(t_delcause) == false || this.isEmpty(c_path) == true">',
														'{f_id}',
													'</tpl>',
													'</td><td valign="top">:</td><td valign="top">{name}</td>',
													'<tpl if="this.isEmpty(potype) == false">',
														'<td valign="top">:</td><td valign="top">',
														'<tpl for="potype">',
															'<div class="potype {potabbr}" title="{potname}">{potabbr}</div>',
														'</tpl>',
													'</tpl>',
													'<tpl if="this.isEmpty(potype) == true">',
														'<td valign="top"></td><td valign="top">',
													'</tpl>',
													'</td></tr>',
												'</tpl>',
											'</table>',
										'</div>',
									'</tpl>',
									'<tpl if="[xindex] &gt; 10">',
										'<b style="padding-top:0px;text-decoration:underline;">Path to root(...)</b>',
									'</tpl>',
								'</tpl>',
							'</tpl>',
						'</div>',
					'</tpl>',

					'<tpl if="this.isEmpty(partof_path2root_circular) == false">',
						'<div style="padding-left:5px;">',
							'<tpl for="partof_path2root_circular">',
								'<tpl if="[xcount] == 1">',
									'<b style="padding-top:0px;text-decoration:underline;">Path to root [<font style="color:red;">Circular</font>]</b>',
									'<div style="padding-left:5px;padding-bottom:5px;">',
										'<table style="margin:0px;padding:0px;">',
											'<tpl for="fma">',
												'<tr><td valign="top" class="{circular}">',
												'<tpl if="this.isEmpty(t_delcause) == true && this.isEmpty(c_path) == false">',
													'<a href="#" style="white-space:nowrap;" onclick="click_partof(', "'", '{f_id}', "'", ',', "'", '{c_path}', "'", ');return false;">{f_id}</a>',
												'</tpl>',
												'<tpl if="this.isEmpty(t_delcause) == false || this.isEmpty(c_path) == true">',
													'{f_id}',
												'</tpl>',
												'</td><td valign="top" class="{circular}">:</td><td valign="top" class="{circular}">{name}</td>',
												'<tpl if="this.isEmpty(potype) == false">',
													'<td valign="top" class="{circular}">:</td><td valign="top" class="{circular}">',
													'<tpl for="potype">',
														'<div class="potype {potabbr}" title="{potname}">{potabbr}</div>',
													'</tpl>',
												'</tpl>',
												'<tpl if="this.isEmpty(potype) == true">',
													'<td valign="top" class="{circular}"></td><td valign="top" class="{circular}">',
												'</tpl>',
												'</td></tr>',
											'</tpl>',
										'</table>',
									'</div>',
								'</tpl>',
								'<tpl if="[xcount] &gt; 1">',
									'<tpl if="[xindex] &lt;= 10">',
										'<b style="padding-top:0px;text-decoration:underline;">Path to root [<font style="color:red;">Circular</font>] ({[xindex]})</b>',
										'<div style="padding-left:5px;padding-bottom:5px;">',
											'<table style="margin:0px;padding:0px;">',
												'<tpl for="fma">',
													'<tr><td valign="top" class="{circular}">',
													'<tpl if="this.isEmpty(t_delcause) == true && this.isEmpty(c_path) == false">',
														'<a href="#" style="white-space:nowrap;" onclick="click_partof(', "'", '{f_id}', "'", ',', "'", '{c_path}', "'", ');return false;">{f_id}</a>',
													'</tpl>',
													'<tpl if="this.isEmpty(t_delcause) == false || this.isEmpty(c_path) == true">',
														'{f_id}',
													'</tpl>',
													'</td><td valign="top" class="{circular}">:</td><td valign="top" class="{circular}">{name}</td>',
													'<tpl if="this.isEmpty(potype) == false">',
														'<td valign="top" class="{circular}">:</td><td valign="top" class="{circular}">',
														'<tpl for="potype">',
															'<div class="potype {potabbr}" title="{potname}">{potabbr}</div>',
														'</tpl>',
													'</tpl>',
													'<tpl if="this.isEmpty(potype) == true">',
														'<td valign="top" class="{circular}"></td><td valign="top" class="{circular}">',
													'</tpl>',
													'</td></tr>',
												'</tpl>',
											'</table>',
										'</div>',
									'</tpl>',
									'<tpl if="[xindex] &gt; 10">',
										'<b style="padding-top:0px;text-decoration:underline;">Path to root [<font style="color:red;">Circular</font>] (...)</b>',
									'</tpl>',
								'</tpl>',
							'</tpl>',
						'</div>',
					'</tpl>',

					'<tpl if="this.isEmpty(partof_brother) == false">',
						'<div style="padding-left:5px;">',
							'<tpl for="partof_brother">',
								'<tpl if="[xcount] == 1">',
									'<b style="padding-top:0px;text-decoration:underline;" class="fmastratum-anchor-partof-brother">',
									'<a href="#" onclick="jumpFmastratum(this,',"'div.fmastratum-anchor'",');return false;" style="float:right;">Top</a>',
									'Brother</b>',
									'<div style="padding-left:5px;padding-bottom:5px;">',
										'<table style="margin:0px;padding:0px;">',

											'<tpl if="this.isEmpty(f_id) == false">',
												'<tr bgcolor="#dddddd"><td valign="top" style="font-weight:bold;">',
												'<tpl if="this.isEmpty(t_delcause) == true && this.isEmpty(c_path) == false">',
													'<a href="#" style="white-space:nowrap;" onclick="click_partof(', "'", '{f_id}', "'", ',', "'", '{c_path}', "'", ');return false;">{f_id}</a>',
												'</tpl>',
												'<tpl if="this.isEmpty(t_delcause) == false || this.isEmpty(c_path) == true">',
													'{f_id}',
												'</tpl>',
												'</td><td valign="top">:</td><td valign="top">{name}</td>',
												'<tpl if="this.isEmpty(potype) == false">',
													'<td valign="top">:</td><td valign="top">',
													'<tpl for="potype">',
														'<div class="potype {potabbr}" title="{potname}">{potabbr}</div>',
													'</tpl>',
												'</tpl>',
												'<tpl if="this.isEmpty(potype) == true">',
													'<td valign="top"></td><td valign="top">',
												'</tpl>',
												'</td></tr>',
												'<tpl for="children">',
													'<tr><td valign="top" style="padding-left:5px;">',
													'<tpl if="this.isEmpty(t_delcause) == true && this.isEmpty(c_path) == false">',
														'<a href="#" style="white-space:nowrap;" onclick="click_partof(', "'", '{f_id}', "'", ',', "'", '{c_path}', "'", ');return false;">{f_id}</a>',
													'</tpl>',
													'<tpl if="this.isEmpty(t_delcause) == false || this.isEmpty(c_path) == true">',
														'{f_id}',
													'</tpl>',
													'</td><td valign="top">:</td><td valign="top">{name}</td>',
													'<tpl if="this.isEmpty(potype) == false">',
														'<td valign="top">:</td><td valign="top">',
														'<tpl for="potype">',
															'<div class="potype {potabbr}" title="{potname}">{potabbr}</div>',
														'</tpl>',
													'</tpl>',
													'<tpl if="this.isEmpty(potype) == true">',
														'<td valign="top"></td><td valign="top">',
													'</tpl>',
													'</td></tr>',
												'</tpl>',
											'</tpl>',

											'<tpl if="this.isEmpty(f_id) == true">',
												'<tpl for="children">',
													'<tr><td valign="top">',
													'<tpl if="this.isEmpty(t_delcause) == true && this.isEmpty(c_path) == false">',
														'<a href="#" style="white-space:nowrap;" onclick="click_partof(', "'", '{f_id}', "'", ',', "'", '{c_path}', "'", ');return false;">{f_id}</a>',
													'</tpl>',
													'<tpl if="this.isEmpty(t_delcause) == false || this.isEmpty(c_path) == true">',
														'{f_id}',
													'</tpl>',
													'</td><td valign="top">:</td><td valign="top">{name}</td><td valign="top"></td><td valign="top"></td></tr>',
												'</tpl>',
											'</tpl>',
										'</table>',
									'</div>',
								'</tpl>',
								'<tpl if="[xcount] &gt; 1">',
									'<b style="padding-top:0px;text-decoration:underline;"',
									'<tpl if="[xindex] == 1">',
										' class="fmastratum-anchor-partof-brother"',
									'</tpl>',
									'><a href="#" onclick="jumpFmastratum(this,',"'div.fmastratum-anchor'",');return false;" style="float:right;">Top</a>',
									'Brother({[xindex]})</b>',


									'<div style="padding-left:5px;padding-bottom:5px;">',
										'<table style="margin:0px;padding:0px;">',
											'<tr bgcolor="#dddddd"><td valign="top" style="font-weight:bold;">',
											'<tpl if="this.isEmpty(t_delcause) == true && this.isEmpty(c_path) == false">',
												'<a href="#" style="white-space:nowrap;" onclick="click_partof(', "'", '{f_id}', "'", ',', "'", '{c_path}', "'", ');return false;">{f_id}</a>',
											'</tpl>',
											'<tpl if="this.isEmpty(t_delcause) == false || this.isEmpty(c_path) == true">',
												'{f_id}',
											'</tpl>',
											'</td><td valign="top">:</td><td valign="top" style="font-weight:bold;">{name}</td>',
											'<tpl if="this.isEmpty(potype) == false">',
												'<td valign="top">:</td><td valign="top">',
												'<tpl for="potype">',
													'<div class="potype {potabbr}" title="{potname}">{potabbr}</div>',
												'</tpl>',
											'</tpl>',
											'<tpl if="this.isEmpty(potype) == true">',
												'<td valign="top"></td><td valign="top">',
											'</tpl>',
											'</td></tr>',
											'<tpl for="children">',
												'<tr><td valign="top" style="padding-left:5px;">',
												'<tpl if="this.isEmpty(t_delcause) == true && this.isEmpty(c_path) == false">',
													'<a href="#" style="white-space:nowrap;" onclick="click_partof(', "'", '{f_id}', "'", ',', "'", '{c_path}', "'", ');return false;">{f_id}</a>',
												'</tpl>',
												'<tpl if="this.isEmpty(t_delcause) == false || this.isEmpty(c_path) == true">',
													'{f_id}',
												'</tpl>',
												'</td><td valign="top">:</td><td valign="top">{name}</td>',
												'<tpl if="this.isEmpty(potype) == false">',
													'<td valign="top">:</td><td valign="top">',
													'<tpl for="potype">',
														'<div class="potype {potabbr}" title="{potname}">{potabbr}</div>',
													'</tpl>',
												'</tpl>',
												'<tpl if="this.isEmpty(potype) == true">',
													'<td valign="top"></td><td valign="top">',
												'</tpl>',
												'</td></tr>',
											'</tpl>',
										'</table>',
									'</div>',
								'</tpl>',
							'</tpl>',
						'</div>',
					'</tpl>',
					'<tpl if="this.isEmpty(partof_children) == false">',
						'<div style="padding-left:5px;padding-bottom:5px;">',
							'<b style="padding-top:0px;text-decoration:underline;" class="fmastratum-anchor-partof-children">',
							'<a href="#" onclick="jumpFmastratum(this,',"'div.fmastratum-anchor'",');return false;" style="float:right;">Top</a>',
							'Children</b>',
							'<div style="padding-left:5px;">',
								'<table style="margin:0px;padding:0px;">',
									'<tpl for="partof_children">',
										'<tr><td valign="top">',
										'<tpl if="this.isEmpty(t_delcause) == true && this.isEmpty(c_path) == false">',
											'<a href="#" style="white-space:nowrap;" onclick="click_partof(', "'", '{f_id}', "'", ',', "'", '{c_path}', "'", ');return false;">{f_id}</a>',
										'</tpl>',
										'<tpl if="this.isEmpty(t_delcause) == false || this.isEmpty(c_path) == true">',
											'{f_id}',
										'</tpl>',
										'</td><td valign="top">:</td><td valign="top">{name}</td>',
										'<tpl if="this.isEmpty(potype) == false">',
											'<td valign="top">:</td><td valign="top">',
											'<tpl for="potype">',
												'<div class="potype {potabbr}" title="{potname}">{potabbr}</div>',
											'</tpl>',
										'</tpl>',
										'<tpl if="this.isEmpty(potype) == true">',
											'<td valign="top"></td><td valign="top">',
										'</tpl>',
										'</td></tr>',
									'</tpl>',
								'</table>',
							'</div>',
						'</div>',
					'</tpl>',
				'</tpl>',

				'<tpl if="this.isNotEmptys(is_a_path2root,is_a_brother,is_a_children)">',
					'<b style="padding-top:5px;" class="fmastratum-anchor-is_a">FMA is_a</b>',
					'<tpl if="this.isEmpty(is_a_path2root) == false">',
						'<div style="padding-left:5px;">',
							'<tpl for="is_a_path2root">',
								'<tpl if="[xcount] == 1">',
									'<b style="padding-top:0px;text-decoration:underline;" class="fmastratum-anchor-is_a-path2root">',
									'<a href="#" onclick="jumpFmastratum(this,',"'div.fmastratum-anchor'",');return false;" style="float:right;">Top</a>',
									'Path to root</b>',
									'<div style="padding-left:5px;padding-bottom:5px;">',
										'<table style="margin:0px;padding:0px;">',
											'<tpl for="fma">',
												'<tr><td valign="top">',
												'<tpl if="this.isEmpty(t_delcause) == true && this.isEmpty(c_path) == false">',
													'<a href="#" style="white-space:nowrap;" onclick="click_isa(', "'", '{f_id}', "'", ',', "'", '{c_path}', "'", ');return false;">{f_id}</a>',
												'</tpl>',
												'<tpl if="this.isEmpty(t_delcause) == false || this.isEmpty(c_path) == true">',
													'{f_id}',
												'</tpl>',
												'</td><td valign="top">:</td><td valign="top">{name}</td></tr>',
											'</tpl>',
										'</table>',
									'</div>',
								'</tpl>',
								'<tpl if="[xcount] &gt; 1">',
									'<b style="padding-top:0px;text-decoration:underline;"',
									'<tpl if="[xindex] == 1">',
										' class="fmastratum-anchor-is_a-path2root"',
									'</tpl>',
									'><a href="#" onclick="jumpFmastratum(this,',"'div.fmastratum-anchor'",');return false;" style="float:right;">Top</a>',
									'Path to root({[xindex]})</b>',
									'<div style="padding-left:5px;padding-bottom:5px;">',
										'<table style="margin:0px;padding:0px;">',
											'<tpl for="fma">',
												'<tr><td valign="top">',
												'<tpl if="this.isEmpty(t_delcause) == true && this.isEmpty(c_path) == false">',
													'<a href="#" style="white-space:nowrap;" onclick="click_isa(', "'", '{f_id}', "'", ',', "'", '{c_path}', "'", ');return false;">{f_id}</a>',
												'</tpl>',
												'<tpl if="this.isEmpty(t_delcause) == false || this.isEmpty(c_path) == true">',
													'{f_id}',
												'</tpl>',
												'</td><td valign="top">:</td><td valign="top">{name}</td></tr>',
											'</tpl>',
										'</table>',
									'</div>',
								'</tpl>',
							'</tpl>',
						'</div>',
					'</tpl>',

					'<tpl if="this.isEmpty(is_a_brother) == false">',
						'<div style="padding-left:5px;">',
							'<tpl for="is_a_brother">',
								'<tpl if="[xcount] == 1">',
									'<b style="padding-top:0px;text-decoration:underline;" class="fmastratum-anchor-is_a-brother">',
									'<a href="#" onclick="jumpFmastratum(this,',"'div.fmastratum-anchor'",');return false;" style="float:right;">Top</a>',
									'Brother</b>',
									'<div style="padding-left:5px;padding-bottom:5px;">',
										'<table style="margin:0px;padding:0px;">',

											'<tpl if="this.isEmpty(f_id) == false">',
												'<tr bgcolor="#dddddd"><td valign="top" style="font-weight:bold;">',
												'<tpl if="this.isEmpty(t_delcause) == true && this.isEmpty(c_path) == false">',
													'<a href="#" style="white-space:nowrap;" onclick="click_isa(', "'", '{f_id}', "'", ',', "'", '{c_path}', "'", ');return false;">{f_id}</a>',
												'</tpl>',
												'<tpl if="this.isEmpty(t_delcause) == false || this.isEmpty(c_path) == true">',
													'{f_id}',
												'</tpl>',
												'</td><td valign="top">:</td><td valign="top">{name}</td></tr>',
												'<tpl for="children">',
													'<tr><td valign="top" style="padding-left:5px;">',
													'<tpl if="this.isEmpty(t_delcause) == true && this.isEmpty(c_path) == false">',
														'<a href="#" style="white-space:nowrap;" onclick="click_isa(', "'", '{f_id}', "'", ',', "'", '{c_path}', "'", ');return false;">{f_id}</a>',
													'</tpl>',
													'<tpl if="this.isEmpty(t_delcause) == false || this.isEmpty(c_path) == true">',
														'{f_id}',
													'</tpl>',
													'</td><td valign="top">:</td><td valign="top">{name}</td></tr>',
												'</tpl>',
											'</tpl>',

											'<tpl if="this.isEmpty(f_id) == true">',
												'<tpl for="children">',
													'<tr><td valign="top">',
													'<tpl if="this.isEmpty(t_delcause) == true && this.isEmpty(c_path) == false">',
														'<a href="#" style="white-space:nowrap;" onclick="click_isa(', "'", '{f_id}', "'", ',', "'", '{c_path}', "'", ');return false;">{f_id}</a>',
													'</tpl>',
													'<tpl if="this.isEmpty(t_delcause) == false || this.isEmpty(c_path) == true">',
														'{f_id}',
													'</tpl>',
													'</td><td valign="top">:</td><td valign="top">{name}</td><td valign="top"></td></tr>',
												'</tpl>',
											'</tpl>',
										'</table>',
									'</div>',
								'</tpl>',
								'<tpl if="[xcount] &gt; 1">',
									'<b style="padding-top:0px;text-decoration:underline;"',
									'<tpl if="[xindex] == 1">',
										' class="fmastratum-anchor-is_a-brother"',
									'</tpl>',
									'><a href="#" onclick="jumpFmastratum(this,',"'div.fmastratum-anchor'",');return false;" style="float:right;">Top</a>',
									'Brother({[xindex]})</b>',
									'<div style="padding-left:5px;padding-bottom:5px;">',
										'<table style="margin:0px;padding:0px;">',
											'<tr bgcolor="#dddddd"><td valign="top" style="font-weight:bold;">',
											'<tpl if="this.isEmpty(t_delcause) == true && this.isEmpty(c_path) == false">',
												'<a href="#" style="white-space:nowrap;" onclick="click_isa(', "'", '{f_id}', "'", ',', "'", '{c_path}', "'", ');return false;">{f_id}</a>',
											'</tpl>',
											'<tpl if="this.isEmpty(t_delcause) == false || this.isEmpty(c_path) == true">',
												'{f_id}',
											'</tpl>',
											'</td><td valign="top">:</td><td valign="top" style="font-weight:bold;">{name}</td></tr>',
											'<tpl for="children">',
												'<tr><td valign="top" style="padding-left:5px;">',
												'<tpl if="this.isEmpty(t_delcause) == true && this.isEmpty(c_path) == false">',
													'<a href="#" style="white-space:nowrap;" onclick="click_isa(', "'", '{f_id}', "'", ',', "'", '{c_path}', "'", ');return false;">{f_id}</a>',
												'</tpl>',
												'<tpl if="this.isEmpty(t_delcause) == false || this.isEmpty(c_path) == true">',
													'{f_id}',
												'</tpl>',
												'</td><td valign="top">:</td><td valign="top">{name}</td></tr>',
											'</tpl>',
										'</table>',
									'</div>',
								'</tpl>',
							'</tpl>',
						'</div>',
					'</tpl>',

					'<tpl if="this.isEmpty(is_a_children) == false">',
						'<div style="padding-left:5px;">',
							'<b style="padding-top:0px;text-decoration:underline;" class="fmastratum-anchor-is_a-children">',
							'<a href="#" onclick="jumpFmastratum(this,',"'div.fmastratum-anchor'",');return false;" style="float:right;">Top</a>',
							'Children</b>',
							'<div style="padding-left:5px;padding-bottom:5px;">',
								'<table style="margin:0px;padding:0px;">',
								'<tpl for="is_a_children">',
									'<tr><td valign="top">',
									'<tpl if="this.isEmpty(t_delcause) == true && this.isEmpty(c_path) == false">',
										'<a href="#" style="white-space:nowrap;" onclick="click_isa(', "'", '{f_id}', "'", ',', "'", '{c_path}', "'", ');return false;">{f_id}</a>',
									'</tpl>',
									'<tpl if="this.isEmpty(t_delcause) == false || this.isEmpty(c_path) == true">',
										'{f_id}',
									'</tpl>',
									'</td><td valign="top">:</td><td valign="top">{name}</td></tr>',
								'</tpl>',
								'</table>',
							'</div>',
						'</div>',
					'</tpl>',
				'</tpl>',
			'</tpl>',
			{
				isEmpty : function(val){
					return Ext.isEmpty(val);
				},
				isNotEmptys : function(){
					for(var i=0;i<arguments.length;i++){
						if(!Ext.isEmpty(arguments[i])) return true;
					}
					return false;
				}
			}
		);
		fmastratumTemplate.compile();
/*
		commentDetailsTemplate = new Ext.XTemplate(
			'<div class="details">',
				'<tpl for=".">',
					'<div class="comment-details-info" style="padding-bottom:0px;">',
						'<div class="comment-details-info-title">',
						'<span class="status">{cs_name}</span><br style="clear:both;"/>',
							'<span style="float:right;">',
							'[<a class="comment-details-info-comment-reply"        c_id="{c_id}" href="#" style="text-decoration:none;" onclick="return false;">'+get_ag_lang('COMMENT_TITLE_REPLY')+'</a>]',
							'&nbsp;[<a class="comment-details-info-comment-edit"   c_id="{c_id}" href="#" style="text-decoration:none;" onclick="return false;">'+get_ag_lang('COMMENT_TITLE_EDIT')+'</a>]',
							'&nbsp;[<a class="comment-details-info-comment-delete" c_id="{c_id}" href="#" style="text-decoration:none;" onclick="return false;">'+get_ag_lang('COMMENT_TITLE_DELETE')+'</a>]',
							'</span>',
							'<tpl if="this.isEmpty(c_title) == false">',
								'<b>[{c_id}]:{c_title}</b>',
							'</tpl>',
						'</div>',
						'<tpl if="this.isEmpty(c_image) == false">',
							'<a class="comment-details-info-comment-thumb" href="{c_image}" target="_blank"><img src="{c_image_thumb}" align="right" border="0"></a>',
						'</tpl>',
						'<div class="comment-details-info-comment" c_id="{c_id}">{commentString}</div>',
						'<tpl if="this.isEmpty(nameString) == false">',
							'<div style="text-align:right;clear:both;"><b>Name:</b><span>{nameString}</span></div>',
						'</tpl>',
						'<div style="text-align:right;clear:both;"><span>{dateString}</span></div>',
						'<div class="comment-child" id="comment_child_{c_id}"></div>',
					'</div>',
				'</tpl>',
			'</div>',
			{
				isEmpty : function(val){
					return Ext.isEmpty(val);
				}
			}
		);
		commentDetailsTemplate.compile();

		commentDetailsChildTemplate = new Ext.XTemplate(
			'<tpl for=".">',
				'<div class="comment-details-info-child">',
					'<div class="comment-details-info-title">',
						'<span style="float:right;">',
						'[<a class="comment-details-info-comment-reply"        c_id="{c_id}" href="#" style="text-decoration:none;" onclick="return false;">'+get_ag_lang('COMMENT_TITLE_REPLY')+'</a>]',
						'&nbsp;[<a class="comment-details-info-comment-edit"   c_id="{c_id}" href="#" style="text-decoration:none;" onclick="return false;">'+get_ag_lang('COMMENT_TITLE_EDIT')+'</a>]',
						'&nbsp;[<a class="comment-details-info-comment-delete" c_id="{c_id}" href="#" style="text-decoration:none;" onclick="return false;">'+get_ag_lang('COMMENT_TITLE_DELETE')+'</a>]',
						'</span>',
						'<tpl if="this.isEmpty(c_title) == false">',
							'<b>[{c_id}]:{c_title}</b>',
						'</tpl>',
					'</div>',
					'<tpl if="this.isEmpty(c_image) == false">',
						'<a class="comment-details-info-comment-thumb" href="{c_image}" target="_blank"><img src="{c_image_thumb}" align="right" border="0"></a>',
					'</tpl>',
					'<div class="comment-details-info-comment" c_id="{c_id}">{commentString}</div>',
					'<tpl if="this.isEmpty(nameString) == false">',
						'<div style="text-align:right;clear:both;"><b>Name:</b><span>{nameString}</span></div>',
					'</tpl>',
					'<div style="text-align:right;clear:both;"><span>{dateString}</span></div>',
					'<div class="comment-child" id="comment_child_{c_id}"></div>',
				'</div>',
			'</tpl>',
			{
				isEmpty : function(val){
					return Ext.isEmpty(val);
				}
			}
		);
		commentDetailsChildTemplate.compile();
*/

		feedbackTemplate = new Ext.XTemplate(
			'<tpl for=".">',
				'<div id="feedback_{c_id}" class="feedback-head">',
					'<h2><div>',
						'<table style="margin:0px;padding:0px;border-spacing:0px;width:99%;" border="0"><tbody style="margin:0px;padding:0px;"><tr>',
							'<td style="margin:0px;padding:0px 4px;width:70px;vertical-align:top;">{ct_name}</td>',

//							'<td style="margin:0px;padding:0px 4px;width:70px;"><a href="#" border="0" onclick="clickFeedbackThumb(event,{c_id});this.blur();return false;">{f_id}</a></td>',
//							'<td style="margin:0px;padding:0px 4px;">{f_name}</td>',

							'<td style="margin:0px;padding:0px 4px;vertical-align:top;">',
							'<tpl for="c_fmas">',
								'<span style="float:left;white-space:pre;margin-left:1em;"><a href="#" border="0" onclick="clickFeedbackThumb(event,{parent.c_id},{[xindex-1]});this.blur();return false;">{fma_id}</a>&nbsp;{fma_name}</span>',
							'</tpl>',
							'<br style="clear: both;">',
							'</td>',


							'<td style="margin:0px;padding:0px 4px;width:18px;vertical-align:top;" align="right">{cs_name}</td>',
						'</tr></tbody></table>',
					'</div></h2>',
					'<dl>',
						'<dd>',
							'<table style="margin:0px;padding:0px;border-spacing:0px;width:99%;"><tbody style="margin:0px;padding:0px;"><tr>',
								'<td valign="top" style="margin:0px;padding:0px 4px;vertical-align:top;width:80px;">',
								'<tpl for="c_fmas">',
									'<tpl if="[xcount] == 1">',
										'<div class="thumbL">',
											'<a href="#" border="0" onclick="clickFeedbackThumb(event,{parent.c_id},{[xindex-1]});this.blur();return false;"><img src="{fma_image}"/></a>',
										'</div>',
									'</tpl>',
									'<tpl if="[xcount] &gt; 1 &amp;&amp; [xindex] &gt;= 1 &amp;&amp; [xindex] &lt;= 6">',
										'<div class="thumb">',
											'<a href="#" border="0" onclick="clickFeedbackThumb(event,{parent.c_id},{[xindex-1]});this.blur();return false;"><img src="{fma_image}"/></a>',
										'</div>',
									'</tpl>',
									'<tpl if="[xcount] &gt; 1 &amp;&amp; [xindex] &gt;= 7 &amp;&amp; [xindex] &lt;= 11">',
										'<div class="thumbS">',
											'<a href="#" border="0" onclick="clickFeedbackThumb(event,{parent.c_id},{[xindex-1]});this.blur();return false;"><img src="{fma_image}"/></a>',
										'</div>',
									'</tpl>',
									'<tpl if="[xcount] &gt; 1 &amp;&amp; [xindex] &gt; 11">',
										'<div class="thumbSS">',
											'<a href="#" border="0" onclick="clickFeedbackThumb(event,{parent.c_id},{[xindex-1]});this.blur();return false;"><img src="{fma_image}"/></a>',
										'</div>',
									'</tpl>',
								'</tpl>',
								'</td>',

								'<td valign="top" style="margin:0px;padding:0px 4px;">',
									'<div class="feedback-title">',
										'<table style="margin:0px;padding:0px;border-spacing:0px;width:99%;border:0px solid black;">',
											'<tbody style="margin:0px;padding:0px;"><tr>',
												'<td style="margin:0px;padding:0px 4px;width:50%;" align="left" nowrap>{c_title}</td>',
												'<td style="margin:0px;padding:0px 4px;width:50%;" align="right" nowrap>{nameString}&nbsp;&nbsp;{dateString}',
												'&nbsp;&nbsp;[<a href="#" style="text-decoration:none;" onclick="editFeedback({c_id});return false;">'+get_ag_lang('COMMENT_TITLE_EDIT')+'</a>]',
												'&nbsp;&nbsp;[<a href="#" style="text-decoration:none;" onclick="deleteFeedback({c_id});return false;">'+get_ag_lang('COMMENT_TITLE_DELETE')+'</a>]',
												'</td>',
											'</tr></tbody>',
										'</table>',
									'</div>',
									'<div class="feedback-comment" c_id="{c_id}">',
										'<tpl if="this.isEmpty(c_image) == false">',
											'<a href="{c_image}" target="_blank"><img align="right" border="0" src="{c_image_thumb}"/></a>',
										'</tpl>',
										'{commentString}',
									'</div>',
									'<div class="feedback-child" id="feedback_child_{c_id}"></div>',
								'</td>',
							'</tr></tbody></table>',
						'</dd>',
					'</dl>',
				'</div>',
			'</tpl>',
			{
				isEmpty : function(val){
					return Ext.isEmpty(val);
				}
			}
		);
		feedbackTemplate.compile();


		feedbackChildTemplate = new Ext.XTemplate(
			'<dl class="feedback-child-dl">',
				'<tpl for=".">',
					'<dd id="feedback_{c_id}">',
						'<div class="feedback-child-head">',
							'<h2><div>',
								'<table style="margin:0px;padding:0px;border-spacing:0px;width:99%;border:0px solid black;">',
									'<tbody style="margin:0px;padding:0px;"><tr>',
										'<td style="margin:0px;padding:0px 4px;width:50%;" align="left" nowrap>{c_title}</td>',
										'<td style="margin:0px;padding:0px 4px;width:50%;" align="right" nowrap>{nameString}&nbsp;&nbsp;{dateString}',
										'&nbsp;&nbsp;[<a href="#" style="text-decoration:none;" onclick="editFeedback({c_id});return false;">'+get_ag_lang('COMMENT_TITLE_EDIT')+'</a>]',
										'&nbsp;&nbsp;[<a href="#" style="text-decoration:none;" onclick="deleteFeedback({c_id});return false;">'+get_ag_lang('COMMENT_TITLE_DELETE')+'</a>]',
										'</td>',
									'</tr></tbody>',
								'</table>',
							'</div></h2>',
							'<div class="feedback-comment" c_id="{c_id}">',
								'<tpl if="this.isEmpty(c_image) == false">',
									'<a href="{c_image}" target="_blank"><img align="right" border="0" src="{c_image_thumb}"/></a>',
								'</tpl>',
								'{commentString}',
							'</div>',
							'<div class="feedback-child" id="feedback_child_{c_id}"></div>',
						'</div>',
					'</dd>',
				'</tpl>',
			'</dl>',
			{
				isEmpty : function(val){
					return Ext.isEmpty(val);
				}
			}
		);
		feedbackChildTemplate.compile();
	};

	replyComment=function(index){
		index = index-1;
		var records = bp3d_contents_detail_annotation_store.getRange(index,index);
		if(!records || records.length==0) return;
		openWindowComment(records[0].copy().data);
	};


	authFeedback=function(config){
		if(Ext.isEmpty(config.store)) config.store = contents_tab_feedback_store;
		if(Ext.isEmpty(config.storeAll)) config.storeAll = contents_tab_feedback_all_store;
		var data = null;
		var index = config.store.find('c_id',config.c_id);
		var records = null;
		if(index>=0){
			records = config.store.getRange(index,index);
		}else{
			index = config.storeAll.find('c_id',config.c_id);
			if(index>=0) records = config.storeAll.getRange(index,index);
		}
		if(!records || records.length==0) return;
		data = records[0].copy().data;
		data.parent = (Ext.isEmpty(gParams.parent)?'':gParams.parent);
		Ext.Msg.prompt('Password', 'Please enter your password:', function(btn, text){
			if (btn == 'ok'){
				data.c_passwd = text;
				Ext.Ajax.request({
					url     : 'auth-feedback.cgi',
					method  : 'POST',
					params  : Ext.urlEncode(data),
					success : function(conn,response,options){
						try{var results = Ext.util.JSON.decode(conn.responseText);}catch(e){}
						if(!results || results.success == false){
							if(config.failure) config.failure(results,data);
						}else{
							if(config.success) config.success(results,data);
						}
					},
					failure : function(conn,response,options){
						try{var results = Ext.util.JSON.decode(conn.responseText);}catch(e){}
						if(config.failure) config.failure(results,data);
					}
				});
			}
		});
	};

	editFeedback=function(c_id,config){
		if(Ext.isEmpty(c_id)) return;
		config = config || {};
		config.c_id = c_id;
		config.success = function(results,data){openWindowComment(data,'edit');};
		config.failure = function(results,data){alert('failure');};
		authFeedback(config);
	};

	deleteFeedback=function(c_id,config){
		if(Ext.isEmpty(c_id)) return;
		config = config || {};
		config.c_id = c_id;
		config.success = function(results,data){
			var msg = get_ag_lang('COMMENT_TITLE_DELETE_MSG');
			if(data.c_title) msg = get_ag_lang('FEEDBACK_TITLE_DELETE_MSG').sprintf(data.c_title);

			Ext.MessageBox.show({
				title   : get_ag_lang('COMMENT_TITLE_DELETE'),
				msg     : msg,
				buttons : Ext.MessageBox.YESNO,
				icon    : Ext.MessageBox.QUESTION,
				fn:function(btn){
					if(btn != 'yes') return;
					Ext.Ajax.request({
						url     : 'del-comment.cgi',
						method  : 'POST',
						params  : Ext.urlEncode(data),
						success : function(conn,response,options){
							try{var results = Ext.util.JSON.decode(conn.responseText);}catch(e){}
							if(!results || results.success == false){
								Ext.MessageBox.show({
									title   : get_ag_lang('COMMENT_TITLE_DELETE'),
									msg     : get_ag_lang('COMMENT_TITLE_DELETE_ERRMSG'),
									buttons : Ext.MessageBox.OK,
									icon    : Ext.MessageBox.ERROR
								});
							}
							contents_tab_feedback_store.reload();
							bp3d_contents_detail_annotation_store.reload();
						},
						failure : function(conn,response,options){
							Ext.MessageBox.show({
								title   : get_ag_lang('COMMENT_TITLE_DELETE'),
								msg     : get_ag_lang('COMMENT_TITLE_DELETE_ERRMSG'),
								buttons : Ext.MessageBox.OK,
								icon    : Ext.MessageBox.ERROR
							});
							contents_tab_feedback_store.reload();
							bp3d_contents_detail_annotation_store.reload();
						}
					});
				}
			});
		};
		config.failure = function(results,data){alert('failure');};
		authFeedback(config);
	};


	var showDetails = function(dataview,selections){
//		_dump("showDetails()");

		try{var contentsDetailEl = Ext.getCmp('bp3d-contents-detail-information-panel').body;}catch(e){}
		try{var detailEl = Ext.getCmp('bp3d-detail-information-panel').body;}catch(e){}
		try{var commentDetailEl = Ext.getCmp('comment-detail-panel').body;}catch(e){}
		try{var conceptDetailEl = Ext.getCmp('bp3d-contents-detail-concept-panel').body;}catch(e){}
		try{var tweetDetailEl = Ext.getCmp('bp3d-contents-detail-tweet-panel').body;}catch(e){}

		if(Ext.isEmpty(contentsDetailEl) || Ext.isEmpty(detailEl)) return;
		var data = null;
		if(selections && selections.length > 0){
			data = dataview.getRecord(selections[0]).data;
		}else{
			var selNode = null;
			var treeCmp = Ext.getCmp('navigate-tree-panel');
			if(treeCmp) selNode = treeCmp.getSelectionModel().getSelectedNode();
			if(selNode){
				if(selNode.id != 'search'){
					var records = dataview.store.getRange();
					if(records.length>0){
						dataview.select(0);
					}else{
						data = selNode.attributes.attr;
					}
				}else{
					var records = dataview.store.getRange();
					if(records.length>0){
						dataview.select(0);
					}
				}
			}
		}
//		console.log(data);
		if(data){
			if(Ext.isEmpty(contentsDetailsTemplate)) contentsDetailsTemplate = createDetailsTemplate('bp3d-contents-detail-information-panel-fmastratum');
			if(Ext.isEmpty(detailsTemplate)) detailsTemplate = createDetailsTemplate('bp3d-detail-information-panel-fmastratum');
			if(Ext.isEmpty(detailsConceptTemplate)) detailsConceptTemplate = createDetailsConceptTemplate('bp3d-detail-information-panel-fmastratum');
			if(Ext.isEmpty(detailsTweetTemplate)) detailsTweetTemplate = createDetailsTweetTemplate('bp3d-detail-information-panel-fmastratum');

			try{
				contentsDetailEl.hide();
				contentsDetailsTemplate.overwrite(contentsDetailEl, data);
				contentsDetailEl.show();

				if(detailEl){
					detailEl.hide();
					detailsTemplate.overwrite(detailEl, data);
					detailEl.show();
				}

				if(conceptDetailEl){
					conceptDetailEl.hide();
					detailsConceptTemplate.overwrite(conceptDetailEl, data);
					conceptDetailEl.show();
				}

				if(tweetDetailEl){
					tweetDetailEl.hide();
					detailsTweetTemplate.overwrite(tweetDetailEl, data);
					tweetDetailEl.show();
				}

				if(bp3d_contents_detail_annotation_store){
					bp3d_contents_detail_annotation_store.load({
						params:{
							start : 0,
							limit : (bp3d_contents_detail_annotation_pagingBar?bp3d_contents_detail_annotation_pagingBar.initialConfig.pageSize:20)
						}
					});
					bp3d_contents_detail_annotation_panel.enable();
					bp3d_contents_detail_annotation_pagingBar.enable();
				}
				if(image_detailed_store_timer) clearTimeout(image_detailed_store_timer);
				image_detailed_store_timer = setTimeout(function(){
					image_detailed_store.load();
				},500);

				var fma_thumbnail = 'front';
				try{ fma_thumbnail = Ext.getCmp('positionSelect').getValue(); }catch(e){}

				var thumbnail_tree = 'conventional';
				try{
					thumbnail_tree = Ext.getCmp('bp3d-tree-type-combo').getValue();
					if(thumbnail_tree==1){
						thumbnail_tree = 'conventional';
					}else if(thumbnail_tree==3){
						thumbnail_tree = 'is_a';
					}else if(thumbnail_tree==4){
						thumbnail_tree = 'part_of';
					}
				}catch(e){}

				var thumbnail_version = '3.0';
				try{ thumbnail_version = Ext.getCmp('bp3d-version-combo').getValue(); }catch(e){}

			}catch(e){
				_dump("showDetails():"+e);
				_dump(e);
				contentsDetailEl.update('');
				if(commentDetailEl) commentDetailEl.update('');
				if(bp3d_contents_detail_annotation_panel) bp3d_contents_detail_annotation_panel.disable();
				if(bp3d_contents_detail_annotation_pagingBar) bp3d_contents_detail_annotation_pagingBar.disable();
			}
		}else{
			contentsDetailEl.update('');
			if(commentDetailEl) commentDetailEl.update('');
			if(bp3d_contents_detail_annotation_panel) bp3d_contents_detail_annotation_panel.disable();
			if(bp3d_contents_detail_annotation_pagingBar) bp3d_contents_detail_annotation_pagingBar.disable();
		}
	};

	var showCommentDetails = function(node){
	};

	reset_func = function(){
		if(viewport && viewport.rendered){
			var filter = Ext.getCmp('filter');
			if(filter) filter.reset();
			prev_filter = undefined;

			var element = bp3d_contents_thumbnail_dataview.getEl();
			if(element) element.dom.scrollTop = 0;
			var element = bp3d_contents_list_dataview.getEl();
			if(element) element.dom.scrollTop = 0;
		}
		bp3d_contents_thumbnail_dataview.store.clearFilter();
		bp3d_contents_list_dataview.store.clearFilter();
	};


	var onLoadException = function(v,o){
		var element = v.getEl();
		if(element) element.update('<div style="padding:10px;">Error loading images.</div>');
	};

	var formatData = function(data){
		if(data.is_a == undefined) data.is_a = null;
		if(data.search_c_path == undefined) data.search_c_path = null;
		if(data.c_path == undefined) data.c_path = null;
		if(data.u_path == undefined) data.u_path = null;
		data.shortName = null;
		if(data.name) data.shortName = data.name.ellipse(get_ag_lang('SORTNAME_LENGTH'));
		data.entryString = null;
		if(data.entry) data.entryString = formatDate(data.entry);
		data.dateString = formatTimestamp(data.lastmod);

//		data.bgColor = "#F0E5D2";
		data.bgColor = "#F0D2A0";
		data.borderColor = "#dddddd";
//		if(data.phy_id){
//			if(data.phy_id == 1){
//				data.bgColor = "#ffcccc";
//			}else if(data.phy_id == 2){
//				data.bgColor = "#ccffff";
//			}
//		}
		if(data.seg_thum_bgcolor){
			data.bgColor = data.seg_thum_bgcolor;
		}
		if(data.seg_thum_bocolor){
			data.borderColor = data.seg_thum_bocolor;
		}

		if(data.taid) data.taid = data.taid.replace(/\|/g,"; ");

		if(data.name_j) data.name_j = data.name_j.replace(/；/g,"; ");
		if(data.name_k) data.name_k = data.name_k.replace(/；/g,"; ");
		if(data.syn_j) data.syn_j = data.syn_j.replace(/；/g,"; ");

		if(data.name_e) data.name_e = data.name_e.replace(/;(\S)/g,"; $1");
		if(data.name_l) data.name_l = data.name_l.replace(/;(\S)/g,"; $1");
		if(data.syn_e) data.syn_e = data.syn_e.replace(/;(\S)/g,"; $1");

		return data;
	};

	var formatTimestamp = function(val){
		return new Date(val).format("Y/m/d H:i:s");
	}

	var formatDate = function(val){
		return new Date(val).format("Y/m/d");
	}

	initTemplates();

	var image_detailed_store = new Ext.data.JsonStore({
		url: 'get-fmastratum.cgi',
		baseParams    : {
			parent : (Ext.isEmpty(gParams.parent)?'':gParams.parent),
			lng    : gParams.lng
		},
		pruneModifiedRecords : true,
		root: 'images',
		fields: [
			'is_a_path2root',
			'is_a_brother',
			'is_a_children',
			'partof_path2root',
			'partof_path2root_circular',
			'partof_brother',
			'partof_children'
		],
		listeners: {
			'beforeload' : {
				fn:function(self,options){
					self.baseParams = self.baseParams || {};
					var dataview = getViewImages();
					if(!dataview) return;
					var records = dataview.getSelectedRecords();
					if(records.length == 0) return false;
					self.baseParams.f_id = records[0].data.f_id;
					try{var position = Ext.getCmp('positionSelect').getValue();}catch(e){position=undefined;}
					if(!Ext.isEmpty(position)) self.baseParams.position = position;
					try{var bp3d_version = Ext.getCmp('bp3d-version-combo').getValue();}catch(e){bp3d_version='5.2';}
					self.baseParams.version = bp3d_version;
					try{var treeType = Ext.getCmp('bp3d-tree-type-combo').getValue();}catch(e){treeType=undefined;}
					if(!Ext.isEmpty(treeType)) self.baseParams.t_type = treeType;

					try{var detailEl = Ext.get('bp3d-contents-detail-information-panel-fmastratum');}catch(e){}
					if(!Ext.isEmpty(detailEl)) detailEl.update('');

					for(var key in init_bp3d_params){
						if(key.match(/_id$/)) self.baseParams[key] = init_bp3d_params[key];
					}

					try{
						var store = Ext.getCmp('bp3d-version-combo').getStore();
						var idx = store.findBy(function(record,id){
							if(record.data.tgi_version==self.baseParams.version) return true;
						});
						if(idx>=0){
							var record = store.getAt(idx);
							if(record){
								self.baseParams.md_id = record.data.md_id;
								self.baseParams.mv_id = record.data.mv_id;
								self.baseParams.mr_id = record.data.mr_id;
								self.baseParams.ci_id = record.data.ci_id;
								self.baseParams.cb_id = record.data.cb_id;
							}
						}
					}catch(e){}
				},
				scope:this
			},
			'load': {
				fn:function(self,records,options){

					try{var detailEl = Ext.get('bp3d-contents-detail-information-panel-fmastratum');}catch(e){}
					if(!Ext.isEmpty(detailEl)){
						try{
							var data = records[0].data;
							detailEl.hide();
							fmastratumTemplate.overwrite(detailEl, data);
							detailEl.show();
						}catch(e){
							detailEl.update('');
						}
					}

					try{var detailEl = Ext.get('bp3d-detail-information-panel-fmastratum');}catch(e){}
					if(!Ext.isEmpty(detailEl)){
						try{
							var data = records[0].data;
							detailEl.hide();
							fmastratumTemplate.overwrite(detailEl, data);
							detailEl.show();
						}catch(e){
							detailEl.update('');
						}
					}
				},
				scope:this,
				single:true
			},
			'datachanged':{
				fn:function(self){
					var records = self.getRange();

					try{var detailEl = Ext.get('bp3d-contents-detail-information-panel-fmastratum');}catch(e){}
					if(!Ext.isEmpty(detailEl)){
						try{
							var data = records[0].data;
							detailEl.hide();
							fmastratumTemplate.overwrite(detailEl, data);
							detailEl.show();
						}catch(e){
							detailEl.update('');
						}
					}

					try{var detailEl = Ext.get('bp3d-detail-information-panel-fmastratum');}catch(e){}
					if(!Ext.isEmpty(detailEl)){
						try{
							var data = records[0].data;
							detailEl.hide();
							fmastratumTemplate.overwrite(detailEl, data);
							detailEl.show();
						}catch(e){
							detailEl.update('');
						}
					}
				},scope:this},
			'loadexception': {
				fn:function(){
					try{var detailEl = Ext.get('bp3d-contents-detail-information-panel-fmastratum');}catch(e){}
					if(!Ext.isEmpty(detailEl)) detailEl.update('<label style="color:red;font-weight:bolder;">Error!!</label>');

					try{var detailEl = Ext.get('bp3d-detail-information-panel-fmastratum');}catch(e){}
					if(!Ext.isEmpty(detailEl)) detailEl.update('<label style="color:red;font-weight:bolder;">Error!!</label>');

				},scope:this
			}
		}
	});

	var bp3d_contents_toolbar = new Ext.Toolbar([

		{
			id    : 'disptypeSelect_label',
			xtype : 'tbtext',
//			text  : get_ag_lang('DISPTYPE_TITLE')+':'
			text  : 'View:'
		},{
			id: 'disptypeSelect_old',
			xtype: 'combo',
			typeAhead: true,
			triggerAction: 'all',
			width: get_ag_lang('DISPTYPE_WIDTH'),
			listWidth: get_ag_lang('DISPTYPE_LIST_WIDTH'),
			editable: false,
			mode: 'local',
			displayField: 'label',
			valueField: 'value',
			lazyInit: false,
			disabled : true,
			store: new Ext.data.SimpleStore({
				fields : ['value', 'label'],
				data   : [
					['thump', get_ag_lang('DISPTYPE_THUMB')],
					['list',  get_ag_lang('DISPTYPE_LIST')]
				]
			}),
			listeners: {
				'select': {
					fn:function(combo,record,index){
						var value = record.get('value');
						Cookies.set('ag_annotation.images.disptype',value);
//						selectPathCB();
						var cmp = Ext.getCmp('img-chooser-view');
						if(cmp && cmp.rendered){
							setTimeout(function(){
								cmp.layout.setActiveItem(index);
							},250);
						}
					},scope:this
				}
			}
		},

/*
		'-',
		{
			id    : 'filter_label',
			xtype : 'tbtext',
			text: get_ag_lang('FILTER_TITLE')+':'
		},{
			xtype: 'textfield',
			id: 'filter',
			selectOnFocus: true,
			width: 100,
			disabled : true,
			listeners: {
				'render': {
						fn:function(){
							try{Ext.getCmp('filter').getEl().on('keyup', function(){ filter_func(); }, this, {buffer:500});}catch(e){}
						},
						scope:this
				}
			}
		},
*/
		' ',
		'-',
		{
			id    : 'sortSelect_label',
			xtype : 'tbtext',
			text  : get_ag_lang('SORT_TITLE')+':'
		},{
			id: 'sortSelect_old',
			xtype: 'combo',
			typeAhead: true,
			triggerAction: 'all',
			width: get_ag_lang('SORT_WIDTH'),
			listWidth: get_ag_lang('SORT_LIST_WIDTH'),
			editable: false,
			mode: 'local',
			displayField: 'desc',
			valueField: 'name',
			lazyInit: false,
			value: '',
			disabled : true,
			store: new Ext.data.SimpleStore({
				fields: ['name', 'desc'],
				data : [
					['',        get_ag_lang('SORT_TITLE_NONE')],
					['id',      get_ag_lang('CDI_NAME')],
//					['name_j',  get_ag_lang('SORT_TITLE_NAME_J')],
//					['name_k',  get_ag_lang('SORT_TITLE_NAME_K')],
					['name_e',  get_ag_lang('SORT_TITLE_NAME_E')],
//					['name_l',  get_ag_lang('SORT_TITLE_NAME_L')],
					['zmin',    'Zmin'],
					['zmax',    'Zmax'],
					['volume',  get_ag_lang('SORT_TITLE_VOLUME')],
					['lastmod', get_ag_lang('SORT_TITLE_LAST')],
					['tweet_num', 'Tweet']
				]
			}),
			listeners: {
				'select': {
					fn:function(combo,record,index){
//_dump("2109:CALL selectPathCB()");
//						selectPathCB();
						try{
							getViewImages().getStore().reload();
						}catch(e){
							_dump(e);
						}
					},scope:this}
			}
		},

		' ',
		'-',
		{
			id    : 'positionSelect_label',
			xtype : 'tbtext',
			text  : get_ag_lang('IMAGE_POSITION')+':'
		},{
			id: 'positionSelect_old',
			xtype: 'combo',
			typeAhead: true,
			triggerAction: 'all',
			width: get_ag_lang('IMAGE_POSITION_WIDTH'),
			listWidth: get_ag_lang('IMAGE_POSITION_LIST_WIDTH'),
			editable: false,
			mode: 'local',
			displayField: 'label',
			valueField: 'value',
			lazyInit: false,
			disabled : true,
			store: new Ext.data.SimpleStore({
				fields : ['value', 'label'],
				data   : [
					['rotate', get_ag_lang('IMAGE_POSITION_ROTATE')],
					['front',  get_ag_lang('IMAGE_POSITION_FRONT')],
					['back',   get_ag_lang('IMAGE_POSITION_BACK')],
					['left',   get_ag_lang('IMAGE_POSITION_LEFT')],
					['right',  get_ag_lang('IMAGE_POSITION_RIGHT')]
				]
			}),
			listeners: {
				'select': {
					fn:function(combo,record,index){
						Cookies.set('ag_annotation.images.position',record.get('value'));
//_dump("2140:CALL selectPathCB()");
//						selectPathCB();
						try{
							getViewImages().getStore().reload();
						}catch(e){
							_dump(e);
						}
					},scope:this
				}
			}
		}
		,'->','-',{
			tooltip   : get_ag_lang('COPY_TITLE'),
			iconCls  : 'pallet_copy',
			handler : function(b,e){
				copyList(getViewImages());
			}
		}
	]);

	var bp3d_contents_thumbnail_dataview = new Ext.DataView({
		id           : 'bp3d-contents-dataview',
		tpl          : thumbTemplate,
		singleSelect : true,
		overClass    : 'x-view-over',
		autoShow     : false,
		itemSelector : 'div.thumb-wrap',
		style        : 'overflow:auto',
		multiSelect  : true,
		plugins      : new Ext.DataView.DragSelector({dragSafe:true}),
		loadingText  : '<div style="padding:10px;">'+get_ag_lang('MSG_LOADING_DATA')+'</div>',
		emptyText    : '<div style="padding:10px;">'+get_ag_lang('MSG_NOT_ICON')+'</div>',
		store        : bp3d_contents_store,
		listeners: {
			'selectionchange': {fn:showDetails, scope:this, buffer:300},
			'loadexception'  : {fn:onLoadException, scope:this},
			'beforeselect'   : {fn:function(view){return view.store.getRange().length > 0;}},
			'click'          : {fn:function(view,index,node,e){
				var record = view.getRecord(node);
				if(record) Cookies.set('ag_annotation.images.fmaid',record.data.f_id);
			},scope:this, buffer:0},

			'beforeclick'    : {fn:function(view,index,node,e){
				var target = e.getTarget('a',1,true);
				if(!target || !target.hasClass('thumb-link')) return;

				var href = "";
				if(target && target.dom && target.dom.href) href = target.dom.getAttribute("f_id");
				if(href) href = href.split("/").pop();
				if(href && href.match(/^(?:FMA|BP)/)){
					var form = Ext.getDom('ag-link-form');
					if(form){
						form.q.value = href;
						form.submit();
						form.q.value = "";
					}
					e.stopEvent();
					return false;
				}
			},scope:this, buffer:0},
			dblclick: {
				fn:function(view,index,node,e){clickThumbTwisty(e,index);},
				scope:this,
				buffer:0
			},
			render: function(comp){
				if(Ext.isIE) return;
				$(comp.el.dom.parentElement).bind("scroll",function(e){
					var baseTop = $(this).offset().top;
					var baseHeight = $(this).height();
					var scrTop = this.scrollTop;
					var scrHeight = this.scrollHeight;
					$(this).find("img[src='resources/images/default/s.gif']").each(function(){
						var top = $(this).offset().top;
						var height = $(this).height();
						if(((top-baseTop)>=0 && (top-baseTop)<=baseHeight) || ((top-baseTop+height)>=0 && (top-baseTop+height)<=baseHeight)){
							$(this).one("load",function(e){
								$(comp.el.dom.parentElement).trigger("scroll",[comp.el.dom.parentElement]);
							});
							$(this).attr('src',$(this).attr('lsrc'));
							return false;
						}
					});
				});
				bp3d_contents_store.on({
					load: {
						fn: function(store){
							$(comp.el.dom.parentElement).trigger("scroll",[comp.el.dom.parentElement]);
						},
						buffer: 100
					}
				});
			}
		},
		prepareData: formatData.createDelegate(this)
	});

	var bp3d_contents_list_dataview = new Ext.DataView({
		id           : 'bp3d-contents-list-dataview',
		tpl          : listTemplate,
		singleSelect : true,
		overClass    : 'x-view-over',
		autoShow     : false,
		itemSelector : 'div.thumb-list-wrap',
		style        : 'overflow:auto',
		multiSelect  : true,
		plugins      : new Ext.DataView.DragSelector({dragSafe:true}),
		loadingText  : '<div style="padding:10px;">'+get_ag_lang('MSG_LOADING_DATA')+'</div>',
		emptyText    : '<div style="padding:10px;">'+get_ag_lang('MSG_NOT_ICON')+'</div>',
		store        : bp3d_contents_store,
		listeners: {
			'selectionchange': {fn:showDetails, scope:this, buffer:300},
			'loadexception'  : {fn:onLoadException, scope:this},
			'beforeselect'   : {fn:function(view){return view.store.getRange().length > 0;}},
			'click'          : {fn:function(view,index,node,e){
				var record = view.getRecord(node);
				if(record) Cookies.set('ag_annotation.images.fmaid',record.data.f_id);
			},scope:this, buffer:0},

			'beforeclick'    : {fn:function(view,index,node,e){
				var target = e.getTarget('a',1,true);
				if(!target || !target.hasClass('thumb-link')) return;

				var href = "";
				if(target && target.dom && target.dom.href) href = target.dom.getAttribute("f_id");
				if(href) href = href.split("/").pop();
				if(href && href.match(/^(?:FMA|BP)/)){
					var form = Ext.getDom('ag-link-form');
					if(form){
						form.q.value = href;
						form.submit();
						form.q.value = "";
					}
					e.stopEvent();
					return false;
				}
			},scope:this, buffer:0},
			'dblclick'       : {fn:function(view,index,node,e){clickThumbTwisty(e,index);},scope:this, buffer:0},
			'show'           : {fn:function(view){
				var nodes = Ext.query('div.thumb-list-wrap table.thumb-information td.thumb-information-item-2',view.body);
//				_dump("bp3d_contents_list_dataview.show():["+nodes.length+"]");
				var maxWidth = -1;
				Ext.each(nodes,function(node,i,a){
					var width = Ext.get(node).getWidth(false);
					if(maxWidth < width) maxWidth = width;
				});
				if(maxWidth >= 0){
					Ext.each(nodes,function(node,i,a){
						Ext.get(node).setWidth(maxWidth);
					});
				}
			},scope:this},
			render: function(comp){
				if(Ext.isIE) return;
				$(comp.el.dom.parentElement).bind("scroll",function(e){
					var baseTop = $(this).offset().top;
					var baseHeight = $(this).height();
					var scrTop = this.scrollTop;
					var scrHeight = this.scrollHeight;
					$(this).find("img[src='resources/images/default/s.gif']").each(function(){
						var top = $(this).offset().top;
						var height = $(this).height();
						if(((top-baseTop)>=0 && (top-baseTop)<=baseHeight) || ((top-baseTop+height)>=0 && (top-baseTop+height)<=baseHeight)){
							$(this).one("load",function(e){
								$(comp.el.dom.parentElement).trigger("scroll",[comp.el.dom.parentElement]);
							});
							$(this).attr('src',$(this).attr('lsrc'));
							return false;
						}
					});
				});
				bp3d_contents_store.on({
					load: function(store){
						$(comp.el.dom.parentElement).trigger("scroll",[comp.el.dom.parentElement]);
					}
				});
			},
			resize: function(comp){
				if(Ext.isIE) return;
				$(comp.el.dom.parentElement).trigger("scroll",[comp.el.dom.parentElement]);
			}
		},
		prepareData: formatData.createDelegate(this)
	});


	var bp3d_contents_thumbnail_panel = new Ext.Panel({
//		title      : get_ag_lang('CONTENT_TITLE'),
		id: 'bp3d-content-panel',
		region     : 'center',
		layout     : 'border',
		border     : false,
		monitorResize: true,
		items:[{
			border     : false,
			region     : 'center',
			id         : 'img-chooser-view',
			layout     : 'card',
	    activeItem : 0,
			autoScroll : false,
			bodyBorder : false,
			monitorResize: true,
			items      : [{
				border     : false,
				autoScroll : true,
				items      : bp3d_contents_thumbnail_dataview
			},{
				border     : false,
				autoScroll : true,
				items      : bp3d_contents_list_dataview
			}],
			listeners: {
				bodyresize: {
					fn: function(comp){
						if(Ext.isIE) return;
						Ext.each([bp3d_contents_thumbnail_dataview,bp3d_contents_list_dataview],function(dataview){
							try{$(dataview.el.dom.parentElement).trigger("scroll",[dataview.el.dom.parentElement]);}catch(e){}
						});
					},
					buffer: 100
				}
			}
		},{
//			tbar       : bp3d_contents_toolbar,
			id: 'bp3d-content-panel-header',
			contentEl: 'bp3d-content-panel-header-contentEl',
			border: false,
			frame: false,
			bodyStyle:'border-bottom-width:1px;',
			region: 'north',
//			height: 57,
			height: 63,
			listeners: {
				render: {
					fn:function(comp){

						new Ext.Button({
							id: 'bp3d-content-panel-header-content-view-thump',
							renderTo      : 'bp3d-content-panel-header-content-view-thump-render',
							iconCls: 'view_tile',
							enableToggle: true,
							pressed: true,
							listeners: {
								toggle: function(button,pressed){
									_dump("toggle():["+button.id+"]["+pressed+"]");
									Ext.getCmp('bp3d-content-panel-header-content-view-list').toggle(!pressed,true);
									if(!pressed) return;
									var combobox = Ext.getCmp('disptypeSelect');
									var store = combobox.getStore();
									var idx = store.find('value','thump');
									var rec = store.getAt(idx);
									combobox.fireEvent('select',combobox,rec,idx);
								}
							}
						});
						new Ext.Button({
							id: 'bp3d-content-panel-header-content-view-list',
							renderTo      : 'bp3d-content-panel-header-content-view-list-render',
							iconCls: 'view_list',
							enableToggle: true,
							listeners: {
								toggle: function(button,pressed){
									_dump("toggle():["+button.id+"]["+pressed+"]");
									Ext.getCmp('bp3d-content-panel-header-content-view-thump').toggle(!pressed,true);
									var combobox = Ext.getCmp('disptypeSelect');
									var store = combobox.getStore();
									var idx = store.find('value','list');
									var rec = store.getAt(idx);
									combobox.fireEvent('select',combobox,rec,idx);
								}
							}
						});

						new Ext.form.ComboBox({
							id: 'disptypeSelect',
							renderTo      : 'bp3d-content-panel-header-content-view-combobox-render',
							typeAhead: true,
							triggerAction: 'all',
							width: get_ag_lang('DISPTYPE_WIDTH'),
							listWidth: get_ag_lang('DISPTYPE_LIST_WIDTH'),
							editable: false,
							mode: 'local',
							displayField: 'label',
							valueField: 'value',
							lazyInit: false,
							disabled : true,
							store: new Ext.data.SimpleStore({
								fields : ['value', 'label'],
								data   : [
									['thump', get_ag_lang('DISPTYPE_THUMB')],
									['list',  get_ag_lang('DISPTYPE_LIST')]
								]
							}),
							listeners: {
								'select': {
									fn:function(combo,record,index){
										var value = record.get('value');
										Cookies.set('ag_annotation.images.disptype',value);
										var cmp = Ext.getCmp('img-chooser-view');
										if(cmp && cmp.rendered){
											setTimeout(function(){
												cmp.layout.setActiveItem(index);
											},250);
										}
									},scope:this
								}
							}
						});

						new Ext.form.ComboBox({
							id: 'positionSelect',
							renderTo      : 'bp3d-content-panel-header-content-position-combobox-render',
							typeAhead: true,
							triggerAction: 'all',
							width: get_ag_lang('IMAGE_POSITION_WIDTH'),
							listWidth: get_ag_lang('IMAGE_POSITION_LIST_WIDTH'),
							editable: false,
							mode: 'local',
							displayField: 'label',
							valueField: 'value',
							lazyInit: false,
							disabled : true,
							store: new Ext.data.SimpleStore({
								fields : ['value', 'label'],
								data   : [
									['rotate', get_ag_lang('IMAGE_POSITION_ROTATE')],
									['front',  get_ag_lang('IMAGE_POSITION_FRONT')],
									['back',   get_ag_lang('IMAGE_POSITION_BACK')],
									['left',   get_ag_lang('IMAGE_POSITION_LEFT')],
									['right',  get_ag_lang('IMAGE_POSITION_RIGHT')]
								]
							}),
							listeners: {
								'select': {
									fn:function(combo,record,index){
										Cookies.set('ag_annotation.images.position',record.get('value'));
										try{
											getViewImages().getStore().reload();
										}catch(e){
											_dump(e);
										}
									},scope:this
								}
							}
						});

						new Ext.form.ComboBox({
							id: 'sortSelect',
							renderTo: 'bp3d-content-panel-header-content-sort-combobox-render',
							typeAhead: true,
							triggerAction: 'all',
							width: get_ag_lang('SORT_WIDTH'),
//							width: 110,
							width: 140,
//							listWidth: get_ag_lang('SORT_LIST_WIDTH'),
							listWidth: 140,
							editable: false,
							mode: 'local',
							displayField: 'desc',
							valueField: 'name',
							lazyInit: false,
//							value: '',
//							value: 'f_id',
							value: 'volume',
							disabled : true,
							store: new Ext.data.SimpleStore({
								fields: ['name', 'desc'],
								data : [
/*
									['',        get_ag_lang('SORT_TITLE_NONE')],
									['b_id',    get_ag_lang('REP_ID')],
									['f_id',    get_ag_lang('CDI_NAME')],
									['name_e',  get_ag_lang('DETAIL_TITLE_NAME_E')],
//									['name_j',  get_ag_lang('SORT_TITLE_NAME_J')],
//									['name_k',  get_ag_lang('SORT_TITLE_NAME_K')],
//									['name_l',  get_ag_lang('SORT_TITLE_NAME_L')],
									['zmin',    'Zmin'],
									['zmax',    'Zmax'],
									['volume',  get_ag_lang('SORT_TITLE_VOLUME')],
									['lastmod', get_ag_lang('SORT_TITLE_LAST')],
									['tweet_num', 'Tweet']
*/

									['f_id',    'Concept ID'],
									['name_e',  'Concept name'],
									['b_id',    'Representation ID'],
									['density', 'Representation density'],
									['volume',  'Volume'],
									['zmax',    'Z max'],
									['zmin',    'Z min'],
									['lastmod', 'Last modified'],
									['tweet_num', 'Tweet'],
									['taid',    'TAID']

								]
							}),
							listeners: {
								'select': {
									fn:function(combo,record,index){
										try{
											getViewImages().getStore().reload();
										}catch(e){
											_dump(e);
										}
									},scope:this}
							}
						});

						Ext.getCmp('contents-tab-panel').on({
							tabchange: {
								fn: function(tabpanel,tab){
									if(tab.id != 'contents-tab-bodyparts-panel') return;
									comp.setHeight(comp.initialConfig.height);
									comp.findParentByType('panel').doLayout();
								},
								buffer: 250
							}
						});

						$('input#bp3d-content-panel-header-content-degenerate-same-shape-icons').change(function(){
							try{
								getViewImages().getStore().reload();
							}catch(e){
								_dump(e);
							}
						});

					}
				}

			}
		}]
	});


	var bp3d_contents_detail_information_toolbar = null;
	var bp3d_contents_detail_information_panel = new Ext.Panel({
		title       : get_ag_lang('DETAIL_TITLE_TAB_INFORMATION'),
		id          : 'bp3d-contents-detail-information-panel',
		split       : true,
		autoScroll  : true,
		collapsible : true,
		width       : 200,
		minWidth    : 150,
		maxWidth    : 230,
		tbar        : bp3d_contents_detail_information_toolbar
	});

	var bp3d_contents_detail_annotation_store_fields = [
		{name: 'f_id',     type:'string'},
		{name: 'c_id',     type:'int'},
		{name: 'c_pid',    type:'int'},
		{name: 'c_openid', type:'string'},
		{name: 'c_name',   type:'string'},
		{name: 'c_email',  type:'string'},
		{name: 'c_title',  type:'string'},
		{name: 'c_comment',type:'string'},
		{name: 'c_entry',  type:'date', dateFormat:'timestamp'},
		{name: 'c_image',  type:'string'},
		{name: 'c_image_thumb', type:'string'},
		{name: 'ct_id',    type:'int'},
		{name: 'cs_id',    type:'int'},
		{name: 'tgi_version', type:'string'},
		{name: 't_name',    type:'string'}
	];

	updateCommentChildTimeoutID = null;
	updateCommentChildStack = [];
	updateCommentChild = function(){
		if(updateCommentChildStack.length == 0) return;
		var data = updateCommentChildStack.shift();
		var elem = Ext.get('bp3d-contents-detail-annotation-panel'+'_comment_child_'+data.c_id);
		if(Ext.isEmpty(elem)) elem = Ext.get('bp3d-detail-annotation-panel'+'_comment_child_'+data.c_id);
		if(elem){
			bp3d_contents_detail_annotation_child_store.load({params : {c_pid : data.c_id}});
		}else{
			if(updateCommentChildTimeoutID) clearTimeout(updateCommentChildTimeoutID);
			updateCommentChildTimeoutID = setTimeout(updateCommentChild,0);
		}
	};

	var bp3d_contents_detail_annotation_child_store = new Ext.data.JsonStore({
		url           : 'get-comment.cgi',
		root          : 'topics',
		totalProperty : 'totalCount',
		remoteSort    : true,
		baseParams    : {
			parent : (Ext.isEmpty(gParams.parent)?'':gParams.parent),
			lng    : gParams.lng
		},
		fields : bp3d_contents_detail_annotation_store_fields,
		listeners: {
			'beforeload' : function(store,options){
				store.baseParams = store.baseParams || {};
			},
			'load' : function(store,records,options){
				if(records.length>0){
					var c_pid = records[0].data.c_pid;
					var data = [];
					for(var i=0,len=records.length;i<len;i++){
						bp3d_contents_detail_annotation_dataview_formatData(records[i].data);
						data.push(records[i].data);
						updateCommentChildStack.push(records[i].data);
					}
					if(!Ext.isEmpty(c_pid)){
						var panel_id = 'bp3d-contents-detail-annotation-panel';
						if(Ext.isEmpty(commentContentsDetailsChildTemplate)) commentContentsDetailsChildTemplate = createCommentDetailsChildTemplate(panel_id)
						var elem = Ext.get(panel_id+'_comment_child_'+c_pid);
						if(elem) commentContentsDetailsChildTemplate.overwrite(elem,data);

						var panel_id = 'bp3d-detail-annotation-panel';
						if(Ext.isEmpty(commentDetailsChildTemplate)) commentDetailsChildTemplate = createCommentDetailsChildTemplate(panel_id)
						var elem = Ext.get(panel_id+'_comment_child_'+c_pid);
						if(elem) commentDetailsChildTemplate.overwrite(elem,data);
					}
				}
				if(updateCommentChildTimeoutID) clearTimeout(updateCommentChildTimeoutID);
				updateCommentChildTimeoutID = setTimeout(updateCommentChild,0);
				bp3d_contents_detail_annotation_all_store.add(records);
			},
			'loadexception': function(){
			},
			'datachanged': function(){
			},
			scope:this
		}
	});

	var bp3d_contents_detail_annotation_all_store = new Ext.data.SimpleStore({
		root          : 'topics',
		totalProperty : 'totalCount',
		fields        : bp3d_contents_detail_annotation_store_fields
	});

	var bp3d_contents_detail_annotation_store = new Ext.data.JsonStore({
		url           : 'get-comment.cgi',
		root          : 'topics',
		totalProperty : 'totalCount',
		remoteSort    : true,
		baseParams    : {
			parent : (Ext.isEmpty(gParams.parent)?'':gParams.parent),
			lng    : gParams.lng
		},

		fields : bp3d_contents_detail_annotation_store_fields,

		listeners: {
			'beforeload' : function(store,options){
				store.baseParams = store.baseParams || {};
				delete store.baseParams.f_id;
				delete store.baseParams.version;
				bp3d_contents_detail_annotation_all_store.removeAll();

				if(contents_tabs.layout.activeItem.id == 'contents-tab-bodyparts-panel'){
					if(contents_panel.layout.activeItem.id == 'viewpage-panel'){
						var dataview = getViewImages();
						if(!dataview) return;
						var selections = dataview.getSelectedRecords();
						var data = null;
						if(selections && selections.length > 0){
							data = selections[0].data;
						}else{
							var selNode = null;
							var treeCmp = Ext.getCmp('navigate-tree-panel');
							if(treeCmp) selNode = treeCmp.getSelectionModel().getSelectedNode();
							if(selNode) data = selNode.attributes.attr;
						}
						if(data) store.baseParams.f_id = data.f_id;
						try{var bp3d_version = Ext.getCmp('bp3d-version-combo').getValue();}catch(e){bp3d_version='5.2';}
						store.baseParams.version = bp3d_version;
					}else if(contents_panel.layout.activeItem.id == 'toppage-panel'){
						store.baseParams.f_id = "0";
					}
				}else if(contents_tabs.layout.activeItem.id == 'contents-tab-home-panel'){
					store.baseParams.f_id = "0";
				}

				for(var key in init_bp3d_params){
					if(key.match(/_id$/)) store.baseParams[key] = init_bp3d_params[key];
				}

				try{
					var store = Ext.getCmp('bp3d-version-combo').getStore();
					var idx = store.findBy(function(record,id){
						if(record.data.tgi_version==self.baseParams.version) return true;
					});
					if(idx>=0){
						var record = store.getAt(idx);
						if(record){
							self.baseParams.md_id = record.data.md_id;
							self.baseParams.mv_id = record.data.mv_id;
							self.baseParams.mr_id = record.data.mr_id;
							self.baseParams.ci_id = record.data.ci_id;
							self.baseParams.cb_id = record.data.cb_id;
						}
					}
				}catch(e){}
			},
			'load' : function(store,records,options){

				try{Ext.getCmp('bp3d-contents-detail-annotation-panel').setTitle('Review ('+records.length+')');}catch(e){}
				try{Ext.getCmp('bp3d-detail-annotation-panel').setTitle('Review ('+records.length+')');}catch(e){}

				if(records.length>0){
					var c_pid = records[0].data.c_pid;
					for(var i=0,len=records.length;i<len;i++){
						updateCommentChildStack.push(records[i].data);
					}
					if(Ext.isEmpty(c_pid)){
						if(updateCommentChildTimeoutID) clearTimeout(updateCommentChildTimeoutID);
						updateCommentChildTimeoutID = setTimeout(updateCommentChild,500);
					}
				}
				bp3d_contents_detail_annotation_all_store.add(records);
			},
			'loadexception': function(){
				if(bp3d_contents_detail_annotation_pagingBar) bp3d_contents_detail_annotation_pagingBar.disable();
				if(bp3d_contents_detail_annotation_panel) bp3d_contents_detail_annotation_panel.disable();

				if(bp3d_detail_annotation_pagingBar) bp3d_detail_annotation_pagingBar.disable();
				if(bp3d_detail_annotation_panel) bp3d_detail_annotation_panel.disable();
			},
			scope:this
		}
	});
	bp3d_contents_detail_annotation_store.setDefaultSort('entry', 'desc');

	var bp3d_contents_detail_annotation_dataview_formatData = function(data){

		data.dateString = formatTimestamp(data.c_entry);

		data.nameString = null;
		if(data.c_name){
			if(data.c_email){
				data.nameString = '<a class="comment-details-info-comment-mail" href="mailto:'+data.c_email+'">'+data.c_name+'</a>';
			}else{
				data.nameString = data.c_name;
			}
		}else if(data.c_openid){
			if(data.c_email){
				data.nameString = '<a class="comment-details-info-comment-mail" href="mailto:'+data.c_email+'">'+data.c_openid+'</a>';
			}else{
				data.nameString = data.c_openid;
			}
		}

		data.commentString = null;
		if(data.c_comment){
			data.commentString = data.c_comment.replace(/\n/g,"<br>");
		}

		data.cs_name = null;
		if(data.cs_id && comment_status[data.cs_id]){
			if(data.cs_id == 1){
				data.cs_name = '<span class="pending">'+comment_status[data.cs_id]+'</span>';
			}else if(data.cs_id == 2){
				data.cs_name = '<span class="ok">'+comment_status[data.cs_id]+'</span>';
			}else{
				data.cs_name = comment_status[data.cs_id];
			}
		}

		return data;
	};

	var bp3d_contents_detail_annotation_dataview_click = function(dataview,index,node,e){
		var target = e.getTarget('div.comment-details-info-comment',1,true);
		if(target){
			var c_id = target.dom.getAttribute('c_id');
			index = bp3d_contents_detail_annotation_all_store.find('c_id',c_id);
			if(index>=0) openWindowComment(bp3d_contents_detail_annotation_all_store.getAt(index).copy().data);
			return;
		}

		target = e.getTarget('a.comment-details-info-comment-reply',1,true);
		if(target){
			var c_id = target.dom.getAttribute('c_id');
			index = bp3d_contents_detail_annotation_all_store.find('c_id',c_id);
			if(index>=0) openWindowComment(bp3d_contents_detail_annotation_all_store.getAt(index).copy().data);
			return;
		}

		target = e.getTarget('a.comment-details-info-comment-edit',1,true);
		if(target){
			var c_id = target.dom.getAttribute('c_id');
			if(!Ext.isEmpty(c_id)) editFeedback(c_id,{store:bp3d_contents_detail_annotation_all_store});
			return;
		}

		target = e.getTarget('a.comment-details-info-comment-delete',1,true);
		if(target){
			var c_id = target.dom.getAttribute('c_id');
			if(!Ext.isEmpty(c_id)) deleteFeedback(c_id,{store:bp3d_contents_detail_annotation_all_store});
			return;
		}

		target = e.getTarget('a.comment-details-info-comment-thumb',2,true);
		if(target){
			var form = Ext.getDom('link-form');
			if(form){
				form.action = target.dom.href;
				form.submit();
				e.stopEvent();
			}
			return;
		}

		target = e.getTarget('a.comment-details-info-comment-mail',1,true);
		if(target){
			var form = Ext.getDom('link-form');
			if(form){
				form.action = target.dom.href;
				form.submit();
				e.stopEvent();
			}
			return;
		}

		target = e.getTarget('a',1,true);
		if(target){
			var form = Ext.getDom('comment-link-form');
			if(form){
				form.action = target.dom.href;

				while(form.lastChild){
					form.removeChild(form.lastChild);
				}
				var loc_path = target.dom.href;
				var loc_search = "";
				var loc_hash = "";
				var loc_search_index = loc_path.indexOf("?");
				if(loc_search_index>=0){
					loc_search = loc_path.substr(loc_search_index+1);
					loc_path = loc_path.substr(0,loc_search_index);
					form.action = loc_path;
				}
				var loc_hash_index = loc_search.indexOf("#");
				if(loc_hash_index>=0){
					loc_hash = loc_search.substr(loc_hash_index+1);
					loc_search = loc_search.substr(0,loc_hash_index);
				}

				if(loc_search){
					var loc_search = Ext.urlDecode(loc_search,true);
					for(var key in loc_search){
						var elem = form.ownerDocument.createElement("input");
						elem.setAttribute("type","hidden");
						elem.setAttribute("name",key);
						elem.setAttribute("value",loc_search[key]);
						form.appendChild(elem);
					}
				}
				if(loc_hash) form.setAttribute("action",loc_path + "#" + loc_hash);

				form.submit();
				e.stopEvent();
			}
			return;
		}
	};

	if(Ext.isEmpty(commentContentsDetailsTemplate)) commentContentsDetailsTemplate = createCommentDetailsTemplate('bp3d-contents-detail-annotation-panel');
	var bp3d_contents_detail_annotation_dataview = new Ext.DataView({
		tpl          : commentContentsDetailsTemplate,
		itemSelector : 'div.comment-details-info',
		overClass    : 'x-view-over',
		autoShow     : true,
		autoHeight   : true,
		singleSelect : true,
		multiSelect  : false,
		emptyText    : '<div style="padding:10px;">'+get_ag_lang('MSG_NOT_REVIEW')+'</div>',
		loadingText  : get_ag_lang('MSG_LOADING_DATA'),
		store        : bp3d_contents_detail_annotation_store,
		renderTo     : 'view-images-detail-annotation-dataview-render',
		listeners: {
			'render': {fn:function(view){}, scope:this},
			'show': {fn:function(view){}, scope:this},
			'selectionchange': {fn:function(view,selections){}, scope:this, buffer:0},
			'loadexception'  : {fn:onLoadException, scope:this},
			'beforeselect'   : {fn:function(view){return view.store.getRange().length > 0;}},
			'click'          : {fn:bp3d_contents_detail_annotation_dataview_click,scope:this}
		},
		prepareData: bp3d_contents_detail_annotation_dataview_formatData.createDelegate(this)
	});

	var bp3d_contents_detail_annotation_pagingBar = new Ext.PagingToolbar({
		pageSize    : 20,
		store       : bp3d_contents_detail_annotation_store,
		displayInfo : false,
		displayMsg  : '',
		emptyMsg    : '',
		hideMode    : 'offsets',
		hideParent  : true
	});
	if(bp3d_contents_detail_annotation_pagingBar){
		bp3d_contents_detail_annotation_pagingBar.firstText = get_ag_lang('PAGING_FIRST');
		bp3d_contents_detail_annotation_pagingBar.lastText = get_ag_lang('PAGING_LAST');
		bp3d_contents_detail_annotation_pagingBar.nextText = get_ag_lang('PAGING_NEXT');
		bp3d_contents_detail_annotation_pagingBar.prevText = get_ag_lang('PAGING_PREV');
		bp3d_contents_detail_annotation_pagingBar.refreshText = get_ag_lang('PAGING_REFRESH');
	}

	var bp3d_contents_detail_annotation_panel = new Ext.Panel({
		title      : 'Review',
		id         : 'bp3d-contents-detail-annotation-panel',
		bbar       : bp3d_contents_detail_annotation_pagingBar,
		autoScroll : true,
		items      : bp3d_contents_detail_annotation_dataview,
		listeners: {
			'render' : {
				fn : function(panel){
					bp3d_contents_detail_annotation_store.reload();
				},
				scope  : this,
				buffer : 0
			}
		}
	});

	var bp3d_contents_detail_wiki_panel = new Ext.Panel({
		title     : 'Information(Wiki)',
		id        : 'bp3d-contents-detail-wiki-panel',
		autoScroll: false,
		contentEl : 'bp3d-contents-detail-wiki-panel-render',
		listeners: {
			resize: function(panel,adjWidth,adjHeight,rawWidth,rawHeight){
				Ext.get('bp3d-contents-detail-wiki-panel-iframe').setSize(adjWidth,adjHeight);
			}
		}
	});

	var bp3d_contents_detail_tweet_panel = new Ext.Panel({
		title: get_ag_lang('DETAIL_TITLE_TAB_TWEET'),
		id   : 'bp3d-contents-detail-tweet-panel',
		autoScroll: true
	});

	var bp3d_contents_detail_concept_panel = new Ext.Panel({
		title     : get_ag_lang('DETAIL_TITLE_TAB_CONCEPT'),
		id        : 'bp3d-contents-detail-concept-panel',
		autoScroll: true
	});

	var bp3d_contents_detail_panel = new Ext.TabPanel({
		id          : 'bp3d-contents-detail-panel',
		title       : get_ag_lang('DETAIL_TITLE'),
		region      : 'east',
		split       : true,
		border      : true,
		width       : 230,
		minWidth    : 230,
		maxWidth    : 330,
		activeTab   : 0,
		deferredRender: false,
		enableTabScroll: true,
		items       : [
			bp3d_contents_detail_information_panel,
			bp3d_contents_detail_tweet_panel,
			bp3d_contents_detail_concept_panel
		],
		listeners : {
			'afterlayout' : function(panel,layout){
				afterLayout(panel);
			},
			scope : this
		}
	});


	var toppage_info_panel = new Ext.Panel({
		id : 'toppage-info-base-panel',
		hidden : true,
		title : get_ag_lang('TOP_TITLE'),
		frame : true,
		collapsible : true,
		region: 'north',
		minHeight : 100,
		height : 100,
		split:true,
		items: [{
			id : 'toppage-info-panel',
			autoLoad : {
				url     : 'info.html',
				nocache : true
			}
		}],
		border : true,
		listeners: {
			'afterlayout' : function(panel,layout){
				afterLayout(panel);
			},
			scope : this
		}
	});

	afterLayout = function(panel){
		try{
			if(!Ext.isIE) return;
			if(!panel.rendered) return;
			if(panel.collapsed) panel.expand(false);
//			if(panel.collapsed) return;

			var box = panel.getBox();
			if(box.x==0 && box.y==0) return;
			var width  = Ext.isEmpty(panel.initialConfig.minWidth) ?box.width :panel.initialConfig.minWidth;
			var height = Ext.isEmpty(panel.initialConfig.minHeight)?box.height:panel.initialConfig.minHeight;
			if((box.width<width && height > 0) || (width > 0 && box.height<height)){
				panel.setSize(width,height);
				panel.ownerCt.doLayout();
			}
		}catch(e){
//			for(var key in e){
//				_dump("afterLayout():e["+key+"]="+e[key]);
//			}
			try{_dump("afterLayout():panel.layout=["+panel.layout+"]");}catch(e){}
		}
	};

	var toppage_annotation_toolbar = new Ext.Toolbar([
		'->','-',
		{
			id        : 'btn-add-comment',
			text      : get_ag_lang('COMMENT_TITLE_PLUS'),
			iconCls   : 'comment_add-icon',
			tooltip   : get_ag_lang('COMMENT_TITLE_PLUS'),
			listeners : {
				'click': {fn:function(self,e){openWindowComment();},scope:this}
			}
		}
	]);

	var toppage_annotation_pagingBar = new Ext.PagingToolbar({
		pageSize    : 20,
		store       : bp3d_contents_detail_annotation_store,
		displayInfo : false,
		displayMsg  : '',
		emptyMsg    : '',
		hideMode    : 'offsets',
		hideParent  : true
	});
	if(toppage_annotation_pagingBar){
		toppage_annotation_pagingBar.firstText = get_ag_lang('PAGING_FIRST');
		toppage_annotation_pagingBar.lastText = get_ag_lang('PAGING_LAST');
		toppage_annotation_pagingBar.nextText = get_ag_lang('PAGING_NEXT');
		toppage_annotation_pagingBar.prevText = get_ag_lang('PAGING_PREV');
		toppage_annotation_pagingBar.refreshText = get_ag_lang('PAGING_REFRESH');
	}

	var toppage_annotation_panel = new Ext.Panel({
		region: 'east',
		split: true,
		title      : 'Review',
		id         : 'toppage-annotation-panel',
		tbar       : toppage_annotation_toolbar,
		bbar       : toppage_annotation_pagingBar,
		autoScroll : true,
		width       : 220,
		minWidth    : 220,
		maxWidth    : 330,
		html       : '',
		listeners: {
			'render' : {
				fn : function(panel){
					bp3d_contents_detail_annotation_store.reload();
				},
				scope  : this,
				buffer : 0
			}
		}
	});
/*
	var toppage_panel = new Ext.Panel({
		id     : 'toppage-panel',
		region : 'center',
		hidden : true,
		layout : 'border',
		border : false,
		items : [{
			region : 'center',
			border : false,
			layout : 'border',
			items: [toppage_info_panel,whatnew_panel]
		}],
		listeners : {
			'show' : function(panel){
				panel.doLayout();
			},
			scope:this
		}
	});
*/
	var bp3d_contents_panel = new Ext.Panel({
//		title      : get_ag_lang('CONTENT_TITLE'),
//		collapsible : true,
		id         : 'bp3d-contents-panel',
		closable   : false,
		autoScroll : false,
		bodyBorder : false,
		border     : false,
		layout     : 'border',
		items : [bp3d_contents_thumbnail_panel,bp3d_contents_detail_panel],
		listeners : {
			'show' : function(panel){
				panel.doLayout();
			},
			scope:this
		}
	});

	var bp3d_detail_information_toolbar = null;

	var bp3d_detail_information_panel = new Ext.Panel({
		title       : 'Information',
		id          : 'bp3d-detail-information-panel',
		split       : true,
		autoScroll  : true,
		collapsible : true,
		width       : 200,
		minWidth    : 150,
		maxWidth    : 230,
		tbar        : bp3d_detail_information_toolbar
	});

	if(Ext.isEmpty(commentDetailsTemplate)) commentDetailsTemplate = createCommentDetailsTemplate('bp3d-detail-annotation-panel');
	var bp3d_detail_annotation_dataview = new Ext.DataView({
		tpl          : commentDetailsTemplate,
		itemSelector : 'div.comment-details-info',
		overClass    : 'x-view-over',
		autoShow     : true,
		autoHeight   : true,
		singleSelect : true,
		multiSelect  : false,
		emptyText    : '<div style="padding:10px;">'+get_ag_lang('MSG_NOT_REVIEW')+'</div>',
		loadingText  : get_ag_lang('MSG_LOADING_DATA'),
		store        : bp3d_contents_detail_annotation_store,
		renderTo     : 'bp3d-detail-annotation-dataview-render',
		listeners: {
			'render': {fn:function(view){}, scope:this},
			'show': {fn:function(view){}, scope:this},
			'selectionchange': {fn:function(view,selections){}, scope:this, buffer:0},
			'loadexception'  : {fn:onLoadException, scope:this},
			'beforeselect'   : {fn:function(view){return view.store.getRange().length > 0;}},
			'click'          : {fn:bp3d_contents_detail_annotation_dataview_click,scope:this}
		},
		prepareData: bp3d_contents_detail_annotation_dataview_formatData.createDelegate(this)
	});

	var bp3d_detail_annotation_pagingBar = new Ext.PagingToolbar({
		pageSize    : 20,
		store       : bp3d_contents_detail_annotation_store,
		displayInfo : false,
		displayMsg  : '',
		emptyMsg    : '',
		hideMode    : 'offsets',
		hideParent  : true
	});
	if(bp3d_detail_annotation_pagingBar){
		bp3d_detail_annotation_pagingBar.firstText = get_ag_lang('PAGING_FIRST');
		bp3d_detail_annotation_pagingBar.lastText = get_ag_lang('PAGING_LAST');
		bp3d_detail_annotation_pagingBar.nextText = get_ag_lang('PAGING_NEXT');
		bp3d_detail_annotation_pagingBar.prevText = get_ag_lang('PAGING_PREV');
		bp3d_detail_annotation_pagingBar.refreshText = get_ag_lang('PAGING_REFRESH');
	}

	var bp3d_detail_annotation_panel = new Ext.Panel({
		title      : 'Review',
		id         : 'bp3d-detail-annotation-panel',
		bbar       : bp3d_detail_annotation_pagingBar,
		autoScroll : true,
		items      : bp3d_detail_annotation_dataview,
		listeners: {
			'render' : {
				fn : function(panel){
//					bp3d_contents_detail_annotation_store.reload();
				},
				scope  : this,
				buffer : 0
			}
		}
	});

	var bp3d_detail_panel = new Ext.TabPanel({
		id         : 'bp3d-detail-panel',
		closable   : false,
		autoScroll : false,
		bodyBorder : false,
		border     : false,
		header     : true,
		activeTab   : 0,
		layoutOnTabChange : true,
		items       : bp3d_detail_information_panel,
		listeners : {
			'afterlayout' : function(panel,layout){
				afterLayout(panel);
			},
			'show' : function(panel){
				panel.doLayout();
			},
			scope:this
		}
	});

	var view_panel = new Ext.Panel({
		id         : 'viewpage-panel',
		closable   : false,
		autoScroll : false,
		bodyBorder : false,
		border     : false,
		layout     : 'card',
		activeItem : 0,
		items      : [bp3d_contents_panel,bp3d_detail_panel],
		listeners  : {
			'show' : function(panel){
				panel.doLayout();
			},
			scope:this
		}
	});

	var contents_panel = new Ext.Panel({
		id         : 'content-card-panel',
		region     : 'center',
		layout     : 'card',
		split      : true,
		autoScroll : false,
		border     : true,
		deferredRender : true,
//		activeItem : 1,
//		items      : [toppage_panel,view_panel]
		activeItem : 0,
		items      : [view_panel]
	});

	Ext.menu.RangeMenu.prototype.icons = {
		gt: 'css/greater_then.png',
		lt: 'css/less_then.png',
		eq: 'css/equals.png'
	};
	Ext.menu.RangeMenu.prototype.iconStyles = {
		gt: 'position:relative;margin: 0px 3px 2px 0px;', 
		lt: 'position:relative;margin: 0px 3px 2px 0px;',
		eq: 'position:relative;margin: 0px 3px 2px 0px;'
	};
	Ext.menu.RangeMenu.prototype.fieldCfg = {
		gt: {style:{paddingLeft:'17px',marginLeft:'-19px'}},
		lt: {style:{paddingLeft:'17px',marginLeft:'-19px'}},
		eq: {style:{paddingLeft:'17px'}}
	};
	Ext.grid.filter.StringFilter.prototype.icon = 'css/find.png';
	Ext.grid.filter.StringFilter.prototype.textfieldCfg = {style:{paddingLeft:'16px'}};

	Ext.grid.filter.BooleanFilter.prototype.yesText = get_ag_lang('SEARCH_GRID_FILTER_YES');
	Ext.grid.filter.BooleanFilter.prototype.noText = get_ag_lang('SEARCH_GRID_FILTER_NO');

	var navigate_grid_fields = [
		{name:'f_id'},
		{name:'b_id'},
		{name:'common_id'},
		{name:'name_j'},
		{name:'name_e'},
		{name:'name_k'},
		{name:'name_l'},
		{name:'syn_j'},
		{name:'syn_e'},
		{name:'organsys_j'},
		{name:'organsys_e'},
		{name:'organsys'},
		{name:'phase'},
		{name:'taid'},
		{name:'icon'},
		{name:'seg_color'},
		{name:'xmin',    type:'float'},
		{name:'xmax',    type:'float'},
//		{name:'xcenter', type:'float', convert:function(v,rec){if(Ext.isEmpty(rec.xmax)||Ext.isEmpty(rec.xmin)){return null;}else{return (Number(rec.xmax)+Number(rec.xmin))/2;}}},
		{name:'ymin',    type:'float'},
		{name:'ymax',    type:'float'},
//		{name:'ycenter', type:'float', convert:function(v,rec){if(Ext.isEmpty(rec.ymax)||Ext.isEmpty(rec.ymin)){return null;}else{return (Number(rec.ymax)+Number(rec.ymin))/2;}}},
		{name:'zmin',    type:'float'},
		{name:'zmax',    type:'float'},
//		{name:'zcenter', type:'float', convert:function(v,rec){if(Ext.isEmpty(rec.zmax)||Ext.isEmpty(rec.zmin)){return null;}else{return (Number(rec.zmax)+Number(rec.zmin))/2;}}},
		{name:'volume',  type:'float'},
		{name:'cube_volume',  type:'float'},
		{name:'density',  type:'float', convert:function(v,rec){if(Ext.isEmpty(v)){return null;}else{return Math.round(Number(v)*10000)/100;}}},
		{name:'primitive',  type:'boolean'},
		{name:'state'},
		{name:'entry',   type:'date', dateFormat: 'timestamp'},
		{name:'lastmod', type:'date', dateFormat: 'timestamp'},
		{name:'delcause'},
		{name:'m_openid'}
	];

	var navigate_grid_col_rep_id = {
		dataIndex:'b_id',
		header:get_ag_lang('REP_ID'),
		id:'b_id',
		width: 70,
		resizable: true,
		hidden:false
	};
	var navigate_grid_col_entry = {
		dataIndex:'entry',
		header:get_ag_lang('GRID_TITLE_MODIFIED'),
		id:'entry',
		renderer:Ext.util.Format.dateRenderer('Y/m/d'),
		hidden:true
	};
	var navigate_grid_col_organsys = {
		dataIndex:'organsys',
		header:get_ag_lang('GRID_TITLE_ORGANSYS'),
		id:'organsys',
		hidden:true
	};

	navigate_grid_primitive_renderer = function(value,metadata,record,rowIndex,colIndex,store){
		if(Ext.isEmpty(value)) value = false;
		if(value){
			value = get_ag_lang('ELEMENT_PRIMARY');
		}else{
			value = get_ag_lang('COMPOUND_SECONDARY');
		}
		return value;
	}
	var navigate_grid_col_primitive = {
		dataIndex:'primitive',
		header:get_ag_lang('REP_PRIMITIVE'),
		id:'primitive',
		renderer:navigate_grid_primitive_renderer,
		hidden:true
	};

	var navigate_grid_col_density = {
		dataIndex:'density',
		header:get_ag_lang('REP_DENSITY'),
		id:'density',
		hidden:true
	};

	var navigate_grid_icon_renderer = function(value,metadata,record,rowIndex,colIndex,store){
		if(record.data.seg_color) metadata.attr = 'style="background:'+record.data.seg_color+';"'
		value = '';
		if(!Ext.isEmpty(record.data.icon)) value = '<img width=16 height=16 src='+record.data.icon+'>';
		return value;
	};


	var navigate_grid_col_icon = {
		dataIndex:'seg_color',
		header:'',
		id:'seg_color',
		sortable: true,
		hidden:false,
		renderer:navigate_grid_icon_renderer,
		width:28,
		maxWidth:28,
		resizable:false,
		fixed:true,
		menuDisabled:true,
		hideable: false,
		resizable: false
	};

	var navigate_grid_cols = [
		navigate_grid_col_icon,
		navigate_grid_col_rep_id,
		{dataIndex:'f_id',   header:get_ag_lang('CDI_NAME'),                 id:'f_id', resizable:true, width: 72},
		{dataIndex:'common_id',header:'UniversalID',                     id:'common_id', hidden:true, fixed:true},
//		{dataIndex:'name_j',   header:get_ag_lang('DETAIL_TITLE_NAME_J'),      id:'name_j', hidden:false},
		{dataIndex:'name_j',   header:get_ag_lang('DETAIL_TITLE_NAME_J'),    id:'name_j', hidden:true},
		{dataIndex:'name_k',   header:get_ag_lang('DETAIL_TITLE_NAME_K'),    id:'name_k', hidden:true},
		{dataIndex:'name_e',   header:get_ag_lang('DETAIL_TITLE_NAME_E'),    id:'name_e'},
		{dataIndex:'name_l',   header:get_ag_lang('DETAIL_TITLE_NAME_L'),    id:'name_l', hidden:true},
//		navigate_grid_col_organsys,
		{dataIndex:'xmin',     header:'Xmin(mm)',                        id:'xmin',    hidden:true},
		{dataIndex:'xmax',     header:'Xmax(mm)',                        id:'xmax',    hidden:true},
//		{dataIndex:'xcenter',  header:'Xcenter(mm)',                     id:'xcenter', hidden:true},
		{dataIndex:'ymin',     header:'Ymin(mm)',                        id:'ymin',    hidden:true},
		{dataIndex:'ymax',     header:'Ymax(mm)',                        id:'ymax',    hidden:true},
//		{dataIndex:'ycenter',  header:'Ycenter(mm)',                     id:'ycenter', hidden:true},
		{dataIndex:'zmin',     header:'Zmin(mm)',                        id:'zmin',    hidden:true},
		{dataIndex:'zmax',     header:'Zmax(mm)',                        id:'zmax',    hidden:true},
//		{dataIndex:'zcenter',  header:'Zcenter(mm)',                     id:'zcenter', hidden:true},
		{dataIndex:'volume',   header:get_ag_lang('GRID_TITLE_VOLUME')+'(cm3)', id:'volume',  hidden:true},
		navigate_grid_col_entry,
		navigate_grid_col_density,
		navigate_grid_col_primitive,
		{dataIndex:'state',    header:'State',                           id:'state', hidden:true},
		{dataIndex:'taid',     header:'TAID',                            id:'taid',  hidden:true}
	];

	var navigate_grid = {
		ds : new Ext.data.JsonStore({
			url:'get-contents-list.cgi',
			totalProperty: 'total',
			root: 'records',
			fields: navigate_grid_fields,
			sortInfo: {field: 'name_e', direction: 'ASC'},
			remoteSort: true,
			baseParams : {
				parent : (Ext.isEmpty(gParams.parent)?'':gParams.parent),
				lng    : gParams.lng
			},
			listeners: {
				'beforeload' : function(self,options){
//						_dump("beforeload()");
					self.baseParams = self.baseParams || {};
					try{var bp3d_version = Ext.getCmp('bp3d-version-combo').getValue();}catch(e){bp3d_version='5.2';}
					if(self.baseParams.version != bp3d_version){
						self.baseParams.version = bp3d_version;
						options.params.start = 0;
					}
					delete self.baseParams.t_type;
					try{var treeType = Ext.getCmp('bp3d-tree-type-combo').getValue();}catch(e){treeType=undefined;}
					if(!Ext.isEmpty(treeType)) self.baseParams.t_type = treeType;

					for(var key in init_bp3d_params){
						if(key.match(/_id$/)) self.baseParams[key] = init_bp3d_params[key];
					}

					try{
						var store = Ext.getCmp('bp3d-version-combo').getStore();
						var idx = store.findBy(function(record,id){
							if(record.data.tgi_version==self.baseParams.version) return true;
						});
						if(idx>=0){
							var record = store.getAt(idx);
							if(record){
								self.baseParams.md_id = record.data.md_id;
								self.baseParams.mv_id = record.data.mv_id;
								self.baseParams.mr_id = record.data.mr_id;
								self.baseParams.ci_id = record.data.ci_id;
								self.baseParams.cb_id = record.data.cb_id;
							}
						}
					}catch(e){}
				},
				'load' : function(self,records,options){
					try{
						if(!navigate_grid_panel.rendered) return;
						var tb = navigate_grid_panel.getTopToolbar();
						var count = tb.items.getCount();
						if(count==0) return;
						var item = tb.items.get(count-3);
						item.el.innerHTML='<label>'+self.getTotalCount()+'&nbsp;Objects</label>';
						if(navigate_grid_panel.disabled) navigate_grid_panel.enable();

						if(navigate_tabs.getActiveTab().id=='navigate-grid-panel'){
							var store = self;
							if(store && store.reader && store.reader.jsonData && !Ext.isEmpty(store.reader.jsonData.rep_num)){
								var t_type;
								for(t_type in store.reader.jsonData.rep_num){
									$('label#navigate-north-panel-content-label-'+t_type).html('(<span>'+store.reader.jsonData.rep_num[t_type]+'</span>)');
								}
							}
						}

					}catch(e){
						_dump("load():"+e);
					}
				},
				scope:this
			}
		}),
		filters : new Ext.grid.GridFilters({
			filters:[
				{type:'string',  dataIndex:'common_id'},
				{type:'string',  dataIndex:'b_id'},
				{type:'string',  dataIndex:'name_j'},
				{type:'string',  dataIndex:'name_e'},
				{type:'string',  dataIndex:'name_k'},
				{type:'string',  dataIndex:'name_l'},
				{type:'numeric', dataIndex:'phase'},
				{type:'date',    dataIndex:'entry'},
				{type:'numeric', dataIndex:'xmin'},
				{type:'numeric', dataIndex:'xmax'},
				{type:'numeric', dataIndex:'ymin'},
				{type:'numeric', dataIndex:'ymax'},
				{type:'numeric', dataIndex:'zmin'},
				{type:'numeric', dataIndex:'zmax'},
				{type:'numeric', dataIndex:'volume'},
				{type:'numeric', dataIndex:'density'},
				{type:'boolean', dataIndex:'primitive'},
				{type:'string',  dataIndex:'organsys'},
				{type:'string',  dataIndex:'state'},
				{type:'string',  dataIndex:'taid'}
		]}),
		cm : new Ext.grid.ColumnModel(navigate_grid_cols)
	};
	navigate_grid.cm.defaultSortable = true;
	navigate_grid.cm.defaultWidth = 40;
	navigate_grid.cm.on({
		'hiddenchange' : function(column,columnIndex,hidden){
			resizeNavigateGridPanel();
		},
		scope: this,
		delay: 100
	});

	var navigate_grid_pagingBar = new Ext.PagingToolbar({
		id          : 'navigate-grid-paging-toolbar',
		pageSize    : 30,
		store       : navigate_grid.ds,
		displayInfo : false,
		displayMsg  : '',
		emptyMsg    : '',
		hideMode    : 'offsets',
		hideParent  : true
	});

	navigate_grid.ds.load({
		params:{
			start : 0,
			limit : (navigate_grid_pagingBar?navigate_grid_pagingBar.initialConfig.pageSize:30)
		}
	});

	var navigate_grid_panel = new Ext.grid.GridPanel({
		title   : 'List',
		id      : 'navigate-grid-panel',
		ds: navigate_grid.ds,
		cm: navigate_grid.cm,
		bbar : navigate_grid_pagingBar,
		enableColLock: false,
		loadMask: true,
		plugins: navigate_grid.filters,
		autoScroll:true,
		tbar : new Ext.Toolbar([
			'->',
			{xtype: 'tbtext', text: '&nbsp;'}
			,'-',
			{
				tooltip   : get_ag_lang('COPY_TITLE'),
				iconCls  : 'pallet_copy',
				listeners : {
					'click': {
						fn:function(button,e){
							copyList(navigate_grid_panel);
						},
						scope:this
					}
				}
			}
		]),
		listeners : {
			"rowclick" : function(grid, rowIndex, event){
				selectPathCB();
			},
			"resize" : function(grid){
				resizeGridPanelColumns(grid);
			},
			"render" : function(grid){
				try{
					var tb = grid.getTopToolbar();
					var count = tb.items.getCount();
					if(count==0) return;
					var item = tb.items.get(1);
					item.el.innerHTML='<label>'+grid.getStore().getTotalCount()+'&nbsp;Objects</label>';
				}catch(e){
					_dump("render():"+e);
				}
				restoreHiddenGridPanelColumns(grid);
			},
			show: {
				fn: function(grid){
					_dump("show():["+grid.id+"]");
					var store = grid.getStore();
					if(store && store.reader && store.reader.jsonData && !Ext.isEmpty(store.reader.jsonData.rep_num)){
						var t_type;
						for(t_type in store.reader.jsonData.rep_num){
							$('label#navigate-north-panel-content-label-'+t_type).html('(<span>'+store.reader.jsonData.rep_num[t_type]+'</span>)');
						}
					}
				},
				buffer:250
			},
			scope : this
		}
	});
	navigate_grid_panel.getColumnModel().on({
		'hiddenchange' : function(column,columnIndex,hidden){
			resizeGridPanelColumns(navigate_grid_panel);
			saveHiddenGridPanelColumns(navigate_grid_panel);
		},
		scope: this,
		delay: 100
	});

	createSearchGridPanel = function(aQuery,aOptions){

		navigate_grid_primitive_renderer = function(value,metadata,record,rowIndex,colIndex,store){
			if(Ext.isEmpty(value)) value = false;
			if(value){
				value = get_ag_lang('ELEMENT_PRIMARY');
			}else{
				value = get_ag_lang('COMPOUND_SECONDARY');
			}
			return value;
		}
		var navigate_search_grid_col_primitive = {
			dataIndex:'primitive',
			header:get_ag_lang('REP_PRIMITIVE'),
			id:'primitive',
			renderer:navigate_grid_primitive_renderer,
			hidden:true
		};

		var navigate_search_grid_col_density = {
			dataIndex:'density',
			header:get_ag_lang('REP_DENSITY'),
			id:'density',
			hidden:true
		};

		var navigate_search_grid_fields = [
			{name:'f_id'},
			{name:'b_id'},
			{name:'common_id'},
			{name:'name_j'},
			{name:'name_e'},
			{name:'name_k'},
			{name:'name_l'},
			{name:'syn_j'},
			{name:'syn_e'},
			{name:'organsys_j'},
			{name:'organsys_e'},
			{name:'organsys'},
			{name:'phase'},
			{name:'taid'},
			{name:'icon'},
			{name:'seg_color'},
			{name:'xmin',    type:'float'},
			{name:'xmax',    type:'float'},
			{name:'ymin',    type:'float'},
			{name:'ymax',    type:'float'},
			{name:'zmin',    type:'float'},
			{name:'zmax',    type:'float'},
			{name:'volume',  type:'float'},
			{name:'primitive'},
			{name:'density'},
			{name:'state'},
			{name:'score',  type:'int'},
			{name:'entry',   type:'date', dateFormat: 'timestamp'},
			{name:'lastmod', type:'date', dateFormat: 'timestamp'},
			{name:'delcause'},
			{name:'m_openid'}
		];

		var navigate_search_grid_col_id = {
			dataIndex:'f_id',
			header:get_ag_lang('CDI_NAME'),
			id:'f_id',
			width:72,
			resizable:true,
			fixed:!true,
			hideable:true
		};
		var navigate_search_grid_col_entry = {
			dataIndex:'entry',
			header:get_ag_lang('GRID_TITLE_MODIFIED'),
			id:'entry',
			renderer:Ext.util.Format.dateRenderer('Y/m/d'),
			hidden:true
		};
		var navigate_search_grid_col_organsys = {
			dataIndex:'organsys',
			header:get_ag_lang('GRID_TITLE_ORGANSYS'),
			id:'organsys',
			hidden:true
		};
		var navigate_search_grid_col_icon = {
			dataIndex:'seg_color',
			header:'',
			id:'seg_color',
			sortable: true,
			hidden:false,
			renderer:bp3s_parts_search_gridpanel_exists_parts_renderer,
			width:28,
			resizable:false,
			fixed:true,
			menuDisabled:true,
			hideable: false,
			resizable: false
		};
		var navigate_search_grid_cols = [
			navigate_search_grid_col_icon,
			{dataIndex:'common_id',header:'UniversalID',                     id:'common_id', hidden:true, fixed:true},
			{dataIndex:'name_e',   header:get_ag_lang('DETAIL_TITLE_NAME_E'),    id:'name_e'},
//			{dataIndex:'name_j',   header:get_ag_lang('DETAIL_TITLE_NAME_J'),    id:'name_j', hidden:false},
			{dataIndex:'name_j',   header:get_ag_lang('DETAIL_TITLE_NAME_J'),    id:'name_j', hidden:true},
			{dataIndex:'name_k',   header:get_ag_lang('DETAIL_TITLE_NAME_K'),    id:'name_k', hidden:true},
			{dataIndex:'name_l',   header:get_ag_lang('DETAIL_TITLE_NAME_L'),    id:'name_l', hidden:true},
			{dataIndex:'syn_e',    header:get_ag_lang('DETAIL_TITLE_SYNONYM_E'), id:'syn_e', hidden:true},
			{dataIndex:'syn_j',    header:get_ag_lang('DETAIL_TITLE_SYNONYM_J'), id:'syn_j', hidden:true},
//			navigate_search_grid_col_organsys,
			navigate_search_grid_col_id,
			{dataIndex:'xmin',     header:'Xmin(mm)',                        id:'xmin',  hidden:true},
			{dataIndex:'xmax',     header:'Xmax(mm)',                        id:'xmax',  hidden:true},
			{dataIndex:'ymin',     header:'Ymin(mm)',                        id:'ymin',  hidden:true},
			{dataIndex:'ymax',     header:'Ymax(mm)',                        id:'ymax',  hidden:true},
			{dataIndex:'zmin',     header:'Zmin(mm)',                        id:'zmin',  hidden:true},
			{dataIndex:'zmax',     header:'Zmax(mm)',                        id:'zmax',  hidden:true},
			{dataIndex:'volume',   header:get_ag_lang('GRID_TITLE_VOLUME')+'(cm3)', id:'volume',hidden:false},
			navigate_search_grid_col_entry,
			navigate_search_grid_col_density,
			navigate_search_grid_col_primitive,
			{dataIndex:'state',    header:'State',                           id:'state', hidden:true},
			{dataIndex:'taid',     header:'TAID',                            id:'taid', hidden:true},
			{dataIndex:'score',    header:'Score',                           id:'score', width:40, align:'right', resizable:true, hidden:true}
		];

		var tbar_items = [];
/*
		var combo = Ext.getCmp('bp3d-tree-type-combo');
		var value = combo.getValue()
		var type_records = combo.getStore().getRange();
		var radio_name = Ext.id();
		Ext.each(type_records,function(r,i,a){
			var id_isa = Ext.id();
			var div_isa = $('<div class="bp3d-tree-type-div">').css({margin:'0 2px'});
			$('<input type="radio" name="'+radio_name+'" id="'+id_isa+'" value="'+r.data.t_type+'" class="bp3d-tree-type-radio-count bp3d-tree-type-radio-count-'+r.data.t_type+'">').css({marginTop:'4px'}).appendTo(div_isa);
			var tbitem_isa = new Ext.Toolbar.Item(div_isa.get(0));
			var tbitem_isa_label = new Ext.Toolbar.Item($('<label for="'+id_isa+'">').html(r.data.t_name+'(<label class="bp3d-tree-type-label-count bp3d-tree-type-label-count-'+r.data.t_type+'">-</label>)').appendTo($('<span class="ytb-text">')).get(0));

			tbar_items.push(tbitem_isa);
			tbar_items.push(tbitem_isa_label);
		});
*/
		var total_count_pos = tbar_items.length+1;

		var store = new Ext.data.JsonStore({
			url:'get-fma.cgi',
			totalProperty : 'total',
			root: 'records',
			fields: navigate_search_grid_fields,
//			sortInfo: {field: 'name_e', direction: 'ASC'},
			sortInfo: {field: 'volume', direction: 'DESC'},
			remoteSort: true,
			baseParams : {
				parent : (Ext.isEmpty(gParams.parent)?'':gParams.parent),
				lng    : gParams.lng
			},
			listeners: {
				'beforeload' : function(self,options){
//_dump("beforeload():"+grid_panel.id);
					self.baseParams = self.baseParams || {};
					try{var bp3d_version = Ext.getCmp('bp3d-version-combo').getValue();}catch(e){bp3d_version='5.2';}
					self.baseParams.version = bp3d_version;
					delete self.baseParams.t_type;
					try{var treeType = Ext.getCmp('bp3d-tree-type-combo').getValue();}catch(e){treeType=undefined;}
					if(!Ext.isEmpty(treeType)) self.baseParams.t_type = treeType;

					try{
						var tb = grid_panel.getTopToolbar();
						var item = tb.items.get(total_count_pos);
						item.el.innerHTML='<label>-&nbsp;Objs</label>';

						$(tb.el).find("input.bp3d-tree-type-radio-count[checked]").removeAttr("checked");
						$(tb.el).find("label.bp3d-tree-type-label-count").text('-');
					}catch(e){
						_dump("load():"+e);
					}

					for(var key in init_bp3d_params){
						if(key.match(/_id$/)) self.baseParams[key] = init_bp3d_params[key];
					}

					try{
						var store = Ext.getCmp('bp3d-version-combo').getStore();
						var idx = store.findBy(function(record,id){
							if(record.data.tgi_version==self.baseParams.version) return true;
						});
						if(idx>=0){
							var record = store.getAt(idx);
							if(record){
								self.baseParams.md_id = record.data.md_id;
								self.baseParams.mv_id = record.data.mv_id;
								self.baseParams.mr_id = record.data.mr_id;
								self.baseParams.ci_id = record.data.ci_id;
								self.baseParams.cb_id = record.data.cb_id;
							}
						}
					}catch(e){}

				},
				'load' : function(self,records,options){
					selectPathCB();

					try{
						var tb = grid_panel.getTopToolbar();
						var item = tb.items.get(total_count_pos);
						item.el.innerHTML='<label>'+self.getTotalCount()+'&nbsp;Objs</label>';

						if(!Ext.isEmpty(self.reader.jsonData.rep_num)){
							try{var treeType = Ext.getCmp('bp3d-tree-type-combo').getValue();}catch(e){treeType=undefined;}
							var t_type;
							for(t_type in self.reader.jsonData.rep_num){
								for(var i=0;i<total_count_pos;i+=2){
									if(treeType==t_type){
										var item = tb.items.get(i);
										$(item.el).find("input.bp3d-tree-type-radio-count-"+t_type).attr({checked:true});
									}
									var item = tb.items.get(i+1);
									$(item.el).find("label.bp3d-tree-type-label-count-"+t_type).text(self.reader.jsonData.rep_num[t_type]);
								}
								$('label#navigate-north-panel-content-label-'+t_type).html('(<span>'+self.reader.jsonData.rep_num[t_type]+'</span>)');
							}
						}

					}catch(e){
						_dump("load():"+e);
					}
				},
				scope:this
			}
		});

		var title = 'Search['+aQuery+']';
		if(!Ext.isEmpty(aOptions) && !Ext.isEmpty(aOptions.title)) title = aOptions.title;


		tbar_items.push('->');
		tbar_items.push({xtype: 'tbtext', text: '&nbsp;'});
		tbar_items.push('-');
		tbar_items.push({
			tooltip   : get_ag_lang('COPY_TITLE'),
			iconCls  : 'pallet_copy',
			listeners : {
				'click': {
					fn:function(button,e){
						copyList(grid_panel);
					},
					scope:this
				}
			}
		});


		var grid_panel = new Ext.grid.GridPanel({
			title: title,
			ds: store,
			cm: new Ext.grid.ColumnModel(navigate_search_grid_cols),

			tbar : new Ext.Toolbar(tbar_items),

			bbar : new Ext.PagingToolbar({
				pageSize    : 30,
				store       : store,
				displayInfo : false,
				displayMsg  : '',
				emptyMsg    : '',
				hideMode    : 'offsets',
				hideParent  : true
			}),
			enableColLock: false,
			loadMask: true,
			closable: true,
			plugins: new Ext.grid.GridFilters({
				filters:[
					{type:'boolean', dataIndex:'b_id'},
					{type:'string',  dataIndex:'f_id'},
					{type:'string',  dataIndex:'name_j'},
					{type:'string',  dataIndex:'name_e'},
					{type:'string',  dataIndex:'name_k'},
					{type:'string',  dataIndex:'name_l'},
					{type:'numeric', dataIndex:'phase'},
					{type:'date',    dataIndex:'entry'},
					{type:'numeric', dataIndex:'xmin'},
					{type:'numeric', dataIndex:'xmax'},
					{type:'numeric', dataIndex:'ymin'},
					{type:'numeric', dataIndex:'ymax'},
					{type:'numeric', dataIndex:'zmin'},
					{type:'numeric', dataIndex:'zmax'},
					{type:'numeric', dataIndex:'volume'},
					{type:'string',  dataIndex:'organsys'},
					{type:'string',  dataIndex:'state'},
					{type:'string',  dataIndex:'taid'}
			]}),
			autoScroll:true,
			listeners : {
				"rowclick" : function(grid, rowIndex, event){
//_dump("3261:CALL selectPathCB()");
					selectPathCB();
				},
				"resize" : function(grid){
					resizeGridPanelColumns(grid);
				},
				"render" : function(grid){
					var store = grid.getStore();
					if(Ext.isEmpty(grid.loadMask) || typeof grid.loadMask == 'boolean') grid.loadMask = new Ext.LoadMask(grid.body,{removeMask:false,store:store});
					restoreHiddenGridPanelColumns(grid,'bp3d-navigate-search-grid-panel');

					var cm = grid.getColumnModel();
					cm.defaultSortable = true;
					cm.defaultWidth = 40;
					cm.on({
						'hiddenchange' : function(column,columnIndex,hidden){
							resizeGridPanelColumns(grid);
							saveHiddenGridPanelColumns(grid,'bp3d-navigate-search-grid-panel');
						},
						scope: this,
						delay: 100
					});

					store.baseParams = store.baseParams || {};
					delete store.baseParams.f_pid;

					if(!Ext.isEmpty(aOptions) && !Ext.isEmpty(aOptions.baseParams)){
						for(var key in aOptions.baseParams){
							store.baseParams[key] = aOptions.baseParams[key];
						}
					}else{
						store.baseParams.query = aQuery;
						store.baseParams.node = 'search';
					}
					store.reload({params:{start:0,limit:30}});

					var tb = grid.getTopToolbar();
					try{
						for(var i=0;i<total_count_pos;i+=2){
							var item = tb.items.get(i);
							$(item.el).find("input.bp3d-tree-type-radio-count").change(function(){
								var combo = Ext.getCmp('bp3d-tree-type-combo');
								var value = Number($(this).val());
								var store = combo.getStore();
								var idx = store.findBy(function(r,id){
									return r.get('t_type')===value;
								});
								if(idx<0) return;
								combo.setValue(value);
								var rec = store.getAt(idx);
								combo.fireEvent('select',combo,rec,idx);
							});
						}
					}catch(e){
					}
				},
				beforeshow: function(grid){
					_dump("beforeshow():["+grid.id+"]");
					var store = grid.getStore();
					if(store && store.reader && store.reader.jsonData && !Ext.isEmpty(store.reader.jsonData.rep_num)){
						var t_type;
						for(t_type in store.reader.jsonData.rep_num){
							$('label#navigate-north-panel-content-label-'+t_type).html('(<span>'+store.reader.jsonData.rep_num[t_type]+'</span>)');
						}
					}
				},
				scope : this
			}
		});

		return grid_panel;
	};

	var navigate_tree_type_store = new Ext.data.JsonStore({
		url:'get-tree_type.cgi',
		totalProperty : 'total',
		root: 'records',
		fields: [
			{name:'bul_id',type:'int'},
			{name:'ci_id',type:'int'},
			'ci_name',
			'cb_name',
			'bul_name',
			'bul_abbr',
			{name:'cb_id',type:'int'},
			{name:'butc_num',type:'int'},

			't_type',
			't_name'
		],
		baseParams : {
			parent : (Ext.isEmpty(gParams.parent)?'':gParams.parent),
			lng    : gParams.lng
		},
		listeners: {
			'beforeload' : function(self,options){
				self.baseParams = self.baseParams || {};
				delete self.baseParams.version;
				try{self.baseParams.version = Ext.getCmp('bp3d-version-combo').getValue();}catch(e){}

				var cmp = Ext.getCmp('bp3d-tree-type-combo');
				if(cmp && cmp.rendered) cmp.disable();
				var cmp = Ext.getCmp('bp3d-tree-type-combo-ag');
				if(cmp && cmp.rendered) cmp.disable();

				for(var key in init_bp3d_params){
					if(key.match(/_id$/)) self.baseParams[key] = init_bp3d_params[key];
				}

				try{
					var store = Ext.getCmp('bp3d-version-combo').getStore();
					var idx = store.findBy(function(record,id){
						if(record.data.tgi_version==self.baseParams.version) return true;
					});
					if(idx>=0){
						var record = store.getAt(idx);
						if(record){
							self.baseParams.md_id = record.data.md_id;
							self.baseParams.mv_id = record.data.mv_id;
							self.baseParams.mr_id = record.data.mr_id;
							self.baseParams.ci_id = record.data.ci_id;
							self.baseParams.cb_id = record.data.cb_id;
						}
					}
				}catch(e){}


			},
			'load' : function(store,records,options){
				if(records.length<=0) return;
				var index = 0;
				var record = records[index];
				var t_type = Cookies.get('ag_annotation.images.type');
				if(store.baseParams.version){
					var types_str = Cookies.get('ag_annotation.images.types');
//_dump("navigate_tree_type_store.load():types_str=["+types_str+"]");
					if(types_str){
						var types = Ext.util.JSON.decode(types_str);
						if(types[store.baseParams.version]) t_type = types[store.baseParams.version];
					}
				}

				if(t_type){
					var findIndex = store.find('t_type', new RegExp('^'+t_type+'$'));
					if(findIndex>=0){
						index = findIndex;
						record = store.getAt(index);
					}
				}
				var cmp = Ext.getCmp('bp3d-tree-type-combo');
				if(cmp && cmp.rendered){
					cmp.enable();
					cmp.setValue(record.get('t_type'));
					cmp.fireEvent('select',cmp,record,index);
				}
				var cmp = Ext.getCmp('bp3d-tree-type-combo-ag');
				if(cmp && cmp.rendered){
					cmp.enable();
					cmp.setValue(record.get('t_type'));
				}
			},
			scope:this
		}
	});

	var navigate_tree_panel = new Ext.tree.TreePanel({
		title: 'Tree',
		id              : 'navigate-tree-panel',
		autoScroll      : true,
		animate         : true,
		lines           : true,
		rootVisible     : true,
		rootVisible     : true,
		monitorResize   : true,
//		enableDD        : false,
//		ddScroll        : true,

		ddGroup  : 'partlistDD',
		ddScroll : false,
		enableDD : false,
		enableDrag : true,
		enableDrop : false,


		containerScroll : true,
		useArrows       : false,
		root : new Ext.tree.AsyncTreeNode({
//			text      : get_ag_lang('TREE_ROOT_TITLE'),
			text      : '/',
			draggable : false,
			id        : 'root',
			f_id      : 'root',
			expanded  : true,
			iconCls   : "ttopfolder"
		}),
		loader : new Ext.tree.TreeLoader({
			dataUrl : 'get-tree.cgi',
			baseParams : {
				parent : (Ext.isEmpty(gParams.parent)?'':gParams.parent),
				lng    : gParams.lng,
				trash  : true
			},
			listeners : {
				'beforeload' : function(loader,node){
					loader.baseParams = loader.baseParams || {};
					delete loader.baseParams.pid;
					delete loader.baseParams.f_id;
					delete loader.baseParams.f_pid;
					delete loader.baseParams.treeType;
					delete loader.baseParams.tg_id;
					delete loader.baseParams.tgi_id;
					delete loader.baseParams.bp3d_version;

					if(node.attributes.attr){
						if(!Ext.isEmpty(node.attributes.attr.f_id)) loader.baseParams.f_pid = node.attributes.attr.f_id;
						if(!Ext.isEmpty(node.attributes.attr.t_type)){
							loader.baseParams.t_type = node.attributes.attr.t_type;
						}else{
							try{var treeType = Ext.getCmp('bp3d-tree-type-combo').getValue();}catch(e){treeType=undefined;}
							if(!Ext.isEmpty(treeType)) loader.baseParams.t_type = treeType;
						}
					}else if(node.id == 'root'){
						try{var treeType = Ext.getCmp('bp3d-tree-type-combo').getValue();}catch(e){treeType=undefined;}
						if(!Ext.isEmpty(treeType)) loader.baseParams.t_type = treeType;
					}

					try{var bp3d_version = Ext.getCmp('bp3d-version-combo').getValue();}catch(e){bp3d_version='5.2';}
					loader.baseParams.version = bp3d_version;

					if(node.id=='root'){
						var bul_name = Cookies.get('ag_annotation.images.bul_name');
						var butc_num = Cookies.get('ag_annotation.images.butc_num');
						if(bul_name && butc_num){
							bul_name += ' ('+butc_num+')';
						}else{
							bul_name = '/';
						}
						node.setText(bul_name);
					}

					for(var key in init_bp3d_params){
						if(key.match(/_id$/)) loader.baseParams[key] = init_bp3d_params[key];
					}

					try{var treeType = Ext.getCmp('bp3d-tree-type-combo').getValue();}catch(e){treeType=undefined;}
					if(!Ext.isEmpty(treeType)) init_bp3d_params.bul_id = init_bp3d_params.t_type = loader.baseParams.bul_id = loader.baseParams.t_type = treeType;

					try{
						var store = Ext.getCmp('bp3d-version-combo').getStore();
						var idx = store.findBy(function(record,id){
							if(record.data.tgi_version==loader.baseParams.version) return true;
						});
						if(idx>=0){
							var record = store.getAt(idx);
							if(record){
								loader.baseParams.md_id = record.data.md_id;
								loader.baseParams.mv_id = record.data.mv_id;
								loader.baseParams.mr_id = record.data.mr_id;
								loader.baseParams.ci_id = record.data.ci_id;
								loader.baseParams.cb_id = record.data.cb_id;
							}
						}
					}catch(e){}

				},
				'load' : function(loader,node,response){
//					console.log(node);
//					if(node.id=='root'){
//						var combo = Ext.getCmp('bp3d-tree-type-combo');
//						node.setText();
//					}


//2011-09-28 追加
					var viewport = Ext.getCmp('viewport');
					if(node.getDepth()>0 && viewport && viewport.loadMask){
						try{
							viewport.loadMask.hide();
							delete viewport.loadMask;
						}catch(e){}
					}
				},
				'loadexception': function(){
//2011-09-28 追加
					try{
						var viewport = Ext.getCmp('viewport');
						if(viewport && viewport.loadMask){
							viewport.loadMask.hide();
							delete viewport.loadMask;
						}
					}catch(e){}
				},
				scope : this
			}
		}),
		listeners : {
			"click" : {
				fn : function(node, event){
					if(gParams.id != undefined) delete gParams.id;
//_dump("3421:CALL selectPathCB()");
					selectPathCB(true,node);
				},scope : this},
			"dblclick" : {
				fn : function(node, event){
					event.stopEvent();
					event.stopPropagation();
				},scope : this},
			"append" : {
				fn:function(tree,parent,node,index){
					if(node.id == 'trash'){
						node.reload();
						return;
					}
					node.attributes.attr = node.attributes.attr || {};
					if(node.attributes.attr.lastmod && typeof node.attributes.attr.lastmod == "string"){
						node.attributes.attr.lastmod = new Date(parseInt(node.attributes.attr.lastmod)*1000);
						node.attributes.attr.dateString = formatTimestamp(node.attributes.attr.lastmod);
					}
					if(node.isLeaf()) return;
					if(tree_expandnode[node.id] == undefined){
						tree_expandnode[node.id] = node.isExpanded();
					}else if(tree_expandnode[node.id]){
						if(!node.isExpanded()) node.expand(false,false);
					}else{
						if(node.isExpanded()) node.collapse(false,false);
					}
				},scope:this},
			"render" : {
				fn:function(tree,parent,node){
//					_dump("render():["+tree.id+"]");
				},scope:this},
			"remove" : {
				fn:function(tree,parent,node){
				},scope:this},
			"contextmenu" : {
				fn:function(node, event){
				},scope:this},
			"collapsenode" : {
				fn:function(node){
					tree_expandnode[node.id] = false;
				},scope:this},
			"expandnode" : {
				fn:function(node){
					tree_expandnode[node.id] = true;
				},scope:this},

			"nodedragover" : {
				fn : function(dragOverEvent){
					if(dragOverEvent.target.id == 'trash' && dragOverEvent.point == 'below'){
						dragOverEvent.cancel = true;
						return;
					}
					if(dragOverEvent.target.id == 'root' && dragOverEvent.point == 'append'){
						dragOverEvent.cancel = true;
						return;
					}
				},scope : this},
			"nodedrop" : {
				fn : function(dragOverEvent){
					var node = dragOverEvent.dropNode;
					var parentNode = node.parentNode;

					var trashNode = dragOverEvent.tree.getNodeById('trash');
					if(trashNode && trashNode.contains(dragOverEvent.dropNode)){
						node.attributes.attr.delcause = (new Date).toString();
					}else{
						node.attributes.attr.t_pid = parentNode.attributes.attr.t_id;
						node.attributes.attr.delcause = '';
					}
					var childNode = parentNode.firstChild;
					var t_order = 0;
					var attrs = [];
					while(childNode){
						childNode.attributes.attr = childNode.attributes.attr || {};
						childNode.attributes.attr.t_order = ++t_order;
						if(childNode.attributes.attr.t_id){
							attrs.push({
								t_id     : childNode.attributes.attr.t_id,
								t_pid    : childNode.attributes.attr.t_pid,
								t_order  : childNode.attributes.attr.t_order,
								delcause : childNode.attributes.attr.delcause
							});
						}
						childNode = childNode.nextSibling;
					}
					if(attrs.length>0){
						putTree(
							attrs,
							get_ag_lang('ADMIN_PROMPT_CHANGE_TITLE'),
							undefined,
							function(){
								var treeCmp = Ext.getCmp('navigate-tree-panel');
								if(!treeCmp || !treeCmp.root) return;
								treeCmp.root.reload(
									function(node){
										var path = Cookies.get('ag_annotation.images.path','');
										node.getOwnerTree().selectPath(Ext.isEmpty(path)?'':('/root/'+ path),'f_id');
									}
								);
							}
						);
					}
				},scope : this}
		}
	});

	var get_ajax_zrange_object_transactionId;
	var get_ajax_zrange_object_lastParams;
	var get_ajax_zrange_object = new Ext.util.DelayedTask(function(params){

		params = params || {};
		params.t_type = Ext.getCmp('bp3d-tree-type-combo').getValue();
		params.version = Ext.getCmp('bp3d-version-combo').getValue();

		if(Ext.isEmpty(params.t_type) || Ext.isEmpty(params.version)) return;

		for(var key in init_bp3d_params){
			if(key.match(/_id$/)) params[key] = init_bp3d_params[key];
		}

		try{
			var store = Ext.getCmp('bp3d-version-combo').getStore();
			var idx = store.findBy(function(record,id){
				if(record.data.tgi_version==params.version) return true;
			});
			if(idx>=0){
				var record = store.getAt(idx);
				if(record){
					params.md_id = record.data.md_id;
					params.mv_id = record.data.mv_id;
					params.mr_id = record.data.mr_id;
					params.ci_id = record.data.ci_id;
					params.cb_id = record.data.cb_id;
				}
			}
		}catch(e){}

		var encode_params = Ext.urlEncode(params);
		get_ajax_zrange_object_lastParams = encode_params;
		if(get_ajax_zrange_object_transactionId){
			if(Ext.Ajax.isLoading(get_ajax_zrange_object_transactionId)) Ext.Ajax.abort(get_ajax_zrange_object_transactionId);
		}
		Ext.Ajax.timeout = 60000*5;
		get_ajax_zrange_object_transactionId = Ext.Ajax.request({
			url     : 'get-zrange-object.cgi',
			method  : 'POST',
			params  : encode_params,
			success : function(conn,response,options){
				try{var results = Ext.util.JSON.decode(conn.responseText);}catch(e){}
				if(results && results.success){

					if(params && params.cb) (params.cb)(results);

					if(!Ext.isEmpty(gParams.fmaid)){
						results.records = [gParams.fmaid];
						results.total = 1;
						delete gParams.fmaid;
					}

					if(results.other){
						for(bul_id in results.other){
							$('label#navigate-north-panel-content-label-'+bul_id).html('(<span>'+results.other[bul_id].total+'</span>)');
						}
						$('label#navigate-north-panel-content-label-'+params.t_type).html('(<span>'+results.total+'</span>)');
					}

					if(results.total==0){
						bp3d_contents_store.removeAll();
						return;
					}

					var load_params = {};
					for(var key in bp3d_contents_store.baseParams){
						load_params[key] = bp3d_contents_store.baseParams[key];
					}
					for(var key in params){
						load_params[key] = params[key];
					}
					load_params.fma_ids = Ext.util.JSON.encode(results.records);
					bp3d_change_location(Ext.urlEncode({params:Ext.urlEncode(load_params)}),true);
				}
			},
			failure : function(conn,response,options){
				_dump("failure():["+conn.tId+"]");

				var viewImages = getViewImages();
				if(viewImages && viewImages.refresh){
					viewImages.getStore().removeAll();
					viewImages.refresh();
				}
			}
		});
		var viewImages = getViewImages();
		if(viewImages && viewImages.onBeforeLoad) viewImages.onBeforeLoad();
	});

	var get_ajax_zrange_object_position_task = new Ext.util.DelayedTask(function(){
//_dump("get_ajax_zrange_object_position_task()");
		zpositionCmp = Ext.getCmp('navigate-position-panel-zposition-numberfield');
		if(zpositionCmp.isValid(true)){
			var params = {};
			for(var key in bp3d_contents_store.baseParams){
				params[key] = bp3d_contents_store.baseParams[key];
			}
			delete params.zmin;
			delete params.zmax;
			delete params.only_ta;

			params.zrange = Ext.getCmp('navigate-position-panel-range-combobox').getValue();
			params.filter = Ext.getCmp('navigate-position-panel-filter-combobox').getValue();
			params.cvmin = Ext.getCmp('navigate-position-panel-cube-volume-zmin-numberfield').getValue();
			params.cvmax = Ext.getCmp('navigate-position-panel-cube-volume-zmax-numberfield').getValue();
			params.zposition = zpositionCmp.getValue();

			params.zrate = Ext.getCmp('navigate-position-panel-zrate-numberfield').getValue();

			params.density_min = Ext.getCmp('navigate-position-panel-density-min-numberfield').getValue();
			params.density_max = Ext.getCmp('navigate-position-panel-density-max-numberfield').getValue();
			params.primitive = Ext.getCmp('navigate-position-panel-density-primitive-checkbox').getValue();

			if($("input#navigate-position-panel-only-taid:checked").val()) params.only_ta = true;

//			get_ajax_zrange_object(params);
			get_ajax_zrange_object.cancel();
			get_ajax_zrange_object.delay(250,null,null,[params]);
		}
	});

	var get_ajax_zrange_object_range_params = function(){
		var params = Ext.apply({},bp3d_contents_store.baseParams);
		delete params.zposition;
		delete params.zrange;
		delete params.only_ta;

		params.filter = Ext.getCmp('navigate-range-panel-filter-combobox').getValue();
		params.cvmin = Ext.getCmp('navigate-range-panel-cube-volume-min-numberfield').getValue();
		params.cvmax = Ext.getCmp('navigate-range-panel-cube-volume-max-numberfield').getValue();
		params.zmin = Ext.getCmp('navigate-range-panel-zmin-numberfield').getValue();
		params.zmax = Ext.getCmp('navigate-range-panel-zmax-numberfield').getValue();

		params.density_min = Ext.getCmp('navigate-range-panel-density-min-numberfield').getValue();
		params.density_max = Ext.getCmp('navigate-range-panel-density-max-numberfield').getValue();
		params.primitive = Ext.getCmp('navigate-range-panel-density-primitive-checkbox').getValue();

		if($("input#navigate-range-panel-only-taid:checked").val()) params.only_ta = true;

		for(var key in params){
			if(Ext.isEmpty(params[key])) params[key] = null;
		}
		params.cb = function(results){
//			_dump("get_ajax_zrange_object_range_params:CB()");
			var sel_value;
			if(!Ext.isEmpty(results.segments)){

				var range_value=null;
				var cube_value=null;

				var combo = Ext.getCmp('navigate-range-panel-range-combobox');
				if(!Ext.isEmpty(combo)) range_value = combo.getValue();
//				_dump("get_ajax_zrange_object_range_params():range_value=["+range_value+"]");

				var combo = Ext.getCmp('navigate-range-panel-cube-volume-combobox');
				if(!Ext.isEmpty(combo)) cube_value = combo.getValue();
//				_dump("get_ajax_zrange_object_range_params():cube_value=["+cube_value+"]");

				Ext.each(results.segments,function(r,i,a){
					$('#navigate-range-panel-event-'+r.value+'>.navigate-range-panel-value').text(r.total);

					if(!Ext.isEmpty(r.totals)){
						Ext.each(r.totals,function(r2,i,a){

//							_dump("get_ajax_zrange_object_range_params():CB():r2=["+r2.cuboid_value+"]["+r2.segment_value+"]");

							$('td.range_segment_'+r2.cuboid_value+' div.range_segment_'+r2.segment_value).text(r2.total).attr({
								cuboid_value: r2.cuboid_value,
								segment_value: r2.segment_value
							});
//							if(r2.total>0 && navigate_range_panel_init_show){//結果が０でも良い場合は、コメントにする
//							if(r2.cuboid_value=='100-inf' && r2.segment_value=='H' && navigate_range_panel_init_show){//結果が０でも良い場合は、コメントにする
							if(r2.total>0 && r2.cuboid_value=='100-inf' && navigate_range_panel_init_show){//結果が０でも良い場合は、コメントにする
								if(Ext.isEmpty(sel_value)){
									sel_value = {cuboid_value: r2.cuboid_value, segment_value: r2.segment_value};
								}else if(r2.cuboid_value==cube_value && r2.segment_value==range_value){
									sel_value = {cuboid_value: r2.cuboid_value, segment_value: r2.segment_value};
								}
							}
						});
					}

				});
				navigate_range_panel_init_show = 0;
			}
			if(Ext.isEmpty(gParams.fmaid)){
				if(!Ext.isEmpty(sel_value)){
					var combo = Ext.getCmp('navigate-range-panel-cube-volume-combobox');
					var store = combo.getStore();
					var idx = store.findBy(function(record,id){
						if(record.data.value==sel_value.cuboid_value) return true;
						return false;
					});
					var rec;
					if(idx>=0) rec = store.getAt(idx);
					if(rec){
						combo.setValue(rec.data.value);
						combo.fireEvent('select',combo,rec,idx);
//						_dump("CB():CALL get_ajax_zrange_object_range_task()");
						get_ajax_zrange_object_range_task.cancel();
					}
					var combo = Ext.getCmp('navigate-range-panel-range-combobox');
					var store = combo.getStore();
					var idx = store.findBy(function(record,id){
						if(record.data.value==sel_value.segment_value) return true;
						return false;
					});
					var rec;
					if(idx>=0) rec = store.getAt(idx);
					if(rec){
						combo.setValue(rec.data.value);
						combo.fireEvent('select',combo,rec,idx);
						get_ajax_zrange_object_range_task.cancel();
					}
					get_ajax_zrange_object_range_task.delay(0);
				}else{
					var cuboid_value = Ext.getCmp('navigate-range-panel-cube-volume-combobox').getValue();
					var segment_value = Ext.getCmp('navigate-range-panel-range-combobox').getValue();
					if($('table.range_segment_'+cuboid_value+'.range_segment_area_'+segment_value).addClass('range_select').length==0){
						if($('td.range_segment_'+cuboid_value+' div.range_segment_area_'+segment_value).addClass('range_select').length==0){
							$('td.range_segment_'+cuboid_value+' div.range_segment_'+segment_value).addClass('range_select');
						}
					}
				}
				Ext.getCmp('navigate-range-panel-num-numberfield').setValue(Ext.isEmpty(results.records)?0:results.records.length);
			}
		};
		return params;
	};

	var get_ajax_zrange_object_range_task = new Ext.util.DelayedTask(function(){
//_dump("get_ajax_zrange_object_range_task()");
		var params = get_ajax_zrange_object_range_params();
//		get_ajax_zrange_object(params);
		get_ajax_zrange_object.cancel();
		get_ajax_zrange_object.delay(250,null,null,[params]);
	});

	var get_ajax_zrange_object_range_task2 = get_ajax_zrange_object_range_task;
	var get_ajax_zrange_object_range_task3 = new Ext.util.DelayedTask(function(){
//_dump("get_ajax_zrange_object_range_task3()");
		var params = get_ajax_zrange_object_range_params();

		var disp = Ext.getCmp('navigate-range-panel-filter-combobox').getRawValue();
		$('td.range_show_only_image').removeClass('range_select');
		$('td.range_show_only_image_'+disp).addClass('range_select');




		var segments = [];
		var cuboid_volumes  = [];
		var combo = Ext.getCmp('navigate-range-panel-range-combobox');
		Ext.each(combo.getStore().getRange(),function(r,i,a){
			var o = Ext.apply({},r.data);
			segments.push(o);
		});
		params.segments = Ext.encode(segments);

		var combo = Ext.getCmp('navigate-range-panel-cube-volume-combobox');
		Ext.each(combo.getStore().getRange(),function(r,i,a){
//			if(Ext.isEmpty(r.data.min) && Ext.isEmpty(r.data.max)) return true;
			var o = Ext.apply({},r.data);
			cuboid_volumes.push(o);
		});
		params.cuboid_volumes = Ext.encode(cuboid_volumes);

//		get_ajax_zrange_object(params);
		get_ajax_zrange_object.cancel();
		get_ajax_zrange_object.delay(250,null,null,[params]);

//		$('td.range_segment div.range_value').text('-').removeAttr('cuboid_value').removeAttr('segment_value');
		$('td.range_segment div.range_value').html('<img src="resources/images/default/tree/loading.gif" style="width:12px;height:12px;border-width:0;margin-top:16px;">').removeAttr('cuboid_value').removeAttr('segment_value');
});

	var navigate_position_panel = new Ext.Panel({
		title: 'Intersection',
		id: 'navigate-position-panel',
		autoScroll: true,
		layout: 'form',
		labelWidth: 90,
		labelAlign: 'right',
		defaultType: 'numberfield',
		defaults : {
			hidden: true,
			hideLabel: true,
			allowBlank: false,
			readOnly: true,
			selectOnFocus: true
		},
		items : [{
			hidden: false,
			xtype: 'panel',
			border: false,
			contentEl: 'navigate-position-panel-content',
//			height: 743
//			height: 771
			height: 787
		},{
			hidden: true,
			hideLabel: true,
			id: 'navigate-position-panel-density-combobox',
			xtype: 'combo',
			ctCls : 'x-hide-display',
			editable: false,
			mode: 'local',
			lazyInit: false,
			displayField: 'disp',
			valueField: 'value',
			triggerAction: 'all',
			value: 'any',
			readOnly: false,
			width: 106,
			listWidth: 120,
			store: new Ext.data.SimpleStore({
				fields: ['disp','value','min','max'],
				data : [
					['Any'                     ,'any'      ,null,null],
					[get_ag_lang('ELEMENT_PRIMARY'),'primitive',null,null],
					['100%'                    ,'100-inf'  ,1.0 ,null],
					['80%-'                    ,'80-inf'   ,0.8 ,null],
					['-30%'                    ,'inf-30'   ,null,0.3]
				]
			}),
			listeners: {
				'select' : function(combo, record, index) {
//					_dump("select():["+combo.id+"]["+combo.getValue()+"]");

					Ext.getCmp('navigate-position-panel-density-max-numberfield').setValue(record.data.max);
					Ext.getCmp('navigate-position-panel-density-min-numberfield').setValue(record.data.min);
					Ext.getCmp('navigate-position-panel-density-primitive-checkbox').setValue(record.data.value==='primitive');

					get_ajax_zrange_object_position_task.delay(0);
				},
				'render' : function(combo) {
				},
				scope:this
			}
		},{
			hidden: true,
			hideLabel: true,
			ctCls : 'x-hide-display',
			allowBlank: true,
			minValue: 0,
			fieldLabel: 'Density Max(%)',
			id : 'navigate-position-panel-density-max-numberfield',
			readOnly: false,
			listeners: {
				change: function(field, newValue, oldValue){
				},
				render: function(field) {
//					_dump("render():["+field.id+"]");
				}
			}
		},{
			hidden: true,
			hideLabel: true,
			ctCls : 'x-hide-display',
			allowBlank: true,
			minValue: 0,
			fieldLabel: 'Density Min(%)',
			id : 'navigate-position-panel-density-min-numberfield',
			readOnly: false,
			value: 0,
			listeners: {
				change: function(field, newValue, oldValue){
				},
				render: function(field) {
//					_dump("render():["+field.id+"]");
				}
			}
		},{
			hidden: true,
			hideLabel: true,
			ctCls : 'x-hide-display',
			allowBlank: true,
			fieldLabel: '',
			id : 'navigate-position-panel-density-primitive-checkbox',
			xtype: 'checkbox',
			readOnly: false,
			checked: true,
			listeners: {
				change: function(field, newValue, oldValue){
				},
				render: function(field) {
//					_dump("render():["+field.id+"]");
				}
			}
		},{
			hidden: true,
			hideLabel: true,
			ctCls : 'x-hide-display',
			xtype: 'combo',
			fieldLabel: 'Range',
			id : 'navigate-position-panel-range-combobox',
			renderTo:'navigate-position-panel-range-combobox-render',
			editable: false,
			mode: 'local',
			lazyInit: false,
			displayField: 'disp',
			valueField: 'value',
			triggerAction: 'all',
			value: 5,
			readOnly: false,
			store: new Ext.data.SimpleStore({
				fields: ['value','disp'],
				data : [
					[5,  '5mm'],
					[10, '10mm'],
					[15, '15mm']
				]
			}),
			listeners: {
				'select' : function(combo, record, index) {
//					_dump("select():["+combo.id+"]");
					get_ajax_zrange_object_position_task.delay(0);
				},
				'render' : function(combo) {
//					_dump("render():["+combo.id+"]");
					combo.hide();
				},
				scope:this
			}
		},{
			hidden: true,
			hideLabel: true,
			ctCls : 'x-hide-display',
			fieldLabel: 'ZMax',
			id : 'navigate-position-panel-zmax-numberfield',
			renderTo:'navigate-position-panel-zmax-numberfield-render',
			value: 1670.79,
			listeners: {
				render: function(field) {
//					_dump("render():["+field.id+"]");
				}
			}
		},{
			hidden: true,
			hideLabel: true,
			ctCls : 'x-hide-display',
			fieldLabel: 'ZMin',
			id : 'navigate-position-panel-zmin-numberfield',
			renderTo:'navigate-position-panel-zmin-numberfield-render',
			value: -13.53,
			listeners: {
				render: function(field) {
//					_dump("render():["+field.id+"]");
				}
			}
		},{
			hidden: true,
			hideLabel: true,
			ctCls : 'x-hide-display',
			fieldLabel: 'Show only',
			id: 'navigate-position-panel-filter-combobox',
			renderTo:'navigate-position-panel-filter-combobox-render',
			xtype: 'combo',
//			ctCls : 'x-small-editor',
			editable: false,
			mode: 'local',
			lazyInit: false,
			displayField: 'disp',
			valueField: 'value',
			triggerAction: 'all',
			value: 'FMA5018',
			readOnly: false,
			width: 114,
			store: new Ext.data.SimpleStore({
				fields: ['value','disp'],
				data : [
					['other.obo','Internal'],
					['FMA5018',  'Bone'],
					['FMA5022',  'Muscle'],
					['FMA3710',  'Vessel'],
					['',         'All']
				]
			}),
			listeners: {
				'select' : function(combo, record, index) {
//					_dump("select():["+combo.id+"]");
					get_ajax_zrange_object_position_task.delay(0);

//					$('table.position_value').removeClass('position_select');
//					$('td.position_segment div.position_segment_area').removeClass('position_select');
//					$('td.position_segment div.position_value').removeClass('position_select');

					var disp = combo.getRawValue();
					$('td.position_show_only_image').removeClass('position_select');
					$('td.position_show_only_image_'+disp).addClass('position_select');

				},
				'render' : function(combo) {
//					_dump("render():["+combo.id+"]");
//					combo.hide();

//					_dump("render():["+combo.id+"]["+disp+"]");
					var disp = 'Bone';
					$('td.position_show_only_image_'+disp).addClass('position_select');
//					_dump("render():["+combo.id+"]["+disp+"]");

				},
				scope:this
			}
		},{
			hidden:true,
			hideLabel: true,
			ctCls : 'x-hide-display',
			fieldLabel: 'Cuboid&nbsp;Vol(cc)',
			id: 'navigate-position-panel-cube-volume-combobox',
			renderTo:'navigate-position-panel-cube-volume-combobox-render',
			xtype: 'combo',
//			ctCls : 'x-small-editor',
			editable: false,
			mode: 'local',
			lazyInit: false,
			displayField: 'disp',
			valueField: 'value',
			triggerAction: 'all',
			value: 'any',
			readOnly: false,
			width: 114,
			store: new Ext.data.SimpleStore({
				fields: ['disp','value','min','max'],
				data : [
					['1未満'       ,'<1'   ,null,   1],
					['1以上100未満','<100' ,   1, 100],
					['100以上'     ,'>=100', 100,null],
					['Any'         ,'any'  ,null,null]
				]
			}),
			listeners: {
				'select' : function(combo, record, index) {
//					_dump("select():["+combo.id+"]");
					Ext.getCmp('navigate-position-panel-cube-volume-zmax-numberfield').setValue(record.data.max);
					Ext.getCmp('navigate-position-panel-cube-volume-zmin-numberfield').setValue(record.data.min);

					get_ajax_zrange_object_position_task.delay(0);
				},
				'render' : function(combo) {
//					_dump("render():["+combo.id+"]");
				},
				scope:this
			}
		},{
			hidden: true,
			hideLabel: true,
			ctCls : 'x-hide-display',
			allowBlank: true,
			minValue: 0,
			fieldLabel: '<span style="font-size:8px;">VolMax(cc)</span>',
			id : 'navigate-position-panel-cube-volume-zmax-numberfield',
			renderTo:'navigate-position-panel-cube-volume-zmax-numberfield-render',
			readOnly: false,
			listeners: {
				change: function(field, newValue, oldValue){
					get_ajax_zrange_object_range_task2.delay(250);
				},
				render: function(field) {
//					_dump("render():["+field.id+"]");
				}
			}
		},{
			hidden: true,
			hideLabel: true,
			ctCls : 'x-hide-display',
			allowBlank: true,
			minValue: 0,
			fieldLabel: '<span style="font-size:8px;">VolMin(cc)</span>',
			id : 'navigate-position-panel-cube-volume-zmin-numberfield',
			renderTo:'navigate-position-panel-cube-volume-zmin-numberfield-render',
			readOnly: false,
			listeners: {
				change: function(field, newValue, oldValue){
					get_ajax_zrange_object_range_task2.delay(250);
				},
				render: function(field) {
//					_dump("render():["+field.id+"]");
				}
			}
		},{
			hidden:true,
			hideLabel: true,
			ctCls : 'x-hide-display',
			id : 'navigate-position-panel-zrate-numberfield',
			maxValue: 1,
			minValue: 0,
			value: 0.09,
			readOnly: false
		},{
			hidden:true,
			hideLabel: true,
			ctCls : 'x-hide-display',
			fieldLabel: 'Z-center(mm)',
			id : 'navigate-position-panel-zposition-numberfield',
			renderTo:'navigate-position-panel-zposition-numberfield-render',
			maxValue: 1670.79,
			minValue: -13.53,
			readOnly: false,
			listeners: {
				change: function(field, newValue, oldValue){
//					_dump("change():["+field.id+"]["+newValue+"]["+oldValue+"]");
//					_dump("change():["+Ext.getCmp('navigate-position-panel-range-combobox').getValue()+"]");

					get_ajax_zrange_object_position_task.delay(0);

					if(oldValue === undefined) return;

					var base = $('#navigate-position-panel-base');
					var img = $('#navigate-position-panel-img');
					var line = $('#navigate-position-panel-line');
					var b_offset = base.offset();
					var i_offset = img.offset();
					var zmax = Ext.getCmp('navigate-position-panel-zmax-numberfield').getValue();
					var zmin = Ext.getCmp('navigate-position-panel-zmin-numberfield').getValue();
					var zrange = zmax-zmin;
					var zrate = (zmax - newValue) / zrange;
					var y = zrate * img.height();
					var top = (y+(i_offset.top-b_offset.top))+'px';
					if(line.css('top') != top){
						$('#navigate-position-panel-line').css({
							display: 'block',
							top: top
						});
					}
				},
				valid: function(field){
//					_dump("valid():["+field.id+"]");
				},
				specialkey: function(field, e){
					if(e.getKey() != e.ENTER) return;
					Ext.getCmp('navigate-position-panel-range-combobox').focus(false);
					field.focus();
				},
				render: function(field) {
//					_dump("render():["+field.id+"]");
				}
			}
		},{
			hidden:true,
			hideLabel: true,
			ctCls : 'x-hide-display',
			id:'navigate-position-panel-range-label',
			renderTo:'navigate-position-panel-range-label-render',
			xtype: 'label',
			width: '100%',
			style: 'font-size:0.8em;text-align:center;',
			html: '<table width=100%><tbody><tr><td align="center">(range=+2.5mm)</td></tr></tbody></table>'
		}],
		listeners: {
			render: function(comp){
//				_dump("render():["+comp.id+"]");

				Ext.get('navigate-position-panel-event').unselectable();
				Ext.get('navigate-position-panel-base-fx').unselectable();
				Ext.get('navigate-position-panel-base').unselectable();
				Ext.get('navigate-position-panel-img').unselectable();
				Ext.get('navigate-position-panel-img2').unselectable();
				Ext.get('navigate-position-panel-line').unselectable();

				Ext.get('navigate-position-panel-head-disable').unselectable();
				Ext.get('navigate-position-panel-tail-disable').unselectable();


				$('table.navigate_position_panel_density label').each(function(){
					Ext.get(this).unselectable();
				});
				$('table.navigate_position_panel_density_item input[type="radio"]').bind('change',function(event){

					$('table.navigate_position_panel_density_item').removeClass('select_item');
					$(this).closest('table.navigate_position_panel_density_item').addClass('select_item');

					var val = $(this).val();
					var densityCombo = Ext.getCmp('navigate-position-panel-density-combobox');
					var store = densityCombo.getStore();
					var idx = store.findBy(function(record,id){
						if(record.data.value==val) return true;
						return false;
					});
					var rec;
					if(idx>=0) rec = store.getAt(idx);
					if(rec){
						densityCombo.setValue(val);
						densityCombo.fireEvent('select',densityCombo,rec,idx);
					}
				});
				$('table.navigate_position_panel_density_item input[type="checkbox"]').bind('change',function(event){

					if(get_ajax_zrange_object_transactionId){
						if(Ext.Ajax.isLoading(get_ajax_zrange_object_transactionId)){
							Ext.Ajax.abort(get_ajax_zrange_object_transactionId);
							get_ajax_zrange_object_transactionId = null;
						}
					}

					var minValue = null;
					var maxValue = null;
					var checkValue = false;

					var $c1 = $('table.navigate_position_panel_density_item input#navigate-position-panel-density-checkbox-name-element[type="checkbox"]:checked');
					var $c2 = $('table.navigate_position_panel_density_item input#navigate-position-panel-density-checkbox-name-complete-compound[type="checkbox"]:checked');
					var $c3 = $('table.navigate_position_panel_density_item input#navigate-position-panel-density-checkbox-name-incomplete-compound[type="checkbox"]:checked');

					if($c1.length) checkValue = true;
					if($c2.length && $c3.length){
						minValue = 0;
						maxValue = null;
					}else if($c2.length){
						minValue = 1.0;
						maxValue = null;
					}else if($c3.length){
						minValue = 0;
						maxValue = 1.0;
					}
					if(!checkValue && minValue==null && maxValue==null){
						checkValue = true;
						minValue = 0;
					}

					Ext.getCmp('navigate-position-panel-density-max-numberfield').setValue(maxValue);
					Ext.getCmp('navigate-position-panel-density-min-numberfield').setValue(minValue);
					Ext.getCmp('navigate-position-panel-density-primitive-checkbox').setValue(checkValue);

					get_ajax_zrange_object_position_task.delay(0);

				});



				var combobox = Ext.getCmp('navigate-position-panel-filter-combobox');
//				_dump("render():["+comp.id+"]["+combobox.id+"]["+combobox.rendered+"]");

				var disp = combobox.getRawValue();
				$('td.position_show_only_image_'+disp).addClass('position_select');

//				_dump("render():["+comp.id+"]["+disp+"]");

				$('td.position_show_only_image').bind('click',function(event){
					$('td.position_show_only_image').removeClass('position_select');
					var value;
					if($(this).hasClass('position_show_only_image_Bone')){
						value = 'Bone';
					}else if($(this).hasClass('position_show_only_image_Muscle')){
						value = 'Muscle';
					}else if($(this).hasClass('position_show_only_image_Vessel')){
						value = 'Vessel';
					}else if($(this).hasClass('position_show_only_image_Internal')){
						value = 'Internal';
					}else if($(this).hasClass('position_show_only_image_All')){
						value = 'All';
					}
					if(!Ext.isEmpty(value)){
						var combo = Ext.getCmp('navigate-position-panel-filter-combobox');
						var store = combo.getStore();
						var idx = store.findBy(function(record,id){
							if(record.data.disp==value) return true;
							return false;
						});
						var rec;
						if(idx>=0) rec = store.getAt(idx);
						if(rec){
							combo.setValue(rec.data.value);
							combo.fireEvent('select',combo,rec,idx);
						}
					}
					event.preventDefault();
					event.stopPropagation();
					return false;
				});


			},
			resize: function(comp, adjWidth, adjHeight, rawWidth, rawHeight){
//				_dump("resize():["+comp.id+"]["+adjWidth+"]["+adjHeight+"]["+rawWidth+"]["+rawHeight+"]");
				var img = $('#navigate-position-panel-img');
				var node = img.get(0);

				var base = $('#navigate-position-panel-base');
				$('#navigate-position-panel-line').css({width : base.width()});
				$('#navigate-position-panel-head-disable').css({width : base.width()});
				$('#navigate-position-panel-tail-disable').css({width : base.width()});

				var b_position = base.position();

				$('#navigate-position-panel-event').css({
					left   : b_position.left,
					top    : b_position.top,
					width  : base.outerWidth({margin:true}),
					height : base.innerHeight()
				});
			},
			show: {
				fn: function(comp){
					function move_zpos(event,p_zpos){
						if(event){
							event.preventDefault();
							event.stopPropagation();
						}
						var base = $('#navigate-position-panel-base');
						var img = $('#navigate-position-panel-img');
						var line = $('#navigate-position-panel-line');

						var head_disable = $('#navigate-position-panel-head-disable');
						var tail_disable = $('#navigate-position-panel-tail-disable');

						var b_offset = base.offset();
						var b_position = base.position();
						var i_offset = img.offset();
	//					var x = event.pageX-i_offset.left;
						var y;
						if(Ext.isEmpty(p_zpos)){
							y = event.pageY-i_offset.top-1;
						}else{
							y = p_zpos;
						}
	//					_dump("move_zpos():y=["+y+"]");
						if(y<0) y = 0;
						if(y>img.height()) y = img.height();
	//					_dump("move_zpos():y=["+y+"]");
						var zrate = y/img.height();
	//					_dump("move_zpos():zrate=["+zrate+"]");
						var zmax = Ext.getCmp('navigate-position-panel-zmax-numberfield').getValue();
						var zmin = Ext.getCmp('navigate-position-panel-zmin-numberfield').getValue();
						var zrange = zmax-zmin;
						var zpos = Math.round((zmax-zrange*zrate)*100)/100;
						var field = Ext.getCmp('navigate-position-panel-zposition-numberfield');
						if(zpos != field.getValue()){
							field.setValue(zpos);
						}

						var field_zrate = Ext.getCmp('navigate-position-panel-zrate-numberfield');
						field_zrate.setValue(zrate);

						var top = (y+(i_offset.top-b_offset.top)+b_position.top+4)-(line.height()/2);//+'px';
	//					_dump("move_zpos():top=["+top+"]["+parseInt(line.css('top'))+"]");
						if(parseInt(line.css('top')) != top){
							line.css({
								display: 'block',
								top: top
							});
							head_disable.css({
								display: 'block',
								height: top
							});
							tail_disable.css({
								display: 'block',
								top: top+line.height()+1
							});
						}
					}
					$('#navigate-position-panel-event').mousedown(function(event,p_zpos){
	//					_dump('mousedown');
						move_zpos(event,p_zpos);
						$(this).mousemove(function(event,p_zpos){
	//						_dump('mousemove');
							move_zpos(event,p_zpos);
							return false;
						}).mouseup(function(event,p_zpos){
	//						_dump('mouseup');
							move_zpos(event,p_zpos);

							get_ajax_zrange_object_position_task.delay(0);

							$(this).unbind('mousemove').unbind('mouseup');
							return false;
						});
						return false;
					}).css({
						'cursor':'pointer'
					});
					$("input#navigate-position-panel-only-taid").change(function(){
						get_ajax_zrange_object_position_task.delay(0);
					});


					setTimeout(function(){
						$('#navigate-position-panel-event')
							.trigger('mousedown',[48])
							.trigger('mousemove',[48])
							.trigger('mouseup',[48]);
					},250);

					if(_location.location.href == 'about:blank') _location.location.href = 'location.html';
				},
				single: true
			}
		}
	});

	var navigate_range_panel_items = [{
			xtype: 'panel',
			border: false,
			contentEl: 'navigate-range-panel-content',
			anchor: '100%',
//			height:458
//			height:376
//			height:Ext.isIE ? 450 : 448
//			height:Ext.isIE ? 472 : 474
			height: 486
		},{
			hidden: true,
			hideLabel: true,
//			fieldLabel: '表現密度(%)',
			fieldLabel: get_ag_lang('REP_DENSITY')+'(%)',
			labelStyle: 'white-space:nowrap;',
			id: 'navigate-range-panel-density-combobox',
			xtype: 'combo',
			ctCls : 'x-hide-display',
			editable: false,
			mode: 'local',
			lazyInit: false,
			displayField: 'disp',
			valueField: 'value',
			triggerAction: 'all',
			value: 'any',
			readOnly: false,
			width: 106,
			listWidth: 120,
			store: new Ext.data.SimpleStore({
				fields: ['disp','value','min','max'],
				data : [
/*
					['<10'   ,'inf-10' ,null, 0.1],
					['10-20' ,'10-20'  , 0.1, 0.2],
					['20-30' ,'20-30'  , 0.2, 0.3],
					['30-40' ,'30-40'  , 0.3, 0.4],
					['40-50' ,'40-50'  , 0.4, 0.5],
					['50-60' ,'50-60'  , 0.5, 0.6],
					['60-70' ,'60-70'  , 0.6, 0.7],
					['70-80' ,'70-80'  , 0.7, 0.8],
					['80-90' ,'80-90'  , 0.8, 0.9],
					['90-100','90-100' , 0.9, 1.0],
					['100'   ,'100-inf', 1.0,null],
					['Any'   ,'any'    ,null,null]
*/
/*
					['10%'+get_ag_lang('OR_MODE'),'10-inf' , 0.1,null],
					['20%'+get_ag_lang('OR_MODE'),'20-inf' , 0.2,null],
					['30%'+get_ag_lang('OR_MODE'),'30-inf' , 0.3,null],
					['40%'+get_ag_lang('OR_MODE'),'40-inf' , 0.4,null],
					['50%'+get_ag_lang('OR_MODE'),'50-inf' , 0.5,null],
					['60%'+get_ag_lang('OR_MODE'),'60-inf' , 0.6,null],
					['70%'+get_ag_lang('OR_MODE'),'70-inf' , 0.7,null],
					['80%'+get_ag_lang('OR_MODE'),'80-inf' , 0.8,null],
					['90%'+get_ag_lang('OR_MODE'),'90-inf' , 0.9,null],
					['100%'   ,'100-inf', 1.0,null],
					[get_ag_lang('ELEMENT_PRIMARY'),'primitive', null,null],
					['Any'    ,'any'    ,null,null]
*/
					['Any'                     ,'any'      ,null,null],
					[get_ag_lang('ELEMENT_PRIMARY'),'primitive',null,null],
					['100%'                    ,'100-inf'  ,1.0 ,null],
					['80%-'                    ,'80-inf'   ,0.8 ,null],
					['-30%'                    ,'inf-30'   ,null,0.3]
				]
			}),
			listeners: {
				'select' : function(combo, record, index) {
//					_dump("select():["+combo.id+"]");
					Ext.getCmp('navigate-range-panel-density-max-numberfield').setValue(record.data.max);
					Ext.getCmp('navigate-range-panel-density-min-numberfield').setValue(record.data.min);
					Ext.getCmp('navigate-range-panel-density-primitive-checkbox').setValue(record.data.value==='primitive');

//					_dump("select():["+combo.id+"]:CALL get_ajax_zrange_object_range_task3()");
//					get_ajax_zrange_object_range_task3.delay(250);
					get_ajax_zrange_object_range_task3.delay(0);

					$('table.range_value').removeClass('range_select');
					$('td.range_segment div.range_segment_area').removeClass('range_select');
					$('td.range_segment div.range_value').removeClass('range_select');
				},
				'render' : function(combo) {
//					_dump("render():["+combo.id+"]");
					try{
						var treetypeCombo = Ext.getCmp('bp3d-tree-type-combo');
						treetypeCombo.on('select',function(combo,record,index){

							var activeTab = Ext.getCmp('navigate-tab-panel').getActiveTab();
							if(activeTab.id != 'navigate-range-panel') return;

							var densityCombo = Ext.getCmp('navigate-range-panel-density-combobox');
							densityCombo.setDisabled(combo.getValue()===1);
							if(densityCombo.disabled){
//								var val = 'any';
								var val = 'primitive';
								var store = densityCombo.getStore();
								var idx = store.findBy(function(record,id){
									if(record.data.value==val) return true;
									return false;
								});
								var rec;
								if(idx>=0) rec = store.getAt(idx);
								if(rec){
									densityCombo.setValue(val);
									densityCombo.fireEvent('select',densityCombo,rec,idx);
								}
							}
						});
					}catch(e){
						alert(e);
					}
				},
				scope:this
			}
		},{
			hidden: true,
			hideLabel: true,
			ctCls : 'x-hide-display',
			allowBlank: true,
			minValue: 0,
			fieldLabel: 'Density Max(%)',
			id : 'navigate-range-panel-density-max-numberfield',
			readOnly: false,
			listeners: {
				change: function(field, newValue, oldValue){
					_dump("change():["+field.id+"]");
					_dump("change():["+field.id+"]:CALL get_ajax_zrange_object_range_task3()");
//					get_ajax_zrange_object_range_task3.delay(250);
					get_ajax_zrange_object_range_task3.delay(0);
				},
				render: function(field) {
//					_dump("render():["+field.id+"]");
				}
			}
		},{
			hidden: true,
			hideLabel: true,
			ctCls : 'x-hide-display',
			allowBlank: true,
			minValue: 0,
			fieldLabel: 'Density Min(%)',
			id : 'navigate-range-panel-density-min-numberfield',
			readOnly: false,
			listeners: {
				change: function(field, newValue, oldValue){
					_dump("change():["+field.id+"]");
					_dump("change():["+field.id+"]:CALL get_ajax_zrange_object_range_task3()");
//					get_ajax_zrange_object_range_task3.delay(250);
					get_ajax_zrange_object_range_task3.delay(0);
				},
				render: function(field) {
//					_dump("render():["+field.id+"]");
				}
			}
		},{
			hidden: true,
			hideLabel: true,
			ctCls : 'x-hide-display',
			allowBlank: true,
			fieldLabel: '',
			id : 'navigate-range-panel-density-primitive-checkbox',
			xtype: 'checkbox',
			readOnly: false,
			checked: false,
			listeners: {
				change: function(field, newValue, oldValue){
				},
				render: function(field) {
//					_dump("render():["+field.id+"]");
				}
			}

		},{
			hidden: true,
			hideLabel: true,
			ctCls : 'x-hide-display',
			fieldLabel: 'Show only',
			id: 'navigate-range-panel-filter-combobox',
			xtype: 'combo',
			editable: false,
			mode: 'local',
			lazyInit: false,
			displayField: 'disp',
			valueField: 'value',
			triggerAction: 'all',
//			value: 'FMA5018',
//			value: Ext.isEmpty(gParams.fmaid) ? 'FMA5018':'',
//			value: Ext.isEmpty(gParams.fmaid) ? 'other.obo':'',
			value: '',
			readOnly: false,
			width: 130,
			store: new Ext.data.SimpleStore({
				fields: ['value','disp'],
				data : [
					['other.obo','Internal'],
					['FMA5018'  ,'Bone'],
					['FMA5022'  ,'Muscle'],
					['FMA3710'  ,'Vessel'],
					['',         'All']
				]
			}),
			listeners: {
				'select' : function(combo, record, index) {
//					_dump("select():["+combo.id+"]");
//					_dump("select():["+combo.id+"]:CALL get_ajax_zrange_object_range_task3()");
//					get_ajax_zrange_object_range_task3.delay(100);
					get_ajax_zrange_object_range_task3.delay(0);
					$('table.range_value').removeClass('range_select');
					$('td.range_segment div.range_segment_area').removeClass('range_select');
					$('td.range_segment div.range_value').removeClass('range_select');
				},
				'render' : function(combo) {
//					_dump("render():["+combo.id+"]");
				},
				scope:this
			}
		},{
			hidden: true,
			hideLabel: true,
			fieldLabel: 'Cuboid&nbsp;Vol(cc)',
			id: 'navigate-range-panel-cube-volume-combobox',
			xtype: 'combo',
			ctCls : 'x-hide-display',
			editable: false,
			mode: 'local',
			lazyInit: false,
			displayField: 'disp',
			valueField: 'value',
			triggerAction: 'all',
//			value: 'any',
			value: 'inf-10',
			readOnly: false,
			width: 130,
			store: new Ext.data.SimpleStore({
				fields: ['disp','value','min','max'],
				data : [
					['Less than 0.1'      ,'inf-01' ,null, 0.1],
					['0.1 or more and less than 0.35' ,'01-1'   , 0.1,0.35],
					['0.35 or more and less than 1'   ,'1-10'   ,0.35,   1],
					['1 or more and less than 10'     ,'10-100' ,   1,  10],
					['More than 10'                   ,'100-inf',  10,null],
					['Any'                            ,'any'    ,null,null]
				]
			}),
			listeners: {
				'select' : function(combo, record, index) {
//					_dump("select():["+combo.id+"]");
					Ext.getCmp('navigate-range-panel-cube-volume-max-numberfield').setValue(record.data.max);
					Ext.getCmp('navigate-range-panel-cube-volume-min-numberfield').setValue(record.data.min);

					get_ajax_zrange_object_range_task2.delay(250);

					$('table.range_value').removeClass('range_select');
					$('td.range_segment div.range_segment_area').removeClass('range_select');
					$('td.range_segment div.range_value').removeClass('range_select');
				},
				'render' : function(combo) {
//					_dump("render():["+combo.id+"]");
				},
				scope:this
			}
		},{
			hidden: true,
			hideLabel: true,
			ctCls : 'x-hide-display',
			allowBlank: true,
			minValue: 0,
			fieldLabel: '<span style="font-size:8px;">VolMax(cc)</span>',
			id : 'navigate-range-panel-cube-volume-max-numberfield',
			readOnly: false,
			listeners: {
				change: function(field, newValue, oldValue){
					get_ajax_zrange_object_range_task2.delay(250);
				},
				render: function(field) {
//					_dump("render():["+field.id+"]");
				}
			}
		},{
			hidden: true,
			hideLabel: true,
			ctCls : 'x-hide-display',
			allowBlank: true,
			minValue: 0,
			fieldLabel: '<span style="font-size:8px;">VolMin(cc)</span>',
			id : 'navigate-range-panel-cube-volume-min-numberfield',
			readOnly: false,
			listeners: {
				change: function(field, newValue, oldValue){
					get_ajax_zrange_object_range_task2.delay(250);
				},
				render: function(field) {
//					_dump("render():["+field.id+"]");
				}
			}
		},{
			hidden: true,
			hideLabel: true,
			xtype: 'combo',
			fieldLabel: 'Segment Range',
			ctCls : 'x-hide-display',
			id : 'navigate-range-panel-range-combobox',
			editable: false,
			mode: 'local',
			lazyInit: false,
			displayField: 'disp',
			valueField: 'value',
			triggerAction: 'all',
			value: 'H',
			width: 130,
			readOnly: false,
			store: new Ext.data.SimpleStore({
				fields:['disp'          ,'value','zmin'          ,'zmax'],
				data : [
					['Head'               ,'H'   ,1431.1           ,  null],
					['Upper body'         ,'U'   ,914.2            ,1431.1],
					['Leg'                ,'L'   ,null             , 914.2],

//					['Head+Upper body'    ,'HU'  ,'[1431.1,914.2]' ,'[null,1431.1]'],
//					['Upper body+Leg'     ,'UL'  ,'[914.2 , null]' ,'[1431.1,914.2]'],
//					['Head+Upper body+Leg','HUL' ,'[1431.1,null]'  ,'[null,914.2]'],

					['Head+Upper body+Leg','HUL' ,'[1431.1,914.2,null]'  ,'[null,1431.1,914.2]'],
					['Any'                ,'ANY' ,null             ,null]
				]
			}),
			listeners: {
				'select' : function(combo, record, index) {
//					_dump("select():["+combo.id+"]");
//					console.log(record);
					Ext.getCmp('navigate-range-panel-zmax-numberfield').setValue(record.data.zmax);
					Ext.getCmp('navigate-range-panel-zmin-numberfield').setValue(record.data.zmin);
//					_dump("select():["+combo.id+"]:CALL get_ajax_zrange_object_range_task()");
//					get_ajax_zrange_object_range_task.delay(250);
					get_ajax_zrange_object_range_task.delay(0);

					$('table.range_value').removeClass('range_select');
					$('td.range_segment div.range_segment_area').removeClass('range_select');
					$('td.range_segment div.range_value').removeClass('range_select');

					$('.navigate-range-panel-event').removeClass('navigate-range-panel-event-select');
					$('#navigate-range-panel-event-'+record.data.value).addClass('navigate-range-panel-event-select');
				},
				'render' : function(combo) {
//					_dump("render():["+combo.id+"]");
					var val = combo.getValue();
					var store = combo.getStore();
					var idx = store.findBy(function(record,id){
						if(record.data.value==val) return true;
						return false;
					});
					var rec;
					if(idx>=0) rec = store.getAt(idx);
					if(rec){
						combo.fireEvent('select',combo,rec,idx);
//						_dump("render():["+combo.id+"]:CALL get_ajax_zrange_object_range_task()");
						get_ajax_zrange_object_range_task.cancel();


						var tabpanel = Ext.getCmp('navigate-tab-panel');
						if(tabpanel && tabpanel.rendered){
							var activeTab = tabpanel.getActiveTab();
							if(activeTab && activeTab.id=='navigate-range-panel'){
//							_dump("render():["+combo.id+"]:CALL get_ajax_zrange_object_range_task3()");
//								get_ajax_zrange_object_range_task3.delay(250);
								get_ajax_zrange_object_range_task3.delay(0);
//								combo.fireEvent('select',combo,rec,idx);
							}else{
								Ext.getCmp('navigate-range-panel').on({
									beforeshow: function(panel){
										var combo = Ext.getCmp('bp3d-tree-type-combo');
										var value = combo.getValue();
										var store = combo.getStore();
										var idx = store.findBy(function(r,id){
											return r.get('t_type')===value;
										});
										if(idx<0) return;
										var rec = store.getAt(idx);
										combo.fireEvent('select',combo,rec,idx);
									},
									self: this,
									single:true,
									buffer: 250
								});
							}
						}
					}
				},
				scope:this
			}
		},{
			hidden: true,
			hideLabel: true,
			ctCls : 'x-hide-display',
			allowBlank: true,
			readOnly: false,
			xtype: 'textfield',
			width: 114,
			fieldLabel: '<span style="font-size:8px;">ZMax(mm)</span>',
			id : 'navigate-range-panel-zmax-numberfield',
			listeners: {
				change: function(field, newValue, oldValue){
//					_dump("change():["+field.id+"]");
					get_ajax_zrange_object_range_task2.delay(250);
				},
				render: function(field) {
//					_dump("render():["+field.id+"]");
				}
			}
		},{
			hidden: true,
			hideLabel: true,
			ctCls : 'x-hide-display',
			allowBlank: true,
			readOnly: false,
			xtype: 'textfield',
			width: 114,
			fieldLabel: '<span style="font-size:8px;">ZMin(mm)</span>',
			id : 'navigate-range-panel-zmin-numberfield',
			listeners: {
				change: function(field, newValue, oldValue){
//					_dump("change():["+field.id+"]");
					get_ajax_zrange_object_range_task2.delay(250);
				},
				render: function(field) {
//					_dump("render():["+field.id+"]");
				}
			}
		},{
			hidden: true,
			hideLabel: true,
			ctCls : 'x-hide-display',
			allowBlank: true,
			readOnly: false,
			xtype: 'textfield',
			width: 114,
			fieldLabel: '<span style="font-size:8px;">Add condition</span>',
			id : 'navigate-range-panel-condition-textfield',
			listeners: {
				change: function(field, newValue, oldValue){
//					_dump("change():["+field.id+"]");
					get_ajax_zrange_object_range_task2.delay(250);
				},
				render: function(field) {
//					_dump("render():["+field.id+"]");
				}
			}
		},{
			hidden: true,
			hideLabel: true,
			ctCls : 'x-hide-display',
			allowBlank: true,
			readOnly: true,
			fieldLabel: '#',
			id : 'navigate-range-panel-num-numberfield',
			listeners: {
				change: function(field, newValue, oldValue){
//					_dump("change():["+field.id+"]");
				},
				render: function(field) {
//					_dump("render():["+field.id+"]");
				}
			}
		}];
	var navigate_range_panel = new Ext.Panel({
		title: 'Segment',
		id: 'navigate-range-panel',
		autoScroll: true,
		layout: 'form',
		labelWidth: 156,
		labelAlign: 'right',
		defaultType: 'numberfield',
		defaults : {
			allowBlank: false,
			ctCls : 'x-small-editor',
			readOnly: true,
			selectOnFocus: true,
			width: 60
		},
		items : navigate_range_panel_items,
		listeners: {
			render: function(comp){
//				_dump("render():["+comp.id+"]");


				Ext.get('navigate-range-panel-base').unselectable();
				Ext.get('navigate-range-panel-event-head').unselectable();
				Ext.get('navigate-range-panel-event-body').unselectable();
				Ext.get('navigate-range-panel-event-leg').unselectable();
				Ext.get('navigate-range-panel-event-head-body').unselectable();
				Ext.get('navigate-range-panel-event-body-leg').unselectable();
				Ext.get('navigate-range-panel-event-all').unselectable();

				$('table.navigate_range_panel_density label').each(function(){
					Ext.get(this).unselectable();
				});
				$('table.navigate_range_panel_density_item input[type="radio"]').bind('change',function(event){

					$('table.navigate_range_panel_density_item').removeClass('select_item');
					$(this).closest('table.navigate_range_panel_density_item').addClass('select_item');

					var val = $(this).val();
					var densityCombo = Ext.getCmp('navigate-range-panel-density-combobox');
					var store = densityCombo.getStore();
					var idx = store.findBy(function(record,id){
						if(record.data.value==val) return true;
						return false;
					});
					var rec;
					if(idx>=0) rec = store.getAt(idx);
					if(rec){
						densityCombo.setValue(val);
						densityCombo.fireEvent('select',densityCombo,rec,idx);
					}
				});
				$('table.navigate_range_panel_density_item input[type="checkbox"]').bind('change',function(event){

					if(get_ajax_zrange_object_transactionId){
						if(Ext.Ajax.isLoading(get_ajax_zrange_object_transactionId)){
							Ext.Ajax.abort(get_ajax_zrange_object_transactionId);
							get_ajax_zrange_object_transactionId = null;
						}
					}

					var minValue = null;
					var maxValue = null;
					var checkValue = false;

					var $c1 = $('table.navigate_range_panel_density_item input#navigate-range-panel-density-checkbox-name-element[type="checkbox"]:checked');
					var $c2 = $('table.navigate_range_panel_density_item input#navigate-range-panel-density-checkbox-name-complete-compound[type="checkbox"]:checked');
					var $c3 = $('table.navigate_range_panel_density_item input#navigate-range-panel-density-checkbox-name-incomplete-compound[type="checkbox"]:checked');

					if($c1.length) checkValue = true;
					if($c2.length && $c3.length){
						minValue = 0;
						maxValue = null;
					}else if($c2.length){
						minValue = 1.0;
						maxValue = null;
					}else if($c3.length){
						minValue = 0;
						maxValue = 1.0;
					}
					if(!checkValue && minValue==null && maxValue==null){
						checkValue = true;
						minValue = 0;
					}

					Ext.getCmp('navigate-range-panel-density-max-numberfield').setValue(maxValue);
					Ext.getCmp('navigate-range-panel-density-min-numberfield').setValue(minValue);
					Ext.getCmp('navigate-range-panel-density-primitive-checkbox').setValue(checkValue);

					get_ajax_zrange_object_range_task3.delay(0);
				});

				$('.navigate-range-panel-event').bind('click',function(event){
					var id = $(this).attr('id');
					var val = id.substr('navigate-range-panel-event'.length+1);

					var combo = Ext.getCmp('navigate-range-panel-range-combobox');
					var store = combo.getStore();
					var idx = store.findBy(function(record,id){
						if(record.data.value==val) return true;
						return false;
					});
					var rec;
					if(idx>=0) rec = store.getAt(idx);
					if(rec){
						combo.setValue(val);
						combo.fireEvent('select',combo,rec,idx);
					}

					event.preventDefault();
					event.stopPropagation();
					return false;
				});


				$('div#navigate-range-panel-base2').hide();
				$('div#navigate-range-panel-base-fx').show();

				$('td.range_show_only_image').bind('click',function(event){
					$('td.range_show_only_image').removeClass('range_select');
					var value;
					if($(this).hasClass('range_show_only_image_Bone')){
						value = 'Bone';
					}else if($(this).hasClass('range_show_only_image_Muscle')){
						value = 'Muscle';
					}else if($(this).hasClass('range_show_only_image_Vessel')){
						value = 'Vessel';
					}else if($(this).hasClass('range_show_only_image_Internal')){
						value = 'Internal';
					}else if($(this).hasClass('range_show_only_image_All')){
						value = 'All';
					}
					if(!Ext.isEmpty(value)){
						var combo = Ext.getCmp('navigate-range-panel-filter-combobox');
						var store = combo.getStore();
						var idx = store.findBy(function(record,id){
							if(record.data.disp==value) return true;
							return false;
						});
						var rec;
						if(idx>=0) rec = store.getAt(idx);
						if(rec){
							combo.setValue(rec.data.value);
							combo.fireEvent('select',combo,rec,idx);
						}
					}
					event.preventDefault();
					event.stopPropagation();
					return false;
				});

				$('td.range_segment div.range_value').bind('click',function(event){
					_dump("td.range_segment div.range_value : click()");
					var cuboid_value = $(this).attr('cuboid_value');
					var segment_value = $(this).attr('segment_value');

					$('table.range_value').removeClass('range_select');
					$('td.range_segment div.range_segment_area').removeClass('range_select');
					$('td.range_segment div.range_value').removeClass('range_select');

					var combo = Ext.getCmp('navigate-range-panel-cube-volume-combobox');
					var store = combo.getStore();
					var idx = store.findBy(function(record,id){
						if(record.data.value==cuboid_value) return true;
						return false;
					});
					var rec;
					if(idx>=0) rec = store.getAt(idx);
					if(rec){
						combo.setValue(rec.data.value);
						combo.fireEvent('select',combo,rec,idx);
						get_ajax_zrange_object_range_task.cancel();
					}
					var combo = Ext.getCmp('navigate-range-panel-range-combobox');
					var store = combo.getStore();
					var idx = store.findBy(function(record,id){
						if(record.data.value==segment_value) return true;
						return false;
					});
					var rec;
					if(idx>=0) rec = store.getAt(idx);
					if(rec){
						combo.setValue(rec.data.value);
						combo.fireEvent('select',combo,rec,idx);
						get_ajax_zrange_object_range_task.cancel();
					}
//					get_ajax_zrange_object_range_task.delay(100);
					get_ajax_zrange_object_range_task.delay(0);

//													<tr><td class="range_segment range_segment_inf-10 range_value">
//														<div class="range_segment_base">
//															<div class="range_segment range_segment_HU range_segment_area range_segment_area_HU">&nbsp</div>


					if($('table.range_segment_'+cuboid_value+'.range_segment_area_'+segment_value).addClass('range_select').length==0){
						if($('td.range_segment_'+cuboid_value+' div.range_segment_area_'+segment_value).addClass('range_select').length==0){
							$('td.range_segment_'+cuboid_value+' div.range_segment_'+segment_value).addClass('range_select');
						}
					}

					event.preventDefault();
					event.stopPropagation();
					return false;
				});

				$("input#navigate-range-panel-only-taid").change(function(){
					get_ajax_zrange_object_range_task3.delay(0);
				});

				$('table.navigate_range_panel_density_item input[type="checkbox"]').trigger('change');


			},
			resize: function(comp, adjWidth, adjHeight, rawWidth, rawHeight){
//				_dump("resize():["+comp.id+"]["+adjWidth+"]["+adjHeight+"]["+rawWidth+"]["+rawHeight+"]");
			},
			show: {
				fn: function(comp){
					if(_location.location.href == 'about:blank') _location.location.href = 'location.html';

					navigate_range_panel_init_show=1;

				},
				single: true
			}
		}
	});

	var navigate_tabs = new Ext.TabPanel({
//		title   : get_ag_lang('TREE_TITLE'),
//		title   : " ",
//		header: true,
//		headerAsText: false,
		id      : 'navigate-tab-panel',
//		region  : 'west',
		region  : 'center',
//		split   : true,
//		width   : 192,
//		minWidth : 192,
		border  : false,
		anchor:'100% 100%',
//		bodyStyle: 'border-width:0 1px;',
//		frame:true,
		enableTabScroll: true,
//		activeTab: (!Ext.isEmpty(gParams.fmaid) && !Ext.isEmpty(gParams.txpath) && !Ext.isEmpty(gParams.t_type)) ? 2 : 0,
		activeTab: 0,
		layoutOnTabChange : true,
		deferredRender : false,
		items:[
			navigate_range_panel,
			navigate_position_panel,
			navigate_tree_panel,
			navigate_grid_panel
//			,navigate_position_panel
		],
		listeners: {
			'tabchange' : function(tabpanel,tab){
//				_dump("tabchange():["+tabpanel.id+"]["+tab.id+"]");

				try{
					Ext.each(Ext.getCmp('bp3d-tree-type-combo').getStore().getRange(),function(r,i,a){
						$('label#navigate-north-panel-content-label-'+r.data.t_type).text('');
					});
				}catch(e){}

bp3d_change_location(undefined,true);//ローカルな履歴をクリア

				if(tab.id == 'navigate-grid-panel'){
//					contents_panel.layout.setActiveItem(1);

					var t_type = Ext.getCmp('bp3d-tree-type-combo').getValue();
					var version = Ext.getCmp('bp3d-version-combo').getValue();
					var baseParams = tab.getStore().baseParams;
					if(baseParams.t_type != t_type || baseParams.version != version){
						Ext.getCmp('navigate-grid-paging-toolbar').changePage(1);
						_dump(Ext.getCmp('navigate-grid-paging-toolbar'));
					}
				}else if(tab.id == 'navigate-tree-panel'){
					var treeCmp = tab;
					if(!treeCmp || !treeCmp.root) return;

					var t_type = Ext.getCmp('bp3d-tree-type-combo').getValue();
					var version = Ext.getCmp('bp3d-version-combo').getValue();
					var baseParams = treeCmp.getLoader().baseParams;

					var cb = function(node){
						if(!Ext.isEmpty(gBP3D_TPAP) && node.firstChild && node.firstChild.attributes.attr.f_id){
							gBP3D_TPAP = undefined;
							Cookies.set('ag_annotation.images.path','/'+node.firstChild.attributes.attr.f_id);
						}
						var path = Cookies.get('ag_annotation.images.path','');
						node.getOwnerTree().selectPath(Ext.isEmpty(path)?'':('/root/'+ path),'f_id',function(bSuccess,oSelNode){
							if(bSuccess){
								selectPathCB(bSuccess,oSelNode);
							}else if(node.firstChild){
								Cookies.set('ag_annotation.images.path','/'+node.firstChild.attributes.attr.f_id);
								var path = Cookies.get('ag_annotation.images.path','')
								node.getOwnerTree().selectPath(Ext.isEmpty(path)?'':('/root/'+ path),'f_id',selectPathCB);
							}
						});
					};

					if(baseParams.t_type != t_type || baseParams.version != version){
						treeCmp.root.reload(cb);
					}else{
						cb(treeCmp.root);
					}

				}else if(
					tab.id == 'navigate-position-panel' ||
					tab.id == 'navigate-range-panel'
				){
					var value = 'thump';
					image_disptype = value;
					try{
						var disptypeSelect = Ext.getCmp('disptypeSelect');
						disptypeSelect.setValue(value);
						var idx = disptypeSelect.getStore().findBy(function(r,id){
							return(value===r.data.value)
						});
						var cmp = Ext.getCmp('img-chooser-view');
						if(cmp && cmp.rendered){
							cmp.layout.setActiveItem(idx);
						}

						if(tab.id == 'navigate-position-panel'){
							zpositionCmp = Ext.getCmp('navigate-position-panel-zposition-numberfield');
							if(zpositionCmp.isValid(true)){
								get_ajax_zrange_object_position_task.delay(250);
							}else{
								getViewImages().getStore().reload();
							}
						}else if(tab.id == 'navigate-range-panel'){
//							_dump("tabchange():["+tabpanel.id+"]:CALL get_ajax_zrange_object_range_task3()");
							get_ajax_zrange_object_range_task3.cancel();
//							get_ajax_zrange_object_range_task3.delay(100);
							get_ajax_zrange_object_range_task3.delay(0);
						}
					}catch(e){
						image_disptype = value;
					}

				}else{
					var store;
					try{if(tab.getStore) store = tab.getStore();}catch(e){}
					if(store) store.reload({params:{start:0,limit:store.lastOptions.params.limit}});
				}


			},
			'afterlayout' : function(tabpanel,layout){
				afterLayout(tabpanel);
			},
			'remove' : function(tabpanel,panel){
//_dump("navigate-tab-panel.remove():"+tabpanel.items.getCount());
				if(tabpanel.items.getCount()<=4) tabpanel.scrollToTab(Ext.getCmp('navigate-range-panel'),false);
			},
			scope:this
		}
	});

	var navigate_panel = new Ext.Panel({
		id      : 'navigate-panel',
//		title   : ' ',
		region  : 'west',
		split   : true,
//		width   : 192,
//		width   : 250,
//		width   : 300,

		width   : 300,
		minWidth : 300,

		border  : false,
		bodyStyle: 'border-width:0 1px 1px;',
//		layout: 'anchor',
		layout: 'border',
		items: [{
			id: 'navigate-north-panel',
			region: 'north',
			height: 70,
			border: false,
//			frame: false,
			bodyStyle: 'border-width:0 0 1px 0;background:transparent;',
//			html:get_ag_lang('TREE_TYPE_NORTH_HTML')
			contentEl: 'navigate-north-panel-content',
			listeners: {
				render: function(comp){
					$('div#navigate-north-panel-content label').each(function(){
						Ext.get(this).unselectable();
					});
					$('div#navigate-north-panel-content input[type=radio]').change(function(){
						var combo = Ext.getCmp('bp3d-tree-type-combo');
						var value = Number($(this).val());
						if(combo.getValue()==value) return;
						var store = combo.getStore();
						var idx = store.findBy(function(r,id){
							return r.get('t_type')===value;
						});
						if(idx<0) return;
						combo.setValue(value);
						var rec = store.getAt(idx);
						combo.fireEvent('select',combo,rec,idx);
					});

					var combo = Ext.getCmp('bp3d-tree-type-combo');
					var store = combo.getStore();
//					_dump("render():["+comp.id+"]["+store.getCount()+"]");
					if(store.getCount()>0){
						var t_type = combo.getValue();
						$('div#navigate-north-panel-content input[type=radio][value='+t_type+']').attr({checked:true});
					}
					combo.on({
						select: {
							fn: function(combo,record,index){
								$('div#navigate-north-panel-content input[type=radio][value='+record.data.t_type+']').attr({checked:true});
							}
						}
					});

					Ext.getCmp('contents-tab-panel').on({
						tabchange: {
							fn: function(tabpanel,tab){
								if(tab.id != 'contents-tab-bodyparts-panel') return;
								comp.setHeight(comp.initialConfig.height);
								comp.findParentByType('panel').doLayout();
							},
							buffer: 250
						}
					});
				}
			}
		},navigate_tabs],
/*
		tools:[{
			id:'right',
			handler: function(event, toolEl, panel){
				toolEl.addClass('x-hide-display');
				var left_tool = panel.getTool('left');
				if(left_tool) left_tool.removeClass('x-hide-display');

				var contents_tab_bodyparts_panel = Ext.getCmp('contents-tab-bodyparts-panel');
				var bp3d_contents_detail_panel = Ext.getCmp('bp3d-contents-detail-panel');
				if(contents_tab_bodyparts_panel && bp3d_contents_detail_panel){
					var size1 = contents_tab_bodyparts_panel.getSize();
					var size2 = bp3d_contents_detail_panel.getSize();
					panel.setWidth(size1.width-size2.width);
				}
				var cmp = Ext.getCmp('viewpage-panel');
				if(cmp) cmp.layout.setActiveItem('bp3d-detail-panel');
				var viewport = Ext.getCmp('viewport');
				if(viewport && viewport.rendered) viewport.doLayout();
			}
		},{
			id:'left',
			handler: function(event, toolEl, panel){
				toolEl.addClass('x-hide-display');
				var right_tool = panel.getTool('right');
				if(right_tool) right_tool.removeClass('x-hide-display');

				var box = panel.getBox();
				if(box.x==0 && box.y==0) return;
				var width  = Ext.isEmpty(panel.initialConfig.minWidth) ?box.width :panel.initialConfig.minWidth;

				panel.setWidth(width);

				var cmp = Ext.getCmp('viewpage-panel');
				if(cmp) cmp.layout.setActiveItem('bp3d-contents-panel');
				var viewport = Ext.getCmp('viewport');
				if(viewport && viewport.rendered) viewport.doLayout();
			}
		}],
*/
		listeners: {
			'render' : function(panel){
				var left_tool = panel.getTool('left');
				if(left_tool) left_tool.addClass('x-hide-display');
			},
			'afterlayout' : function(panel,layout){
				afterLayout(panel);
			},
			scope:this
		}
	});

	var resizeNavigateGridPanel = function(){
		var grid = Ext.getCmp('navigate-grid-panel');
		var column = grid.getColumnModel();
		var innerWidth = grid.getInnerWidth();
		var totalWidth = column.getTotalWidth(false);
		var columnCount = column.getColumnCount();
		var columnNum = 0;
		for(var i=0;i<columnCount;i++){
			if(column.isHidden(i)) continue;
			columnNum++;
		}
		if(columnNum==0) return;
		var columnWidth = parseInt((innerWidth-15)/columnNum);
		for(var i=0;i<columnCount;i++){
			if(column.isHidden(i)) continue;
			column.setColumnWidth(i,columnWidth);
		}
	};

	var formatFeedbackData = function(data){
		data.shortTitle = null;
		if(data.c_title) data.shortTitle = data.c_title.ellipse(get_ag_lang('SORTNAME_LENGTH'));

		data.name = null;
		if(data.c_name){
			data.name = data.c_name;
		}else if(data.c_openid){
			data.name = data.c_openid;
		}

		data.nameString = '';
		if(data.c_name){
			if(data.c_email){
				data.nameString = '<a href="mailto:'+data.c_email+'">'+data.c_name+'</a>';
			}else{
				data.nameString = data.c_name;
			}
		}else if(data.c_openid){
			if(data.c_email){
				data.nameString = '<a href="mailto:'+data.c_email+'">'+data.c_openid+'</a>';
			}else{
				data.nameString = data.c_openid;
			}
		}

		data.commentString = null;
		if(data.c_comment){
			data.commentString = data.c_comment.replace(/\n/g,"<br>");
		}

		if(data.c_reply && data.c_reply.length>0){
			for(var j=0,len=data.c_reply.length;j<len;j++){
				var data2 = data.c_reply[j];

				data2.c_entry=new Date(parseInt(data2.c_entry)*1000);
				data2.dateString = formatTimestamp(data2.c_entry);

				data2.nameString = null;
				if(data2.c_name){
					if(data2.c_email){
						data2.nameString = '<a href="mailto:'+data.c_email+'">'+data2.c_name+'</a>';
					}else{
						data2.nameString = data2.c_name;
					}
				}else if(data2.c_openid){
					if(data2.c_email){
						data2.nameString = '<a href="mailto:'+data.c_email+'">'+data2.c_openid+'</a>';
					}else{
						data2.nameString = data2.c_openid;
					}
				}

				data2.commentString = null;
				if(data2.c_comment){
					data2.commentString = data2.c_comment.replace(/\n/g,"<br>");
				}
			}
		}
		data.dateString = formatTimestamp(data.c_entry);

		if(data.c_path && data.c_names && data.c_tree){
		}

		if(data.c_path && data.c_path.length>0) data.c_path = data.c_path[0];
		if(data.c_tree && data.c_tree.length>0) data.c_tree = data.c_tree[0];


		data.cs_name = null;
		if(data.cs_id && comment_status[data.cs_id]){
			if(data.cs_id == 1){
				data.cs_name = '<span class="pending">'+comment_status[data.cs_id]+'</span>';
			}else{
				data.cs_name = comment_status[data.cs_id];
			}
		}

		return data;
	};

	var contents_tab_feedback_store_fields = [
		{name: 'f_id',        type:'string'},
		{name: 'c_id',        type:'int'},
		{name: 'c_pid',       type:'int'},
		{name: 'c_openid',    type:'string'},
		{name: 'c_name',      type:'string'},
		{name: 'c_email',     type:'string'},
		{name: 'c_title',     type:'string'},
		{name: 'c_comment',   type:'string'},
		{name: 'c_entry',     type:'date', dateFormat:'timestamp'},
		{name: 'c_image',     type:'string'},
		{name: 'c_image_thumb', type:'string'},
		{name: 'c_fma_image', type:'string'},
		{name: 'c_fma_name',  type:'string'},
		{name: 'ct_name',     type:'string'},
		{name: 'ct_id',       type:'int'},
		{name: 'cs_id',       type:'int'},
		{name: 'cs_name',     type:'string'},
		{name: 'f_name',      type:'string'},
		{name: 'c_reply'},
		{name: 'c_path'},
		{name: 'c_names'},
		{name: 'c_tree'},
		{name: 'c_fmas'},
	];

	var updateFeedbackChildStore = new Ext.data.JsonStore({
		url           : 'get-feedback.cgi',
		root          : 'feedback',
		totalProperty : 'totalCount',
		remoteSort    : true,
		baseParams    : {
			parent : (Ext.isEmpty(gParams.parent)?'':gParams.parent),
			lng    : gParams.lng
		},
		fields : contents_tab_feedback_store_fields,
		listeners: {
			'beforeload' : function(store,options){
				store.baseParams = store.baseParams || {};
			},
			'load' : function(store,records,options){
				if(records.length>0){
					var c_pid = records[0].data.c_pid;
					var data = [];
					for(var i=0,len=records.length;i<len;i++){
						formatFeedbackData(records[i].data);
						data.push(records[i].data);
						updateFeedbackChildStack.push(records[i].data);
					}
					if(!Ext.isEmpty(c_pid)){
						var elem = Ext.get('feedback_child_'+c_pid);
						if(elem) feedbackChildTemplate.overwrite(elem,data);
					}
				}
				if(updateFeedbackChildTimeoutID) clearTimeout(updateFeedbackChildTimeoutID);
				updateFeedbackChildTimeoutID = setTimeout(updateFeedbackChild,0);
				contents_tab_feedback_all_store.add(records);
			},
			'loadexception': function(){
			},
			'datachanged': function(){
			},
			scope:this
		}
	});

	updateFeedbackChildTimeoutID = null;
	updateFeedbackChildStack = [];
	updateFeedbackChild = function(){
		if(updateFeedbackChildStack.length == 0) return;
		var data = updateFeedbackChildStack.shift();
		var elem = Ext.get('feedback_child_'+data.c_id);
		if(elem){
			updateFeedbackChildStore.load({params : {c_pid : data.c_id}});
		}else{
			if(updateFeedbackChildTimeoutID) clearTimeout(updateFeedbackChildTimeoutID);
			updateFeedbackChildTimeoutID = setTimeout(updateFeedbackChild,0);
		}
	};


	var contents_tab_feedback_all_store = new Ext.data.SimpleStore({
		root          : 'feedback',
		totalProperty : 'totalCount',
		fields : contents_tab_feedback_store_fields
	})

	var contents_tab_feedback_store = new Ext.data.JsonStore({
		url           : 'get-feedback.cgi',
		root          : 'feedback',
		totalProperty : 'totalCount',
		remoteSort    : true,
		baseParams    : {
			parent : (Ext.isEmpty(gParams.parent)?'':gParams.parent),
			lng    : gParams.lng
		},
		fields : contents_tab_feedback_store_fields,
		listeners: {
			'beforeload' : function(store,options){
				contents_tab_feedback_all_store.removeAll();
				store.baseParams = store.baseParams || {};
				store.baseParams.cs_id = Ext.getCmp('contents-tab-feedback-status-combo').getValue();
			},
			'load' : function(store,records,options){
				if(contents_tab_feedback_pagingBar) contents_tab_feedback_pagingBar.enable();
				if(records.length>0){
					var c_pid = records[0].data.c_pid;
					for(var i=0,len=records.length;i<len;i++){
						updateFeedbackChildStack.push(records[i].data);
					}
					if(Ext.isEmpty(c_pid)){
						if(updateFeedbackChildTimeoutID) clearTimeout(updateFeedbackChildTimeoutID);
						updateFeedbackChildTimeoutID = setTimeout(updateFeedbackChild,500);
					}
				}
				contents_tab_feedback_all_store.add(records);
			},
			'loadexception': function(){
				if(contents_tab_feedback_pagingBar) contents_tab_feedback_pagingBar.disable();
			},
			'datachanged': function(){
				var element = contents_tab_feedback_dataview.getEl();
				if(element){
					element.dom.scrollTop = 0;
					element.dom.parentNode.scrollTop = 0;
				}
			},
			scope:this
		}
	});
	contents_tab_feedback_store.setDefaultSort('c_entry', 'desc');

	var contents_tab_feedback_pagingBar = new Ext.PagingToolbar({
		pageSize    : 10,
		store       : contents_tab_feedback_store,
		displayInfo : true,
		displayMsg  : get_ag_lang('PAGING_DISP_MSG')+' {0} - {1} of {2}',
		emptyMsg    : get_ag_lang('PAGING_EMPTY_MSG'),
		hideMode    : 'offsets',
		hideParent  : true,
		items       : [
			'-',
			{
				id    : 'sortSelect_label1',
				xtype : 'tbtext',
				text  : get_ag_lang('SORT_TITLE')+':'
			},{
				hidden : false,
				id: 'sortFeedback',
				xtype: 'combo',
				typeAhead: true,
				triggerAction: 'all',
				width: get_ag_lang('SORT_WIDTH'),
				listWidth: get_ag_lang('SORT_LIST_WIDTH'),
				editable: false,
				mode: 'local',
				displayField: 'desc',
				valueField: 'name',
				lazyInit: false,
				value: 'c_entry',
				disabled : true,
				store: new Ext.data.SimpleStore({
					fields: ['name', 'desc'],
					data : [
						['c_entry',    'New Thread'],
						['c_modified', 'Modified'],
						['cs_id',      'Status'],
						['f_id',       'FMAID']
					]
				}),
				listeners: {
					'select': {
						fn:function(combo,record,index){
							var value = combo.getValue();
							var dir = 'asc';
							if(value == 'c_entry' || value == 'c_modified' || value == 'cs_id') dir = 'desc';
							contents_tab_feedback_store.setDefaultSort(value, dir);
							contents_tab_feedback_store.reload();
						},scope:this}
				}
			},
			'-'
		]
	});

	var FeedbackPanel = Ext.extend(Ext.DataView, {
		onClick : function(e){
			var group = e.getTarget('h2', 7, true);
			if(group){
				var targetDom = e.getTarget('a',0);
				if(Ext.isEmpty(targetDom)) group.up('div').toggleClass('collapsed');
			}else {
				var index = -1;
				var target = e.getTarget('div.feedback-comment',1,true);
				if(target){
					var c_id = target.dom.getAttribute('c_id');
					index = contents_tab_feedback_all_store.find('c_id',c_id);
					if(index>=0) openWindowComment(contents_tab_feedback_all_store.getAt(index).copy().data);
				}
				if(index<0){
					var t = e.getTarget('dd', 5, true);
					if(t && !e.getTarget('a', 2)){
						var txpath = t.getAttributeNS('ext', 'txpath');
						var id = t.getAttributeNS('ext', 'id');
						var treeCmp = Ext.getCmp('navigate-tree-panel');
						if(treeCmp){
							Cookies.set('ag_annotation.images.fmaid',id);
//_dump("3926:CALL selectPathCB()");
							treeCmp.selectPath(txpath,'f_id',selectPathCB);
						}
					}else{
						var targetDom = e.getTarget('a',0);
						if(targetDom && targetDom.href != location.protocol + "//" + location.host + location.pathname + location.search + "#"){
							var form = Ext.getDom('comment-link-form');
							if(form){
								form.action = targetDom.href;

								while(form.lastChild){
									form.removeChild(form.lastChild);
								}
								var loc_path = targetDom.href;
								var loc_search = "";
								var loc_hash = "";
								var loc_search_index = loc_path.indexOf("?");
								if(loc_search_index>=0){
									loc_search = loc_path.substr(loc_search_index+1);
									loc_path = loc_path.substr(0,loc_search_index);
									form.action = loc_path;
								}
								var loc_hash_index = loc_search.indexOf("#");
								if(loc_hash_index>=0){
									loc_hash = loc_search.substr(loc_hash_index+1);
									loc_search = loc_search.substr(0,loc_hash_index);
								}

								if(loc_search){
									var loc_search = Ext.urlDecode(loc_search,true);
									for(var key in loc_search){
										var elem = form.ownerDocument.createElement("input");
										elem.setAttribute("type","hidden");
										elem.setAttribute("name",key);
										elem.setAttribute("value",loc_search[key]);
										form.appendChild(elem);
									}
								}
								if(loc_hash) form.setAttribute("action",loc_path + "#" + loc_hash);
								form.submit();
								e.stopEvent();
							}
						}
					}
				}else{
				}
			}
			return FeedbackPanel.superclass.onClick.apply(this, arguments);
		}
	});

	var contents_tab_feedback_dataview = new FeedbackPanel({
		id           : 'contents-tab-feedback-dataview',
		tpl          : feedbackTemplate,
		itemSelector : 'dd',
		overClass    : 'over',
		autoShow     : true,
		autoHeight   : true,
		singleSelect : true,
		multiSelect  : false,
		emptyText    : '<div style="padding:10px;">'+get_ag_lang('MSG_NOT_DATA')+'</div>',
		loadingText  : get_ag_lang('MSG_LOADING_DATA'),
		store        : contents_tab_feedback_store,
		renderTo   : 'contents-tab-feedback-contents-panel-render',
		listeners: {
			'render': {
				fn:function(view){
				}, scope:this},
			'show': {
				fn:function(view){
				}, scope:this},
			'selectionchange': {
				fn:function(view,selections){
					var data = null;
					if(selections && selections.length > 0) data = view.getRecord(selections[0]).data;
					try{var commentDetailEl = contents_tab_feedback_detail_panel.body;}catch(e){}
					if(Ext.isEmpty(commentDetailEl)) return;

				}, scope:this, buffer:0},
			'loadexception'  : {fn:onLoadException, scope:this},
			'beforeselect'   : {fn:function(view){return view.store.getRange().length > 0;}}
		},
		prepareData: formatFeedbackData.createDelegate(this)
	});

	var contents_tab_feedback_detail_panel = new Ext.Panel({
		region      : 'east',
		split       : true,
		autoScroll  : true,
		width       : 220,
		minWidth    : 220,
		maxWidth    : 330
	});

	var contents_tab_feedback_contents_panel = new Ext.Panel({
		id         : 'contents-tab-feedback-contents-panel',
		border     : false,
		bbar       : contents_tab_feedback_pagingBar,
		autoShow   : true,
		autoScroll : true,
		region     : 'center',
		items      : contents_tab_feedback_dataview,
		listeners  : {
			'beforeshow' : function(panel){
			},
			'show' : function(){
				if(!contents_tab_feedback_dataview.rendered){
					setTimeout(function(){ contents_tab_feedback_dataview.render(); },500);
				}else{
					contents_tab_feedback_store.reload({params:{start:0,limit:10}});
				}
			},
			scope : this
		}
	});

	var contents_tab_feedback_panel = new Ext.Panel({
		title    : get_ag_lang('TITLE_REVIEWS'),
		tabTip   : get_ag_lang('TABTIP_REVIEWS'),
		header   : false,
		border   : false,
		autoShow : true,
		id       : 'contents-tab-feedback-panel',
		renderTo : 'contents-tab-feedback-panel-render',
		layout   : 'border',
		items    : contents_tab_feedback_contents_panel,
		listeners  : {
			'beforeshow' : function(panel){
			},
			'show' : function(){
				if(!contents_tab_feedback_dataview.rendered){
					setTimeout(function(){ contents_tab_feedback_dataview.render(); },500);
				}else{
					contents_tab_feedback_store.reload({params:{start:0,limit:10}});
				}
			},
			scope : this
		}
	});

	var contents_tab_home_panel = new Ext.Panel({
		title  : get_ag_lang('TITLE_HOME'),
		tabTip   : get_ag_lang('TABTIP_HOME'),		id     : 'contents-tab-home-panel'
	});

	var bp3s_parts_gridpanel_col_version = {
		dataIndex:'version',
		header: ag_lang.DATA_VERSION,
		id:'version',
		sortable: true,
		hidden:true,
		renderer:bp3s_parts_gridpanel_renderer
	};

	var bp3s_parts_gridpanel_col_icon = {
		dataIndex:'icon',
		header:'',
		id:'icon',
		sortable: false,
		hidden:false,
		renderer:bp3s_parts_gridpanel_icon_renderer,
		width:28,
		resizable:false,
		fixed:true,
		menuDisabled:true,
		hideable: false,
		resizable: false
	};

	var bp3s_parts_gridpanel_col_b_id = {
		dataIndex:'b_id',
		header:get_ag_lang('REP_ID'),
		id:'b_id',
		sortable: true,
		hidden:false,
		renderer:bp3s_parts_gridpanel_renderer,
		width:70,
		resizable:true,
		fixed:!true,
		hideable:true
	};
	var bp3s_parts_gridpanel_col_f_id = {
		dataIndex:'f_id',
		header:get_ag_lang('CDI_NAME'),
		id:'f_id',
		sortable: true,
		hidden:false,
		renderer:bp3s_parts_gridpanel_renderer,
		width:80,
		resizable:true,
		fixed:!true,
		hideable:true
	};
	var bp3s_parts_gridpanel_col_entry = {
		dataIndex:'entry',
		header:get_ag_lang('GRID_TITLE_MODIFIED'),
		id:'entry',
		sortable: true,
		hidden:true,
		renderer:bp3s_parts_gridpanel_date_renderer
	};
	var bp3s_parts_gridpanel_col_organsys = {
		dataIndex:'organsys',
		header:get_ag_lang('GRID_TITLE_ORGANSYS'),
		id:'organsys',
		sortable: true,
		hidden:true,
		renderer:bp3s_parts_gridpanel_renderer
	};

	var bp3s_parts_gridpanel_cols = [
		bp3s_parts_gridpanel_col_icon,
		bp3s_parts_gridpanel_col_b_id,
		bp3s_parts_gridpanel_col_f_id,
		{dataIndex:'tg_id',    header:'Model',                           id:'tg_id',    sortable: true,  hidden:true,  renderer:bp3s_parts_gridpanel_group_renderer, fixed:true},
		{dataIndex:'conv_id',  header:'ConversionID',                    id:'conv_id',  sortable: true,  hidden:true,  renderer:bp3s_parts_gridpanel_renderer, fixed:true},
		{dataIndex:'common_id',header:'UniversalID',                     id:'common_id',sortable: true,  hidden:true, fixed:true, renderer:bp3s_parts_gridpanel_commonid_renderer},
		{dataIndex:'name_e',   header:get_ag_lang('DETAIL_TITLE_NAME_E'),    id:'name_e',   sortable: true,  hidden:false, renderer:bp3s_parts_gridpanel_renderer},
//		{dataIndex:'name_l',   header:'Latina',                          id:'name_l',   sortable: true,  hidden:true, renderer:bp3s_parts_gridpanel_renderer},
//		{dataIndex:'name_j',   header:get_ag_lang('GRID_TITLE_NAME_J'),      id:'name_j',   sortable: true,  hidden:false, renderer:bp3s_parts_gridpanel_renderer},
//		{dataIndex:'name_k',   header:get_ag_lang('GRID_TITLE_NAME_K'),      id:'name_k',   sortable: true,  hidden:false, renderer:bp3s_parts_gridpanel_renderer},
//		bp3s_parts_gridpanel_col_organsys,
		{dataIndex:'xmin',     header:'Xmin(mm)',                        id:'xmin',     sortable: true,  hidden:true,  renderer:bp3s_parts_gridpanel_renderer},
		{dataIndex:'xmax',     header:'Xmax(mm)',                        id:'xmax',     sortable: true,  hidden:true,  renderer:bp3s_parts_gridpanel_renderer},
		{dataIndex:'ymin',     header:'Ymin(mm)',                        id:'ymin',     sortable: true,  hidden:true,  renderer:bp3s_parts_gridpanel_renderer},
		{dataIndex:'ymax',     header:'Ymax(mm)',                        id:'ymax',     sortable: true,  hidden:true,  renderer:bp3s_parts_gridpanel_renderer},
		{dataIndex:'zmin',     header:'Zmin(mm)',                        id:'zmin',     sortable: true,  hidden:true, renderer:bp3s_parts_gridpanel_renderer},
		{dataIndex:'zmax',     header:'Zmax(mm)',                        id:'zmax',     sortable: true,  hidden:true, renderer:bp3s_parts_gridpanel_renderer},
		{dataIndex:'volume',   header:get_ag_lang('GRID_TITLE_VOLUME')+'(cm3)', id:'volume',   sortable: true,  hidden:true,  renderer:bp3s_parts_gridpanel_renderer}
		,bp3s_parts_gridpanel_col_version
		,bp3s_parts_gridpanel_col_entry
		,{dataIndex:'color',          header:'Color',                      sortable:false,  hidden:true, hideable:false}
		,{dataIndex:'opacity',        header:'Opacity',                    sortable:false,  hidden:true, hideable:false}
		,{dataIndex:'representation', header:get_ag_lang('ANATOMO_REP_LABEL'), sortable:false,  hidden:true, hideable:false}
		,{dataIndex:'value',          header:'Value',                      sortable:false,  hidden:true, hideable:false}
		,{dataIndex:'exclude',        header:'Remove',                     sortable:false,  hidden:true, hideable:false}
	];

	var bp3s_parts_gridpanel = new Ext.grid.GridPanel({
		title  : 'Pallet',
		header : false,
		id     : 'control-tab-partslist-panel',
		stateful       : true,
		stateId        : 'control-tab-partslist-panel',
//		columns        : bp3s_parts_gridpanel_cols,
		cm             : new Ext.grid.ColumnModel(bp3s_parts_gridpanel_cols),
		enableDragDrop : true,
		stripeRows     : true,
		region         : 'center',
		border         : false,
		style          : 'border-right-width:1px',
		viewConfig: {
			deferEmptyText: true,
			emptyText: '<div class="bp3d-pallet-empty-message">'+get_ag_lang('GRID_EMPTY_MESSAGE')+'</div>'
		},
		clicksToEdit   : 1,
		selModel : new Ext.grid.RowSelectionModel({
			listeners: {
				'selectionchange' : function(selModel){
					try{
						try{Ext.getCmp('bp3d-pallet-home-button').disable();}catch(e){}
						try{Ext.getCmp('bp3d-pallet-copy-button').disable();}catch(e){}
						Ext.getCmp('bp3d-pallet-delete-button').disable();
						if(selModel.getCount()>0){
							try{Ext.getCmp('bp3d-pallet-copy-button').enable();}catch(e){}
							Ext.getCmp('bp3d-pallet-delete-button').enable();
						}
						if(selModel.getCount()==1){
							var combo;
							var contents_tabs = Ext.getCmp('contents-tab-panel');
							if(contents_tabs.getActiveTab().id == 'contents-tab-bodyparts-panel'){
								combo = Ext.getCmp('bp3d-tree-group-combo');
							}else{
								combo = Ext.getCmp('anatomo-tree-group-combo');
							}
							if(combo.getValue()!=selModel.getSelected().get("tg_id")){
								try{Ext.getCmp('bp3d-pallet-home-button').enable();}catch(e){}
							}
						}
					}catch(e){
						_dump("5602:"+e);
					}
				},
				scope:this
			}
		}),
		store : bp3d_parts_store,
		listeners : {
			"keydown" : function(e){
				if(e.getKey()!=e.DELETE) return;
				var records = bp3s_parts_gridpanel.getSelectionModel().getSelections();
				if(records.length == 0) return;
				var store = bp3s_parts_gridpanel.getStore();
				for(var i=records.length-1;i>=0;i--){
					store.remove(records[i]);
				}
				var count = store.getCount();
				if(count == 0) store.removeAll();
				try{bp3s_parts_gridpanel.getSelectionModel().clearSelections();}catch(e){}
			},
			"celldblclick" : function(grid,rowIndex,cellIndex,e){
				var id = grid.getColumnModel().getColumnId(cellIndex);
				if(id != "tg_id") return;
				var store = grid.getStore();
				var record = store.getAt(rowIndex);
				var tg_id = record.get(id);
				if(Ext.isEmpty(tg_id)) return;
				try{
					var combo;
					var contents_tabs = Ext.getCmp('contents-tab-panel');
					if(contents_tabs.getActiveTab().id == 'contents-tab-bodyparts-panel'){
						combo = Ext.getCmp('bp3d-tree-group-combo');
					}else{
						combo = Ext.getCmp('anatomo-tree-group-combo');
					}
					if(combo.getValue()==tg_id) return;
					var store = combo.getStore();
					var index = store.find('tg_id', new RegExp('^'+tg_id+'$'));
					combo.setValue(tg_id);
					combo.fireEvent('select',combo,store.getAt(index),index);
				}catch(e){
					_dump("5643:"+e);
				}
			},
			"resize" : function(grid,adjWidth,adjHeight,rawWidth,rawHeight){
				try{
					var panel = Ext.getCmp('control-tab-panel');
					var size = panel.getSize();
					if(!size.width || !size.height) return;
					resizeGridPanelColumns(grid);
				}catch(e){}
			},
			"render": function(grid){
				setEmptyGridText();
				try{
					var panel = Ext.getCmp('control-tab-panel');
					var size = panel.getSize();
					if(!size.width || !size.height) return;
					resizeGridPanelColumns(bp3s_parts_gridpanel);
				}catch(e){
					_dump("5662:"+e);
				}
				restoreHiddenGridPanelColumns(grid);

				try{var bp3s_parts_gridpanelDropTargetEl = bp3s_parts_gridpanel.getView().el.dom.childNodes[0].childNodes[1]}catch(e){}
				if(bp3s_parts_gridpanelDropTargetEl){
					var destGridDropTarget = new Ext.dd.DropTarget(bp3s_parts_gridpanelDropTargetEl, {
						ddGroup    : 'partlistDD',
						copy       : false,
						notifyDrop : function(ddSource, e, data){
							var rtn = false;
							if(!isAdditionPartsList()) return rtn;
							if(ddSource.id=="bp3d-contents-dataview" || ddSource.id=="bp3d-contents-list-dataview"){
								function addRow(record, index, allItems) {
									var store = bp3s_parts_gridpanel.getStore();
									var foundItem = -1;
									if(store.getCount()>0){
										foundItem = store.find('b_id', new RegExp('^'+record.data.b_id+'$'));
										if(foundItem>=0){
											var rec = store.getAt(foundItem);
											if(!rec || rec.data.tg_id!=record.data.tg_id) foundItem = -1;
										}
									}
									if(foundItem == -1){
										if(isNoneDataRecord(record)) return; //BP3Dに情報が無いものは追加しない

										var prm_record = ag_param_store.getAt(0);
										bp3s_parts_gridpanel.stopEditing();
										record.beginEdit();
										record.set('conv_id',record.data.b_id);
										if(Ext.isEmpty(record.data.def_color)){
											record.set('color','#'+(isPointDataRecord(record)?prm_record.data.point_color_rgb:prm_record.data.color_rgb));
										}else{
											record.set('color',record.data.def_color);
										}
										record.set('value','');
										record.set('zoom',true);
										record.set('exclude',false);
										record.set('opacity','1.0');
										record.set('representation','surface');
										record.set('point',false);
										record.dirty = false;
										record.endEdit();
										store.add(record);
										store.sort('name', 'ASC');
										rtn = true;
									}
								}
								Ext.each(ddSource.dragData.selections,addRow);
								delete ddSource.dragData.selections;

							}else if(ddSource.dragData && ddSource.dragData.node && ddSource.dragData.node.attributes && ddSource.dragData.node.attributes.f_id){
								var store = bp3s_parts_gridpanel.getStore();
								var foundItem = -1;
								if(store.getCount()>0){
									foundItem = store.find('b_id', new RegExp('^'+ddSource.dragData.node.attributes.attr.f_id+'$'));
									if(foundItem>=0){
										var rec = store.getAt(foundItem);
										if(!rec || rec.data.tg_id!=ddSource.dragData.node.attributes.attr.tg_id) foundItem = -1;
									}
								}
								if(foundItem == -1){
									rtn = true;
									try{
										bp3s_parts_gridpanel.stopEditing();
										var drop_data = {f_ids:[ddSource.dragData.node.attributes.f_id]};
										drop_data.f_ids = Ext.util.JSON.encode(drop_data.f_ids);
										try{drop_data.version = Ext.getCmp('bp3d-version-combo').getValue();}catch(e){delete drop_data.version;}

										if(init_bp3d_params.version) drop_data.version = init_bp3d_params.version;
										if(init_bp3d_params.t_type) drop_data.t_type = init_bp3d_params.t_type;
										if(init_bp3d_params.tgi_id) drop_data.tgi_id = init_bp3d_params.tgi_id;
										if(init_bp3d_params.md_id) drop_data.md_id = init_bp3d_params.md_id;
										if(init_bp3d_params.mv_id) drop_data.mv_id = init_bp3d_params.mv_id;
										if(init_bp3d_params.mr_id) drop_data.mr_id = init_bp3d_params.mr_id;
										if(init_bp3d_params.bul_id) drop_data.bul_id = init_bp3d_params.bul_id;
										if(init_bp3d_params.cb_id) drop_data.cb_id = init_bp3d_params.cb_id;
										if(init_bp3d_params.ci_id) drop_data.ci_id = init_bp3d_params.ci_id;

										Ext.Ajax.request({
											url     : 'get-contents.cgi',
											method  : 'POST',
											params  : Ext.urlEncode(drop_data),
											success : function(conn,response,options){
												try{
													try{var results = Ext.util.JSON.decode(conn.responseText);}catch(e){}
													if(results && results.images && results.images.length>0){
														var prm_record = ag_param_store.getAt(0);
														var newRecord = Ext.data.Record.create(bp3d_parts_store_fields);
														var addrecs = [];
														for(var i=0;i<results.images.length;i++){
															var addrec = new newRecord({});
															addrec.beginEdit();
															for(var fcnt=0;fcnt<addrec.fields.items.length;fcnt++){
																var fname = addrec.fields.items[fcnt].name;
																var ftype = addrec.fields.items[fcnt].type;
																var fdefaultValue = addrec.fields.items[fcnt].defaultValue;
																if(Ext.isEmpty(results.images[i][fname])){
																	addrec.set(fname,fdefaultValue);
																}else{
																	addrec.set(fname,results.images[i][fname]);
																}
															}
															if((!addrec.data.b_id || addrec.data.b_id == "") && record.data.partslist[i].f_id) addrec.data.b_id = record.data.partslist[i].f_id;
															if((!addrec.data.entry || addrec.data.entry == "") && record.data.partslist[i].lastmod) addrec.data.entry = record.data.partslist[i].lastmod;
															if(addrec.data.entry.match(/^[0-9]+$/)){
																addrec.data.entry = Date.parseDate(parseInt(addrec.data.entry), "U");
															}else if(addrec.data.entry.match(/^[0-9]{4}\-[0-9]{2}\-[0-9]{2}T/)){
																if(addrec.data.entry.match(/^[0-9]{4}\-[0-9]{2}\-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}$/)) addrec.data.entry+='Z';
																addrec.data.entry = Date.parseDate(addrec.data.entry, "c");
															}
															addrec.set('conv_id',addrec.data.b_id);
															addrec.set('color','#'+prm_record.data.color_rgb);
															addrec.set('value','');
															addrec.set('zoom',true);
															addrec.set('exclude',false);
															addrec.set('opacity','1.0');
															addrec.set('representation','surface');
															addrec.set('point',false);
															addrec.dirty = false;
															addrec.endEdit();
															store.add(addrec);
														}
													}
												}catch(e){}
											},
											failure : function(conn,response,options){
											}
										});
									}catch(e){
									}
								}
							}
							return rtn;
						}
					});
				}
			},
			scope:this
		},
		keys : {
			key: 'a',
			ctrl: true,
			stopEvent: true,
			handler: function() {
				bp3s_parts_gridpanel.getSelectionModel().selectAll();
			}
		}
	});
	bp3s_parts_gridpanel.getColumnModel().on({
		'hiddenchange' : function(column,columnIndex,hidden){
			resizeGridPanelColumns(bp3s_parts_gridpanel);
			saveHiddenGridPanelColumns(bp3s_parts_gridpanel);
		},
		scope: this,
		delay: 100
	});

	var control_tabs = new Ext.Panel({
		id        : 'control-tab-panel',
		region    : 'center',
		border    : false,
		layout    : 'card',
		activeItem : 0,
		deferredRender : true,
		frame     : false,
		items:[bp3s_parts_gridpanel],
		listeners: {
			'render': function(panel){
			},
			scope:this
		}
	});

	var bp3d_toolbox_panel = new Ext.Panel({
		id        : 'bp3d-toolbox-panel',
		region    : 'east',
		border    : false,
		bodyStyle : 'border-right-width:1px;',
		style     : 'padding:0px;',
		baseCls   : 'x-plain x-toolbar x-small-editor',
		width     : 28,
		minWidth  : 28,
		maxWidth  : 28,
		split     : false,
		header : true,
		tools  : [{
			id : 'down',
			handler : function(event, toolEl, panel){
				var cmp = Ext.getCmp('south-panel');
				if(cmp) cmp.toggleCollapse(true);
			}
		}],
		items : [
			{
				xtype : 'tbbutton',
				id : 'bp3d-pallet-select-button',
				tooltip : 'Select All',
				iconCls  : 'pallet_select',
				listeners : {
					'click' : {
						fn : function (button, e) {
							var grid = Ext.getCmp('control-tab-partslist-panel');
							if(grid && grid.rendered) grid.getSelectionModel().selectAll();
						},
						scope: this
					}
				}
			},
			{
				xtype : 'tbbutton',
				id : 'bp3d-pallet-unselect-button',
				tooltip : 'Unselect All',
				iconCls  : 'pallet_unselect',
				listeners : {
					'click' : {
						fn : function (button, e) {
							var grid = Ext.getCmp('control-tab-partslist-panel');
							if(grid && grid.rendered) grid.getSelectionModel().clearSelections();
						},
						scope: this
					}
				}
			},
			{
				xtype : 'tbbutton',
				id : 'bp3d-pallet-copy-button',
				tooltip   : get_ag_lang('COPY_TITLE')+' Selected',
				iconCls  : 'pallet_copy',
				disabled : true,
				listeners : {
					'click' : {
						fn : function (button, e) {
							var grid = Ext.getCmp('control-tab-partslist-panel');
							if(grid && grid.rendered){
								copyList(grid);
							}
						},
						scope: this
					}
				}
			},
			{
				xtype : 'tbbutton',
				id : 'bp3d-pallet-paste-button',
				tooltip   : get_ag_lang('PASTE_TITLE'),
				iconCls  : 'pallet_paste',
				listeners : {
					'click' : {
						fn : function (button, e) {
							var grid = Ext.getCmp('control-tab-partslist-panel');
							if(grid && grid.rendered){
								pasteList(grid);
							}
						},
						scope: this
					}
				}
			},
			{
				xtype : 'tbbutton',
				id : 'bp3d-pallet-delete-button',
				tooltip   : 'Delete Selected',
				iconCls  : 'pallet_delete',
				disabled : true,
				listeners : {
					'click' : {
						fn : function (button, e) {
							var grid = Ext.getCmp('control-tab-partslist-panel');
							if(grid && grid.rendered){
								var store = grid.getStore();
								var records = grid.getSelectionModel().getSelections();
								for(var i=records.length-1;i>=0;i--){
									store.remove(records[i]);
								}
							}
						},
						scope: this
					}
				}
			}
		],
		listeners : {
			show : function(panel){
				panel.doLayout();
			},
			afterlayout : function(panel,layout){
				afterLayout(panel);
			},
			render: function(comp){
				Ext.getCmp('contents-tab-panel').on({
					tabchange: {
						fn: function(tabpanel,tab){
							if(tab.id != 'contents-tab-bodyparts-panel') return;
							comp.setHeight(comp.initialConfig.width);
							comp.findParentByType('panel').doLayout();
						},
						buffer: 250
					}
				});
			},
			scope:this
		}
	});

	var south_panel = new Ext.Panel({
		id          : 'south-panel',
		region      : 'south',
		split       : true,
		height      : 150,
		minHeight   : 150,
		collapsible : true,
		border      : true,
		layout : 'border',
		items : [
			{
				id          : 'south-panel-west',
				region    : 'west',
				layout : 'border',
				width     : 76,
				minWidth  : 76,
				maxWidth  : 76,
				border    : false,
				items : [{
					id: 'south-panel-west-center',
					region: 'center',
					border: false,
					bodyStyle: 'background:transparent;border-right-width:1px;',
					html: '<img src="css/3.png" width=44 height=44>'
				},bp3d_toolbox_panel],
				listeners: {
					render: function(comp){
						Ext.getCmp('contents-tab-panel').on({
							tabchange: {
								fn: function(tabpanel,tab){
									if(tab.id != 'contents-tab-bodyparts-panel') return;
									comp.setWidth(comp.initialConfig.width);
									comp.findParentByType('panel').doLayout();
								},
								buffer: 250
							}
						});
					}
				}
			},
			control_tabs,
			{
				id       : 'goto-ag-panel',
				region   : 'east',
				html     : get_ag_lang('GOTO_AG'),
				border   : false,
				width    : get_ag_lang('GOTO_AG_WIDTH'),
				minWidth : get_ag_lang('GOTO_AG_WIDTH'),
				maxWidth : get_ag_lang('GOTO_AG_WIDTH'),
				style    : 'font-size:11px;padding:0;',
				bodyStyle: 'background:transparent;',
				split    : false,
				collapsible : false,
				collapseFirst : false,
				listeners : {
					'show' : function(panel){
						panel.doLayout();
					},
					'afterlayout' : function(panel,layout){
						afterLayout(panel);
					},
					render: function(comp){
						$('a.goto-ag-btn').live('click',function(){
							Ext.getCmp('contents-tab-panel').activate(Ext.getCmp('contents-tab-anatomography-panel'));
							return false;
						});

						Ext.getCmp('contents-tab-panel').on({
							tabchange: {
								fn: function(tabpanel,tab){
									if(tab.id != 'contents-tab-bodyparts-panel') return;
									comp.setWidth(comp.initialConfig.width);
									comp.findParentByType('panel').doLayout();
								},
								buffer: 250
							}
						});

					},
					scope:this
				}
			}
		],
		listeners : {
			'show' : function(panel){
				panel.doLayout();
			},
			'afterlayout' : function(panel,layout){
				afterLayout(Ext.getCmp('goto-ag-panel'));
				afterLayout(panel);
			},
			scope:this
		}
	});

	var contents_tab_bodyparts_panel = new Ext.Panel({
		title  : get_ag_lang('TITLE_BP3D'),
		tabTip   : get_ag_lang('TABTIP_BP3D'),		id     : 'contents-tab-bodyparts-panel',
		layout : 'border',
		items  : [navigate_panel,contents_panel,south_panel],
		listeners: {
			'show' : function(panel){
				panel.doLayout();
			},
			scope : this
		}
	});
	var contents_tabs = new Ext.TabPanel({
//	var contents_tabs = new Ext.Panel({
//		layout:'card',
		id        : 'contents-tab-panel',
		region    : 'center',
		border    : true,
		tabPosition : 'top',
		frame     : false,
		layoutOnTabChange : true,
		deferredRender : true,
		activeTab : 0,
		items : [contents_tab_bodyparts_panel,anatomography_panel],
		listeners: {
			"render" : function(tabpanel){
				var tabHomeDom = Ext.get('contents-tab-panel__contents-tab-home-panel');
				var tabBodypartsDom = Ext.get('contents-tab-panel__contents-tab-bodyparts-panel');
				if(tabBodypartsDom){
					tabBodypartsDom.on({
						'click' : function(){
							var tabBodypartsDom = Ext.get('contents-tab-panel__contents-tab-bodyparts-panel');
							if(!tabBodypartsDom.hasClass('x-tab-strip-active')){
								var tabHomeDom = Ext.get('contents-tab-panel__contents-tab-home-panel');
								tabHomeDom.removeClass('x-tab-strip-active');
								tabBodypartsDom.addClass('x-tab-strip-active');
								Ext.getCmp('header-panel').layout.setActiveItem(1);
								control_tabs.layout.activeItem.syncSize();
								control_tabs.layout.activeItem.fireEvent('resize',control_tabs.layout.activeItem);
							}
							var tree_panel = Ext.getCmp("navigate-tree-panel");
							var rootNode = tree_panel.getRootNode();
							var selNode = tree_panel.getSelectionModel().getSelectedNode();
							if(rootNode == selNode){
								var path = Cookies.get('ag_annotation.images.path','');
								if(path){
//_dump("4115:CALL selectPathCB()");
									var path = Cookies.get('ag_annotation.images.path','');
									tree_panel.selectPath(Ext.isEmpty(path)?'':('/root/'+ path),'f_id',selectPathCB);
								}else{
									rootNode.expand(false,false,function(node){
//_dump("4118:CALL selectPathCB()");
									tree_panel.selectPath(rootNode.firstChild.getPath('f_id'),'f_id',selectPathCB);
									});
								}
							}
						},
						scope : this
					});
				}

			},
			"beforetabchange" : function(tabpanel,newTab,currentTab){

				if(newTab.id == 'contents-tab-home-panel'){
					contents_tab_prev = newTab;
					setTimeout(function(){ contents_tabs.setActiveTab('contents-tab-bodyparts-panel'); },0);
					var tabHomeDom = Ext.get('contents-tab-panel__contents-tab-home-panel');
					var tabBodypartsDom = Ext.get('contents-tab-panel__contents-tab-bodyparts-panel');
					if(tabHomeDom && tabBodypartsDom){
						tabHomeDom.addClass('x-tab-strip-active');
						tabBodypartsDom.removeClass('x-tab-strip-active');
					}
					return false;
				}else{
					if(contents_tab_prev && contents_tab_prev.id == 'contents-tab-home-panel'){

						Ext.getCmp('header-panel').layout.setActiveItem(0);

						var tree_panel = Ext.getCmp("navigate-tree-panel");
						var selNode = tree_panel.getSelectionModel().getSelectedNode();
						var rootNode = tree_panel.getRootNode();
						if(selNode != rootNode){
							tree_panel.getSelectionModel().select(rootNode);
//_dump("4150:CALL selectPathCB()");
							selectPathCB(true,rootNode);
						}

						if(newTab.id == 'contents-tab-bodyparts-panel' && newTab == currentTab) contents_tab_prev = null;
						Ext.getCmp('south-panel').hide();
					}else{
						var tabHomeDom = Ext.get('contents-tab-panel__contents-tab-home-panel');
						if(tabHomeDom && tabHomeDom.hasClass('x-tab-strip-active')) tabHomeDom.removeClass('x-tab-strip-active');
						if(newTab.id == 'contents-tab-bodyparts-panel'){
							Ext.getCmp('south-panel').show();
						}else{
							Ext.getCmp('south-panel').hide();
						}
					}
					setTimeout(function(){
						var viewport = Ext.getCmp('viewport');
						if(viewport && viewport.rendered) viewport.doLayout();
					},0);
				}
				return true;

			},
			'tabchange' : function(tabpanel,tab){

				var tab_id = tab.id;
				if(contents_tab_prev){
					tab_id = contents_tab_prev.id;
					contents_tab_prev = null;
				}

//_dump("contents_tabs.tabchange():tab_id=["+tab_id+"]");

				if(tab_id == 'contents-tab-anatomography-panel'){
					gDispAnatomographyPanel = true;
				}else if(tab_id == 'contents-tab-bodyparts-panel'){

					if(bp3d_parts_store.getCount()==0){
						gDispAnatomographyPanel = false;
						Ext.getCmp('bp3d-home-group-btn').disable();
					}
					try{
						control_tabs.layout.setActiveItem('control-tab-partslist-panel');
						control_tabs.layout.activeItem.fireEvent('resize',control_tabs.layout.activeItem);
					}catch(e){}

					var tree_panel = Ext.getCmp("navigate-tree-panel");
					var selNode = tree_panel.getSelectionModel().getSelectedNode();
					var rootNode = tree_panel.getRootNode();
					if(selNode == rootNode){
						rootNode.expand(false,false,function(){
//_dump("4255:CALL selectPathCB()");
							try{tree_panel.selectPath(rootNode.firstChild.getPath('f_id'),'f_id',selectPathCB);}catch(e){}
						});
					}

				}else if(tab_id == 'contents-tab-home-panel'){

					var tree_panel = Ext.getCmp("navigate-tree-panel");
					var selNode = tree_panel.getSelectionModel().getSelectedNode();
					var rootNode = tree_panel.getRootNode();
					if(selNode != rootNode){
						tree_panel.getSelectionModel().select(rootNode);
//_dump("4266:CALL selectPathCB()");
						selectPathCB(true,rootNode);
					}
					var tabHomeDom = Ext.get('contents-tab-panel__contents-tab-home-panel');
					var tabBodypartsDom = Ext.get('contents-tab-panel__contents-tab-bodyparts-panel');
					if(tabHomeDom && tabBodypartsDom){
						var classname = 'x-tab-strip-active';
						if(!tabHomeDom.hasClass(classname)) tabHomeDom.addClass(classname);
						if(tabBodypartsDom.hasClass(classname)) tabBodypartsDom.removeClass(classname);
					}
				}else{
				}


				if(tab_id == 'contents-tab-bodyparts-panel'){
					Ext.getCmp('header-panel').layout.setActiveItem(1);
				}else if(tab_id == 'contents-tab-anatomography-panel'){
					Ext.getCmp('header-panel').layout.setActiveItem(2);
					tabChange(tabpanel,tab);
				}else if(tab_id == 'contents-tab-feedback-panel'){
					Ext.getCmp('header-panel').layout.setActiveItem(3);
				}else if(tab_id == 'contents-tab-information-panel'){
					Ext.getCmp('header-panel').layout.setActiveItem(4);
				}else{
					Ext.getCmp('header-panel').layout.setActiveItem(0);
				}

				//keymapの有効・無効
				if(window.agKeyMap){
					if(tab_id == 'contents-tab-anatomography-panel'){
						window.agKeyMap.enable();
					}else{
						window.agKeyMap.disable();
					}
				}

			},
			'resize' : function(tabpanel,adjWidth,adjHeight,rawWidth,rawHeight){
				tabpanel.doLayout();
			},
			scope:this
		}
	});

	tbarBodypartsPrint = function(){
		var selRec = null;
		var oSelNode = null;
		var treeCmp = Ext.getCmp('navigate-tree-panel');
		if(treeCmp) oSelNode = treeCmp.getSelectionModel().getSelectedNode();
		if(oSelNode && oSelNode.id == 'root'){
			selRec = oSelNode.attributes.attr;
		}else{
			var dataview = getViewImages();
			if(!dataview) return;
			var selRecs = dataview.getSelectedRecords();
			if(selRecs && selRecs.length>0){
				selRec = selRecs[0].data;
			}else if(oSelNode){
				selRec = oSelNode.attributes.attr;
			}
		}

		var params = {
			parent : (Ext.isEmpty(gParams.parent)?'':gParams.parent),
			lng    : gParams.lng
		};
		for(var key in selRec){
			params[key] = selRec[key];
		}

		w = window.open(
			"print-bp3d.cgi?" + Ext.urlEncode(params),
			"_blank",
			"menubar=yes,titlebar=no,toolbar=yes,status=no,resizable=yes,dependent=yes,alwaysRaised=yes,scrollbars=yes,width=300,height=350");
	};

	tbarBodypartsSendMail = function(){
		location.href = 'mailto:?body=' + encodeURIComponent(getBP3DLinkURL());
	};

	tbarBodypartsSendReview = function(){
		openWindowComment();
	};

	getBP3DLinkURL = function(){
		var selRec;
		var oSelNode = null;
		var treeCmp = Ext.getCmp('navigate-tree-panel');
		if(treeCmp) oSelNode = treeCmp.getSelectionModel().getSelectedNode();
		if(oSelNode && oSelNode.id == 'root'){
			selRec = oSelNode.attributes.attr;
		}else{
			var dataview = getViewImages();
			if(!dataview) return;
			var selRecs = dataview.getSelectedRecords();
			if(selRecs && selRecs.length>0){
				selRec = selRecs[0].data;
			}else if(oSelNode){
				selRec = oSelNode.attributes.attr;
			}
		}

		var param = 'i=';
		if(selRec.b_id){
			param += selRec.b_id;
		}else{
			param += selRec.f_id;
			try{var treeType = Ext.getCmp('bp3d-tree-type-combo').getValue();}catch(e){treeType=undefined;}
			if(!Ext.isEmpty(treeType)){
				if(treeType == 1){
					param += '&t=Conventional';
				}else if(treeType == 3){
					param += '&t=is_a';
				}else if(treeType == 4){
					param += '&t=PartOf';
				}
			}
			if(oSelNode){
				if(oSelNode.id == 'search'){
					param += '&q=' + encodeURIComponent(oSelNode.text.replace(/^search:\[(.+)?\]/i,"$1"));
				}else{
					param += '&p=' + oSelNode.getPath('f_id').replace(/^\/root/,"");
				}
			}
			try{var bp3d_version = Ext.getCmp('bp3d-version-combo').getValue();}catch(e){bp3d_version='5.2';}
			param += '&v=' + bp3d_version;

			var bp3d_tree_group_value = init_tree_group;
			var bp3d_tree_group = Ext.getCmp('bp3d-tree-group-combo');
			if(bp3d_tree_group && bp3d_tree_group.rendered) bp3d_tree_group_value = bp3d_tree_group.getValue();
			param += "&m=" + encodeURIComponent(tg2model[bp3d_tree_group_value].tg_model);
		}
		return 'http://lifesciencedb.jp/bp3d/?' + param;
	};

	tbarBodypartsLink = function(){

		Ext.Msg.show({
			title:'Link',
			buttons: Ext.Msg.OK,
			width : 400,
			modal : true,
			multiline : true,
			prompt : true,
			closable : true,
			value : getBP3DLinkURL()
		});
	};

	tbarAnatomoPrintRotatingImage = function(w,h){
		setTimeout(function(){
			var param = Ext.urlDecode(makeAnatomoPrm(),true);
			param.iw = w;
			param.ih = h;
			if(!Ext.isEmpty(param.ordg)) param.ordg = 0;
			var urlStr = cgipath.animation + '?' + Ext.urlEncode(param);
			window.open(urlStr, "_blank", "titlebar=no,toolbar=yes,status=no,menubar=yes");
		},100);
	};

	tbarAnatomoSendReview = function(){
		var comment_form = new Ext.form.FormPanel({
			baseCls : 'x-plain',
			labelWidth : 55,
			url : 'put-anatomo_comment.cgi',
			defaultType : 'textfield',
			items : [{
				xtype      : 'hidden',
				name       : 'parent',
				value      : ''
			},{
				xtype      : 'hidden',
				name       : 'fma_id',
				value      : getFMAID_CSVstr()
			},{
				xtype      : 'hidden',
				name       : 'tp_ap',
				value      : encodeURIComponent(makeAnatomoPrm())
			},{
				fieldLabel : 'Name',
				id         : 'comment_form_author',
				name       : 'author',
				anchor     : '100%',
				value      : '',
				allowBlank : false,
				selectOnFocus : true
			},{
				fieldLabel : 'e-mail',
				id         : 'comment_form_email',
				name       : 'email',
				anchor     : '100%',
				selectOnFocus : true
			},{
				fieldLabel : 'Title',
				id         : 'comment_form_title',
				name       : 'title',
				anchor     : '100%',
				selectOnFocus : true
			},{
				fieldLabel : 'Password',
				id         : 'comment_form_passwd',
				name       : 'passwd',
				anchor     : '50%',
				allowBlank : false,
				selectOnFocus : true
			},{
				xtype     : 'textarea',
				hideLabel : true,
				id        : 'comment_form_comment',
				name      : 'comment',
				anchor    : '100% -102',
				allowBlank : false,
				selectOnFocus : true
			}]
		});
		var comment_window = new Ext.Window({
			title       : get_ag_lang('COMMENT_WIN_TITLE'),
			width       : 500,
			height      : 300,
			minWidth    : 300,
			minHeight   : 250,
			layout      : 'fit',
			plain       : true,
			bodyStyle   :'padding:5px;',
			buttonAlign :'right',
			items       : comment_form,
			modal       : true,
			buttons : [{
				text    : get_ag_lang('COMMENT_WIN_TITLE_SEND'),
				handler : function(){
//												if(comment_form.getForm().isValid()){
//													comment_form.getForm().submit({
//														url     : 'put-anatomo_comment.cgi',
//														waitMsg : get_ag_lang('COMMENT_WIN_WAITMSG')+'...',
//														success : function(fp, o) {
//															comment_window.close();
//														}
//													});
//												}

					if(comment_form.getForm().isValid()){
						var tgi_version = "";
						var t_type = "";
						try{tgi_version=Ext.getCmp('anatomo-version-combo').getValue();}catch(e){}
						try{t_type=Ext.getCmp('bp3d-tree-type-combo-ag').getValue();}catch(e){}

//						var urlStr = 'put-anatomo_comment.cgi?tp_ap=';
						var urlStr = 'tp_ap=';
						urlStr = urlStr + encodeURIComponent(makeAnatomoPrm());
						urlStr = urlStr.replace(/\|/g, "@_@_@_@_@");
						urlStr = urlStr + '&fma_id=' + getFMAID_CSVstr();
						urlStr = urlStr + '&email=' + encodeURIComponent(comment_form.getComponent("comment_form_email").getValue());
						urlStr = urlStr + '&title=' + encodeURIComponent(comment_form.getComponent("comment_form_title").getValue());
						urlStr = urlStr + '&comment=' + encodeURIComponent(comment_form.getComponent("comment_form_comment").getValue());
						urlStr = urlStr + '&author=' + encodeURIComponent(comment_form.getComponent("comment_form_author").getValue());
						urlStr = urlStr + '&version=' + encodeURIComponent(tgi_version);
						urlStr = urlStr + '&type=' + encodeURIComponent(t_type);
						if(comment_form.getComponent("comment_form_passwd")){
							urlStr = urlStr + '&passwd=' + encodeURIComponent(comment_form.getComponent("comment_form_passwd").getValue());
						}
						urlStr = urlStr + '&parent=' + encodeURIComponent('');

						Ext.Ajax.request({
							url     : 'put-anatomo_comment.cgi',
							method  : 'POST',
							params  : makeAnatomoPrm(),
							success : function (response, options) {
								try{var results = Ext.util.JSON.decode(response.responseText);}catch(e){}
								if(!results) results = {success:false,msg:""};
								if(!results.msg) results.msg = "";
								if(results.success){
									var contentsPanel = Ext.getCmp('contents-tab-panel');
									contentsPanel.setActiveTab('contents-tab-feedback-panel');
									comment_window.close();
								}else{
									Ext.MessageBox.show({
										title   : get_ag_lang('COMMENT_TITLE_PLUS'),
										msg     : get_ag_lang('COMMENT_WIN_ERRMSG')+' [ '+results.msg+' ]',
										buttons : Ext.MessageBox.OK,
										icon    : Ext.MessageBox.ERROR
									});
								}
							},
							failure: function (response, options) {
//_dump("failure!!");
								Ext.MessageBox.show({
									title   : get_ag_lang('COMMENT_TITLE_PLUS'),
									msg     : get_ag_lang('COMMENT_WIN_ERRMSG'),
									buttons : Ext.MessageBox.OK,
									icon    : Ext.MessageBox.ERROR
								});
							}
						});
					}
				}
			},{
				text: get_ag_lang('COMMENT_WIN_TITLE_CANCEL'),
				handler : function(){
					comment_window.close();
				}
			}]
		});
		comment_window.show();
	};

	var version_store = new Ext.data.JsonStore({
		url:'get-version.cgi',
		totalProperty : 'total',
		root: 'records',
		fields: [
			'tg_id',
			'tgi_id',
			'tgi_version',
			'tgi_renderer_version',
			'tgi_name',
			'tgi_comment',
			'tgi_objects_set',
			'tgi_tree_version',
			'tgi_part_of_relation',
			{name:'tgi_part_of_relation_bp3d',convert:function(v,rec){if(rec.tgi_tree_version.match(/inference/)){return ag_lang.PART_OF_RELATION_BP3D_MESSAGE}else{return ''}}},
			{name:'md_id',type:'int'},
			{name:'mv_id',type:'int'},
			{name:'mr_id',type:'int', defaultValue:1},
			{name:'ci_id',type:'int'},
			{name:'cb_id',type:'int'}
		],
		baseParams : {
			parent : (Ext.isEmpty(gParams.parent)?'':gParams.parent),
			lng    : gParams.lng
		},
		listeners: {
			'beforeload' : function(self,options){
				self.baseParams = self.baseParams || {};
				delete self.baseParams.tg_id;
				try{self.baseParams.tg_id = Ext.getCmp('bp3d-tree-group-combo').getValue();}catch(e){}
				var cmp = Ext.getCmp('bp3d-version-combo');
				if(cmp && cmp.rendered) cmp.disable();
			},
			'load' : function(self,records,options){
				var cmp = Ext.getCmp('bp3d-version-combo');
				if(cmp && cmp.rendered){
					if(records.length>0){
						cmp.enable();
					}
				}
			},
			scope:this
		}
	});

	click_error_report_button = function(params){
		var src = 'api-error-twitter-store.cgi';
		window.open(
			src,
			"_blank",
			"menubar=yes,titlebar=no,toolbar=yes,status=no,resizable=yes,dependent=yes,alwaysRaised=yes,scrollbars=yes,width=800,height=600"
		);
	};

	click_objfiles_list_button = function(params){
		var version = Ext.getCmp('bp3d-version-combo').getValue();
		var treeCombo = Ext.getCmp('bp3d-tree-type-combo');
		var treeStore = treeCombo.getStore();
		var idx = treeStore.find('t_type',new RegExp('^'+treeCombo.getValue()+'$'),0,false,true);
		var rec = treeStore.getAt(idx);
		var tree = (rec ? rec.get('bul_abbr') : null);
		params = Ext.apply({},params||{},{version:version,tree:tree,cmd:'upload-all-list'});
		var src = 'get-info.cgi?'+Ext.urlEncode(params);
		window.open(
			src,
			"_blank",
			"menubar=yes,titlebar=no,toolbar=yes,status=no,resizable=yes,dependent=yes,alwaysRaised=yes,scrollbars=yes,width=800,height=600"
		);
	};

	click_concept2objfiles_list_button = function(params){
		var version = Ext.getCmp('bp3d-version-combo').getValue();
		params = Ext.apply({},params||{},{version:version,cmd:'concept-objfiles-list'});
		var src = 'get-info.cgi?'+Ext.urlEncode(params);
//		window.open(
//			src,
//			"_blank",
//			"menubar=yes,titlebar=no,toolbar=yes,status=no,resizable=yes,dependent=yes,alwaysRaised=yes,scrollbars=yes,width=800,height=600"
//		);

		window.location.href=src;

	};

	click_information_button = function(params){
		_dump(params);
		var contentsPanel = Ext.getCmp("contents-tab-panel");
		if(contentsPanel && contentsPanel.rendered){
			var cmp = Ext.getCmp('contents-tab-information-panel');
			if(Ext.isEmpty(cmp)){
				var src = get_ag_lang('INFORMATION_URL');
				if(!Ext.isEmpty(params)){
					if(params.hash){
						src += params.hash;
					}else if(params.url){
						src = params.url;
					}
				}
				_dump("src=["+src+"]");
				window.open(
					src,
					"_blank",
					"menubar=yes,titlebar=no,toolbar=yes,status=no,resizable=yes,dependent=yes,alwaysRaised=yes,scrollbars=yes,width=800,height=600"
				);

			}else{
				if(!Ext.isEmpty(params)){
					cmp.on({
						show: {
							fn:function(panel){
								if(panel.getXType()=='tabpanel'){
									panel.setActiveTab(0);
									var at = panel.getActiveTab();
									at.load({
										url: 'info.html',
										nocache: true,
										callback: function(el,success,response,options){
											if(!success) return;
											var src = $(el.dom).find('iframe').attr('src');
											if(src){
												if(params.hash){
													src+=params.hash;
												}else if(params.url){
													src = params.url;
												}
												$(el.dom).find('iframe').attr({src:src});
											}
										}
									});
								}else if(panel.getXType()=='panel'){
									panel.getLayout().setActiveItem(0);
									var at = panel.activeItem;
									at.load({
										url: 'info.html',
										nocache: true,
										callback: function(el,success,response,options){
											if(!success) return;
											var src = $(el.dom).find('iframe').attr('src');
											if(src){
												if(params.hash){
													src+=params.hash;
												}else if(params.url){
													src = params.url;
												}
												$(el.dom).find('iframe').attr({src:src});
											}
										}
									});
								}
							},
							buffer:250,
							single:true
						}
					});
				}


				if(contentsPanel.getXType()=='tabpanel'){
					contentsPanel.setActiveTab('contents-tab-information-panel');
				}else if(contentsPanel.getXType()=='panel'){
					contentsPanel.getLayout().setActiveItem('contents-tab-information-panel');
				}

				var cb = function(){
					var cmp = Ext.getCmp('contents-tab-information-panel');
					var body = $(cmp.body.dom);
					var iframe = body.find('iframe');
					_dump(iframe);
					var src = body.find('iframe').attr('src');
					_dump("src=["+src+"]");
					if(src){
						if(src.indexOf('#')>0) src = src.substring(0,src.indexOf('#'));
						body.find('iframe').attr({src:src});
						if(params.hash){
							src+=params.hash;
						}else if(params.url){
							src = params.url;
						}
						_dump("src=["+src+"]");
						body.find('iframe').attr({src:src});
					}
				};
			}
		}
		return false;
	};

	click_open_url = function(window_title){
		var url = glb_anatomo_editor_url;
		var open_url_form = new Ext.form.FormPanel({
			plain       : true,
			border : false,
			labelAlign  : 'top',
			baseCls     : 'x-plain',
			defaults    : {
				selectOnFocus : true
			},
			items  : [{
				xtype      : 'textfield',
				id         : 'ag-open-url-window-form-url',
				name       : 'url',
				fieldLabel : 'http request',
				value      : url,
				allowBlank : false,
				anchor     : '100%'
			}]
		});

		var open_url_window = new Ext.Window({
			title       : window_title,
			width       : 500,
			height      : 120,
			minWidth    : 500,
			minHeight   : 120,
			layout      : 'fit',
			plain       : true,
			bodyStyle   :'padding:5px;',
			buttonAlign :'right',
			items       : open_url_form,
			modal       : true,
			buttons : [{
				text    : 'Open',
				handler : function(){
					if(open_url_form.getForm().isValid()){
						var url = Ext.getCmp('ag-open-url-window-form-url').getValue();
						url = url.replace(/\r|\n/g,"").trim();
						Ext.getDom('ag-open-url-form-url').value = url;
						Ext.getDom('ag-open-url-form').submit();
						open_url_window.close();
					}
				}
			},{
				text    : 'Cancel',
				handler : function(){
					open_url_window.close();
				}
			}],
			listeners : {
				"render" : function(win){
					if(Ext.isEmpty(win.loadMask) || typeof win.loadMask == 'boolean') win.loadMask = new Ext.LoadMask(win.body,{removeMask:false});
				},
				"show" : function(win){
					win.loadMask.show();
					Ext.Ajax.request({
						url     : 'get-convert-url.cgi',
						method  : 'POST',
						params  : Ext.urlEncode({url:url}),
						success : function(conn,response,options){
							win.loadMask.hide();
							try{var results = Ext.util.JSON.decode(conn.responseText);}catch(e){}
							if(Ext.isEmpty(results) || Ext.isEmpty(results.status_code) || results.status_code!=200){
								var msg = get_ag_lang('CONVERT_URL_ERRMSG');
								if(results && results.status_code) msg += ' [ '+ results.status_code +' ]';
								Ext.MessageBox.show({
									title   : window_title,
									msg     : msg,
									buttons : Ext.MessageBox.OK,
									icon    : Ext.MessageBox.ERROR
								});
								return;
							}
							if(Ext.isEmpty(results.data)){
								var msg = get_ag_lang('CONVERT_URL_ERRMSG');
								if(results && results.status_code) msg += ' [ no data ]';
								Ext.MessageBox.show({
									title   : window_title,
									msg     : msg,
									buttons : Ext.MessageBox.OK,
									icon    : Ext.MessageBox.ERROR
								});
								return;
							}
							if(Ext.isEmpty(results.data.url)){//shortURLに変換
								return;
							}
							Ext.getCmp('ag-open-url-window-form-url').setValue(results.data.url);
						},
						failure : function(conn,response,options){
							win.loadMask.hide();
							Ext.MessageBox.show({
								title   : window_title,
								msg     : get_ag_lang('CONVERT_URL_ERRMSG'),
								buttons : Ext.MessageBox.OK,
								icon    : Ext.MessageBox.ERROR
							});
						}
					});
				}
			}
		});
		open_url_window.show();
	};

	update_open_url2text = function(long_url,aCB){
		var transaction_id = Ext.Ajax.request({
			url     : 'get-convert-url.cgi',
			method  : 'POST',
			params  : Ext.urlEncode({url:long_url}),
			success : function(conn,response,options){

				try{var results = Ext.util.JSON.decode(conn.responseText);}catch(e){}
				if(Ext.isEmpty(results) || Ext.isEmpty(results.status_code) || results.status_code!=200){
					var msg = get_ag_lang('CONVERT_URL_ERRMSG');
					if(results && results.status_code) msg += ' [ '+ results.status_code +' ]';
					for(var key in results){
						_dump("1:["+key+"]=["+results[key]+"]");
					}
					Ext.MessageBox.show({
						title   : window_title,
						msg     : msg,
						buttons : Ext.MessageBox.OK,
						icon    : Ext.MessageBox.ERROR
					});
					return;
				}
				if(Ext.isEmpty(results.data)){
					var msg = get_ag_lang('CONVERT_URL_ERRMSG');
					if(results && results.status_code) msg += ' [ no data ]';
					Ext.MessageBox.show({
						title   : window_title,
						msg     : msg,
						buttons : Ext.MessageBox.OK,
						icon    : Ext.MessageBox.ERROR
					});
					return;
				}
				if(!Ext.isEmpty(results.data.url)){//shortURLに変換
					if(aCB) (aCB)(results.data.url);
				}
			},
			failure : function(conn,response,options){
				Ext.MessageBox.show({
					title   : window_title,
					msg     : get_ag_lang('CONVERT_URL_ERRMSG'),
					buttons : Ext.MessageBox.OK,
					icon    : Ext.MessageBox.ERROR
				});
			}
		})
	};

	update_open_ShortURL2LongURL = function(short_url,aCB){
		var transaction_id = Ext.Ajax.request({
			url     : 'get-convert-url.cgi',
			method  : 'POST',
			params  : Ext.urlEncode({url:short_url}),
			success : function(conn,response,options){

				try{var results = Ext.util.JSON.decode(conn.responseText);}catch(e){}
				if(Ext.isEmpty(results) || Ext.isEmpty(results.status_code) || results.status_code!=200){
					var msg = get_ag_lang('CONVERT_URL_ERRMSG');
					if(results && results.status_code) msg += ' [ '+ results.status_code +' ]';
					for(var key in results){
						_dump("1:["+key+"]=["+results[key]+"]");
					}
					Ext.MessageBox.show({
						title   : window_title,
						msg     : msg,
						buttons : Ext.MessageBox.OK,
						icon    : Ext.MessageBox.ERROR
					});
					return;
				}
				if(Ext.isEmpty(results.data)){
					var msg = get_ag_lang('CONVERT_URL_ERRMSG');
					if(results && results.status_code) msg += ' [ no data ]';
					Ext.MessageBox.show({
						title   : window_title,
						msg     : msg,
						buttons : Ext.MessageBox.OK,
						icon    : Ext.MessageBox.ERROR
					});
					return;
				}
				if(!Ext.isEmpty(results.data.url)){//shortURLに変換
					if(aCB) (aCB)(results.data.url);
					return;
				}
				if(!Ext.isEmpty(results.data.expand)){//longURLに変換
					var long_url;
					if(Ext.isArray(results.data.expand)){
						long_url = results.data.expand[0].long_url;
					}else{
						long_url = results.data.expand.long_url;
					}
					if(aCB) (aCB)(long_url);
					return;
				}
			},
			failure : function(conn,response,options){
				Ext.MessageBox.show({
					title   : window_title,
					msg     : get_ag_lang('CONVERT_URL_ERRMSG'),
					buttons : Ext.MessageBox.OK,
					icon    : Ext.MessageBox.ERROR
				});
			}
		})
	};

	click_open_url2text = function(window_title){

		var cur_text = URI2Text(glb_anatomo_editor_url,{target:{pins:false}});
		var cur_url = Text2URI(cur_text,{target:{pins:false}});
		var convOpts = {
			pin: {
				url_prefix : cur_url+encodeURIComponent('&')
			}
		};

		var text_value = URI2Text(glb_anatomo_editor_url,convOpts);
		if(Ext.isEmpty(text_value)) return;

		var anatomo_url_window = new Ext.Window({
			title       : window_title,
			width       : 600,
			height      : 500,
			layout      : 'form',
			plain       : true,
			bodyStyle   : 'padding:5px;text-align:right;',
			buttonAlign : 'center',
			modal       : true,
			resizable   : true,
			labelAlign  : 'top',
			labelWidth  : 65,
			items       : [
			{
				xtype         : 'textarea',
				id            : 'ag_url_textarea',
				hideLabel     : true,
				anchor        : '100%',
				height        : 100,
				selectOnFocus : false,
				value         : glb_anatomo_editor_url
			},
			{
				layout:'table',
				border: false,
				width: '100%',
				bodyStyle: 'background-color: transparent;',
				layoutConfig: {
					columns: 2
				},
				items:[{
					xtype: 'button',
					text: 'URL to Table',
					handler: function(){
//						var url_arr = Ext.getCmp('ag_url_textarea').getValue().replace(/0x0d0x0a|0x0d|0x0a|\r\n/g,"\n").replace(/\n$/g,"").split("\n");
//						for(var i=0;i<url_arr.length;i++){
//							var rtnstr = URI2Text(url_arr[i],convOpts);
//							if(Ext.isEmpty(rtnstr)) continue;
//							Ext.getCmp('ag_url_editor').setValue(rtnstr);
//							break;
//						}

						var url_arr = Ext.getCmp('ag_url_textarea').getValue().replace(/0x0d0x0a|0x0d|0x0a|\r\n/g,"\n").replace(/\n$/g,"").split("\n");
						for(var i=0;i<url_arr.length;i++){
							url_arr[i] = url_arr[i].trim();
							if(Ext.isEmpty(url_arr[i])) continue;
							var idx = url_arr[i].indexOf("?");
							if(idx<0) continue;
							var search = url_arr[i].substr(idx+1);
							if(Ext.isEmpty(search)) continue;
							var params = Ext.urlDecode(search);
							if(params.shorten){
								update_open_ShortURL2LongURL(url_arr[i],function(long_url){
									var rtnstr = URI2Text(long_url,convOpts);
									if(Ext.isEmpty(rtnstr)) return;
									Ext.getCmp('ag_url_editor').setValue(rtnstr);
								});
								break;
							}else{
								var rtnstr = URI2Text(url_arr[i],convOpts);
								if(Ext.isEmpty(rtnstr)) continue;
								Ext.getCmp('ag_url_editor').setValue(rtnstr);
								break;
							}
						}

					}
				},{
					xtype: 'button',
					text: 'Open this URL',
					handler: function(){
						var url_arr = Ext.getCmp('ag_url_textarea').getValue().replace(/0x0d0x0a|0x0d|0x0a|\r\n/g,"\n").replace(/\n$/g,"").split("\n");
						for(var i=0;i<url_arr.length;i++){
							var rtnstr = url_arr[i];
							rtnstr = rtnstr.replace(/\r|\n/g,"").trim();
							if(Ext.isEmpty(rtnstr)) continue;
							Ext.getDom('ag-open-url-form-url').value = rtnstr;
							Ext.getDom('ag-open-url-form').submit();
							break;
						}
					}
				}],
				listeners: {
					render: {
						fn: function(comp){
							_dump("render():["+comp.id+"]");
							var table = $(comp.body.dom).children('table.x-table-layout');
							_dump(table);
							table.css({width:'100%'}).find('td.x-table-layout-cell:eq(1)').attr({align:'right'});
						},
						buffer: 250
					}
				}
			},
			{
				xtype     : 'textarea',
				id        : 'ag_url_editor',
				style     : 'font-family:Courier;monospace;',
				hideLabel : true,
				value     : text_value,
				anchor    : '100% -170'
			},
			{
				xtype    : 'button',
				text     : 'Table to URL',
				disabled : false,
				handler : function(){
					var rtnstr = Text2URI(Ext.getCmp('ag_url_editor').getValue());
					Ext.getCmp('ag_url_textarea').setValue(rtnstr);
					update_open_url2text(rtnstr,function(url){
						Ext.getCmp('ag_url_textarea').setValue(url);
					});
				}
			}
			],
			buttons : [{
				text    : 'Close',
				handler : function(){
					anatomo_url_window.close();
				}
			}],
			listeners: {
				render: function(){
					var long_url = Ext.getCmp('ag_url_textarea').getValue();
					update_open_url2text(long_url,function(url){
						Ext.getCmp('ag_url_textarea').setValue(url);
					});
				}
			}
		});
		anatomo_url_window.show();
	};

	var viewport = new Ext.Viewport({
		renderTo : Ext.getBody(),
		id       : 'viewport',
		layout   : 'border',
		items    : [
		{
			id       : 'header-panel',
			region   : 'north',
			split    : false,
			border   : false,
			frame    : false,
//			height   : 25,
//			height   : 125,
//			height   : 50,
			height   : 52,
			layout   : 'card',
			activeItem : 3,
			items    : [
			{
			},
			{
				border: false,
				bodyStyle: 'height:25px;',
				html: '<div style="position:relative;width:auto;overflow:hidden;background:#dfe8f6;padding:2px;"><div style="float:left;margin-right:1em;"><label style="line-height:30px;color:#15428b;font:bold 16px tahoma,arial,helvetica,sans-serif;">BodyParts3D/Anatomography</label><label style="line-height:30px;color:black;font:normal 11px tahoma,arial,helvetica,sans-serif;"> : Select parts and Make Embeddable Model of Your Own.</label></div><table border="0" cellpadding="0" cellspacing="0" class="x-btn-wrap x-btn " style="float:left;width: auto;margin-left:1em;"><tbody><tr><td class="x-btn-left"><i>&nbsp;</i></td><td class="x-btn-center"><em unselectable="on"><button class="x-btn-text" type="button" onclick="click_information_button({url:\'info/userGuide/application/index.html\'})">できること</button></em></td><td class="x-btn-right"><i>&nbsp;</i></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" class="x-btn-wrap x-btn " style="float:left;width: auto;margin-left:1em;"><tbody><tr><td class="x-btn-left"><i>&nbsp;</i></td><td class="x-btn-center"><em unselectable="on"><button class="x-btn-text" type="button" onclick="click_information_button({url:\'http://www.youtube.com/watch?v=CJLH1PqH_hg\'})">使い方</button></em></td><td class="x-btn-right"><i>&nbsp;</i></td></tr></tbody></table></div>',
				listeners: {
					afterlayout: function(comp){
						$(comp.body.dom).css({height:25});
					},
					render : function(comp){
						$(comp.body.dom).css({height:25});
					},
					resize : function(comp){
						$(comp.body.dom).css({height:25});
					}
				},
				bbar:[
//					'<label style="color:#15428b;font-size:16px;font-weight:bold;">BodyParts3D</label>',
//					'-',

					new Ext.form.ComboBox ({
						ctCls : 'x-small-editor',
						id : 'bp3d-tree-group-combo',
						editable: false,
						mode: 'local',
						lazyInit: false,
						displayField: 'tg_name',
						valueField: 'tg_id',
						width: 125,
						triggerAction: 'all',
						value: init_tree_group,
						hidden : true,
						store: new Ext.data.SimpleStore({
							fields: ['tg_id','tg_name'],
							data : [[1,"BodyParts3D"],[2,"Talairach Brain Atlas"],[3,"Atlas of the Human Brain"],[4,"SPL-PNL Brain Atlas"]]
						}),
						listeners: {
							'select' : function(combo, record, index) {
//								_dump("select():["+combo.id+"]["+combo.getValue()+"]");
								var cmp = Ext.getCmp('anatomo-tree-group-combo');
								if(cmp && cmp.rendered){
									cmp.setValue(record.data.tg_id);
								}else{
//									init_tree_group = record.data.tg_id;
								}
								Cookies.set('ag_annotation.images.tg_id',record.data.tg_id);

								var cmp = Ext.getCmp('bp3d-version-combo');
								if(cmp && cmp.rendered){
									cmp.getStore().reload({
										callback:function(records,options,success){
//_dump("1callback!!!!!!!");
											try{
												_updateAnatomo();

												var index = -1;
												var c_version_str = Cookies.get('ag_annotation.images.version');
//_dump("1callback!!!!!!!:c_version_str=["+c_version_str+"]");
												if(c_version_str){
													var c_version = Ext.util.JSON.decode(c_version_str);
													var tg_id = null;
													var cmp = Ext.getCmp('bp3d-tree-group-combo');
													if(cmp && cmp.rendered) tg_id = cmp.getValue();

//_dump("1callback!!!!!!!:tg_id=["+tg_id+"]");
//_dump("1callback!!!!!!!:c_version=["+c_version+"]["+(c_version?c_version[tg_id]:null)+"]");

													if(tg_id && c_version && c_version[tg_id]){
														var cmp = Ext.getCmp('bp3d-version-combo');
														var store = cmp.getStore();
														index = store.find('tgi_version', new RegExp('^'+c_version[tg_id]+'$'));
														if(index>=0){
															var record = store.getAt(index);
															cmp.setValue(record.data.tgi_version);
															cmp.fireEvent('select',cmp,record,index);
														}
													}
												}
//_dump("1callback!!!!!!!:index=["+index+"]");
												if(index<0){
													index = 0;
													var cmp = Ext.getCmp('bp3d-version-combo');
													var store = cmp.getStore();
													var record = store.getAt(index);
													cmp.setValue(record.data.tgi_version);
													cmp.fireEvent('select',cmp,record,index);
												}


//												var cmp = Ext.getCmp('control-tab-partslist-panel');
//												if(cmp && cmp.rendered){
//													try{
//														var store = cmp.getStore();
//														var records = store.getRange();
//														getConvertIdList(records,store);
//													}catch(e){
//														_dump("cmp.getStore().loadData([],true);"+e);
//													}
//												}

											}catch(e){
												_dump("6424:"+e);
												for(var i in e){
													_dump(i+"="+e[i]);
												}
											}
										}
									});
								}
								var cmp = Ext.getCmp('control-tab-partslist-panel');
								if(cmp && cmp.rendered){
									try{
										var store = cmp.getStore();
										var records = store.getRange();
										store.removeAll();
										try{clearConvertIdList(records);}catch(e){}
										store.add(records);
									}catch(e){
										_dump("cmp.getStore().loadData([],true);"+e);
									}
								}

								var btn = Ext.getCmp('bp3d-home-group-btn');
								var store = bp3s_parts_gridpanel.getStore();

//								var count = store.query('tg_id', new RegExp('^'+record.data.tg_id+'$'));
//_dump("1callback!!!!!!!:store=["+store.getCount()+"]");
//_dump("1callback!!!!!!!:count=["+count.getCount()+"]");
//								if(store.getCount()>0 && store.getCount()>count.getCount()){

								if(store.getCount()>0 && store.find('tg_id', new RegExp('^'+record.data.tg_id+'$')) == -1){
									btn.enable();
									btn.el.dom.setAttribute('tg_id',store.getAt(0).data.tg_id);
								}else{
									btn.disable();
								}

							},
							'render' : function(combo) {
//								_dump("render():["+combo.id+"]["+combo.getValue()+"]");
							},
							scope:this
						}
					}),

					{
						id        : 'bp3d-home-group-btn',
						iconCls   : 'home',
						disabled  : true,
						hidden    : true,
						listeners : {
							'click' : function(button,e){
								try{
									var tg_id = button.el.dom.getAttribute('tg_id');
									var combo;
									if(contents_tabs.getActiveTab().id == 'contents-tab-bodyparts-panel'){
										combo = Ext.getCmp('bp3d-tree-group-combo');
									}else{
										combo = Ext.getCmp('anatomo-tree-group-combo');
									}
									var store = combo.getStore();
									var index = store.find('tg_id', new RegExp('^'+tg_id+'$'));
									combo.setValue(tg_id);
									combo.fireEvent('select',combo,store.getAt(index),index);

								}catch(e){
									_dump("6484:"+e);
								}
							},
							'disable' : function(button){
								try{Ext.getCmp('ag-home-group-btn').disable();}catch(e){}
								try{button.el.dom.removeAttribute('tg_id');}catch(e){}

								try{Ext.getCmp('anatomo_comment_pick_depth').enable();}catch(e){}
								try{Ext.getCmp('anatomo_comment_pick_edit').enable();}catch(e){}
								try{Ext.getCmp('anatomo_comment_pick_up').enable();}catch(e){}
								try{Ext.getCmp('anatomo_comment_pick_down').enable();}catch(e){}
								try{Ext.getCmp('anatomo_comment_pick_delete').enable();}catch(e){}
								try{Ext.getCmp('anatomo_comment_pick_addurl').enable();}catch(e){}
								try{Ext.getCmp('anatomo_pin_description_draw_check').enable();}catch(e){}
								try{Ext.getCmp('anatomo_pin_shape_combo').enable();}catch(e){}

								var cmp = Ext.getCmp('anatomography-pin-grid-panel');
								if(cmp && cmp.rendered){
									try{
										var store = cmp.getStore();
										var records = store.getRange();
										if(records.length>0){
											store.removeAll();
											store.add(records);
										}
									}catch(e){}
								}

								try{Ext.getCmp('anatomography_image_comment_title').enable();}catch(e){}
								try{Ext.getCmp('anatomography_image_comment_legend').enable();}catch(e){}
								try{Ext.getCmp('anatomography_image_comment_author').enable();}catch(e){}
								try{Ext.getCmp('anatomography_image_comment_draw_check').enable();}catch(e){}

							},
							'enable' : function(button){
								try{Ext.getCmp('ag-home-group-btn').enable();}catch(e){}

								try{Ext.getCmp('anatomo_comment_pick_depth').disable();}catch(e){}
								try{Ext.getCmp('anatomo_comment_pick_edit').disable();}catch(e){}
								try{Ext.getCmp('anatomo_comment_pick_up').disable();}catch(e){}
								try{Ext.getCmp('anatomo_comment_pick_down').disable();}catch(e){}
								try{Ext.getCmp('anatomo_comment_pick_delete').disable();}catch(e){}
								try{Ext.getCmp('anatomo_comment_pick_addurl').disable();}catch(e){}
								try{Ext.getCmp('anatomo_pin_description_draw_check').disable();}catch(e){}
								try{Ext.getCmp('anatomo_pin_shape_combo').disable();}catch(e){}

								var cmp = Ext.getCmp('anatomography-pin-grid-panel');
								if(cmp && cmp.rendered){
									try{
										var store = cmp.getStore();
										var records = store.getRange();
										if(records.length>0){
											store.removeAll();
											store.add(records);
										}
									}catch(e){}
								}

								try{Ext.getCmp('anatomography_image_comment_title').disable();}catch(e){}
								try{Ext.getCmp('anatomography_image_comment_legend').disable();}catch(e){}
								try{Ext.getCmp('anatomography_image_comment_author').disable();}catch(e){}
								try{Ext.getCmp('anatomography_image_comment_draw_check').disable();}catch(e){}
							},
							scope : this
						}
					},
					'<label style="font-size:14px;font-weight:bold;">'+ ag_lang.DATA_VERSION +'&nbsp;</label>',

					new Ext.form.ComboBox ({
						ctCls : 'x-small-editor',
						id : 'bp3d-version-combo',
						editable: false,
						mode: 'local',
						lazyInit: false,
						displayField: 'tgi_name',
						valueField: 'tgi_version',
						width: 80,
						triggerAction: 'all',
						hidden : false,
						store : version_store,
						listWidth: 750,
						tpl: versionListTpl,
						listeners: {
							'select' : {
								fn : function(combo, record, index) {
									if(index>0){
										$('label#bp3-version-msg').show();
										$('label#ag-version-msg').show();
									}else{
										$('label#bp3-version-msg').hide();
										$('label#ag-version-msg').hide();
									}
									if(Ext.isEmpty(record.data.tgi_comment)){
										$('label#bp3-version-comment').html('').hide();
										$('label#ag-version-comment').html('').hide();
									}else{
										$('label#bp3-version-comment').html(record.data.tgi_comment).show();
										$('label#ag-version-comment').html(record.data.tgi_comment).show();
									}
//									_dump("select():["+combo.id+"]["+combo.getValue()+"]");
									Cookies.set('ag_annotation.images.md_id',record.data.md_id);
									Cookies.set('ag_annotation.images.mv_id',record.data.mv_id);
									Cookies.set('ag_annotation.images.mr_id',record.data.mr_id);
									Cookies.set('ag_annotation.images.ci_id',record.data.ci_id);
									Cookies.set('ag_annotation.images.cb_id',record.data.cb_id);

									init_bp3d_params.md_id = record.data.md_id;
									init_bp3d_params.mv_id = record.data.mv_id;
									init_bp3d_params.mr_id = record.data.mr_id;
									init_bp3d_params.ci_id = record.data.ci_id;
									init_bp3d_params.cb_id = record.data.cb_id;
									init_bp3d_params.version = combo.getValue();

									var cmp = Ext.getCmp('anatomo-version-combo');
									if(cmp && cmp.rendered){
										cmp.setValue(record.data.tgi_version);
									}else{
										init_bp3d_version = record.data.tgi_version;
									}
									var checked = false;
									try{checked = Ext.getCmp('anatomo-clip-check').getValue();}catch(e){checked = false;}
									if(!checked){
										_updateAnatomo();
									}else{
										var cmp = Ext.getCmp('anatomo-clip-predifined-plane')
										if(cmp && cmp.rendered){
											if(!cmp.fireEvent('select',cmp)) _updateAnatomo();
										}else{
											_updateAnatomo();
										}
									}

									var c_version_str = Cookies.get('ag_annotation.images.version');
									var c_version;
									if(c_version_str) c_version = Ext.util.JSON.decode(c_version_str);
									c_version = c_version || {};
									c_version[record.data.tg_id] = record.data.tgi_version;
									c_version_str = Ext.util.JSON.encode(c_version);
									Cookies.set('ag_annotation.images.version',c_version_str);

									var cmp = Ext.getCmp('bp3d-tree-type-combo');
									if(cmp && cmp.rendered){
										cmp.getStore().reload({callback:function(records,options,success){
											if(Ext.isEmpty(gParams.t_type)) return;
											var cmp = Ext.getCmp('bp3d-tree-type-combo');
											Ext.each(records,function(r,i,a){
												if(r.data.t_type!=gParams.t_type) return true;
												cmp.setValue(gParams.t_type);
												cmp.fireEvent('select',cmp,r,i);
												return false;
											})
											delete gParams.t_type;
										}});
									}

//_dump(navigate_grid.ds);
//									for(var key in navigate_grid.ds.baseParams){
//										if(key.match(/_id$/) && navigate_grid.ds.baseParams[key] != init_bp3d_params[key]){
//											navigate_grid.ds.reload();
//											break;
//										}
//									}

									try{Ext.getCmp('anatomography-bp3d-grid-panel').getStore().reload();}catch(e){}
									var cmp = Ext.getCmp('anatomo-tree-type-combo')
									if(cmp && cmp.rendered){
										cmp.getStore().reload();
									}

												var cmp = Ext.getCmp('control-tab-partslist-panel');
												if(cmp && cmp.rendered){
													try{
														var store = cmp.getStore();
														var records = store.getRange();
//_dump("bp3d-version-combo.select():records=["+records.length+"]");
														getConvertIdList(records,store);
													}catch(e){
														_dump("cmp.getStore().loadData([],true);"+e);
													}
												}
								},
								scope : this
							},
							'render' : {
								fn : function(combo) {
//									_dump("render():["+combo.id+"]["+combo.getValue()+"]");
									setTimeout(function(){
										new Ext.ToolTip({
											target: 'bp3-version-information',
											html: get_ag_lang('VERSION_INFORMATION'),
											autoHide: false,
											closable: true,
											mouseOffset: [1,1],
											width: 500,
											showDelay: 2000,
											listeners: {
												show: function(toolTip){
													console.log('show()');
													console.log(toolTip);
//													toolTip.autoHide = false;
												},
												hide: function(toolTip){
													console.log('hide()');
													console.log(toolTip);
												}
											}
										});
									},1000);
									var cmp = Ext.getCmp('bp3d-tree-group-combo');
									if(cmp && cmp.rendered){
										var value = cmp.getValue();
										var store = cmp.getStore();
										var index = store.find('tg_id', new RegExp('^'+value+'$'));
										if(index>=0){
											var record = store.getAt(index);
											cmp.fireEvent('select',cmp,record,index);

											if(Ext.isEmpty(gParams.version)) return;

											combo.getStore().on({
												load: {
													fn: function(store,records){
//														_dump("render():load():["+combo.id+"]["+combo.getValue()+"]["+gParams.version+"]");
														Ext.each(records,function(r,i,a){
//															_dump("render():load():["+i+"]["+r.data.tgi_renderer_version+"]");
															if(r.data.tgi_renderer_version!=gParams.version) return true;
															combo.setValue(r.data.tgi_version);
															combo.fireEvent('select',combo,r,i);
															delete gParams.version;
															return false;
														});
													},
													buffer:100,
													single: true
												}
											})
										}
									}
								},
								scope:this
							}
						}
					}),

					'<label id="bp3-version-comment" style="'+get_ag_lang('VERSION_COMMENT_STYLE')+'"></label>',
					'<label id="bp3-version-information" style="'+get_ag_lang('VERSION_INFORMATION_STYLE')+'">'+Ext.util.Format.ellipsis(get_ag_lang('VERSION_INFORMATION'),50)+'</label>',
					'<label id="bp3-version-msg" style="'+get_ag_lang('NOT_LATEST_VERSION_STYLE')+'">'+get_ag_lang('NOT_LATEST_VERSION')+'</label>',


					'-',
//					get_ag_lang('TREE_TYPE_HTML'),
////					{
////						id    : 'treeType_label',
////						xtype : 'tbtext',
////						text  : 'build-up logic :'
////					},
					{
						hidden: true,
						id: 'bp3d-tree-type-combo',
						xtype: 'combo',
						typeAhead: true,
						triggerAction: 'all',
						width: 110,
						editable: false,
						mode: 'local',
						lazyInit: false,
						disabled : true,
						readOnly: true,
						validator: function(value){
//							_dump("validator():value=["+value+"]");
							return true;
						},
						displayField: 't_name',
						valueField: 't_type',
						store : navigate_tree_type_store,
						listeners: {
							'select': function(combo,record,index){
//								_dump("select():["+combo.id+"]["+combo.getValue()+"]");

								try{var version = Ext.getCmp('bp3d-version-combo').getValue();}catch(e){version = null;}
								if(!version) return;

								Cookies.set('ag_annotation.images.ci_id',record.data.ci_id);
								Cookies.set('ag_annotation.images.cb_id',record.data.cb_id);
								Cookies.set('ag_annotation.images.bul_id',record.data.bul_id);
								Cookies.set('ag_annotation.images.bul_name',record.data.ci_name+' '+record.data.cb_name+' '+record.data.bul_name);
								Cookies.set('ag_annotation.images.butc_num',record.data.butc_num);

								init_bp3d_params.ci_id = record.data.ci_id;
								init_bp3d_params.cb_id = record.data.cb_id;
								init_bp3d_params.bul_id = record.data.bul_id;

//Ext.get('bp3d-buildup-logic-contents-label').update(combo.getValue()==3 ? 'IS-A Tree of FMA3.0' : 'HAS-PART Tree of FMA3.0');
Ext.get('navigate-north-buildup').update('<a href="'+get_ag_lang('FMA_DESCRIPTION_URL')+'" target=_blank>'+record.data.ci_name+'</a>'+get_ag_lang('FMA_INFORMATION')+'&nbsp;'+record.data.cb_name+'&nbsp;'+record.data.bul_name);

								Cookies.set('ag_annotation.images.type',combo.getValue());
								var types_str = Cookies.get('ag_annotation.images.types');
								var types;
								if(types_str){
									types = Ext.util.JSON.decode(types_str);
								}else{
									types = {};
								}
								types[version] = combo.getValue();
								Cookies.set('ag_annotation.images.types',Ext.util.JSON.encode(types));

								var activeTab = Ext.getCmp('navigate-tab-panel').getActiveTab();
								if(activeTab.id == 'navigate-tree-panel'){
									var treeCmp = activeTab;
									if(!treeCmp || !treeCmp.root) return;

									treeCmp.root.reload(
										function(node){
											if(!Ext.isEmpty(gBP3D_TPAP) && node.firstChild && node.firstChild.attributes.attr.f_id){
												gBP3D_TPAP = undefined;
												Cookies.set('ag_annotation.images.path','/'+node.firstChild.attributes.attr.f_id);
											}
											var path = Cookies.get('ag_annotation.images.path','');
											node.getOwnerTree().selectPath(Ext.isEmpty(path)?'':('/root/'+ path),'f_id',function(bSuccess,oSelNode){
												if(bSuccess){
													selectPathCB(bSuccess,oSelNode);
												}else if(node.firstChild){
													Cookies.set('ag_annotation.images.path','/'+node.firstChild.attributes.attr.f_id);
													var path = Cookies.get('ag_annotation.images.path','');
													node.getOwnerTree().selectPath(Ext.isEmpty(path)?'':('/root/'+ path),'f_id',selectPathCB);
												}
											});
										}
									);
								}else if(activeTab.id == 'navigate-grid-panel'){
//									activeTab.getStore().load();
//									Ext.getCmp('navigate-grid-paging-toolbar').changePage(1);
//									getViewImages().getStore().reload();

									activeTab.getBottomToolbar().changePage(1);
//									getViewImages().getStore().reload();

								}else if(activeTab.id == 'navigate-position-panel'){
									get_ajax_zrange_object_position_task.delay(250);
								}else if(activeTab.id == 'navigate-range-panel'){
//									_dump("select():["+combo.id+"]:CALL get_ajax_zrange_object_range_task3()");
//									get_ajax_zrange_object_range_task3.delay(250);
									get_ajax_zrange_object_range_task3.delay(0);
								}else{
									activeTab.getBottomToolbar().changePage(1);
								}
								var cmp = Ext.getCmp('bp3d-tree-type-combo-ag');
								if(cmp && cmp.rendered){
									cmp.setValue(record.data.t_type);
								}
							},
							'render': function(combo){
//								_dump("render():["+combo.id+"]["+combo.getValue()+"]");
							},
							valid: function(combo){
//								_dump("valid():["+combo.id+"]");
							},
							invalid: function(combo){
//								_dump("invalid():["+combo.id+"]");
							},
							scope:this
						}
					},


					'->',

					'-',
					'<label>Concept name or ID : </label>',
					' ',
//					new Ext.app.SearchField({
					new Ext.app.SearchFieldListeners({
						id: 'bp3d-search-field',
						width : 200,
						value : Ext.isEmpty(gParams.query)?'':gParams.query,
						listeners: {
							'render' : function(comp){
								try{
									if(Ext.isEmpty(gParams.query)) return;
									comp.setRawValue(gParams.query);
									comp.onTrigger2Click();
								}catch(e){
									_dump("render():"+e);
								}
							},
							'search' : function(field,query){
								try{
									query = query.replace(/&lt;/g,"<").replace(/&gt;/g,">").replace(/&quot;/g,'"').replace(/&#39;/g,"'").replace(/&amp;/g,"&");
									query = query.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#39;");
									var tabCmp = Ext.getCmp('navigate-tab-panel');
									var tabpanel = createSearchGridPanel(query);
									if(tabpanel) tabCmp.setActiveTab(tabCmp.add(tabpanel));
								}catch(e){
									_dump("tabpanel=["+e+"]");
								}
							},
							scope : this
						}
					}),
					'-',{
						cls: 'ag-toolbar-button-cls',
						overCls: 'ag-toolbar-button-overCls',
						text: get_ag_lang('BUTTON_OBJFILE_LIST'),
						handler: function(){click_objfiles_list_button({title:this.text});}
					},'-',{
						cls: 'ag-toolbar-button-cls',
						overCls: 'ag-toolbar-button-overCls',
						text: get_ag_lang('BUTTON_FMA2OBJFILE_LIST'),
						handler: function(){click_concept2objfiles_list_button({title:this.text});}
					},'-',{
						text:get_ag_lang('BUTTON_INFORMATION'),
						handler : function(){click_information_button();}
//					},
//					'-',{
//						text:get_ag_lang('BUTTON_ERROR_REPORT'),
//						handler : function(){click_error_report_button();}
					}
					,'-',{
						text    : 'English',
						icon    : '',
						cls     : '',
						handler : function(){
							var chage_locale = "ja".toLowerCase();
							var path = location.pathname;
							if(chage_locale=='en'){
								Cookies.set('ag_annotation.locale','ja');
							}else{
								Cookies.set('ag_annotation.locale','en');
							}
							location.href = path;
						}
					}
//					,'-',{
//						text    : 'Login',
//						icon    : 'css/openid-bg.gif',
//						cls     : 'x-btn-text-icon',
//						handler : tbarBodypartsLogin
//					}
				]
			},
			{
				border: false,
				bodyStyle: 'height:25px;',
				html: '<div style="position:relative;width:auto;overflow:hidden;background:#dfe8f6;padding:2px;"><div style="float:left;margin-right:1em;"><label style="line-height:30px;color:#15428b;font:bold 16px tahoma,arial,helvetica,sans-serif;">BodyParts3D/Anatomography</label><label style="line-height:30px;color:black;font:normal 11px tahoma,arial,helvetica,sans-serif;"> : Select parts and Make Embeddable Model of Your Own.</label></div><table border="0" cellpadding="0" cellspacing="0" class="x-btn-wrap x-btn " style="float:left;width: auto;margin-left:1em;"><tbody><tr><td class="x-btn-left"><i>&nbsp;</i></td><td class="x-btn-center"><em unselectable="on"><button class="x-btn-text" type="button" onclick="click_information_button({url:\'info/userGuide/application/index.html\'})">できること</button></em></td><td class="x-btn-right"><i>&nbsp;</i></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" class="x-btn-wrap x-btn " style="float:left;width: auto;margin-left:1em;"><tbody><tr><td class="x-btn-left"><i>&nbsp;</i></td><td class="x-btn-center"><em unselectable="on"><button class="x-btn-text" type="button" onclick="click_information_button({url:\'http://www.youtube.com/watch?v=CJLH1PqH_hg\'})">使い方</button></em></td><td class="x-btn-right"><i>&nbsp;</i></td></tr></tbody></table></div>',
				listeners: {
					afterlayout: function(comp){
						$(comp.body.dom).css({height:25});
					},
					render : function(comp){
						$(comp.body.dom).css({height:25});
					},
					resize : function(comp){
						$(comp.body.dom).css({height:25});
					}
				},
				bbar:[
//					'<label style="color:#15428b;font-size:16px;font-weight:bold;">BodyParts3D</label>',
//					'-',

					new Ext.form.ComboBox ({
						ctCls : 'x-small-editor',
						id : 'anatomo-tree-group-combo',
						editable: false,
						mode: 'local',
						lazyInit: false,
						displayField: 'tg_name',
						valueField: 'tg_id',
						width: 125,
						triggerAction: 'all',
						value: init_tree_group,
						hidden : true,
						store: new Ext.data.SimpleStore({
							fields: ['tg_id','tg_name'],
							data : [[1,"BodyParts3D"],[2,"Talairach Brain Atlas"],[3,"Atlas of the Human Brain"],[4,"SPL-PNL Brain Atlas"]]
						}),
						listeners: {
							'select' : function(combo, record, index) {
//_dump("anatomo-tree-group-combo.select()=["+record.data.tg_id+"]");
								var cmp = Ext.getCmp('bp3d-tree-group-combo');
								if(cmp && cmp.rendered){
									cmp.setValue(record.data.tg_id);
									var store = cmp.getStore();
									var index = store.find('tg_id',new RegExp('^'+record.data.tg_id+'$'));
									var rec = store.getAt(index);
									cmp.fireEvent('select',cmp,rec,index);
								}
							},
							'render' : function(combo) {
							},
							scope:this
						}
					}),

					{
						id        : 'ag-home-group-btn',
						iconCls   : 'home',
						disabled  : true,
						hidden    : true,
						listeners : {
							'click' : function(button,e){
								var btn = Ext.getCmp('bp3d-home-group-btn');
								btn.fireEvent('click',btn,e);
							},
							'disable' : function(button){
							},
							'enable' : function(button){
							},
							scope : this
						}
					},
					{
						id: 'ag-coordinate-system-combo',
						xtype: 'combo',
						hidden : true,
						typeAhead: true,
						triggerAction: 'all',
						width: 60,
						editable: false,
						mode: 'local',
						lazyInit: false,
						disabled : false,
						displayField: 'label',
						valueField: 'value',
						value: 'bp3d',
						store: new Ext.data.SimpleStore({
							fields : ['value', 'label'],
							data   : [
								['bp3d', 'bp3d'],
								['SPL',  'SPL']
							]
						}),
						listeners: {
							'select': function(combo,record,index){
								var prm_record = ag_param_store.getAt(0);
								prm_record.beginEdit();
								prm_record.set('coord', record.data.value);
								prm_record.endEdit();
								prm_record.commit();
								_updateAnatomo();
							},
							'render': function(combo){
							},
							scope:this
						}
					},
					'<label style="font-size:14px;font-weight:bold;">'+ ag_lang.DATA_VERSION +'&nbsp;</label>',

					new Ext.form.ComboBox ({
						ctCls : 'x-small-editor',
						id : 'anatomo-version-combo',
						editable: false,
						mode: 'local',
						lazyInit: false,
						displayField: 'tgi_name',
						valueField: 'tgi_version',
						width: 80,
						triggerAction: 'all',
						hidden : false,
						store : version_store,
						listWidth: 750,
						tpl: versionListTpl,
						listeners: {
							'select' : {
								fn:function(combo, record, index) {
									if(index>0){
										$('label#bp3-version-msg').show();
										$('label#ag-version-msg').show();
									}else{
										$('label#bp3-version-msg').hide();
										$('label#ag-version-msg').hide();
									}
									if(Ext.isEmpty(record.data.tgi_comment)){
										$('label#bp3-version-comment').html('').hide();
										$('label#ag-version-comment').html('').hide();
									}else{
										$('label#bp3-version-comment').html(record.data.tgi_comment).show();
										$('label#ag-version-comment').html(record.data.tgi_comment).show();
									}

									Cookies.set('ag_annotation.images.md_id',record.data.md_id);
									Cookies.set('ag_annotation.images.mv_id',record.data.mv_id);
									Cookies.set('ag_annotation.images.mr_id',record.data.mr_id);

									init_bp3d_params.md_id = record.data.md_id;
									init_bp3d_params.mv_id = record.data.mv_id;
									init_bp3d_params.mr_id = record.data.mr_id;
									init_bp3d_params.version = combo.getValue();

									var c_version_str = Cookies.get('ag_annotation.images.version');
									var c_version;
									if(c_version_str) c_version = Ext.util.JSON.decode(c_version_str);
									c_version = c_version || {};
									c_version[record.data.tg_id] = record.data.tgi_version;
									c_version_str = Ext.util.JSON.encode(c_version);
									Cookies.set('ag_annotation.images.version',c_version_str);


									var checked = false;
									try{checked = Ext.getCmp('anatomo-clip-check').getValue();}catch(e){checked = false;}
//_dump("anatomo-version-combo.select():checked=["+checked+"]");
									if(!checked){
										_updateAnatomo();
									}else{
										var cmp = Ext.getCmp('anatomo-clip-predifined-plane')
										if(cmp && cmp.rendered){
//_dump("anatomo-version-combo.select():checked=["+1+"]");
											if(!cmp.fireEvent('select',cmp)) _updateAnatomo();
										}else{
//_dump("anatomo-version-combo.select():checked=["+2+"]");
											_updateAnatomo();
										}
									}
									var cmp = Ext.getCmp('anatomo-tree-type-combo')
									if(cmp && cmp.rendered){
										cmp.getStore().reload();
									}
									if(contents_tabs.getActiveTab().id == 'contents-tab-anatomography-panel'){
										_updateAnatomo();
										var cmp = Ext.getCmp('bp3d-version-combo');
										if(cmp && cmp.rendered){
											cmp.setValue(record.data.tgi_version);

												var cmp = Ext.getCmp('ag-parts-gridpanel');
												if(cmp && cmp.rendered){
													try{
														var store = cmp.getStore();
														var records = store.getRange();
//_dump("anatomo-version-combo.select():records=["+records.length+"]");
														getConvertIdList(records,store);
													}catch(e){
														_dump("cmp.getStore().loadData([],true);"+e);
													}
												}

											var cmp = Ext.getCmp('bp3d-tree-type-combo');
											if(cmp && cmp.rendered){
												cmp.getStore().reload();
											}

											navigate_grid.ds.reload();
										}else{
											init_bp3d_version = record.data.tgi_version;
//_dump("anatomo-version-combo.select():init_bp3d_version=["+init_bp3d_version+"]");
										}
									}
									try{Ext.getCmp('anatomography-bp3d-grid-panel').getStore().reload();}catch(e){}
								},
								scope:this
							},
							'render' : {
								fn : function(combo) {
									setTimeout(function(){
										new Ext.ToolTip({
											target: 'ag-version-information',
											html: get_ag_lang('VERSION_INFORMATION'),
											dismissDelay: 5000,
											closable: true
										});
									},1000);
								},
								scope:this
							}
						}
					}),

					'<label id="ag-version-comment" style="'+get_ag_lang('VERSION_COMMENT_STYLE')+'"></label>',
					'<label id="ag-version-information" style="'+get_ag_lang('VERSION_INFORMATION_STYLE')+'">'+Ext.util.Format.ellipsis(get_ag_lang('VERSION_INFORMATION'),50)+'</label>',
					'<label id="ag-version-msg" style="'+get_ag_lang('NOT_LATEST_VERSION_STYLE')+'">'+get_ag_lang('NOT_LATEST_VERSION')+'</label>',

					'-',
//					get_ag_lang('TREE_TYPE_HTML'),
					{
						hidden: true,
						id: 'bp3d-tree-type-combo-ag',
						xtype: 'combo',
						typeAhead: true,
						triggerAction: 'all',
						width: 110,
						editable: false,
						mode: 'local',
						lazyInit: false,
						disabled : true,
						displayField: 't_name',
						valueField: 't_type',
						store : navigate_tree_type_store,
						listeners: {
							'select': function(combo,record,index){
								if(contents_tabs.getActiveTab().id != 'contents-tab-anatomography-panel') return;
								var cmp = Ext.getCmp('bp3d-tree-type-combo');
								if(cmp && cmp.rendered){
//_dump("anatomo-tree-type-combo-ag.select():record.data.t_type=["+record.data.t_type+"]");
									var store = cmp.getStore();
									var index = store.find('t_type', new RegExp('^'+record.data.t_type+'$'));
									if(index>=0){
										var record = store.getAt(index);
										cmp.setValue(record.data.t_type);
										cmp.fireEvent('select',cmp,record,index);
									}
								}
								_updateAnatomo();
							},
							render: function(combo){
							},
							valid: function(combo){
//								_dump("valid():["+combo.id+"]");
							},
							invalid: function(combo){
//								_dump("invalid():["+combo.id+"]");
							},
							scope:this
						}
					},



					'->',

					'-',
					'<label>Concept name or ID : </label>',
					' ',
//					new Ext.app.SearchField({
					new Ext.app.SearchFieldListeners({
						id: 'ag-search-field',
						width:200,
						value : Ext.isEmpty(gParams.query)?'':gParams.query,
						listeners: {
							'search' : function(field,query){
								try{
									if(contents_tabs.getActiveTab().id != 'contents-tab-bodyparts-panel'){
										contents_tabs.setActiveTab('contents-tab-bodyparts-panel');
									}
									var comp = Ext.getCmp('bp3d-search-field');
									comp.setRawValue(query);
									comp.onTrigger2Click();
								}catch(e){
									_dump("tabpanel=["+e+"]");
								}
							},
							'clear' : function(field){
								try{
									var comp = Ext.getCmp('bp3d-search-field');
									comp.setRawValue('');
								}catch(e){
									_dump("tabpanel=["+e+"]");
								}
							},
							scope : this
						}
					}),
					'-',{
						cls: 'ag-toolbar-button-cls',
						overCls: 'ag-toolbar-button-overCls',
						text: get_ag_lang('BUTTON_OBJFILE_LIST'),
						handler: function(){click_objfiles_list_button({title:this.text});}
					},'-',{
						text:get_ag_lang('BUTTON_INFORMATION'),
						handler : function(){click_information_button();}
//					},
//					'-',{
//						text:get_ag_lang('BUTTON_ERROR_REPORT'),
//						handler : function(){click_error_report_button();}
					}
					,'-',{
						text    : 'English',
						icon    : '',
						cls     : '',
						handler : function(){
							var chage_locale = "ja".toLowerCase();
							var path = location.pathname;
							if(chage_locale=='en'){
								Cookies.set('ag_annotation.locale','ja');
							}else{
								Cookies.set('ag_annotation.locale','en');
							}
							location.href = path;
						}
					}
//					,'-',{
//						text    : 'Login',
//						icon    : 'css/openid-bg.gif',
//						cls     : 'x-btn-text-icon',
//						handler : tbarBodypartsLogin
//					}
				]
			},
			{
				border: false,
				bodyStyle: 'height:25px;',
				html: '<div style="position:relative;width:auto;overflow:hidden;background:#dfe8f6;padding:2px;"><div style="float:left;margin-right:1em;"><label style="line-height:30px;color:#15428b;font:bold 16px tahoma,arial,helvetica,sans-serif;">BodyParts3D/Anatomography</label><label style="line-height:30px;color:black;font:normal 11px tahoma,arial,helvetica,sans-serif;"> : Select parts and Make Embeddable Model of Your Own.</label></div><table border="0" cellpadding="0" cellspacing="0" class="x-btn-wrap x-btn " style="float:left;width: auto;margin-left:1em;"><tbody><tr><td class="x-btn-left"><i>&nbsp;</i></td><td class="x-btn-center"><em unselectable="on"><button class="x-btn-text" type="button" onclick="click_information_button({url:\'info/userGuide/application/index.html\'})">できること</button></em></td><td class="x-btn-right"><i>&nbsp;</i></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" class="x-btn-wrap x-btn " style="float:left;width: auto;margin-left:1em;"><tbody><tr><td class="x-btn-left"><i>&nbsp;</i></td><td class="x-btn-center"><em unselectable="on"><button class="x-btn-text" type="button" onclick="click_information_button({url:\'http://www.youtube.com/watch?v=CJLH1PqH_hg\'})">使い方</button></em></td><td class="x-btn-right"><i>&nbsp;</i></td></tr></tbody></table></div>',
				listeners: {
					afterlayout: function(comp){
						$(comp.body.dom).css({height:25});
					},
					render : function(comp){
						$(comp.body.dom).css({height:25});
					},
					resize : function(comp){
						$(comp.body.dom).css({height:25});
					}
				},
				bbar:[
//					'<label style="color:#15428b;font-size:16px;font-weight:bold;">BodyParts3D</label>',
//					'-',
					'<label>Review search : </label>', ' ',
					new Ext.app.SearchFieldStore({
						id : 'contents-tab-feedback-search',
						store: contents_tab_feedback_store,
						width:200
					}),
					'-',
					'<label>Status filter : </label>',
					{
						id : 'contents-tab-feedback-status-combo',
						xtype         : 'combo',
						typeAhead     : true,
						triggerAction : 'all',
						editable      : false,
						mode          : 'local',
						displayField  : 'cs_name',
						valueField    : 'cs_id',
						lazyInit      : false,
						value         : '0',
						store: new Ext.data.SimpleStore({
							fields : ['cs_id', 'cs_name'],
							data   : [
['0','ALL'],[1,'Pending'],[2,'OK']
							]
						}),
						listeners: {
							'select': {
								fn:function(combo,record,index){
									contents_tab_feedback_store.reload();
									return;

									if(index == 0){
										contents_tab_feedback_store.clearFilter()
									}else{
										contents_tab_feedback_store.filter('cs_id',combo.getValue())
									}
									return;
									var field = comment_form.getForm().findField('comment_form.cs_id');
									if(field) field.setValue(combo.getValue());
								},scope:this}
						}
					}
					,'->'
					,'-',{
						text    : 'English',
						icon    : '',
						cls     : '',
						handler : function(){
							var chage_locale = "ja".toLowerCase();
							var path = location.pathname;
							if(chage_locale=='en'){
								Cookies.set('ag_annotation.locale','ja');
							}else{
								Cookies.set('ag_annotation.locale','en');
							}
							location.href = path;
						}
					}
//					,'-',{
//						text    : 'Login',
//						icon    : 'css/openid-bg.gif',
//						cls     : 'x-btn-text-icon',
//						handler : tbarBodypartsLogin
//					}
				]
			},
			{
				border: false,
				bodyStyle: 'height:25px;',
				html: '<div style="position:relative;width:auto;overflow:hidden;background:#dfe8f6;padding:2px;"><div style="float:left;margin-right:1em;"><label style="line-height:30px;color:#15428b;font:bold 16px tahoma,arial,helvetica,sans-serif;">BodyParts3D/Anatomography</label><label style="line-height:30px;color:black;font:normal 11px tahoma,arial,helvetica,sans-serif;"> : Select parts and Make Embeddable Model of Your Own.</label></div><table border="0" cellpadding="0" cellspacing="0" class="x-btn-wrap x-btn " style="float:left;width: auto;margin-left:1em;"><tbody><tr><td class="x-btn-left"><i>&nbsp;</i></td><td class="x-btn-center"><em unselectable="on"><button class="x-btn-text" type="button" onclick="click_information_button({url:\'info/userGuide/application/index.html\'})">できること</button></em></td><td class="x-btn-right"><i>&nbsp;</i></td></tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" class="x-btn-wrap x-btn " style="float:left;width: auto;margin-left:1em;"><tbody><tr><td class="x-btn-left"><i>&nbsp;</i></td><td class="x-btn-center"><em unselectable="on"><button class="x-btn-text" type="button" onclick="click_information_button({url:\'http://www.youtube.com/watch?v=CJLH1PqH_hg\'})">使い方</button></em></td><td class="x-btn-right"><i>&nbsp;</i></td></tr></tbody></table></div>',
				listeners: {
					afterlayout: function(comp){
						$(comp.body.dom).css({height:25});
					},
					render : function(comp){
						$(comp.body.dom).css({height:25});
					},
					resize : function(comp){
						$(comp.body.dom).css({height:25});
					}
				},
				bbar:[
//					'<label style="color:#15428b;font-size:16px;font-weight:bold;">BodyParts3D</label>',
//					'-',
					'->',
//					'-',
//					'<label>Concept name or ID : </label>',
//					' ',
//					new Ext.app.SearchField({
//						width:200,
//						value : Ext.isEmpty(gParams.query)?'':gParams.query,
//						listeners: {
//							'render' : function(comp){
//								try{
//									if(Ext.isEmpty(gParams.query)) return;
//									comp.setRawValue(gParams.query);
//									comp.onTrigger2Click();
//								}catch(e){
//									_dump("render():"+e);
//								}
//							},
//							scope : this
//						}
//					})

					'-',{
						text:'PartsBrowser',
						handler : function(){
							Ext.getCmp('contents-tab-panel').activate(Ext.getCmp('contents-tab-bodyparts-panel'));
						}
					},'-',{
						text:'Anatomography',
						handler : function(){
							Ext.getCmp('contents-tab-panel').activate(Ext.getCmp('contents-tab-anatomography-panel'));
						}
					}
					,'-',{
						text    : 'English',
						icon    : '',
						cls     : '',
						handler : function(){
							var chage_locale = "ja".toLowerCase();
							var path = location.pathname;
							if(chage_locale=='en'){
								Cookies.set('ag_annotation.locale','ja');
							}else{
								Cookies.set('ag_annotation.locale','en');
							}
							location.href = path;
						}
					}
//					,'-',{
//						text    : 'Login',
//						icon    : 'css/openid-bg.gif',
//						cls     : 'x-btn-text-icon',
//						handler : tbarBodypartsLogin
//					}
				]
			}

			]
		},
		contents_tabs
		],

		listeners : {
			'afterlayout' : function(panel,layout){
//_dump("viewport.afterlayout():"+panel.rendered);
//				if(panel.rendered) panel.doLayout();
			},
			'resize' : function(panel){
//_dump("viewport.resize():"+panel.rendered);
//				if(panel.rendered) panel.doLayout();
			},
			'render' : function(panel){
//_dump("viewport.render():"+panel.rendered);
//				if(panel && !panel.loadMask) panel.loadMask = new Ext.LoadMask(panel.el,{msg:'Please wait...',removeMask:true});
//				panel.loadMask.show();
			},
			scope:this
		}



	});

	try{
		var dragZone = new ImageDragZone(bp3d_contents_thumbnail_dataview, {
			containerScroll:true,
			ddGroup: 'partlistDD'
		});
		var dragZone2 = new ImageDragZone(bp3d_contents_list_dataview, {
			containerScroll:true,
			ddGroup: 'partlistDD'
		});
	}catch(e){alert(e)}

//2011-09-28 追加
//	var viewport = Ext.getCmp('viewport');
//	if(viewport){
//		if(viewport.rendered && !viewport.loadMask){
//			viewport.loadMask = new Ext.LoadMask(viewport.el,{msg:get_ag_lang('MSG_LOADING_DATA'),removeMask:true});
//			viewport.loadMask.show();
//		}else if(!viewport.rendered){
//			viewport.on('render',function(viewport){
//				if(viewport && !viewport.loadMask) viewport.loadMask = new Ext.LoadMask(viewport.el,{msg:get_ag_lang('MSG_LOADING_DATA'),removeMask:true});
//				viewport.loadMask.show();
//			});
//		}
//	}


_load = function(loc){
//_dump("_load()");
//_dump("_load():loc=["+loc+"]");
	var treeCmp = Ext.getCmp('navigate-tree-panel');
	var contentCmp = Ext.getCmp('content-card-panel');
	var urlOBj;
	var s = Ext.urlDecode(loc.search.substr(1));

	if(s && s._dc && _bp3d_change_location_hash[s._dc]) urlOBj = _bp3d_change_location_hash[s._dc];
	if(Ext.isEmpty(urlOBj)){
		try{
			var hash = loc.hash.substr(1)
//			_dump("_load():hash=["+hash.length+"]["+hash+"]");
			if(hash.length){
				urlOBj = Ext.decode(hash);
			}else{
				urlOBj = Ext.urlDecode(loc.search.substr(1));
			}
		}catch(e){alert("1:"+e);}
	}

	var sel_id;
	var s = Ext.urlDecode(loc.search.substr(1));
	if(s && s._dc){
//		_dump("_load():s._dc=["+s._dc+"]");
		Ext.each(_bp3d_change_location_stack,function(v,i,a){

			if(v!=s._dc) return true;
			if(i>=a.length-1) return false;
			var t = a[i+1];
			if(!_bp3d_change_location_hash[t] || !_bp3d_change_location_hash[t].sel_id) return true;
			sel_id = _bp3d_change_location_hash[t].sel_id;
//			_dump("_load(each):_bp3d_change_location_hash["+t+"].sel_id=["+_bp3d_change_location_hash[t].sel_id+"]");
			return false;

		});
	}
	if(!sel_id && urlOBj && urlOBj.sel_id){
//		_dump("_load():urlOBj.sel_id=["+urlOBj.sel_id+"]");
		sel_id = urlOBj.sel_id;
	}
	if(sel_id) Cookies.set('ag_annotation.images.fmaid',sel_id);

//	if(Ext.isEmpty(urlOBj.query) && Ext.isEmpty(gBP3D_TPAP)){
	if(Ext.isEmpty(gBP3D_TPAP)){
		if(urlOBj.params){
//			_dump(urlOBj.params);

//			var params = Ext.urlDecode(urlOBj.params);
//			for(var key in params){
//				init_bp3d_params[key] = params[key];
//			}
			bp3d_contents_store.load({
				params: Ext.urlDecode(urlOBj.params)
			});
		}else{
			bp3d_contents_store.load({
				params:{
					node     : urlOBj.node,
					txpath   : urlOBj.txpath,
					position : urlOBj.position,
					sorttype : urlOBj.sorttype,
					query    : urlOBj.query
				}
			});
		}
	}
	if(urlOBj.txpath){
		if(treeCmp){
			var txpath = "/root" + urlOBj.txpath;
			treeCmp.selectPath(txpath,'f_id',function(bSuccess,oSelNode){
			});
			Cookies.set('ag_annotation.images.path',urlOBj.txpath);
		}
	}

	if(urlOBj.position){
		Ext.getCmp('positionSelect').setValue(urlOBj.position);
	}
	if(urlOBj.sorttype){
		Ext.getCmp('sortSelect').setValue(urlOBj.sorttype);
	}

//	if(!Ext.isEmpty(urlOBj.query)){
//		try{
//			var query = urlOBj.query.replace(/&lt;/g,"<").replace(/&gt;/g,">").replace(/&quot;/g,'"').replace(/&#39;/g,"'").replace(/&amp;/g,"&");
//			query = query.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#39;");
//			var tabCmp = Ext.getCmp('navigate-tab-panel');
//			var tabpanel = createSearchGridPanel(query);
//			if(tabpanel) tabCmp.setActiveTab(tabCmp.add(tabpanel));
//		}catch(e){
//			_dump("tabpanel=["+e+"]");
//		}
//	}

//	if(contents_tabs.getActiveTab().id != 'contents-tab-anatomography-panel' || !Ext.isEmpty(urlOBj.query)){
//		if(contents_tabs.getActiveTab().id != 'contents-tab-bodyparts-panel'){
//			contents_tabs.setActiveTab('contents-tab-bodyparts-panel');
//		}else{
//			var tabBodypartsDom = Ext.get('contents-tab-panel__contents-tab-bodyparts-panel');
//			if(tabBodypartsDom && !tabBodypartsDom.hasClass('x-tab-strip-active')){
//				var tabHomeDom = Ext.get('contents-tab-panel__contents-tab-home-panel');
//				tabHomeDom.removeClass('x-tab-strip-active');
//				tabBodypartsDom.addClass('x-tab-strip-active');
//				Ext.getCmp('header-panel').layout.setActiveItem(1);
//			}
//
//			if(!Ext.getCmp('south-panel').isVisible()){
//					Ext.getCmp('south-panel').show();
//					setTimeout(function(){
//						var viewport = Ext.getCmp('viewport');
//						if(viewport && viewport.rendered) viewport.doLayout();
//					},0);
//			}
//		}
//	}


};

//_dump("gParams.query=["+gParams.query+"]");
//var searchField = new Ext.app.SearchField({
//	renderTo : 'search_area',
//	store    : bp3d_contents_store,
//	width    : 320,
//	value    : Ext.isEmpty(gParams.query)?'':gParams.query
//});
//_dump("searchField.value=["+searchField.value+"]");

try{
	Ext.getCmp('positionSelect').setValue(image_position);
}catch(e){
	if(window.console){
		console.log(e);
	}else{
		_dump(e);
	}
}
try{
	var disptypeSelect = Ext.getCmp('disptypeSelect');
	var disptypeSelectStore = disptypeSelect.getStore();
	disptypeSelect.setValue(image_disptype);
	var disptypeSelectIndex = disptypeSelectStore.find('value',image_disptype);
	if(disptypeSelectIndex>=0){
		disptypeSelect.fireEvent('select',disptypeSelect,disptypeSelectStore.getAt(disptypeSelectIndex),disptypeSelectIndex);
	}
}catch(e){
	_dump("8043:"+e);
}

//_dump("10882:");
setTimeout(function(){
	var tree_panel = Ext.getCmp("navigate-tree-panel");
	if(tree_panel && tree_panel.selectPath){
		if(location.search && location.search.match(/txpath=[^&]+/)){
			try{
				var urlOBj = Ext.urlDecode(location.search.substr(1));
			}catch(e){alert("2:"+e);}
			var txpath = "/root" + urlOBj.txpath;
//_dump("txpath1=["+txpath+"]");
			tree_panel.selectPath(txpath,'f_id',selectPathCB);
		}else{
			var treeType = Cookies.get('ag_annotation.images.type',3);
			var navigate_tree_combobox = Ext.getCmp('bp3d-tree-type-combo');
			if(navigate_tree_combobox && navigate_tree_combobox.rendered && navigate_tree_combobox.getValue() != treeType){
				var index = navigate_tree_combobox.store.find('t_type',new RegExp('^'+treeType+'$'));
				if(index<0) return;
				navigate_tree_combobox.setValue(treeType);
				navigate_tree_combobox.fireEvent('select',navigate_tree_combobox,navigate_tree_combobox.store.getAt(index),index);
			}else{
				var txpath = "/root" + Cookies.get('ag_annotation.images.path','');
//_dump("txpath2=["+txpath+"]");
				tree_panel.selectPath(txpath,'f_id',selectPathCB);
			}
		}
	}
},100);

var openWindowComment = function(aRec,aMode){
	try{
		if(Ext.isEmpty(aMode)) aMode = 'reply';

		var c_id = null;
		var c_pid = null;
		var c_name = '';
		var c_email = null;
		var ct_id = 1;
		var cs_id = 1;

		var tgi_version = null;
		var t_type = null;
		try{tgi_version=Ext.getCmp('bp3d-version-combo').getValue();}catch(e){tgi_version=null;}
		try{t_type=Ext.getCmp('bp3d-tree-type-combo').getValue();}catch(e){t_type=null;}

		var selRec = aRec;
		if(selRec){
			if(aMode == 'reply'){
				selRec.c_title = 'Re:' + selRec.c_title;
				selRec.c_comment = selRec.c_comment.replace(/^(.*)$/mg,">$1").replace(/&gt;/g,">").replace(/&lt;/g,"<").replace(/&nbsp;/g," ").replace(/&amp;/g,"&");
				c_pid = selRec.c_id;
				ct_id = selRec.ct_id;
				cs_id = selRec.cs_id;
			}else{
				selRec.c_comment = selRec.c_comment.replace(/&gt;/g,">").replace(/&lt;/g,"<").replace(/&nbsp;/g," ").replace(/&amp;/g,"&");
				c_id  = selRec.c_id;
				c_pid = selRec.c_pid;
				c_name = selRec.c_name;
				c_email = selRec.c_email;
				ct_id = selRec.ct_id;
				cs_id = selRec.cs_id;
			}
		}else{
			var oSelNode = null;
			var treeCmp = Ext.getCmp('navigate-tree-panel');
			if(treeCmp) oSelNode = treeCmp.getSelectionModel().getSelectedNode();
			if(oSelNode && oSelNode.id == 'root'){
				selRec = oSelNode.attributes.attr;
			}else{
				var selRecs = bp3d_contents_thumbnail_dataview.getSelectedRecords();
				if(selRecs && selRecs.length>0){
					selRec = selRecs[0].data;
				}else if(oSelNode){
					selRec = oSelNode.attributes.attr;
				}
			}
		}
		var comment_form = new Ext.form.FormPanel({
			baseCls     : 'x-plain',
			labelWidth  : 55,
			url         :'put-comment.cgi',
			fileUpload  : true,
			defaultType : 'textfield',
			items : [{
				xtype      : 'hidden',
				name       : 'parent',
				value      : ''
			},{
				xtype      : 'hidden',
				name       : 'f_id',
				value      : selRec.f_id
			},{
				xtype      : 'hidden',
				name       : 'c_id',
				value      : c_id
			},{
				xtype      : 'hidden',
				name       : 'c_pid',
				value      : c_pid
			},{
				xtype      : 'hidden',
				name       : 'ct_id',
				value      : ct_id
			},{
				xtype      : 'hidden',
				id         : 'comment_form.cs_id',
				name       : 'cs_id',
				value      : cs_id
			},{
				xtype      : 'hidden',
				name       : 'tgi_version',
				value      : tgi_version
			},{
				xtype      : 'hidden',
				name       : 't_type',
				value      : t_type
			},{
				fieldLabel : 'Name',
				name       : 'c_name',
				anchor     : '100%',
				value      : c_name,
				allowBlank : false,
				selectOnFocus : true
			},{
				fieldLabel : 'e-mail',
				name       : 'c_email',
				anchor     : '100%',
				value      : c_email,
				vtype      : 'email',
				selectOnFocus : true
			},{
				fieldLabel : 'Title',
				name       : 'c_title',
				anchor     : '100%',
				value      : selRec.c_title,
				selectOnFocus : true
			},{
				xtype      : 'fileuploadfield',
				id         : 'image',
				emptyText  : 'Select an image',
				fieldLabel : 'Image',
				name       : 'c_image',
				buttonCfg  : {
					text    : '',
					iconCls : 'upload-icon'
				},
				anchor     : '100%'
			},{
				fieldLabel : 'Password',
				name       : 'c_passwd',
				anchor     : '50%',
				value      : selRec.c_passwd,
				allowBlank : false,
				selectOnFocus : true
			},{
				hidden        : (c_pid?true:false),
				hideLabel     : (c_pid?true:false),
				hideMode      : 'display',
				fieldLabel    : 'Status',
				anchor        : '40%',
				xtype         : 'combo',
				typeAhead     : true,
				triggerAction : 'all',
				editable      : false,
				mode          : 'local',
				displayField  : 'cs_name',
				valueField    : 'cs_id',
				lazyInit      : false,
				value         : cs_id,
				store: new Ext.data.SimpleStore({
					fields : ['cs_id', 'cs_name'],
					data   : [
[1,'Pending'],[2,'OK']
					]
				}),
				listeners: {
					'select': {
						fn:function(combo,record,index){
							var field = comment_form.getForm().findField('comment_form.cs_id');
							if(field) field.setValue(combo.getValue());
						},scope:this}
				}

			},{
				xtype     : 'textarea',
				hideLabel : true,
				name      : 'c_comment',
				anchor    : '100% -128',
				value      : selRec.c_comment,
				allowBlank : false,
				selectOnFocus : true
			}]
		});

		var comment_window = new Ext.Window({
			title       : get_ag_lang('COMMENT_WIN_TITLE'),
			width       : 500,
			height      : 400,
			minWidth    : 300,
			minHeight   : 250,
			layout      : 'fit',
			plain       : true,
			bodyStyle   :'padding:5px;',
			buttonAlign :'right',
			items       : comment_form,
			modal       : true,
			autoScroll  : true,
			buttons : [{
				text    : get_ag_lang('COMMENT_WIN_TITLE_SEND'),
				handler : function(){
					if(comment_form.getForm().isValid()){
						comment_form.getForm().submit({
							url     : 'put-comment.cgi',
							waitMsg : get_ag_lang('COMMENT_WIN_WAITMSG')+'...',
							success : function(fp, o){
								try{
									if(o.result.success == true){
										Ext.MessageBox.show({
											title   : get_ag_lang('COMMENT_TITLE_PLUS'),
											msg     : get_ag_lang('COMMENT_WIN_ADDMSG'),
											buttons : Ext.MessageBox.OK,
											icon    : Ext.MessageBox.INFO,
											fn      : function(){
												comment_window.close();
												bp3d_contents_detail_annotation_store.reload();
												var cmp = comment_form.find('name','c_pid');
												if(cmp && cmp.length>0){
													var val = cmp[0].getValue();
													if(Ext.isEmpty(val)){
														contents_tab_feedback_store.reload();
													}else{
														updateFeedbackChildStore.load({params : {c_pid : val}});
													}
												}
											}
										});
										return;
									}
								}catch(e){ _dump("success():"+ e + ""); }

								Ext.MessageBox.show({
									title   : get_ag_lang('COMMENT_TITLE_PLUS'),
									msg     : get_ag_lang('COMMENT_WIN_ERRMSG'),
									buttons : Ext.MessageBox.OK,
									icon    : Ext.MessageBox.ERROR
								});

							},
							failure : function(fp, o){
								Ext.MessageBox.show({
									title   : get_ag_lang('COMMENT_TITLE_PLUS'),
									msg     : get_ag_lang('COMMENT_WIN_ERRMSG'),
									buttons : Ext.MessageBox.OK,
									icon    : Ext.MessageBox.ERROR
								});
							}
						});
					}
				}
			},{
				text: get_ag_lang('COMMENT_WIN_TITLE_CANCEL'),
				handler : function(){
					comment_window.close();
				}
			}],
			listeners: {
				'show': {
					fn:function(self){
					},
					scope:this
				},
				'hide': {
					fn:function(self){
					},
					scope:this
				}
			}
		});
		comment_window.show();
	}catch(e){ alert(e); }
};



//}catch(e){
//	alert("ag_ann_init():"+e);
//	for(var key in e){
//		_dump("ag_ann_init():e."+key+"=["+e[key]+"]");
//	}
//}



}




Ext.override(Ext.Panel, {
	addTool: function(){
		if(!this[this.toolTarget]) {
			return;
		}
		if(!this.toolTemplate){
			var tt = new Ext.Template(
				 '<div class="x-tool x-tool-{id}">&#160;</div>'
			);
			tt.disableFormats = true;
			tt.compile();
			Ext.Panel.prototype.toolTemplate = tt;
		}
		for(var i = 0, a = arguments, len = a.length; i < len; i++) {
			var tc = a[i], overCls = 'x-tool-'+tc.id+'-over';
			var t = this.toolTemplate.insertFirst((tc.align !== 'left') ? this[this.toolTarget] : this[this.toolTarget].child('span'), tc, true);
			this.tools[tc.id] = t;
			t.enableDisplayMode('block');
			t.on('click', this.createToolHandler(t, tc, overCls, this));
			if(tc.on){
				t.on(tc.on);
			}
			if(tc.hidden){
				t.hide();
			}
			t.enable = this.enableTool;
			t.disable = this.disableTool;
			if (tc.disabled) {
				t.disable();
			}
			if(tc.qtip){
				if(typeof tc.qtip == 'object'){
					Ext.QuickTips.register(Ext.apply({
						  target: t.id
					}, tc.qtip));
				} else {
					t.dom.qtip = tc.qtip;
				}
			}
			t.addClassOnOver(overCls);
		}
	},
	createToolHandler: function(t, tc, overCls, panel){
		return function(e){
			t.removeClass(overCls);
			e.stopEvent();
			if(tc.handler && !t.disabled){
				tc.handler.call(tc.scope || t, e, t, panel);
			}
		};
	},
	enableTool: function() {
		this.disabled = false;
		this.removeClass('x-item-disabled');
	},
	disableTool: function() {
		this.disabled = true;
		this.addClass('x-item-disabled');
	}
});










/**
 * Create a DragZone instance for our JsonView
 */
ImageDragZone = function(view, config){
	this.view = view;
	ImageDragZone.superclass.constructor.call(this, view.getEl(), config);
};
Ext.extend(ImageDragZone, Ext.dd.DragZone, {
	getDragData : function(e){
		var target = e.getTarget('.thumb-wrap');
		if(!target) target = e.getTarget('.thumb-list-wrap');
		if(target){
			var view = this.view;
			if(!view.isSelected(target)){
				view.onClick(e);
			}
			var selNodes = view.getSelectedNodes();
			var dragData = {
				nodes: selNodes
			};
			if(selNodes.length == 1){
				dragData.ddel = target;
				dragData.single = true;
			}else{
				var div = document.createElement('div'); // create the multi element drag "ghost"
				div.className = 'multi-proxy';
				for(var i = 0, len = selNodes.length; i < len; i++){
					div.appendChild(selNodes[i].firstChild.firstChild.cloneNode(true)); // image nodes only
					if((i+1) % 3 == 0){
						div.appendChild(document.createElement('br'));
					}
				}
				var count = document.createElement('div'); // selected image count
				count.innerHTML = i + ' images selected';
				div.appendChild(count);

				dragData.ddel = div;
				dragData.multi = true;
			}
			dragData.selections = view.getSelectedRecords();
			return dragData;
		}
		return false;
	},

	afterRepair:function(){
		for(var i = 0, len = this.dragData.nodes.length; i < len; i++){
			Ext.fly(this.dragData.nodes[i]).frame('#8db2e3', 1);
		}
		this.dragging = false;
	}
});

Ext.grid.CheckColumn = function(config){
	Ext.apply(this, config);
	if(!this.id){
		this.id = Ext.id();
	}
	this.renderer = this.renderer.createDelegate(this);
};

Ext.grid.CheckColumn.prototype ={
	init : function(grid){
		this.grid = grid;
		this.grid.on('render', function(){
			var view = this.grid.getView();
			view.mainBody.on('mousedown', this.onMouseDown, this);
		}, this);
	},

	onMouseDown : function(e, t){
		if(t.className && t.className.indexOf('x-grid3-cc-'+this.id) != -1){
			e.stopEvent();
			var index = this.grid.getView().findRowIndex(t);
			var record = this.grid.store.getAt(index);
			var param = {
				grid   : this.grid,
				record : record,
				field  : this.dataIndex,
				value  : record.data[this.dataIndex],
				row    : index,
				column : this.grid.getColumnModel().findColumnIndex(this.dataIndex),
				cancel : false
			};
			if(this.grid.fireEvent('beforeedit',param) && param.cancel == false){
				record.set(this.dataIndex, !record.data[this.dataIndex]);
				param.value = record.data[this.dataIndex];
				param.originalValue = !record.data[this.dataIndex];
				delete param.cancel;
				this.grid.fireEvent('afteredit',param)
			}
		}
	},

	renderer : function(v, p, record){
		p.css += ' x-grid3-check-col-td';
		return '<div class="x-grid3-check-col'+(v?'-on':'')+' x-grid3-cc-'+this.id+'">&#160;</div>';
	}
};






var bp3d_open_link_window = function(rep_id){
//	alert('link');

	var win = Ext.getCmp('bp3d-link-window');
	if(!Ext.isEmpty(win)){
		win.rep_id = rep_id;
		win.show(Ext.get('bp3d-link-a-link'));
		return false;
	}

	var bp3d_link_window = new Ext.Window({
		id          : 'bp3d-link-window',
		title       : 'Icon URL',
		width       : 450,
		height      : 170,
		layout      : 'form',
		plain       : true,
		bodyStyle   : 'padding:5px;',
		buttonAlign : 'center',
		modal       : true,
		resizable   : false,
		contentEl   : 'bp3d-link-window-contentEl',
		closeAction : 'hide',
		buttons : [{
			text    : 'OK',
			handler : function(){
				Ext.getCmp('bp3d-link-window').hide(Ext.get('bp3d-link-a-link'));
			}
		}],
		listeners : {
			beforeshow: function(comp){
				_dump("beforeshow():["+comp.id+"]");

				if(Ext.isEmpty(comp.loadMask) || typeof comp.loadMask == 'boolean') comp.loadMask = new Ext.LoadMask(comp.body,{removeMask:false});

				var button = Ext.getCmp('bp3d-link-window-image-re-use-size-s-button');
				button.suspendEvents(false);
				button.setValue(true);
				button.resumeEvents();

				var button = Ext.getCmp('bp3d-link-window-image-re-use-size-l-button');
				button.suspendEvents(false);
				button.setValue(false);
				button.resumeEvents();


				button.fireEvent('check',button,true);

			},
			show: function(comp){
				_dump("show():["+comp.id+"]");
			},
			render: function(win){
				win.rep_id = rep_id;
				_dump("render():["+win.id+"]");
				if(Ext.isEmpty(win.loadMask) || typeof win.loadMask == 'boolean') win.loadMask = new Ext.LoadMask(win.body,{removeMask:false});

					var change_link_value = function(){
						var s = 'S';
						if(Ext.getCmp('bp3d-link-window-image-re-use-size-l-button').getValue()){
							s = 'L';
						}
						var p='rotate';
						if(Ext.getCmp('bp3d-link-window-image-re-use-view-f-button').getValue()){
							p='front';
						}else if(Ext.getCmp('bp3d-link-window-image-re-use-view-b-button').getValue()){
							p='back';
						}else if(Ext.getCmp('bp3d-link-window-image-re-use-view-l-button').getValue()){
							p='left';
						}else if(Ext.getCmp('bp3d-link-window-image-re-use-view-r-button').getValue()){
							p='right';
						}

						var comp = Ext.getCmp('bp3d-link-window');

						var editURL = getEditUrl();
						editURL += 'icon.cgi?i='+comp.rep_id+'&s='+s+'&p='+p;

						Ext.getCmp('bp3d-link-window-image-re-use-still-textfield').setValue(editURL);
					};
					var show_link_image = function(url){
						var size = 'width=120,height=120';
						if(Ext.getCmp('bp3d-link-window-image-re-use-size-l-button').getValue()){
							size = 'width=640,height=640';
						}
						if(url && size) window.open(url, "_blank", "titlebar=no,toolbar=yes,status=no,menubar=yes,"+size);
					};

//					new Ext.form.Label({
//						renderTo : 'bp3d-link-window-image-re-use-label-renderTo',
//						id       : 'bp3d-link-window-image-re-use-label',
//						html     : get_ag_lang('BP3D_MODEL_ICON_LABEL')
//					});

					new Ext.form.Label({
						renderTo : 'bp3d-link-window-image-re-use-view-label-renderTo',
						id       : 'bp3d-link-window-image-re-use-view-label',
						html     : 'View&nbsp;'
					});
					new Ext.form.Radio({
						renderTo : 'bp3d-link-window-image-re-use-view-rotate-button-renderTo',
						id       : 'bp3d-link-window-image-re-use-view-rotate-button',
						name     : 'bp3d-link-window-image-re-use-view-radio',
						checked  : true,
						boxLabel : get_ag_lang('IMAGE_POSITION_ROTATE'),
						value    : 'rotate',
						listeners : {
							check: function(checkbox,checked){
								if(!checked) return;
								change_link_value();
							}
						}
					});
					new Ext.form.Radio({
						renderTo : 'bp3d-link-window-image-re-use-view-f-button-renderTo',
						id       : 'bp3d-link-window-image-re-use-view-f-button',
						name     : 'bp3d-link-window-image-re-use-view-radio',
						boxLabel : get_ag_lang('IMAGE_POSITION_FRONT'),
						value    : 'front',
						listeners : {
							check: function(checkbox,checked){
								if(!checked) return;
								change_link_value();
							}
						}
					});
					new Ext.form.Radio({
						renderTo : 'bp3d-link-window-image-re-use-view-b-button-renderTo',
						id       : 'bp3d-link-window-image-re-use-view-b-button',
						name     : 'bp3d-link-window-image-re-use-view-radio',
						boxLabel : get_ag_lang('IMAGE_POSITION_BACK'),
						value    : 'back',
						listeners : {
							check: function(checkbox,checked){
								if(!checked) return;
								change_link_value();
							}
						}
					});
					new Ext.form.Radio({
						renderTo : 'bp3d-link-window-image-re-use-view-l-button-renderTo',
						id       : 'bp3d-link-window-image-re-use-view-l-button',
						name     : 'bp3d-link-window-image-re-use-view-radio',
						boxLabel : get_ag_lang('IMAGE_POSITION_LEFT'),
						value    : 'left',
						listeners : {
							check: function(checkbox,checked){
								if(!checked) return;
								change_link_value();
							}
						}
					});
					new Ext.form.Radio({
						renderTo : 'bp3d-link-window-image-re-use-view-r-button-renderTo',
						id       : 'bp3d-link-window-image-re-use-view-r-button',
						name     : 'bp3d-link-window-image-re-use-view-radio',
						boxLabel : get_ag_lang('IMAGE_POSITION_RIGHT'),
						value    : 'right',
						listeners : {
							check: function(checkbox,checked){
								if(!checked) return;
								change_link_value();
							}
						}
					});

					new Ext.form.Label({
						renderTo : 'bp3d-link-window-image-re-use-size-label-renderTo',
						id       : 'bp3d-link-window-image-re-use-size-label',
						html     : 'Size&nbsp;'
					});
					new Ext.form.Radio({
						renderTo : 'bp3d-link-window-image-re-use-size-s-button-renderTo',
						id       : 'bp3d-link-window-image-re-use-size-s-button',
						name     : 'bp3d-link-window-image-re-use-size-radio',
						checked  : true,
						boxLabel : 'S',
						value    : 's',
						listeners : {
							check: function(checkbox,checked){
								_dump("check():["+checkbox.id+"]["+checked+"]");
								if(!checked) return;
								change_link_value();
							}
						}
					});
					new Ext.form.Radio({
						renderTo : 'bp3d-link-window-image-re-use-size-l-button-renderTo',
						id       : 'bp3d-link-window-image-re-use-size-l-button',
						name     : 'bp3d-link-window-image-re-use-size-radio',
						boxLabel : 'L',
						value    : 'l',
						listeners : {
							check: function(checkbox,checked){
								_dump("check():["+checkbox.id+"]["+checked+"]");
								if(!checked) return;
								change_link_value();
							}
						}
					});

					new Ext.form.Label({
						renderTo : 'bp3d-link-window-image-re-use-still-label-renderTo',
						id       : 'bp3d-link-window-image-re-use-still-label',
						html     : 'URL'
					});
					new Ext.form.TextField({
						renderTo : 'bp3d-link-window-image-re-use-still-textfield-renderTo',
						id       : 'bp3d-link-window-image-re-use-still-textfield',
						style    : 'width:100%;',
						selectOnFocus : true,
						readOnly      : true,
						listeners : {
							render: function(comp){
								_dump("render():["+comp.id+"]");
							}
						}
					});
					new Ext.Button({
						renderTo : 'bp3d-link-window-image-re-use-still-button-renderTo',
						id       : 'bp3d-link-window-image-re-use-still-button',
						text    : 'show Icon',
						listeners : {
							click: function(comp){
								_dump("click():["+comp.id+"]");
								show_link_image(Ext.getCmp('bp3d-link-window-image-re-use-still-textfield').getValue());
							}
						}
					});


			}
		}
	});
	bp3d_link_window.show(Ext.get('bp3d-link-a-link'));
	return false;
};

var bp3d_change_location = function(loc,clear){
	if(Ext.isEmpty(clear)) clear = false;
//_dump("bp3d_change_location():["+clear+"]");
	if(!Ext.isEmpty(gBP3D_TPAP)) gBP3D_TPAP = undefined;

	if(clear){
		Cookies.clear('ag_annotation.images.fmaid');
		_bp3d_change_location_hash = {};
		_bp3d_change_location_stack = [];

		var url = getEditUrl() + "location.html";
		if(url != _location.location.href){
			if(loc){
				$('iframe#_location').one('load',function(){
					_bp3d_change_location(loc);
				});
			}
			_location.location.href = url;
		}else{
			if(loc) _bp3d_change_location(loc);
		}
	}else{
		if(loc) _bp3d_change_location(loc);
	}

};

var _prev_bp3d_change_location;
var _bp3d_change_location_hash = {};
var _bp3d_change_location_stack = [];
var _bp3d_change_location = function(loc){

//	_dump("_bp3d_change_location():ag_annotation.images.fmaid=["+Cookies.get('ag_annotation.images.fmaid')+"]");

	var date = new Date();
//	var href = '_dc='+date.getTime()+'&';
	var time = date.getTime()+"";
	var href = '_dc='+time;

	if(loc.length>=2048-(href.length)){
		href += '&' + loc.substr(0,2048-(href.length)) + '#'+ loc;
//		href += '#' + loc;
	}else{
		href += '&' + loc;
	}
	if(_prev_bp3d_change_location==href) return;

	var s = Ext.urlDecode(_location.location.search.substr(1));
	if(s && s._dc && _bp3d_change_location_hash[s._dc]){
		Ext.each(_bp3d_change_location_stack,function(v,i,a){
			if(v!=s._dc) return true;
			for(var j=i+1;j<a.length;j++){
				delete _bp3d_change_location_hash[a[j]];
			}
			a.length = i+1;
			return false;
		});
	}

	_bp3d_change_location_hash[time] = Ext.urlDecode(loc);
	_bp3d_change_location_stack.push(time);

	var sel_id = Cookies.get('ag_annotation.images.fmaid');
	if(sel_id) _bp3d_change_location_hash[time].sel_id = sel_id;

	_location.location.href = "location.html?" + '_dc='+time;
	_prev_bp3d_change_location=href;
};

// /bp3d/ag-in-service/htdocs/anatomography_js.cgiより自動生成
var controlPanelCollapsible = true;
if(controlPanelCollapsible && window.screen.width>1024){
	controlPanelCollapsible = false;
}
//2011-09-07
controlPanelCollapsible = true;


function callback_print_image(form){
	while(form.lastChild){
		form.removeChild(form.lastChild);
	}
	var doc = form.ownerDocument;
	var param = Ext.urlDecode(makeAnatomoPrm());
	for(var key in param){
		var node = doc.createElement('input');
		node.name = key;
		node.type = 'hidden';
		node.value = param[key];
		form.appendChild(node);
	}
	form.submit();
};

var ag_parts_gridpanel_checkColumn = new Ext.grid.CheckColumn({
	header    : "Select",
	dataIndex : 'zoom'
});

var ag_parts_gridpanel_excludeColumn = new Ext.grid.CheckColumn({
	header    : "Remove",
	dataIndex : 'exclude',
	id        : 'exclude',
	width     : 50,
	resizable : false,
	sortable  : true,
	renderer  : bp3s_parts_gridpanel_checkbox_renderer
});

var ag_parts_gridpanel_pointColumn = new Ext.grid.CheckColumn({
	header    : 'Point',
	dataIndex : 'point',
	id        : 'point',
	width     : 40,
	resizable : false,
	sortable  : true,
	renderer  : bp3s_parts_gridpanel_point_checkbox_renderer
});

var ag_parts_gridpanel_cols_value_contextmenu = null;

var ag_parts_gridpanel_col_version = {
	dataIndex : 'version',
	header    : 'Version',
	id        : 'version',
	sortable  : true,
	hidden    : true,
	renderer  : bp3s_parts_gridpanel_renderer
};
var ag_parts_gridpanel_col_rep_id = {
	dataIndex : 'b_id',
	header    : get_ag_lang('REP_ID'),
	id        : 'b_id',
	sortable  : true,
	hidden    : true,
	renderer  : bp3s_parts_gridpanel_renderer
};
var ag_parts_gridpanel_col_cdi_name = {
	dataIndex : 'f_id',
	header    : get_ag_lang('CDI_NAME'),
	id        : 'f_id',
	sortable  : true,
	hidden    : true,
	renderer  : bp3s_parts_gridpanel_renderer
};
var ag_parts_gridpanel_col_color = {
	dataIndex : 'color',
	header    : 'Color',
	id        : 'color',
	width     : 40,
	resizable : false,
	sortable  : true,
	renderer  : bp3s_parts_gridpanel_color_renderer,
	editor    : new Ext.ux.ColorField({
		listeners: {
			select: function(e, c){
				try{var record = Ext.getCmp('ag-parts-gridpanel')._edit.record;}catch(e){_dump("color:"+e);}
				if(record){
					record.beginEdit();
					record.set('color',"#"+c);
					record.commit();
					record.endEdit();
				}
			}
		}
	})
};
var ag_parts_gridpanel_col_opacity = {
	dataIndex :'opacity',
	header    :'Opacity',
	id        :'opacity',
	width     : 50,
	resizable : false,
	sortable  : true,
	align     : 'right',
	renderer  : bp3s_parts_gridpanel_combobox_renderer,
	editor    : new Ext.form.ComboBox({
		typeAhead: true,
		triggerAction: 'all',
		store : ag_parts_gridpanel_col_opacity_arr,
		lazyRender:true,
		listClass: 'x-combo-list-small',
		listeners     : {
			'select' : function(combo,record,index){
				try{var record = Ext.getCmp('ag-parts-gridpanel')._edit.record;}catch(e){_dump("opacity:"+e);}
				if(record){
					record.beginEdit();
					record.set('opacity',combo.getValue());
					record.commit();
					record.endEdit();
				}
			},scope : this
		}
	})
};
var ag_parts_gridpanel_col_representation = {
	dataIndex : 'representation',
	header    : get_ag_lang('ANATOMO_REP_LABEL'),
	id        : 'representation',
	hidden    : true,
	sortable  : true,
	width     : 84,
	resizable : false,
	renderer  : bp3s_parts_gridpanel_combobox_renderer,
	editor    : new Ext.form.ComboBox({
		typeAhead: true,
		triggerAction: 'all',
		store : ag_parts_gridpanel_col_representation_arr,
		lazyRender:true,
		listClass: 'x-combo-list-small',
		listeners     : {
			'select' : function(combo,record,index){
				try{var record = Ext.getCmp('ag-parts-gridpanel')._edit.record;}catch(e){_dump("representation:"+e);}
				if(record){
					record.beginEdit();
					record.set('representation',combo.getValue());
					record.commit();
					record.endEdit();
				}
			},scope : this
		}
	})
};
var ag_parts_gridpanel_col_value = {
	dataIndex : 'value',
	header    : 'Value',
	id        : 'value',
	hidden    : true,
	sortable  : true,
	renderer  : bp3s_parts_gridpanel_renderer,
	editor    : new Ext.form.TextField({
		allowBlank: true
	})
};
var ag_parts_gridpanel_col_organsys = {
	dataIndex : 'organsys',
	header    : get_ag_lang('GRID_TITLE_ORGANSYS'),
	id        : 'organsys',
	sortable  : true,
	hidden    : true,
	renderer  : bp3s_parts_gridpanel_renderer
};
var ag_parts_gridpanel_col_entry = {
	dataIndex : 'entry',
	header    : get_ag_lang('GRID_TITLE_MODIFIED'),
	id        : 'entry',
	sortable  : true,
	hidden    : true,
	renderer  : bp3s_parts_gridpanel_date_renderer
};

var ag_parts_gridpanel_cols = [
	{dataIndex:'tg_id',     header:'Model',                           id:'tg_id',     sortable: true,  hidden:true,  renderer:bp3s_parts_gridpanel_group_renderer, fixed:true},
	{dataIndex:'conv_id',   header:'ConversionID',                    id:'conv_id',   sortable: true,  hidden:true,  renderer:bp3s_parts_gridpanel_renderer, fixed:true},
	{dataIndex:'common_id', header:'UniversalID',                     id:'common_id', sortable: true,  hidden:true, fixed:true, renderer:bp3s_parts_gridpanel_commonid_renderer},
//	{dataIndex:'name_j',    header:get_ag_lang('GRID_TITLE_NAME_J'),      id:'name_j',    sortable: true,  hidden:false, renderer:bp3s_parts_gridpanel_renderer},
//	{dataIndex:'name_k',    header:get_ag_lang('GRID_TITLE_NAME_K'),      id:'name_k',    sortable: true,  hidden:false,  renderer:bp3s_parts_gridpanel_renderer},
	{dataIndex:'name_e',    header:get_ag_lang('DETAIL_TITLE_NAME_E'),                         id:'name_e',    sortable: true,  hidden:false, renderer:bp3s_parts_gridpanel_renderer},
//	{dataIndex:'name_l',    header:'Latina',                          id:'name_l',    sortable: true,  hidden:true,  renderer:bp3s_parts_gridpanel_renderer},
	ag_parts_gridpanel_col_color,
	ag_parts_gridpanel_col_opacity,
	ag_parts_gridpanel_excludeColumn,
	ag_parts_gridpanel_col_value,
//	ag_parts_gridpanel_col_organsys,
	ag_parts_gridpanel_col_representation,
	ag_parts_gridpanel_col_rep_id,
	ag_parts_gridpanel_col_cdi_name,
	{dataIndex:'xmin',      header:'Xmin(mm)',                        id:'xmin',      sortable: true,  hidden:true,  renderer:bp3s_parts_gridpanel_renderer},
	{dataIndex:'xmax',      header:'Xmax(mm)',                        id:'xmax',      sortable: true,  hidden:true,  renderer:bp3s_parts_gridpanel_renderer},
	{dataIndex:'ymin',      header:'Ymin(mm)',                        id:'ymin',      sortable: true,  hidden:true,  renderer:bp3s_parts_gridpanel_renderer},
	{dataIndex:'ymax',      header:'Ymax(mm)',                        id:'ymax',      sortable: true,  hidden:true,  renderer:bp3s_parts_gridpanel_renderer},
	{dataIndex:'zmin',      header:'Zmin(mm)',                        id:'zmin',      sortable: true,  hidden:true,  renderer:bp3s_parts_gridpanel_renderer},
	{dataIndex:'zmax',      header:'Zmax(mm)',                        id:'zmax',      sortable: true,  hidden:true,  renderer:bp3s_parts_gridpanel_renderer},
	{dataIndex:'volume',    header:get_ag_lang('GRID_TITLE_VOLUME')+'(cm3)', id:'volume',    sortable: true,  hidden:true,  renderer:bp3s_parts_gridpanel_renderer},
	ag_parts_gridpanel_col_version,
	ag_parts_gridpanel_col_entry
];

var ag_parts_gridpanel = new Ext.grid.EditorGridPanel({
	id             : 'ag-parts-gridpanel',
	stateful       : true,
	stateId        : 'ag-parts-gridpanel',
	title          : 'Pallet',
//	columns        : ag_parts_gridpanel_cols,
	cm             : new Ext.grid.ColumnModel(ag_parts_gridpanel_cols),
	enableDragDrop : true,
	stripeRows     : true,
	columnLines    : true,
//	region         : 'center',
	width          : 300,
	minWidth       : 150,
	loadMask       : true,
	maskDisabled   : true,
	split          : false,
	border         : false,
	style          : 'border-right-width:1px',
	plugins        : [ag_parts_gridpanel_checkColumn,ag_parts_gridpanel_excludeColumn],
	clicksToEdit   : 1,
	trackMouseOver : true,
	selModel : new Ext.grid.RowSelectionModel({
		listeners: {
			'rowdeselect' : function(selModel,rowIndex,record){
				record.beginEdit();
				record.set('zoom',false);
				record.commit(true);
				record.endEdit();
			},
			'rowselect' : function(selModel,rowIndex,record){
				record.beginEdit();
				record.set('zoom',true);
				record.commit(true);
				record.endEdit();
			},
			'selectionchange' : function(selModel){
				try{
					try{Ext.getCmp('ag-pallet-def-color-button').disable();}catch(e){}
					try{Ext.getCmp('ag-pallet-none-color-button').disable();}catch(e){}
					Ext.getCmp('ag-pallet-home-button').disable();
					try{Ext.getCmp('ag-pallet-copy-button').disable();}catch(e){}
					Ext.getCmp('ag-pallet-delete-button').disable();

					Ext.getCmp('ag-pallet-color-pallet-button').disable();
					Ext.getCmp('ag-pallet-opacity-pallet-button').disable();
					Ext.getCmp('ag-pallet-remove-pallet-button').disable();

					$('td.ag-extra-pallet-default-color>a').addClass('x-item-disabled');
					$('td.ag-extra-pallet-distinct-color>a').addClass('x-item-disabled');

					if(selModel.getCount()>0){
						try{Ext.getCmp('ag-pallet-def-color-button').enable();}catch(e){}
						try{Ext.getCmp('ag-pallet-none-color-button').enable();}catch(e){}
						try{Ext.getCmp('ag-pallet-copy-button').enable();}catch(e){}
						Ext.getCmp('ag-pallet-delete-button').enable();

						Ext.getCmp('ag-pallet-color-pallet-button').enable();
						Ext.getCmp('ag-pallet-opacity-pallet-button').enable();
						Ext.getCmp('ag-pallet-remove-pallet-button').enable();

						$('td.ag-extra-pallet-default-color>a').removeClass('x-item-disabled');
						$('td.ag-extra-pallet-distinct-color>a').removeClass('x-item-disabled');
					}
					if(selModel.getCount()==1){
						var combo;
						var contents_tabs = Ext.getCmp('contents-tab-panel');
						if(contents_tabs.getActiveTab().id == 'contents-tab-bodyparts-panel'){
							combo = Ext.getCmp('bp3d-tree-group-combo');
						}else{
							combo = Ext.getCmp('anatomo-tree-group-combo');
						}
						if(combo.getValue()!=selModel.getSelected().get("tg_id")) Ext.getCmp('ag-pallet-home-button').enable();
					}
				}catch(e){
					_dump("441:"+e);
				}
			},
			scope:this
		}
	}),
	bbar : [
		{
			id : 'ag-pallet-select-button',
			tooltip : 'Select All',
			iconCls  : 'pallet_select',
			listeners : {
				'click' : {
					fn : function (button, e) {
						var grid = Ext.getCmp('ag-parts-gridpanel');
						if(grid && grid.rendered) grid.getSelectionModel().selectAll();
					},
					scope: this
				}
			}
		},
		{
			id : 'ag-pallet-unselect-button',
			tooltip : 'Unselect All',
			iconCls  : 'pallet_unselect',
			listeners : {
				'click' : {
					fn : function (button, e) {
						var grid = Ext.getCmp('ag-parts-gridpanel');
						if(grid && grid.rendered) grid.getSelectionModel().clearSelections();
					},
					scope: this
				}
			}
		},
		'-',
		{
			hidden : true,
			id        : 'pallet-focus-center-button',
			tooltip   : get_ag_lang('TOOLTIP_FOCUS_CENTER'),
			iconCls   : 'pallet_focus_center',
			listeners : {
				'click' : {
					fn : function (button, e) {
						ag_focus(false,true);
					},
					scope: this
				}
			}
		},
		{
			hidden : true,
			id        : 'pallet-focus-button',
			tooltip   : get_ag_lang('TOOLTIP_FOCUS'),
			iconCls   : 'pallet_focus',
			listeners : {
				'click' : {
					fn : function (button, e) {
						ag_focus();
					},
					scope: this
				}
			}
		},
//		'-',
		{
			hidden : true,
			id : 'ag-pallet-def-color-button',
			tooltip   : 'Set distinct color to selected parts',
			iconCls  : 'pallet_def_color',
			disabled : true,
			listeners : {
				'click' : {
					fn : function (button, e) {
						var grid = Ext.getCmp('ag-parts-gridpanel');
						if(!grid || !grid.rendered) return;
						grid.stopEditing();
						var records = grid.getSelectionModel().getSelections();
						if(records.length==0) return;
						var post_data = {f_ids:[]};
						var post_id_hash = {};
						for(var i=0;i<records.length;i++){
							var f_id = records[i].get('f_id');
							post_data.f_ids.push(f_id);
							post_id_hash[f_id] = "";
//_dump("f_id=["+f_id+"]");
						}
						post_data.f_ids = Ext.util.JSON.encode(post_data.f_ids);
						try{post_data.version = Ext.getCmp('anatomo-version-combo').getValue();}catch(e){delete post_data.version;}
						Ext.Ajax.request({
							url     : 'get-contents.cgi',
							method  : 'POST',
							params  : Ext.urlEncode(post_data),
							success : function(conn,response,options){
//_dump("success()");
								try{
									try{var results = Ext.util.JSON.decode(conn.responseText);}catch(e){}
									var store = Ext.getCmp('ag-parts-gridpanel').getStore();

										getRandomColor2 = function(bc,y){
											var c;
											do{
												c = Math.ceil(Math.random() * parseInt("FF", 16));
											}while(Math.abs(c-bc)<=10);
											c = c.toString(16);
											while(c.length<2){ c = '0' + c; }
											return c;
										};
										getRandomColor = function(){
											var prm_record = ag_param_store.getAt(0);
											var bg_rgb = prm_record.get('bg_rgb');
											var bg_r = parseInt(bg_rgb.substr(0,2),16);
											var bg_g = parseInt(bg_rgb.substr(2,2),16);
											var bg_b = parseInt(bg_rgb.substr(4,2),16);
											var bg_y = bg_r*0.299 + bg_g*0.587 + bg_b*0.114;

											var r = getRandomColor2(bg_r,bg_y);
											var g = getRandomColor2(bg_g,bg_y);
											var b = getRandomColor2(bg_b,bg_y);
											return ('#'+r+g+b).toUpperCase();
										};


									if(results && results.images && results.images.length>0){
										var prm_record = ag_param_store.getAt(0);

										for(var i=0;i<results.images.length;i++){
											var index = store.find('f_id',new RegExp("^"+results.images[i].f_id+"$"));
											if(index<0) continue;
											delete post_id_hash[results.images[i].f_id];
//											var def_color = results.images[i].def_color;
//											if(Ext.isEmpty(def_color)){
//												def_color = '#'+prm_record.data.color_rgb;
//												def_color = getRandomColor();
//											}
											var def_color = getRandomColor();

//_dump("["+results.images[i].f_id+"]=["+def_color+"]");

											var record = store.getAt(index);
											if(record.get('color') == def_color) continue;
											record.set('color', def_color);
											record.commit();
										}
									}
									for(var f_id in post_id_hash){
										var index = store.find('f_id',new RegExp("^"+f_id+"$"));
//_dump("f_id=["+f_id+"]["+index+"]");
										if(index<0) continue;
										def_color = getRandomColor();
										var record = store.getAt(index);
										record.set('color', def_color);
										record.commit();
									}
								}catch(e){
									_dump("success():"+e);
								}
							},
							failure : function(conn,response,options){
//_dump("failure()");
							}
						});
					},
					scope: this
				}
			}
		},
		{
			hidden: true,
			id : 'ag-pallet-none-color-button',
			tooltip   : 'Set default color to selected parts',
			iconCls  : 'pallet_none_color',
			disabled : true,
			listeners : {
				'click' : {
					fn : function (button, e) {
						var grid = Ext.getCmp('ag-parts-gridpanel');
						if(!grid || !grid.rendered) return;
						grid.stopEditing();
						var records = grid.getSelectionModel().getSelections();
						if(records.length==0) return;
						var prm_record = ag_param_store.getAt(0);
						for(var i=0;i<records.length;i++){
//							if(records[i].get('color') == '') continue;
							records[i].beginEdit();
							records[i].set('color', '#'+prm_record.data.color_rgb);
							records[i].endEdit();
							records[i].commit();
						}
					},
					scope: this
				}
			}
		},
//		'-',
		//2011-09-07 ADD
		new Ext.Toolbar.Button({
//		new Ext.Toolbar.MenuButton({
			id            : 'ag-pallet-heatmap-bar-button',
//			tooltip       : 'Heat Map Bar',
//			iconCls       : 'pallet_heatmap_bar',
			tooltip       : 'choropleth',
			iconCls       : 'pallet_heatmap',
			enableToggle  : true,
			pressed       : (ag_param_store.getAt(0).data.colorbar_f=='1')?true:false,
			toggleHandler : function (button, state) {
				var check = Ext.getCmp('show-colorbar-check');
				if(check && check.rendered) check.setValue(state);
/*
			},
			menu : {
				items: [
					new Ext.ux.TextFieldItem({
						fieldLabel :'MAX'
					}),
					new Ext.ux.TextFieldItem({
						fieldLabel :'MIN'
					})
				]
*/
			}

		}),
		'-',

		//2015-09-10 ADD START
		{
			id: 'ag-pallet-color-pallet-button',
			tooltip: 'Set select color to selected parts',
//			iconCls: 'color_pallet',
			text: 'Color',
			disabled: true,
			menu: new Ext.ux.ColorMenu({
				listeners : {
					beforerender: function(menu){
						if(menu.palette && menu.palette.colors) menu.palette.colors = window.palette_color;
					},
					select: {
						fn: function(colorPalette, color){
							if(color.substr(0,1) !== '#') color = '#'+color;
							var gridpanel = Ext.getCmp('ag-parts-gridpanel');
							var selModel = gridpanel.getSelectionModel();
							var store = gridpanel.getStore();
							var records = selModel.getSelections();
							Ext.each(records,function(record){
								record.beginEdit();
								record.set('color',color);
								record.endEdit();
								record.commit();
							});
						},
						buffer: 100
					}
				}
			},{
				text:'Option...',
				iconCls:'color_pallet',
				menuOptionListeners: {
					select: function(colorDialog, color){
						if(color.substr(0,1) !== '#') color = '#'+color;
						var gridpanel = Ext.getCmp('ag-parts-gridpanel');
						var selModel = gridpanel.getSelectionModel();
						var store = gridpanel.getStore();
						var records = selModel.getSelections();
						Ext.each(records,function(record){
							record.beginEdit();
							record.set('color',color);
							record.endEdit();
							record.commit();
						});
					}
				},
				listeners: {
					click: {
						fn: function(){
							if(this.disabled){
								return;
							}
							if(Ext.isEmpty(this.menuOption)){
								var config = {
									closeAction:'hide',
									modal : true,
									buttons : [{
										text : 'OK',
										handler : function(b,e){
											try{
												this.menuOption.fireEvent('select',b,this.menuOption.getColor(1));
												this.menuOption.hide();
											}catch(e){
												_dump(e);
											}
										},
										scope : this
									},{
										text : 'Cancel',
										handler : function(b,e){
											try{
												this.menuOption.hide();
											}catch(e){
												_dump(e);
											}
										},
										scope : this
									}]
								};
								try{
									var color = this.getValue();
									if(color.substr(0,1) == '#') color = color.substr(1);
									config.color = color;
								}catch(e){}
								this.menuOption = new Ext.ux.ColorDialog(config);
								this.menuOption.on(Ext.apply({}, this.menuOptionListeners, {
									scope:this
								}));
							}
							var body_box = Ext.getBody().getBox();
							body_box.width -= 30;
							var menu_box = this.menuOption.getBox();
							var x = this.el.getX();
							var y = this.el.getY()+this.el.getHeight();
							if(x+menu_box.width>body_box.width) x = (x+this.el.getWidth()+17) - menu_box.width;
							if(y+menu_box.height>body_box.height) y = y - this.el.getHeight() - menu_box.height;

							if(x<0) x = 0;
							if(y<0) y = 0;

							this.menuOption.setPosition(x,y);

							try{
								var color = this.getValue();
								if(color.substr(0,1) == '#') color = color.substr(1);
								this.menuOption.setColor(color);
							}catch(e){}

							this.menuOption.show(this.el);
						},
						buffer:100
					}
				}
			})
		},{
			id: 'ag-pallet-opacity-pallet-button',
			text: 'Opacity',
			disabled: true,
			menu: {
				items:[{
					text: '1.0'
				},{
					text: '0.8'
				},{
					text: '0.6'
				},{
					text: '0.4'
				},{
					text: '0.3'
				},{
					text: '0.2'
				},{
					text: '0.1'
				},{
					text: '0.05'
				},{
					text: '0.0'
				}],
				listeners: {
					click: function( menu, item, e, eOpts ){
						if(isNaN(parseFloat(item.text))) return;
						var opacity = item.text;
						var gridpanel = Ext.getCmp('ag-parts-gridpanel');
						var selModel = gridpanel.getSelectionModel();
						var store = gridpanel.getStore();
						var records = selModel.getSelections();
						Ext.each(records,function(record){
							record.beginEdit();
							record.set('opacity',opacity);
							record.endEdit();
							record.commit();
						});
					}
				}
			}
		},{
			id: 'ag-pallet-remove-pallet-button',
			text: 'Remove',
			disabled: true,
			menu: {
				items:[{
					text: 'Show'
				},{
					text: 'Remove'
				}],
				listeners: {
					click: function( menu, item, e, eOpts ){
						var exclude = item.text.toUpperCase()==='REMOVE';
						var gridpanel = Ext.getCmp('ag-parts-gridpanel');
						var selModel = gridpanel.getSelectionModel();
						var store = gridpanel.getStore();
						var records = selModel.getSelections();
						Ext.each(records,function(record){
							record.beginEdit();
							record.set('exclude',exclude);
							record.endEdit();
							record.commit();
						});
					}
				}
			}
		},
		//2015-09-10 ADD END

		'->',
		{
			id : 'ag-pallet-home-button',
			tooltip   : 'Home',
			iconCls  : 'home',
			disabled : true,
			hidden   : true,
			listeners : {
				'click' : {
					fn : function (button, e) {
						var selModel = ag_parts_gridpanel.getSelectionModel();
						var record = selModel.getSelected();
						if(record){
							var tg_id = record.get("tg_id");
							if(!Ext.isEmpty(tg_id)){
								try{
									var combo;
									var contents_tabs = Ext.getCmp('contents-tab-panel');
									if(contents_tabs.getActiveTab().id == 'contents-tab-bodyparts-panel'){
										combo = Ext.getCmp('bp3d-tree-group-combo');
									}else{
										combo = Ext.getCmp('anatomo-tree-group-combo');
									}
									if(combo.getValue()==tg_id) return;
									var store = combo.getStore();
									var index = store.find('tg_id', new RegExp('^'+tg_id+'$'));
									combo.setValue(tg_id);
									combo.fireEvent('select',combo,store.getAt(index),index);
								}catch(e){
									_dump("683:"+e);
								}
							}
						}
						try{selModel.clearSelections();}catch(e){}
					},
					scope: this
				}
			}
		},
		'-',
		{
			xtype : 'tbbutton',
			id : 'ag-pallet-copy-button',
			tooltip   : get_ag_lang('COPY_TITLE')+' Selected',
			iconCls  : 'pallet_copy',
			disabled : true,
			listeners : {
				'click' : {
					fn : function (button, e) {
						var grid = Ext.getCmp('ag-parts-gridpanel');
						if(grid && grid.rendered){
							copyList(grid);
						}
					},
					scope: this
				}
			}
		},
		'-',
		{
			xtype     : 'tbbutton',
			id        : 'ag-pallet-paste-button',
			tooltip   : 'Paste',
			iconCls   : 'pallet_paste',
			listeners : {
				'click' : {
					fn : function (button, e) {
						var grid = Ext.getCmp('ag-parts-gridpanel');
						if(grid && grid.rendered){
							pasteList(grid);
						}
					},
					scope: this
				}
			}
		},
		'-',
		{
			id : 'ag-pallet-delete-button',
			tooltip   : 'Delete Selected',
			iconCls  : 'pallet_delete',
			disabled : true,
			listeners : {
				'click' : {
					fn : function (button, e) {
						var store = ag_parts_gridpanel.getStore();
						var records = store.getRange();
						for(var i=records.length-1;i>=0;i--){
							if(records[i].data.zoom) store.remove(records[i]);
						}
						var count = store.getCount();
						if(count == 0) store.removeAll();
						try{ag_parts_gridpanel.getSelectionModel().clearSelections();}catch(e){}
					},
					scope: this
				}
			}
		}
	],
	store : bp3d_parts_store,
	listeners : {
		"keydown" : function(e){
			if(e.getKey()!=e.DELETE) return;

			var button = Ext.getCmp('ag-pallet-delete-button');
			if(button) button.fireEvent('click',button,e);
		},
		"celldblclick" : function(grid,rowIndex,cellIndex,e){
			var id = grid.getColumnModel().getColumnId(cellIndex);
			if(id != "tg_id") return;
			var store = grid.getStore();
			var record = store.getAt(rowIndex);
			var tg_id = record.get(id);
			if(Ext.isEmpty(tg_id)) return;
			try{
				var combo;
				var contents_tabs = Ext.getCmp('contents-tab-panel');
				if(contents_tabs.getActiveTab().id == 'contents-tab-bodyparts-panel'){
					combo = Ext.getCmp('bp3d-tree-group-combo');
				}else{
					combo = Ext.getCmp('anatomo-tree-group-combo');
				}
				if(combo.getValue()==tg_id) return;
				var store = combo.getStore();
				var index = store.find('tg_id', new RegExp('^'+tg_id+'$'));
				combo.setValue(tg_id);
				combo.fireEvent('select',combo,store.getAt(index),index);
			}catch(e){
				_dump("788:"+e);
			}
		},
		"rowclick" : function(grid,rowIndex,e){
			var store = grid.getStore();
			var records = store.getRange();
			if(!e.ctrlKey && !e.shiftKey){
				if(rowIndex>0) grid.getSelectionModel().deselectRange(0,rowIndex-1);
				if(rowIndex<records.length-1) grid.getSelectionModel().deselectRange(rowIndex+1,records.length-1);
			}
		},
		"resize" : function(e){
			resizeGridPanelColumns(ag_parts_gridpanel);
		},
		"beforeedit": function(e){
			e.grid._edit = e;
			_dump("ag_parts_gridpanel():beforeedit()");
		},
		"afteredit": function(e){
			e.record.commit();
//			e.grid._edit = undefined;
			_dump("ag_parts_gridpanel():afteredit()");
		},
		"complete": function(comp,row,col){
			comp.view.focusRow(row);
		},
		"beforerender": function(comp){
			var id = comp.getStateId();
//_dump("ag-parts-gridpanel.beforerender():id=["+id+"]");
			if(id){
				var state = Ext.state.Manager.get(id);
//_dump("ag-parts-gridpanel.beforerender():state=["+state+"]");
				if(state) comp.applyState(state);
			}
		},
		"render": function(comp){
//_dump("ag-parts-gridpanel.render()");
			restoreHiddenGridPanelColumns(comp);


			// This will make sure we only drop to the view container
			try{var ag_parts_gridpanelDropTargetEl = ag_parts_gridpanel.getView().el.dom.childNodes[0].childNodes[1]}catch(e){}
			if(ag_parts_gridpanelDropTargetEl){
				var destGridDropTarget = new Ext.dd.DropTarget(ag_parts_gridpanelDropTargetEl, {
					ddGroup    : 'partlistDD',
					copy       : false,
					notifyOver : function(ddSource, e, data){
						var rtn = "x-dd-drop-nodrop";
						function checkRow(record, index, allItems) {
							if(isNoneDataRecord(record)) return;
							var store = ag_parts_gridpanel.getStore();
							// Search for duplicates
							var foundItem = store.find('f_id', record.data.f_id);
							// if not found
							if (foundItem == -1) {
								rtn = "x-dd-drop-ok";
							}
						}
						// Loop through the selections
						Ext.each(ddSource.dragData.selections,checkRow);
						return rtn;
					},
					notifyDrop : function(ddSource, e, data){
						var rtn = true;
						// Generic function to add records.
						function addRow(record, index, allItems) {
							if(isNoneDataRecord(record)){
								rtn = false;
								return;
							}
							var store = ag_parts_gridpanel.getStore();
							// Search for duplicates
							var foundItem = store.find('f_id', record.data.f_id);
							// if not found
							if (foundItem  == -1) {
								ag_parts_gridpanel.stopEditing();

								var prm_record = ag_param_store.getAt(0);
								record.beginEdit();
								record.set('color','#'+prm_record.data.color_rgb);
								record.set('value','');
								record.set('zoom',false);
								record.set('exclude',false);
								record.set('opacity','1.0');
								record.set('representation','surface');
								record.dirty = false;
								record.endEdit();
								store.add(record);

								// Call a sort dynamically
								store.sort('name', 'ASC');
							}else{
								rtn = false;
							}
						}
						// Loop through the selections
						Ext.each(ddSource.dragData.selections,addRow);
						delete ddSource.dragData.selections;
						return rtn;
					}
				}); 
			}
		},
		'afterlayout' : function(panel,layout){
			afterLayout(panel);
		},
		'show' : function(panel){
			try{
				var size = panel.getSize();
				if(size.width && size.height) resizeGridPanelColumns(panel);
			}catch(e){
//				_dump("ag-parts-gridpanel.show():"+e);
			}
		},
		'render' : function(panel){
			if(!panel.loadMask) panel.loadMask = new Ext.LoadMask(panel.body,{removeMask:false});
		},
		'cellcontextmenu' : function(grid,rowIndex,cellIndex,e){
			e.stopEvent();

			var dataIndex = grid.getColumnModel().getDataIndex(cellIndex);
			_dump("ag-parts-gridpanel.cellcontextmenu("+rowIndex+","+cellIndex+","+dataIndex+")");
			if(dataIndex != 'value') return;

			var record = grid.getStore().getAt(rowIndex);
			if(!record || Ext.isEmpty(record.get(dataIndex))) return;
			var value = record.get(dataIndex);

			if(!ag_parts_gridpanel_cols_value_contextmenu){
				ag_parts_gridpanel_cols_value_contextmenu = new Ext.menu.Menu({
					id : 'ag-parts-gridpanel-cols-value-contextmenu',
					items : [{
						xtype   : 'menuitem',
						id      : 'max',
						text    : get_ag_lang('HEATMAP_SET_MAX_VALUE'),
						iconCls : 'bmax'
					},'-',{
						xtype   : 'menuitem',
						id      : 'min',
						text    : get_ag_lang('HEATMAP_SET_MIN_VALUE'),
						iconCls : 'bmin'
					}],
					listeners : {
						'click' : function(menu,menuitem,e){
							var comp = null;
							if(menuitem.id == 'max'){
								comp = Ext.getCmp('scalar-max-textfield');
							}else if(menuitem.id == 'min'){
								comp = Ext.getCmp('scalar-min-textfield');
							}
							if(comp){
								comp.setValue(menuitem.value);
								comp.fireEvent('change',comp,menuitem.value,'');
							}
						},
						scope:this
					}
				});
			}
			var maxItem;
			var minItem;
			var maxIndex = ag_parts_gridpanel_cols_value_contextmenu.items.findIndex('id','max');
			var minIndex = ag_parts_gridpanel_cols_value_contextmenu.items.findIndex('id','min');
			if(maxIndex>=0) maxItem = ag_parts_gridpanel_cols_value_contextmenu.items.itemAt(maxIndex);
			if(minIndex>=0) minItem = ag_parts_gridpanel_cols_value_contextmenu.items.itemAt(minIndex);
			if(maxItem) maxItem.value = value;
			if(minItem) minItem.value = value;
			if(e.getXY){
				var xy = e.getXY();
				xy[0] += 2;
				xy[1] += 2;
				ag_parts_gridpanel_cols_value_contextmenu.showAt(xy);
			}
		},
		scope:this
	},
	keys : {
		key: 'a',
		ctrl: true,
		stopEvent: true,
		handler: function() {
			ag_parts_gridpanel.getSelectionModel().selectAll();
		}
	}
});
ag_parts_gridpanel.getColumnModel().on({
	'hiddenchange' : function(column,columnIndex,hidden){
		resizeGridPanelColumns(ag_parts_gridpanel);
		saveHiddenGridPanelColumns(ag_parts_gridpanel);
	},
	scope: this,
	delay: 100
});
ag_parts_gridpanel.on({
	'afterlayout' : function(panel,layout){
		afterLayout(ag_parts_gridpanel);
	},
	scope:this
});

function setClipLine(){
	var textCmp = Ext.getCmp('anatomo-clip-value-text');
	var value = textCmp.getValue();
	var clip;
	try{clip = Ext.getCmp('anatomo-clip-predifined-plane').getValue();}catch(e){clip = undefined;}
	var clipImg = document.getElementById("clipImg");
	var clipImgDiv = document.getElementById("clipImgDiv");
	var clipImgLine = document.getElementById("clipImgLine");

//_dump("setClipLine()");

	if(clip && clipImgDiv && clipImgLine && !Ext.isEmpty(YRangeFromServer)){
		var zoom = 1800/YRangeFromServer;
		var width = (clipImgDiv.offsetWidth?clipImgDiv.offsetWidth:138);
		var height = (clipImgDiv.offsetHeight?clipImgDiv.offsetHeight:303);
		if(clip == 'FB'){
			value -= glb_clip_center;
		}else if(clip == 'RL'){
			value -= glb_clip_center;
		}else if(clip == "TB"){
			value -= glb_clip_center;
		}
		if(clip == "FB" || clip == "RL"){
			clipImgLine.style.width = '0px';
			clipImgLine.style.height = height + 'px';
			var x = Math.ceil((width/2) + (height * (value / YRangeFromServer))) - 2;
//			_dump("setClipLine():x=["+x+"]");
			if(isNaN(x)) x = 0;
			clipImgLine.style.left = x + 'px';
			clipImgLine.style.top = '0px';
			clipImgLine.style.display = '';
		}else if(clip == "TB"){
			clipImgLine.style.width = width + 'px';
			clipImgLine.style.height = '0px';
			var y = Math.ceil((height/2) - (height * (value / YRangeFromServer))) - 2;
//			_dump("setClipLine():y=["+y+"]");
			if(isNaN(y)) y = 0;
			clipImgLine.style.left = '0px';
			clipImgLine.style.top = y + 'px';
			clipImgLine.style.display = '';
		}else{
			clipImgLine.style.display = 'none';
		}
	}
}



var anatomography_image = null;

function ag_pin_grid_renderer(value,metadata,record,rowIndex,colIndex,store){
	if(window.ag_extensions && ag_extensions.global_pin && ag_extensions.global_pin.grid_renderer){
		return ag_extensions.global_pin.grid_renderer(arguments);
	}

	var dataIndex = ag_pin_grid_panel_cols[colIndex].dataIndex;
	var item;
	for(var i=0;i<record.fields.length;i++){
		if(record.fields.keys[i] != dataIndex) continue;
		item = record.fields.items[i];
		break;
	}

	if(item){
		if(item.type == 'date'){
			if(dataIndex == 'entry' && value) value = new Date(value).format(bp3d.defaults.DATE_FORMAT);
			if(dataIndex == 'lastmod' && value) value = new Date(value).format(bp3d.defaults.TIME_FORMAT);
		}
	}

	return value;
}

function anatomo_comment_color_cell_style(value,metadata,record,rowIndex,colIndex,store){
	try{
		if(value){
			return '<span style="background-color:#' + value + '">&nbsp;&nbsp;&nbsp;&nbsp;</span>';
		}
	}catch(e){_dump("1680:"+e);}
	return value;
};
var ag_pin_grid_panel_cols_fixed = true;
if(window.ag_extensions && ag_extensions.single_pin && ag_extensions.single_pin.gridColumn){
	ag_pin_grid_panel_cols_fixed = false;
}
var ag_pin_grid_panel_cols = [
	{dataIndex:'coord',   header:'Coord',                      id:'coord', width:40, resizable:false, hidden:true, fixed:true, renderer:ag_pin_grid_renderer},
	{dataIndex:'no',      header:'No',                         id:'no',  width:30, align:'right', fixed:ag_pin_grid_panel_cols_fixed, renderer:ag_pin_grid_renderer, sortable:true},
	{dataIndex:'oid',     header:get_ag_lang('CDI_NAME'),          id:'oid', width:70, resizable:true, renderer:ag_pin_grid_renderer, sortable:true},
	{dataIndex:'organ',   header:'Organ',                      id:'organ', renderer:ag_pin_grid_renderer, sortable:true},
//	{dataIndex:'name_j',  header:get_ag_lang('GRID_TITLE_NAME_J'), id:'name_j', hidden:true, renderer:ag_pin_grid_renderer},
//	{dataIndex:'name_k',  header:get_ag_lang('GRID_TITLE_NAME_K'), id:'name_k', hidden:true, renderer:ag_pin_grid_renderer},
//	{dataIndex:'name_l',  header:'Latina',                     id:'name_l', hidden:true, renderer:ag_pin_grid_renderer},
	{dataIndex:'color',   header:'Color',                      id:'color', width:40, resizable:false, renderer: anatomo_comment_color_cell_style, sortable:true},
	{dataIndex:'comment', header:'Description',                id:'comment', renderer:ag_pin_grid_renderer, sortable:true}
	
];

if(window.ag_extensions && ag_extensions.single_pin && ag_extensions.single_pin.gridColumn){
	ag_pin_grid_panel_cols.push(ag_extensions.single_pin.gridColumn());
}

var ag_pin_grid_panel = new Ext.grid.GridPanel({
	id             : 'anatomography-pin-grid-panel',
	title          : 'Pin',
	columns        : ag_pin_grid_panel_cols,
	stripeRows     : true,
	columnLines    : true,
	region         : 'center',
	border         : false,
//	style          : 'border-right-width:1px',
	selModel : new Ext.grid.RowSelectionModel({
		listeners : {
			'selectionchange' : function(selModel){
				var add_btn = Ext.getCmp('anatomo_point_element_add_button');
				if(selModel.getCount()==1){
					Ext.getCmp('anatomo_comment_pick_edit').enable();
					if(!Ext.isEmpty(add_btn)) add_btn.enable();
				}else{
					Ext.getCmp('anatomo_comment_pick_edit').disable();
					if(!Ext.isEmpty(add_btn)) add_btn.disable();
				}
				if(selModel.getCount()>0){
					Ext.getCmp('anatomo_comment_pick_delete').enable();
//					Ext.getCmp('anatomo_comment_pick_sp_url_copy').enable();
				}else{
					Ext.getCmp('anatomo_comment_pick_delete').disable();
//					Ext.getCmp('anatomo_comment_pick_sp_url_copy').disable();
				}
				var store = ag_pin_grid_panel.getStore();
				if(store.getCount()>1 && selModel.getCount()==1){
					Ext.getCmp('anatomo_comment_pick_up').enable();
					Ext.getCmp('anatomo_comment_pick_down').enable();
				}else{
					Ext.getCmp('anatomo_comment_pick_up').disable();
					Ext.getCmp('anatomo_comment_pick_down').disable();
				}
			},
			scope : this
		}
	}),
	store : ag_comment_store,
	loadMask : true,
	maskDisabled : true,
	viewConfig: {
		deferEmptyText: false,
		emptyText: '<div class="bp3d-pallet-empty-message">'+get_ag_lang('CLICK_IMAGE_GRID_EMPTY_MESSAGE')+'</div>'
	},
	tbar:[
	{
		id : 'anatomo_comment_pick_button',
		enableToggle : true,
		text : 'Pin',
		hidden : true,
		listeners : {
			'toggle' : {
				fn : function(button, pressed) {
					anatomoPickMode = pressed;
					if(pressed) Ext.getCmp('anatomo_comment_point_button').toggle(false);
				},
				scope : this
			}
		}
	},{
		id: 'anatomo_comment_pick_depth_text',
		xtype:'tbtext',
		text:'Depth : '
	},{
		id : 'anatomo_comment_pick_depth',
		xtype : 'combo',
		triggerAction: 'all',
		editable: false,
		mode : 'local',
		displayField : 'value',
		valueFeild : 'value',
		value : 1,
		width: 40,
		store: new Ext.data.SimpleStore({
			fields:['value'],
			data:[
				[1],
				[2],
				[3],
				[4],
				[5],
				[6],
				[7],
				[8],
				[9],
				[10],
				[11],
				[12],
				[13],
				[14],
				[15],
				[16]
			]
		})
	},'-',{
		id : 'anatomo_comment_pick_edit',
//		text:'Edit',
		tooltip : 'Edit',
		iconCls: 'pin_edit',
		disabled:true,
		listeners: {
			'click' : function(button, e) {
				ag_pin_grid_panel.fireEvent('rowdblclick',ag_pin_grid_panel);
			},
			scope:this
		}
	},'-',{
		id : 'anatomo_comment_pick_up',
//		text:'Up',
		tooltip : 'Up',
		iconCls: 'pin_up',
		disabled:true,
		listeners: {
			'click' : {
				fn:function(button, e) {
					var records = ag_pin_grid_panel.getSelectionModel().getSelections();
					var store = ag_pin_grid_panel.getStore();
					if (records.length != 1) {
						return;
					}
					if (records[0].get('no') <= 1) {
						return;
					}
					store.remove(records[0]);
					store.insert(records[0].get('no') - 2, records[0]);
					ag_pin_grid_panel.getSelectionModel().selectRecords(records);
					for (var i = 0; i < store.getCount(); i++) {
						var rec = store.getAt(i);
						rec.set('no', i + 1);
						rec.commit();
					}
					updateAnatomo();
				},
				scope:this
			}
		}
	}, {
		id : 'anatomo_comment_pick_down',
//		text:'Down',
		tooltip : 'Down',
		iconCls: 'pin_down',
		disabled:true,
		listeners: {
			'click' : {
				fn:function(button, e) {
					var records = ag_pin_grid_panel.getSelectionModel().getSelections();
					var store = ag_pin_grid_panel.getStore();
					if (records.length != 1) {
						return;
					}
					if (records[0].get('no') >= store.getCount()) {
						return;
					}
					store.remove(records[0]);
					store.insert(records[0].get('no'), records[0]);
					ag_pin_grid_panel.getSelectionModel().selectRecords(records);
					for (var i = 0; i < store.getCount(); i++) {
						var rec = store.getAt(i);
						rec.set('no', i + 1);
						rec.commit();
					}
					updateAnatomo();
				},
				scope:this
			}
		}
	},'-',{
		id : 'anatomo_comment_pick_delete',
//		text:'Delete',
		tooltip : 'Delete',
		iconCls : 'pallet_delete',
		disabled:true,
		listeners: {
			'click' : {
				fn:function(button, e) {
					var records = ag_pin_grid_panel.getSelectionModel().getSelections();
					if (records.length == 0) {
						return;
					}
					var store = ag_pin_grid_panel.getStore();
					for (var i = records.length - 1; i >= 0; i--) {
						store.remove(records[i]);
					}
					var count = store.getCount();
					if (count == 0) {
						store.removeAll();
					}
					try{ag_pin_grid_panel.getSelectionModel().clearSelections();}catch(e){}

					store.suspendEvents();
					var no=0;
					Ext.each(store.getRange().sort(function(a,b){return (a.data.no-0)-(b.data.no-0);}),function(r,i,a){
						r.beginEdit();
						r.set('no',++no);
						r.commit();
						r.endEdit();
					});
					store.resumeEvents();
					ag_pin_grid_panel.getView().refresh();

					updateAnatomo();
				},
				scope:this
			}
		}
	},'-',{
		id : 'anatomo_comment_pick_delete_all',
		text:'ALL',
		tooltip : 'Delete ALL',
		iconCls : 'pallet_delete',
		listeners: {
			'click' : {
				fn: function(button, e){
					if(ag_pin_grid_panel.getStore().getCount()==0) return;
					Ext.MessageBox.show({
						title   : button.tooltip,
						msg     : 'Do you really want to delete all pins?',
						buttons : Ext.MessageBox.YESNO,
						icon    : Ext.MessageBox.QUESTION,
						fn:function(btn){
							if(btn != 'yes') return;
							ag_pin_grid_panel.getStore().removeAll();
							try{ag_pin_grid_panel.getSelectionModel().clearSelections();}catch(e){}
							updateAnatomo();
						}
					});
				},
				scope:this
			}
		}
	},
//	'-',
	{
		hidden: true,
		id : 'anatomo_comment_pick_addurl',
		text:'Import pins',
		listeners: {
			'click' : {
				fn:function(button, e) {

					Ext.Msg.show({
						title:'Import pins from other map URL',
						msg: 'URL',
						buttons: Ext.Msg.OKCANCEL,
						multiline : true,
						width : 400,
						fn:function(btn,text){
							if(btn != 'ok') return;
							if(!ag_comment_store) return;

							var url_arr = text.replace(/0x0d0x0a|0x0d|0x0a|\r\n/g,"\n").split("\n");
							for(var i=0;i<url_arr.length;i++){
								var search = "";
								if(url_arr[i].indexOf("?")>=0){
									search = url_arr[i].replace(/^.+\?(.*)$/g,"$1");
								}else if(url_arr[i].search(/[&]*pno[0-9]{3}=/)>=0){
									search = url_arr[i];
								}else{
									continue;
								}

								var params = Ext.urlDecode(search);
								if(params.shorten){
									var window_title = 'Import pins from other map URL';

									Ext.Ajax.request({
										url     : 'get-convert-url.cgi',
										method  : 'POST',
										params  : Ext.urlEncode({url:url_arr[i]}),
										success : function(conn,response,options){
											try{var results = Ext.util.JSON.decode(conn.responseText);}catch(e){}
											if(Ext.isEmpty(results) || Ext.isEmpty(results.status_code) || results.status_code!=200){
												var msg = get_ag_lang('CONVERT_URL_ERRMSG');
												if(results && results.status_code) msg += ' [ '+ results.status_code +' ]';
												for(var key in results){
													_dump("1:["+key+"]=["+results[key]+"]");
												}
												Ext.MessageBox.show({
													title   : window_title,
													msg     : msg,
													buttons : Ext.MessageBox.OK,
													icon    : Ext.MessageBox.ERROR
												});
												return;
											}
											if(Ext.isEmpty(results.data)){
												var msg = get_ag_lang('CONVERT_URL_ERRMSG');
												if(results && results.status_code) msg += ' [ no data ]';
												Ext.MessageBox.show({
													title   : window_title,
													msg     : msg,
													buttons : Ext.MessageBox.OK,
													icon    : Ext.MessageBox.ERROR
												});
												return;
											}
											if(!Ext.isEmpty(results.data.url)){//shortURLに変換
												return;
											}
											if(!Ext.isEmpty(results.data.expand)){//longURLに変換
												var search;
												if(Ext.isArray(results.data.expand)){
													search = results.data.expand[0].long_url;
												}else{
													search = results.data.expand.long_url;
												}
												if(search){
													if(search.indexOf("?")>=0){
														search = search.replace(/^.+\?(.*)$/g,"$1");
													}else if(search.search(/[&]*pno[0-9]{3}=/)>=0){
													}else{
														search = undefined;
													}
												}
												if(search){
													var params = Ext.urlDecode(search);
													if(!params.tp_ap) params.tp_ap = search;
													add_comment_store_pins_from_TPAP(params.tp_ap);
												}
												return;
											}
										},
										failure : function(conn,response,options){
											anatomo_link_window.loadMask.hide();
											Ext.MessageBox.show({
												title   : window_title,
												msg     : get_ag_lang('CONVERT_URL_ERRMSG'),
												buttons : Ext.MessageBox.OK,
												icon    : Ext.MessageBox.ERROR
											});
										}
									});

								}else{
									if(!params.tp_ap) params.tp_ap = search;
									add_comment_store_pins_from_TPAP(params.tp_ap);
								}
							}
						}
					});
				},
				scope:this
			}
		}
	},'->'
//	,{
//		hidden: (Ext.isEmpty(window.ag_extensions) || Ext.isEmpty(ag_extensions.single_pin) || Ext.isEmpty(ag_extensions.single_pin.openCopyWindow)),
//		xtype: 'tbseparator'
//	},{
//		hidden: (Ext.isEmpty(window.ag_extensions) || Ext.isEmpty(ag_extensions.single_pin) || Ext.isEmpty(ag_extensions.single_pin.openCopyWindow)),
//		id: 'anatomo_comment_pick_sp_url_copy',
//		tooltip: 'Copy SINGLE-PIN URL',
//		iconCls: 'pin_copy',
//		listeners: {
//			'click' : {
//				fn:function(button, e) {
//					ag_extensions.single_pin.openCopyWindow({
//						animEl: button.el,
//						iconCls: button.iconCls,
//						title: button.tooltip
//					});
//				},
//				scope:this
//			}
//		}
//	}
	],

	bbar : [
		{
			id : 'anatomo_pin_number_draw_check',
			xtype : 'checkbox',
			boxLabel : 'Number',
			value : init_anatomo_pin_number_draw,
			listeners: {
				'check' : function (checkbox, fChecked) {
					updateAnatomo();
				},
				'render': function(comp){
					comp.setValue(init_anatomo_pin_number_draw);
				},
				scope:this
			}
		},
		'-',
		{
			id : 'anatomo_pin_description_draw_check',
			xtype : 'checkbox',
			boxLabel : 'Description',
			value : init_anatomo_pin_description_draw,
			listeners: {
				'check' : function (checkbox, fChecked) {
					var combo = Ext.getCmp('anatomo_pin_description_draw_pin_indication_line_combo');
					if(combo){
						if(combo.rendered){
							if(fChecked){
								combo.enable();
							}else{
								combo.disable();
							}
							updateAnatomo();
						}else{
							combo.on({
								render: {
									fn: function(combo){
										if(fChecked){
											combo.enable();
										}else{
											combo.disable();
										}
										updateAnatomo();
									},single: true
								}
							});
						}
					}
				},
				'render': function(comp){
					comp.setValue(init_anatomo_pin_description_draw);
				},
				scope:this
			}
		},
		'-',
		{
			xtype : 'tbtext',
			text : 'Line'
		},
		{
			id:'anatomo_pin_description_draw_pin_indication_line_combo',
			xtype : 'combo',
			editable: false,
			mode: 'local',
			lazyInit: false,
			displayField: 'disp',
			valueField: 'value',
			width: 55,
			value:init_anatomo_pin_description_line,
			triggerAction: 'all',
			store: new Ext.data.SimpleStore({
				fields: ['disp', 'value'],
				data : [
					['None', 0],
					['Tip', 1],
					['End', 2]
				]
			}),
			listeners: {
				'select' : function(combo, record, index) {
					var prm_record = ag_param_store.getAt(0);
					prm_record.beginEdit();
					prm_record.set('point_pin_line', record.data.value);
					prm_record.endEdit();
					prm_record.commit();
					if(record.data.value!=0){
						var cmp = Ext.getCmp('anatomo_pin_shape_combo');
						if(cmp && cmp.rendered){
							var val = cmp.getValue();
							if(val=='SC') cmp.setValue('PL');
						}
					}
					updateAnatomo();
				},
				scope:this
			}
		},
		'-',
		{
			id : 'anatomo_pin_shape_label',
			xtype : 'tbtext',
//			text : 'Pin Shape'
			text : 'Shape'
		},
		{
			id : 'anatomo_pin_shape_combo',
			xtype : 'combo',
			triggerAction: 'all',
			editable: false,
			mode : 'local',
			displayField : 'display',
			valueField : 'value',
			value : init_anatomo_pin_shape,
			width : 60,
			store: new Ext.data.SimpleStore({
				fields:['display', 'value'],
				data:[
					['Circle', 'SC'],
					['Corn', 'CC'],
					['Pin L', 'PL'],
					['Pin M', 'PM'],
					['Pin S', 'PS'],
					['Pin SS','PSS']
				]
			}),
			listeners: {
				'select' : function(combo, record, index) {
					updateAnatomo();
				},
				'render': function(comp){
					comp.setValue(init_anatomo_pin_shape);
				},
				scope:this
			}
		}
	],
	listeners : {
		"keydown" : function (e) {
			if (e.getKey() == e.DELETE) {
				var button = Ext.getCmp('anatomo_comment_pick_delete');
				button.fireEvent('click',button);
			}
		},
		"rowdblclick" : function (e) {
			var records = ag_pin_grid_panel.getSelectionModel().getSelections();
			if (records.length != 1) {
				return;
			}
			if(window.ag_extensions && ag_extensions.global_pin && ag_extensions.global_pin.isGlobalPin){
				if(ag_extensions.global_pin.isGlobalPin(records[0])) return;
			}

			var retColor = records[0].data.color;
			var win = new Ext.Window({
				title:'Edit Description Dialog',
				modal:true,
				width:450,
				height:500,
				closeAction:'close',
				plain:true,
				resizable: false,
				items: [{
					layout: 'anchor',
					items: [{
						height: 152,
						border: false,
						anchor: '100%',
						layout:'column',
						items: [{
							xtype: 'fieldset',
							title: 'Description',
							columnWidth: 1,
							height: 162,
							bodyStyle: 'padding:0px;',
							style: 'margin:0 0 4px 4px;',
							layout: 'anchor',
							items: [{
								hidden: true,
								xtype: 'combo',
								id:'anatomo-edit-comment-combo',
								hideLabel: true,
								style: 'margin:0 0 0 4px;',
								ctCls : 'x-small-editor',
								editable: false,
								mode: 'local',
								lazyInit: false,
								displayField: 'disp',
								valueField: 'value',
								width: 100,
								value:'',
								triggerAction: 'all',
								store: new Ext.data.SimpleStore({
									fields: ['disp', 'value'],
									data : [
										['Description', ''],
										['Point object', 'Point object[]'],
										['Object tag', 'Object tag[]']
									]
								}),
								listeners: {
									'select' : function(combo, record, index) {
										var text = Ext.getCmp('anatomo-edit-comment-text');
										if(text){
											var dom = text.el.dom;
											if(dom.selectionStart != undefined){
												var st = dom.selectionStart>0?dom.value.slice(0,dom.selectionStart):"";
												var et = dom.value.slice(dom.selectionEnd);
												text.setValue(st+record.data.value+et);
											}else{
												text.focus();
												var selection = dom.ownerDocument.selection.createRange();
												selection.text = record.data.value + selection.text;
											}
										}
									},
									scope:this
								}
							},{
								xtype: 'textarea',
								hideLabel: true,
								style: 'margin:4px 0 0 4px;',
//								anchor: '-8 -32',
								anchor: '-8 -8',
								id:'anatomo-edit-comment-text',
								value: records[0].data.comment
							}]
						},{
							xtype: 'fieldset',
							title: 'Color',
							width: 130,
							height: 60,
							style: 'margin:0 4px 4px 4px;',
							items: [
								new Ext.ux.ColorField({
									ctCls : 'x-small-editor',
									id:'anatomo-edit-color-palette',
									width: 80,
									style: 'margin:0 0 0 4px;',
									hideLabel: true,
									value: records[0].data.color
								})
							]
						}]
					},{
						xtype: 'fieldset',
						title: 'FMAID',
						style: 'margin:0 0 4px 4px;',
						anchor: '-8 -38',
						items: [{
							xtype: 'grid',
							id:'anatomo-edit-fmasearch-grid',
							columns: [
								{dataIndex:'f_id',   header:get_ag_lang('CDI_NAME'),            id:'f_id', width:70, resizable:true, fixed:true},
//								{dataIndex:'name_j', header:get_ag_lang('GRID_TITLE_NAME_J'), id:'name_j', hidden:true},
//								{dataIndex:'name_k', header:get_ag_lang('GRID_TITLE_NAME_K'), id:'name_k', hidden:true},
//								{dataIndex:'name_l', header:'Latina',                     id:'name_l', hidden:true},
								{dataIndex:'name_e', header:get_ag_lang('DETAIL_TITLE_NAME_E'),                    id:'name_e'}
							],
							selModel : new Ext.grid.CellSelectionModel(),
							store : fma_search_store,
							loadMask : true,
							maskDisabled : true,
							height: 234,
							stripeRows: true,
							columnLines    : true,
							tbar: [
								new Ext.app.SearchFMAStore({
									hideLabel: true,
									pageSize : 20,
									store    : fma_search_store
								}),'->',{
									id: 'anatomo-edit-fmasearch-grid-cell-copy',
									text: 'Paste',
									iuconCls: '',
									disabled: true,
									handler: function(e){
										var grid = Ext.getCmp('anatomo-edit-fmasearch-grid');
										var sel = grid.getSelectionModel();
										if(!sel || !sel.hasSelection()) return;
										var cellArr = sel.getSelectedCell();
										grid.fireEvent('celldblclick',grid,cellArr[0],cellArr[1],e);
									},
									scope: this
								}
							],
							bbar: new Ext.PagingToolbar({
								pageSize    : 20,
								store       : fma_search_store,
								displayInfo : false,
								displayMsg  : '',
								emptyMsg    : '',
								hideMode    : 'offsets',
								hideParent  : true
							}),
							listeners: {
								'render': function(grid){
									grid.getColumnModel().on({
										'hiddenchange' : function(column,columnIndex,hidden){
											resizeGridPanelColumns(Ext.getCmp('anatomo-edit-fmasearch-grid'));
										},
										scope: this,
										delay: 100
									});
								},
								'resize': function(grid){
									resizeGridPanelColumns(grid);
								},
								'cellclick': function(grid,rowIndex,columnIndex,e){
									if(rowIndex>=0 && rowIndex>=0) Ext.getCmp('anatomo-edit-fmasearch-grid-cell-copy').enable();
								},
								'celldblclick': function(grid,rowIndex,columnIndex,e){
//_dump('celldblclick');
									try{
										var record = grid.getStore().getAt(rowIndex);
										var fieldName = grid.getColumnModel().getDataIndex(columnIndex);
										var text = Ext.getCmp('anatomo-edit-comment-text');
										if(text){
											var dom = text.el.dom;
											if(dom.selectionStart != undefined){
												var st = dom.selectionStart>0?dom.value.slice(0,dom.selectionStart):"";
												var et = dom.value.slice(dom.selectionEnd);
												text.setValue(st+record.get(fieldName)+et);
											}else{
												text.focus();
												var selection = dom.ownerDocument.selection.createRange();
												selection.text = record.get(fieldName) + selection.text;
											}
										}
									}catch(e){
										for(var key in e){
											_dump(e[key]);
										}
									}
								},
								scope:this
							}
						}]
					}]



				}],
				buttons: [{
					text:'OK',
					handler : function() {
						var color = Ext.getCmp('anatomo-edit-color-palette').getValue();
						if(color.substr(0,1)=="#") color = color.substr(1);
//						records[0].set('comment', Ext.getCmp('anatomo-edit-comment-text').getValue().replace("@","", "g").replace("|","", "g"));
						records[0].set('comment', Ext.getCmp('anatomo-edit-comment-text').getValue());
						records[0].set('color', color);
						records[0].commit();
						win.close();
						updateAnatomo();
					}
				},{
					text:'Cancel',
					handler : function() {
						win.close();
					}
				}],
				listeners: {
					'render': function(win){
					},
					scope:this
				}

			});
			win.show();
		},
		"resize" : function(grid){
			resizeGridPanelColumns(grid);
		},
		"render" : function(grid){
			restoreHiddenGridPanelColumns(grid);
//			if(window.ag_extensions && ag_extensions.single_pin && ag_extensions.single_pin.bind) ag_extensions.single_pin.bind(grid);
		}
	},
	keys : {
		key : 'a',
		ctrl : true,
		stopEvent : true,
		handler: function () {
			ag_pin_grid_panel.getSelectionModel().selectAll();
		}
	}
});
ag_pin_grid_panel.getColumnModel().on({
	'hiddenchange' : function(column,columnIndex,hidden){
		resizeGridPanelColumns(ag_pin_grid_panel);
		saveHiddenGridPanelColumns(ag_pin_grid_panel);
	},
	scope: this,
	delay: 100
});
ag_pin_grid_panel.getStore().on({
	'add' : function(store,records,index){
		var selModel = ag_pin_grid_panel.getSelectionModel();
		selModel.fireEvent('selectionchange',selModel);
	},
	'remove' : function(store,records,index){
		var selModel = ag_pin_grid_panel.getSelectionModel();
		selModel.fireEvent('selectionchange',selModel);
	},
	scope: this
});

var ag_image_comment_panel = new Ext.Panel({
	title : 'Legend',
	id : 'ag_image_comment_panel',
	layout : 'form',
	labelWidth: 42,
	defaultType : 'textfield',
	bodyStyle: 'border: 0px; padding: 8px; overflow-x: hidden;overflow-y: auto;',
	items : [
		{
			fieldLabel : 'Title',
			name   : 'anatomography_image_comment_title',
			id     : 'anatomography_image_comment_title',
			anchor : '96%',
			listeners: {
				'render': function(comp){
					comp.setValue(init_anatomography_image_comment_title);
				},
				'change' : function(comp,newValue,oldValue){
					var check = Ext.getCmp('anatomography_image_comment_draw_check');
					if(check && check.rendered && check.getValue()) updateAnatomo();
				},
				scope:this
			}
		},{
			xtype : 'textarea',
			fieldLabel : 'Legend',
			name   : 'anatomography_image_comment_legend',
			id     : 'anatomography_image_comment_legend',
			height : 80,
			anchor : '96%',
			listeners: {
				'render': function(comp){
					comp.setValue(init_anatomography_image_comment_legend);
				},
				'change' : function(comp,newValue,oldValue){
					var check = Ext.getCmp('anatomography_image_comment_draw_check');
					if(check && check.rendered && check.getValue()) updateAnatomo();
				},
				scope:this
			}
		},{
			fieldLabel : 'Author',
			name   : 'anatomography_image_comment_author',
			id     : 'anatomography_image_comment_author',
			anchor : '96%',
			listeners: {
				'render': function(comp){
					comp.setValue(init_anatomography_image_comment_author);
				},
				'change' : function(comp,newValue,oldValue){
					var check = Ext.getCmp('anatomography_image_comment_draw_check');
					if(check && check.rendered && check.getValue()) updateAnatomo();
				},
				scope:this
			}
		}
	],
	bbar : [
		{
			id : 'anatomography_image_comment_draw_check',
			xtype : 'checkbox',
			boxLabel : 'Draw legend',
			value : init_anatomography_image_comment_draw,
			listeners: {
				'check' : function (checkbox, fChecked) {
					updateAnatomo();
				},
				'render': function(comp){
					comp.setValue(init_anatomography_image_comment_draw);
				},
				scope:this
			}
		}
	],
	listeners : {
		'afterlayout' : function(panel,layout){
			afterLayout(panel);
		},
		scope:this
	}
});

	var tree_expandnode = {};
	var formatTimestamp = function(val){
		return new Date(val).format(bp3d.defaults.TIME_FORMAT);
	}
	var anatomography_point_treepanel = new Ext.tree.TreePanel({
		id              : 'anatomography-point-treepanel',
		autoHeight      : true,
		autoScroll      : true,
		animate         : true,
		lines           : true,
		rootVisible     : false,
		monitorResize   : true,
		enableDD        : true,
		ddScroll        : true,
		containerScroll : true,
		useArrows       : false,
		border          : false,
		root : new Ext.tree.AsyncTreeNode({
			text      : get_ag_lang('TREE_ROOT_TITLE'),
			draggable : false,
			id        : 'root',
			expanded  : true,
			iconCls   : "ttopfolder"
		}),
		loader : new Ext.tree.TreeLoader({
			dataUrl : 'get-partof.cgi',
			baseParams : {
//				parent : (Ext.isEmpty(gParams.parent)?'':gParams.parent),
//				lng    : gParams.lng,
				trash  : true
			},
			listeners : {
				'beforeload' : {
					fn : function(loader,node){
						loader.baseParams = loader.baseParams || {};
						var bp3d_version = Ext.getCmp('anatomo-version-combo');
						if(bp3d_version && bp3d_version.rendered){
							loader.baseParams.version = bp3d_version.getValue();
						}else{
							loader.baseParams.version = init_bp3d_version;
						}
					},scope : this
				},
				'load' : {
					fn : function(loader,node,response){
					},scope : this
				}
			}
		}),
		listeners : {
			"click" : {
				fn : function(node, event){
					if(gParams.id != undefined) delete gParams.id;
//					if(node.id == "root"){
//						Cookies.set('ag_annotation.images.id',"0");
//					}else{
//						Cookies.set('ag_annotation.images.id',"");
//					}
					selectPathCB(true,node);
				},scope : this},
			"dblclick" : {
				fn : function(node, event){
					event.stopEvent();
					event.stopPropagation();
				},scope : this},
			"append" : {
				fn:function(tree,parent,node,index){
					if(node.id == 'trash'){
						node.reload();
						return;
					}
					node.attributes.attr = node.attributes.attr || {};
					if(node.attributes.attr.lastmod && typeof node.attributes.attr.lastmod == "string"){
						node.attributes.attr.lastmod = new Date(parseInt(node.attributes.attr.lastmod)*1000);
						node.attributes.attr.dateString = formatTimestamp(node.attributes.attr.lastmod);
					}
					if(node.isLeaf()) return;
					if(tree_expandnode[node.id] == undefined){
						tree_expandnode[node.id] = node.isExpanded();
					}else if(tree_expandnode[node.id]){
						if(!node.isExpanded()) node.expand(false,false);
					}else{
						if(node.isExpanded()) node.collapse(false,false);
					}
				},scope:this},
			"remove" : {
				fn:function(tree,parent,node){
				},scope:this},
			"contextmenu" : {
				fn:function(node, event){
				},scope:this},
			"collapsenode" : {
				fn:function(node){
					tree_expandnode[node.id] = false;
				},scope:this},
			"expandnode" : {
				fn:function(node){
					tree_expandnode[node.id] = true;
				},scope:this},

			"nodedragover" : {
				fn : function(dragOverEvent){
					if(dragOverEvent.target.id == 'trash' && dragOverEvent.point == 'below'){
						dragOverEvent.cancel = true;
						return;
					}
					if(dragOverEvent.target.id == 'root' && dragOverEvent.point == 'append'){
						dragOverEvent.cancel = true;
						return;
					}
				},scope : this},
			"nodedrop" : {
				fn : function(dragOverEvent){
					var node = dragOverEvent.dropNode;
					var parentNode = node.parentNode;

					var trashNode = dragOverEvent.tree.getNodeById('trash');
					if(trashNode && trashNode.contains(dragOverEvent.dropNode)){
						node.attributes.attr.delcause = (new Date).toString();
					}else{
						node.attributes.attr.t_pid = parentNode.attributes.attr.t_id;
						node.attributes.attr.delcause = '';
					}
					var childNode = parentNode.firstChild;
					var t_order = 0;
					var attrs = [];
					while(childNode){
						childNode.attributes.attr = childNode.attributes.attr || {};
						childNode.attributes.attr.t_order = ++t_order;
						if(childNode.attributes.attr.t_id){
							attrs.push({
								t_id     : childNode.attributes.attr.t_id,
								t_pid    : childNode.attributes.attr.t_pid,
								t_order  : childNode.attributes.attr.t_order,
								delcause : childNode.attributes.attr.delcause
							});
						}
						childNode = childNode.nextSibling;
					}
					if(attrs.length>0){
						putTree(
							attrs,
							get_ag_lang('ADMIN_PROMPT_CHANGE_TITLE'),
							undefined,
							function(){
								var treeCmp = Ext.getCmp('navigate-tree-panel');
								if(!treeCmp || !treeCmp.root) return;
								treeCmp.root.reload(
									function(node){
										node.getOwnerTree().selectPath("/root" + Cookies.get('ag_annotation.images.path'));
									}
								);
							}
						);
					}
				},scope : this}
		}
	});


	var anatomography_point_jsonstore_fields = [
		{name:'f_id'},
		{name:'b_id'},
		{name:'common_id'},
		{name:'name_j'},
		{name:'name_e'},
		{name:'name_k'},
		{name:'name_l'},
		{name:'phase'},
		'version',
//		'tg_id',
//		'tgi_id',
		{name:'tg_id',type:'int',convert:function(v,r){
			if(Ext.isEmpty(v)){
				return r.md_id;
			}else{
				return v;
			}
		}},
		{name:'tgi_id',type:'int',convert:function(v,r){
			if(Ext.isEmpty(v)){
				return r.mv_id;
			}else{
				return v;
			}
		}},

		'segment',
		'seg_color',
		'seg_thum_bgcolor',
		'seg_thum_bocolor',

		{name:'entry', type:'date', dateFormat: 'timestamp'},
		{name:'xmin',    type:'float'},
		{name:'xmax',    type:'float'},
		{name:'ymin',    type:'float'},
		{name:'ymax',    type:'float'},
		{name:'zmin',    type:'float'},
		{name:'zmax',    type:'float'},
		{name:'volume',  type:'float'},
		{name:'organsys'},
		{name:'elem_type'},
		{name:'def_color'},
		{name:'bul_id',type:'int'},
		{name:'cb_id',type:'int'},
		{name:'ci_id',type:'int'},
		{name:'md_id',type:'int'},
		{name:'mv_id',type:'int'},
		{name:'mr_id',type:'int'}
	];

	var change_partof_route = function(store,route_number){
		var records = store.getRange();
		var loader = Ext.getCmp('anatomography-point-editorgrid-panel').getStore();
		loader.removeAll();
		var w_records = [];
		var route_pos = route_number;
		for(var i=0;i<records.length;i++){
			if(route_pos>0){
				if(Ext.isEmpty(records[i].get('f_id'))) route_pos--;
				continue;
			}
			if(Ext.isEmpty(records[i].get('f_id'))) break;
			w_records.push(records[i]);
		}
		var route_num = 0;
		var route_arr = [];
		for(var i=0;i<records.length;i++){
			if(Ext.isEmpty(records[i].get('f_id'))){
				route_num++;
				if(route_num==route_number){
					route_arr.push(route_num);
				}else if(route_num>10){
					route_arr.push('...');
					break;
				}else{
					route_arr.push('<a href="#" onclick="change_partof_route(anatomography_point_partof_store,'+route_num+');return false;">&nbsp;'+route_num+'&nbsp;</a>');
				}
			}
		}
		var elem = Ext.getDom('ag-point-grid-content-route');
		if(elem){
			elem.innerHTML = route_arr.join(",&nbsp;&nbsp;");
		}
		loader.add(w_records);
	};

	var change_isa_route = function(store,route_number){
		var records = store.getRange();
		var loader = Ext.getCmp('anatomography-point-editorgrid-panel').getStore();
		loader.removeAll();
		var w_records = [];
		var route_pos = route_number;
		for(var i=0;i<records.length;i++){
			if(route_pos>0){
				if(Ext.isEmpty(records[i].get('f_id'))) route_pos--;
				continue;
			}
			if(Ext.isEmpty(records[i].get('f_id'))) break;
			w_records.push(records[i]);
		}
		var route_num = 0;
		var route_arr = [];
		for(var i=0;i<records.length;i++){
			if(Ext.isEmpty(records[i].get('f_id'))){
				route_num++;
				if(route_num==route_number){
					route_arr.push(route_num);
				}else if(route_num>10){
					route_arr.push('...');
					break;
				}else{
					route_arr.push('<a href="#" onclick="change_isa_route(anatomography_point_isa_store,'+route_num+');return false;">&nbsp;'+route_num+'&nbsp;</a>');
				}
			}
		}
		var elem = Ext.getDom('ag-point-grid-content-route');
		if(elem){
			elem.innerHTML = route_arr.join(",&nbsp;&nbsp;");
		}
		loader.add(w_records);
	};

	var change_conventional_route = function(store,route_number){
		var records = store.getRange();
		var loader = Ext.getCmp('anatomography-point-editorgrid-panel').getStore();
		loader.removeAll();
		var w_records = [];
		var route_pos = route_number;
		for(var i=0;i<records.length;i++){
			if(route_pos>0){
				if(Ext.isEmpty(records[i].get('f_id'))) route_pos--;
				continue;
			}
			if(Ext.isEmpty(records[i].get('f_id'))) break;
			w_records.push(records[i]);
		}
		var route_num = 0;
		var route_arr = [];
		for(var i=0;i<records.length;i++){
			if(Ext.isEmpty(records[i].get('f_id'))){
				route_num++;
				if(route_num==route_number){
					route_arr.push(route_num);
				}else if(route_num>10){
					route_arr.push('...');
					break;
				}else{
					route_arr.push('<a href="#" onclick="change_conventional_route(anatomography_point_conventional_root_store,'+route_num+');return false;">&nbsp;'+route_num+'&nbsp;</a>');
				}
			}
		}
		var elem = Ext.getDom('ag-point-grid-content-route');
		if(elem){
			elem.innerHTML = route_arr.join(",&nbsp;&nbsp;");
		}
		loader.add(w_records);
	};

	var anatomography_point_store_beforeload = function(store,options){
		var loader = Ext.getCmp('anatomography-point-editorgrid-panel').getStore();
		loader.removeAll();
		loader.baseParams = {};
		var elem = Ext.getDom('ag-point-grid-content-route');
		if(elem) elem.innerHTML = '&nbsp;';

		store.baseParams = store.baseParams || {};
		var bp3d_version = Ext.getCmp('anatomo-version-combo');
		if(bp3d_version && bp3d_version.rendered){
			store.baseParams.version = bp3d_version.getValue();
		}else{
			store.baseParams.version = init_bp3d_version;
		}
		for(var key in init_bp3d_params){
			if(key.match(/_id$/)) store.baseParams[key] = init_bp3d_params[key];
		}

		try{
			var store = Ext.getCmp('anatomo-version-combo').getStore();
			var idx = store.findBy(function(record,id){
				if(record.data.tgi_version==store.baseParams.version) return true;
			});
			if(idx>=0){
				var record = store.getAt(idx);
				if(record){
					store.baseParams.md_id = record.data.md_id;
					store.baseParams.mv_id = record.data.mv_id;
					store.baseParams.mr_id = record.data.mr_id;
					store.baseParams.ci_id = record.data.ci_id;
					store.baseParams.cb_id = record.data.cb_id;
				}
			}
		}catch(e){}
	};

	var anatomography_point_store_load = function(store,records,options){
		if(records.length>0){
			var elem = Ext.getDom('ag-point-grid-content-route');
			if(elem) elem.innerHTML = '-';
		}
		Ext.getCmp('anatomography-point-editorgrid-panel').loadMask.hide();
		Ext.getCmp('ag-parts-gridpanel').loadMask.hide();
		var loader = Ext.getCmp('anatomography-point-editorgrid-panel').getStore();
		loader.removeAll();
		loader.baseParams = store.baseParams;
		return loader;
	};

	var anatomography_point_partof_store = new Ext.data.JsonStore({
		url           : 'get-partof.cgi',
		totalProperty : 'total',
		root          : 'data',
		fields        : anatomography_point_jsonstore_fields,
		remoteSort    : true,
		listeners     : {
			"beforeload" : function(store,options){
/*
				var loader = Ext.getCmp('anatomography-point-editorgrid-panel').getStore();
				loader.removeAll();
				loader.baseParams = {};
				var elem = Ext.getDom('ag-point-grid-content-route');
				if(elem) elem.innerHTML = '&nbsp;';

				store.baseParams = store.baseParams || {};
				var bp3d_version = Ext.getCmp('anatomo-version-combo');
				if(bp3d_version && bp3d_version.rendered){
					store.baseParams.version = bp3d_version.getValue();
				}else{
					store.baseParams.version = init_bp3d_version;
				}
				for(var key in init_bp3d_params){
					if(key.match(/_id$/)) store.baseParams[key] = init_bp3d_params[key];
				}

				try{
					var store = Ext.getCmp('anatomo-version-combo').getStore();
					var idx = store.findBy(function(record,id){
						if(record.data.tgi_version==store.baseParams.version) return true;
					});
					if(idx>=0){
						var record = store.getAt(idx);
						if(record){
							store.baseParams.md_id = record.data.md_id;
							store.baseParams.mv_id = record.data.mv_id;
							store.baseParams.mr_id = record.data.mr_id;
							store.baseParams.ci_id = record.data.ci_id;
							store.baseParams.cb_id = record.data.cb_id;
						}
					}
				}catch(e){}
*/
				anatomography_point_store_beforeload(store);
			},
			"load" : function(store,records,options){
/*
				if(records.length>0){
					var elem = Ext.getDom('ag-point-grid-content-route');
					if(elem) elem.innerHTML = '-';
				}
				Ext.getCmp('anatomography-point-editorgrid-panel').loadMask.hide();
				Ext.getCmp('ag-parts-gridpanel').loadMask.hide();
				var loader = Ext.getCmp('anatomography-point-editorgrid-panel').getStore();
				loader.removeAll();
				loader.baseParams = store.baseParams;
*/
				var loader = anatomography_point_store_load(store,records);
				if(Ext.isEmpty(records[0].get('f_id'))){
					change_partof_route(store,1);
				}else{
					loader.add(records);
				}
			},
			"loadexception" : function(){
				Ext.getCmp('anatomography-point-editorgrid-panel').loadMask.hide();
				Ext.getCmp('ag-parts-gridpanel').loadMask.hide();
			},
			scope : this
		}
	});

	var anatomography_point_haspart_store = new Ext.data.JsonStore({
		url           : 'get-haspart.cgi',
		totalProperty : 'total',
		root          : 'data',
		fields        : anatomography_point_jsonstore_fields,
		remoteSort    : true,
		listeners     : {
			"beforeload" : function(store,options){
/*
				var loader = Ext.getCmp('anatomography-point-editorgrid-panel').getStore();
				loader.removeAll();
				loader.baseParams = {};
				var elem = Ext.getDom('ag-point-grid-content-route');
				if(elem) elem.innerHTML = '&nbsp;';

				store.baseParams = store.baseParams || {};
				var bp3d_version = Ext.getCmp('anatomo-version-combo');
				if(bp3d_version && bp3d_version.rendered){
					store.baseParams.version = bp3d_version.getValue();
				}else{
					store.baseParams.version = init_bp3d_version;
				}
				for(var key in init_bp3d_params){
					if(key.match(/_id$/)) store.baseParams[key] = init_bp3d_params[key];
				}

				try{
					var store = Ext.getCmp('anatomo-version-combo').getStore();
					var idx = store.findBy(function(record,id){
						if(record.data.tgi_version==store.baseParams.version) return true;
					});
					if(idx>=0){
						var record = store.getAt(idx);
						if(record){
							store.baseParams.md_id = record.data.md_id;
							store.baseParams.mv_id = record.data.mv_id;
							store.baseParams.mr_id = record.data.mr_id;
							store.baseParams.ci_id = record.data.ci_id;
							store.baseParams.cb_id = record.data.cb_id;
						}
					}
				}catch(e){}
*/
				anatomography_point_store_beforeload(store);
			},
			"load" : function(store,records,options){
/*
				if(records.length>0){
					var elem = Ext.getDom('ag-point-grid-content-route');
					if(elem) elem.innerHTML = '-';
				}
				Ext.getCmp('anatomography-point-editorgrid-panel').loadMask.hide();
				Ext.getCmp('ag-parts-gridpanel').loadMask.hide();
				var loader = Ext.getCmp('anatomography-point-editorgrid-panel').getStore();
				loader.removeAll();
				loader.baseParams = store.baseParams;
*/
				var loader = anatomography_point_store_load(store,records);
				loader.add(records);
			},
			"loadexception" : function(){
				Ext.getCmp('anatomography-point-editorgrid-panel').loadMask.hide();
				Ext.getCmp('ag-parts-gridpanel').loadMask.hide();
			},
			scope : this
		}
	});

	var anatomography_point_isa_store = new Ext.data.JsonStore({
		url           : 'get-isa.cgi',
		totalProperty : 'total',
		root          : 'data',
		fields        : anatomography_point_jsonstore_fields,
		remoteSort    : true,
		listeners     : {
			"beforeload" : function(store,options){
/*
				var loader = Ext.getCmp('anatomography-point-editorgrid-panel').getStore();
				loader.removeAll();
				loader.baseParams = {};
				var elem = Ext.getDom('ag-point-grid-content-route');
				if(elem) elem.innerHTML = '&nbsp;';

				store.baseParams = store.baseParams || {};
				var bp3d_version = Ext.getCmp('anatomo-version-combo');
				if(bp3d_version && bp3d_version.rendered){
					store.baseParams.version = bp3d_version.getValue();
				}else{
					store.baseParams.version = init_bp3d_version;
				}
				for(var key in init_bp3d_params){
					if(key.match(/_id$/)) store.baseParams[key] = init_bp3d_params[key];
				}

				try{
					var store = Ext.getCmp('anatomo-version-combo').getStore();
					var idx = store.findBy(function(record,id){
						if(record.data.tgi_version==store.baseParams.version) return true;
					});
					if(idx>=0){
						var record = store.getAt(idx);
						if(record){
							store.baseParams.md_id = record.data.md_id;
							store.baseParams.mv_id = record.data.mv_id;
							store.baseParams.mr_id = record.data.mr_id;
							store.baseParams.ci_id = record.data.ci_id;
							store.baseParams.cb_id = record.data.cb_id;
						}
					}
				}catch(e){}
*/
				anatomography_point_store_beforeload(store);
			},
			"load" : function(store,records,options){
/*
				if(records.length>0){
					var elem = Ext.getDom('ag-point-grid-content-route');
					if(elem) elem.innerHTML = '-';
				}
				Ext.getCmp('anatomography-point-editorgrid-panel').loadMask.hide();
				Ext.getCmp('ag-parts-gridpanel').loadMask.hide();
				var loader = Ext.getCmp('anatomography-point-editorgrid-panel').getStore();
				loader.removeAll();
				loader.baseParams = store.baseParams;
*/
				var loader = anatomography_point_store_load(store,records);
				if(Ext.isEmpty(records[0].get('f_id'))){
					change_isa_route(store,1);
				}else{
					loader.add(records);
				}
			},
			"loadexception" : function(){
				Ext.getCmp('anatomography-point-editorgrid-panel').loadMask.hide();
				Ext.getCmp('ag-parts-gridpanel').loadMask.hide();
			},
			scope : this
		}
	});

	var anatomography_point_hasmember_store = new Ext.data.JsonStore({
		url           : 'get-hasmember.cgi',
		totalProperty : 'total',
		root          : 'data',
		fields        : anatomography_point_jsonstore_fields,
		remoteSort    : true,
		listeners     : {
			"beforeload" : function(store,options){
/*
				var loader = Ext.getCmp('anatomography-point-editorgrid-panel').getStore();
				loader.removeAll();
				loader.baseParams = {};
				var elem = Ext.getDom('ag-point-grid-content-route');
				if(elem) elem.innerHTML = '&nbsp;';

				store.baseParams = store.baseParams || {};
				var bp3d_version = Ext.getCmp('anatomo-version-combo');
				if(bp3d_version && bp3d_version.rendered){
					store.baseParams.version = bp3d_version.getValue();
				}else{
					store.baseParams.version = init_bp3d_version;
				}
				for(var key in init_bp3d_params){
					if(key.match(/_id$/)) store.baseParams[key] = init_bp3d_params[key];
				}

				try{
					var store = Ext.getCmp('anatomo-version-combo').getStore();
					var idx = store.findBy(function(record,id){
						if(record.data.tgi_version==store.baseParams.version) return true;
					});
					if(idx>=0){
						var record = store.getAt(idx);
						if(record){
							store.baseParams.md_id = record.data.md_id;
							store.baseParams.mv_id = record.data.mv_id;
							store.baseParams.mr_id = record.data.mr_id;
							store.baseParams.ci_id = record.data.ci_id;
							store.baseParams.cb_id = record.data.cb_id;
						}
					}
				}catch(e){}
*/
				anatomography_point_store_beforeload(store);

			},
			"load" : function(store,records,options){
/*
				if(records.length>0){
					var elem = Ext.getDom('ag-point-grid-content-route');
					if(elem) elem.innerHTML = '-';
				}
				Ext.getCmp('anatomography-point-editorgrid-panel').loadMask.hide();
				Ext.getCmp('ag-parts-gridpanel').loadMask.hide();
				var loader = Ext.getCmp('anatomography-point-editorgrid-panel').getStore();
				loader.removeAll();
				loader.baseParams = store.baseParams;
*/
				var loader = anatomography_point_store_load(store,records);
				loader.add(records);
			},
			"loadexception" : function(){
				Ext.getCmp('anatomography-point-editorgrid-panel').loadMask.hide();
				Ext.getCmp('ag-parts-gridpanel').loadMask.hide();
			},
			scope : this
		}
	});

	var anatomography_point_conventional_root_store = new Ext.data.JsonStore({
		url           : 'get-conventional_root.cgi',
		totalProperty : 'total',
		root          : 'data',
		fields        : anatomography_point_jsonstore_fields,
		remoteSort    : true,
		listeners     : {
			"beforeload" : function(store,options){
/*
				var loader = Ext.getCmp('anatomography-point-editorgrid-panel').getStore();
				loader.removeAll();
				loader.baseParams = {};
				var elem = Ext.getDom('ag-point-grid-content-route');
				if(elem) elem.innerHTML = '&nbsp;';

				store.baseParams = store.baseParams || {};
				var bp3d_version = Ext.getCmp('anatomo-version-combo');
				if(bp3d_version && bp3d_version.rendered){
					store.baseParams.version = bp3d_version.getValue();
				}else{
					store.baseParams.version = init_bp3d_version;
				}
				for(var key in init_bp3d_params){
					if(key.match(/_id$/)) store.baseParams[key] = init_bp3d_params[key];
				}

				try{
					var store = Ext.getCmp('anatomo-version-combo').getStore();
					var idx = store.findBy(function(record,id){
						if(record.data.tgi_version==store.baseParams.version) return true;
					});
					if(idx>=0){
						var record = store.getAt(idx);
						if(record){
							store.baseParams.md_id = record.data.md_id;
							store.baseParams.mv_id = record.data.mv_id;
							store.baseParams.mr_id = record.data.mr_id;
							store.baseParams.ci_id = record.data.ci_id;
							store.baseParams.cb_id = record.data.cb_id;
						}
					}
				}catch(e){}
*/
				anatomography_point_store_beforeload(store);
			},
			"load" : function(store,records,options){
/*
				if(records.length>0){
					var elem = Ext.getDom('ag-point-grid-content-route');
					if(elem) elem.innerHTML = '-';
				}
				Ext.getCmp('anatomography-point-editorgrid-panel').loadMask.hide();
				Ext.getCmp('ag-parts-gridpanel').loadMask.hide();
				var loader = Ext.getCmp('anatomography-point-editorgrid-panel').getStore();
				loader.removeAll();
				loader.baseParams = store.baseParams;
*/
				var loader = anatomography_point_store_load(store,records);
				if(Ext.isEmpty(records[0].get('f_id'))){
					change_conventional_route(store,1);
				}else{
					loader.add(records);
				}
			},
			"loadexception" : function(){
				Ext.getCmp('anatomography-point-editorgrid-panel').loadMask.hide();
				Ext.getCmp('ag-parts-gridpanel').loadMask.hide();
			},
			scope : this
		}
	});

	var anatomography_point_conventional_child_store = new Ext.data.JsonStore({
		url           : 'get-conventional_child.cgi',
		totalProperty : 'total',
		root          : 'data',
		fields        : anatomography_point_jsonstore_fields,
		remoteSort    : true,
		listeners     : {
			"beforeload" : function(store,options){
/*
				var loader = Ext.getCmp('anatomography-point-editorgrid-panel').getStore();
				loader.removeAll();
				loader.baseParams = {};
				var elem = Ext.getDom('ag-point-grid-content-route');
				if(elem) elem.innerHTML = '&nbsp;';

				store.baseParams = store.baseParams || {};
				var bp3d_version = Ext.getCmp('anatomo-version-combo');
				if(bp3d_version && bp3d_version.rendered){
					store.baseParams.version = bp3d_version.getValue();
				}else{
					store.baseParams.version = init_bp3d_version;
				}
				for(var key in init_bp3d_params){
					if(key.match(/_id$/)) store.baseParams[key] = init_bp3d_params[key];
				}

				try{
					var store = Ext.getCmp('anatomo-version-combo').getStore();
					var idx = store.findBy(function(record,id){
						if(record.data.tgi_version==store.baseParams.version) return true;
					});
					if(idx>=0){
						var record = store.getAt(idx);
						if(record){
							store.baseParams.md_id = record.data.md_id;
							store.baseParams.mv_id = record.data.mv_id;
							store.baseParams.mr_id = record.data.mr_id;
							store.baseParams.ci_id = record.data.ci_id;
							store.baseParams.cb_id = record.data.cb_id;
						}
					}
				}catch(e){}
*/
				anatomography_point_store_beforeload(store);
			},
			"load" : function(store,records,options){
/*
				if(records.length>0){
					var elem = Ext.getDom('ag-point-grid-content-route');
					if(elem) elem.innerHTML = '-';
				}
				Ext.getCmp('anatomography-point-editorgrid-panel').loadMask.hide();
				Ext.getCmp('ag-parts-gridpanel').loadMask.hide();
				var loader = Ext.getCmp('anatomography-point-editorgrid-panel').getStore();
				loader.removeAll();
				loader.baseParams = store.baseParams;
*/
				var loader = anatomography_point_store_load(store,records);
				loader.add(records);
			},
			"loadexception" : function(){
				Ext.getCmp('anatomography-point-editorgrid-panel').loadMask.hide();
				Ext.getCmp('ag-parts-gridpanel').loadMask.hide();
			},
			scope : this
		}
	});

	var anatomography_pallet_point_partof_store = new Ext.data.JsonStore({
		url           : 'get-partof.cgi',
		totalProperty : 'total',
		root          : 'data',
		fields        : anatomography_point_jsonstore_fields,
		remoteSort    : true
	});

	var anatomography_pallet_point_isa_store = new Ext.data.JsonStore({
		url           : 'get-isa.cgi',
		totalProperty : 'total',
		root          : 'data',
		fields        : anatomography_point_jsonstore_fields,
		remoteSort    : true
	});

	var anatomography_pallet_point_conventional_root_store = new Ext.data.JsonStore({
		url           : 'get-conventional_root.cgi',
		totalProperty : 'total',
		root          : 'data',
		fields        : anatomography_point_jsonstore_fields,
		remoteSort    : true
	});

	var anatomography_pallet_point_beforeload = function(store,options){
		store.baseParams = store.baseParams || {};
		var bp3d_version = Ext.getCmp('anatomo-version-combo');
		if(bp3d_version && bp3d_version.rendered){
			store.baseParams.version = bp3d_version.getValue();
		}else{
			store.baseParams.version = init_bp3d_version;
		}
		for(var key in init_bp3d_params){
			if(key.match(/_id$/)) store.baseParams[key] = init_bp3d_params[key];
		}
		try{
			var store = Ext.getCmp('anatomo-version-combo').getStore();
			var idx = store.findBy(function(record,id){
				if(record.data.tgi_version==store.baseParams.version) return true;
			});
			if(idx>=0){
				var record = store.getAt(idx);
				if(record){
					store.baseParams.md_id = record.data.md_id;
					store.baseParams.mv_id = record.data.mv_id;
					store.baseParams.mr_id = record.data.mr_id;
					store.baseParams.ci_id = record.data.ci_id;
					store.baseParams.cb_id = record.data.cb_id;
				}
			}
		}catch(e){}
	};

	var anatomography_pallet_point_load = function(store,records,options){
		Ext.getCmp('ag-parts-gridpanel').loadMask.hide();

//		var activeTab = ag_comment_tabpanel.getActiveTab();
		var activeTab = Ext.getCmp('ag-parts-gridpanel')

		if(Ext.isEmpty(activeTab)) return;
		var selModel = activeTab.getSelectionModel();
		selModel.clearSelections();

		var group_records = [];
		var group_count = -1;
		for(var i=0;i<records.length;i++){
			var f_id = records[i].get('f_id');
			if(Ext.isEmpty(f_id)){
				group_count++;
				continue;
			}
			if(group_count<0) group_count = 0;
			if(Ext.isEmpty(group_records[group_count])) group_records[group_count] = [];
			group_records[group_count].push(records[i]);
		}
		group_records.sort(function(a,b){return b.length-a.length});

		var max_pos = 1;
		for(var i=0;i<group_records.length;i++){
			var index = -1;
			for(var j=0;j<group_records[i].length;j++){
				var f_id = group_records[i][j].get('f_id');
				if(Ext.isEmpty(f_id)) continue;
				if(max_pos<(j+1)/group_records[i].length) continue;//そのグループ内の位置を割合で比較
				var regexp = new RegExp("^"+f_id+"$");
				index = bp3d_parts_store.find('f_id',regexp);
				if(index<0) index = bp3d_parts_store.find('conv_id',regexp);
				if(index<0) continue;
				max_pos=(j+1)/group_records[i].length;
				selModel.selectRow(index);
				if(ag_comment_tabpanel.getActiveTab().id == 'ag-parts-gridpanel'){
					activeTab.getView().focusRow(index);
				}else{
					glb_point_pallet_index = index;
				}
				break;
			}
		}
	};
	var anatomography_pallet_point_loadexception = function(){
		Ext.getCmp('ag-parts-gridpanel').loadMask.hide();
	};

	anatomography_pallet_point_partof_store.on('beforeload',anatomography_pallet_point_beforeload,this);
	anatomography_pallet_point_partof_store.on('load',anatomography_pallet_point_load,this);
	anatomography_pallet_point_partof_store.on('loadexception',anatomography_pallet_point_loadexception,this);

	anatomography_pallet_point_isa_store.on('beforeload',anatomography_pallet_point_beforeload,this);
	anatomography_pallet_point_isa_store.on('load',anatomography_pallet_point_load,this);
	anatomography_pallet_point_isa_store.on('loadexception',anatomography_pallet_point_loadexception,this);

	anatomography_pallet_point_conventional_root_store.on('beforeload',anatomography_pallet_point_beforeload,this);
	anatomography_pallet_point_conventional_root_store.on('load',anatomography_pallet_point_load,this);
	anatomography_pallet_point_conventional_root_store.on('loadexception',anatomography_pallet_point_loadexception,this);

	function anatomography_point_grid_group_renderer(value,metadata,record,rowIndex,colIndex,store){
		if(isNoneDataRecord(record)){
			metadata.css += ' ag_point_none_data'; 
		}
		if(store.baseParams && store.baseParams.f_id && store.baseParams.f_id == record.data.f_id) metadata.css += ' ag_point_data'; 
		return gID2TreeGroup[value];
	}

	function anatomography_point_grid_renderer(value,metadata,record,rowIndex,colIndex,store){

		var dataIndex = anatomography_point_grid_cols()[colIndex].dataIndex;
		var item;
		for(var i=0;i<record.fields.length;i++){
			if(record.fields.keys[i] != dataIndex) continue;
			item = record.fields.items[i];
			break;
		}

		if(item){
			if(item.type == 'date'){
				if(dataIndex == 'entry' && value) value = new Date(value).format(bp3d.defaults.DATE_FORMAT);
				if(dataIndex == 'lastmod' && value) value = new Date(value).format(bp3d.defaults.TIME_FORMAT);
			}
		}

		if(isNoneDataRecord(record)){
			metadata.css += ' ag_point_none_data'; 
		}
		if(store.baseParams && store.baseParams.f_id && store.baseParams.f_id == record.data.f_id) metadata.css += ' ag_point_data'; 
		return value;
	}

	function anatomography_point_grid_combobox_renderer(value,metadata,record,rowIndex,colIndex,store){
		if(isNoneDataRecord(record)){
			metadata.css += ' ag_point_none_data'; 
			value = "";
		}else{
			if(record.data.partslist){
			}else{
				value = "";
			}
		}
		if(store.baseParams && store.baseParams.f_id && store.baseParams.f_id == record.data.f_id) metadata.css += ' ag_point_data'; 
		return value;
	}

	function anatomography_point_grid_partslist_checkbox_renderer(value,metadata,record,rowIndex,colIndex,store){
		var id = Ext.getCmp('anatomography-point-editorgrid-panel').getColumnModel().getColumnId(colIndex);
		metadata.css += ' x-grid3-check-col-td'; 
		if(isNoneDataRecord(record)) metadata.css += ' ag_point_none_data'; 
		if(store.baseParams && store.baseParams.f_id && store.baseParams.f_id == record.data.f_id) metadata.css += ' ag_point_data';
		if(record.data.seg_color) metadata.attr = 'style="background:'+record.data.seg_color+';"'
		if(isAdditionPartsList()){
			return '<div class="x-grid3-check-col'+(value?'-on':'')+' x-grid3-cc-'+id+'">&#160;</div>';
		}else{
			return '<div class="ag_grid_checkbox'+(value?'-on':'')+'-dis x-grid3-cc-'+id+'">&#160;</div>';
		}
	}

	function anatomography_point_grid_checkbox_renderer(value,metadata,record,rowIndex,colIndex,store){
		var id = Ext.getCmp('anatomography-point-editorgrid-panel').getColumnModel().getColumnId(colIndex);
		metadata.css += ' x-grid3-check-col-td'; 
		if(isNoneDataRecord(record)){
			metadata.css += ' ag_point_none_data'; 
		}else{
			if(record.data.partslist){
			}else{
				metadata.css += ' ag_point_none_pallet_data'; 
			}
		}
		if(store.baseParams && store.baseParams.f_id && store.baseParams.f_id == record.data.f_id) metadata.css += ' ag_point_data'; 
		return '<div class="x-grid3-check-col'+(value?'-on':'')+' x-grid3-cc-'+id+'">&#160;</div>';
	}

	function anatomography_point_grid_point_checkbox_renderer(value,metadata,record,rowIndex,colIndex,store){
		var id = Ext.getCmp('anatomography-point-editorgrid-panel').getColumnModel().getColumnId(colIndex);
		metadata.css += ' x-grid3-check-col-td'; 
		if(isNoneDataRecord(record) || isPointDataRecord(record)){
			metadata.css += ' ag_point_none_data'; 
		}else{
			if(record.data.partslist){
			}else{
				metadata.css += ' ag_point_none_pallet_data'; 
			}
		}
		if(store.baseParams && store.baseParams.f_id && store.baseParams.f_id == record.data.f_id) metadata.css += ' ag_point_data'; 
		return '<div class="x-grid3-check-col'+(value?'-on':'')+' x-grid3-cc-'+id+'">&#160;</div>';
	}

	var anatomography_point_grid_color_cell_style = function (value,metadata,record,rowIndex,colIndex,store) {
		if(store.baseParams && store.baseParams.f_id && store.baseParams.f_id == record.data.f_id) metadata.css += ' ag_point_data'; 
		if(isNoneDataRecord(record)){
			metadata.css += ' ag_point_none_data';
			return '';
		}else{
			if(record.data.partslist && value){
				return '<span style="background-color:' + value + '">&nbsp;&nbsp;&nbsp;&nbsp;</span>';
			}else{
				return '';
			}
		}
		return value;
	};

	var anatomography_point_grid_col_opacity_arr = [
		['1.0', '1.0'],
		['0.8', '0.8'],
		['0.6', '0.6'],
		['0.4', '0.4'],
		['0.3', '0.3'],
		['0.2', '0.2'],
		['0.1', '0.1'],
		['0.05', '0.05'],
		['0.0', '0.0']
	];

	var anatomography_point_grid_col_representation_arr = [
		['surface', 'surface'],
		['wireframe', 'wireframe'],
		['points', 'points']
	];

	var anatomography_point_grid_fields = function(){
		return [
			{name:'partslist'},
			{name:'common_id'},
			{name:'b_id'},
			{name:'f_id'},
			{name:'name_j'},
			{name:'name_e'},
			{name:'name_k'},
			{name:'name_l'},
			{name:'phase'},
			'version',
//		'tg_id',
//		'tgi_id',
			{name:'tg_id',type:'int',convert:function(v,r){
				if(Ext.isEmpty(v)){
					return r.md_id;
				}else{
					return v;
				}
			}},
			{name:'tgi_id',type:'int',convert:function(v,r){
				if(Ext.isEmpty(v)){
					return r.mv_id;
				}else{
					return v;
				}
			}},

			'segment',
			'seg_color',
			'seg_thum_bgcolor',
			'seg_thum_bocolor',

			{name:'entry',   type:'date', dateFormat: 'timestamp'},
			{name:'xmin',    type:'float'},
			{name:'xmax',    type:'float'},
			{name:'ymin',    type:'float'},
			{name:'ymax',    type:'float'},
			{name:'zmin',    type:'float'},
			{name:'zmax',    type:'float'},
			{name:'volume',  type:'float'},
			{name:'organsys'},
			{name:'color'},
			{name:'value'},
			{name:'zoom',type:'boolean'},
			{name:'exclude',type:'boolean'},
			{name:'opacity',type:'float'},
			{name:'representation'},
			{name:'point',type:'boolean'},
			{name:'elem_type'},
			{name:'def_color'},
			{name:'bul_id',type:'int'},
			{name:'cb_id',type:'int'},
			{name:'ci_id',type:'int'},
			{name:'md_id',type:'int'},
			{name:'mv_id',type:'int'},
			{name:'mr_id',type:'int'}
		];
	};

	var anatomography_point_grid_partslist_checkColumn = new Ext.grid.CheckColumn({
		header    : 'Pallet',
		dataIndex : 'partslist',
		width     : 40,
		fixed     : true,
		renderer  : anatomography_point_grid_partslist_checkbox_renderer
	});
	var anatomography_point_grid_zoom_checkColumn = new Ext.grid.CheckColumn({
		header    : "Zoom",
		dataIndex : 'zoom',
		hidden    : true,
		width     : 40,
		resizable : false,
		renderer  : anatomography_point_grid_checkbox_renderer
	});

	var anatomography_point_grid_exclude_checkColumn = new Ext.grid.CheckColumn({
		header    : "Remove",
		dataIndex : 'exclude',
		width     : 50,
		resizable : false,
		renderer  : anatomography_point_grid_checkbox_renderer
	});

	var anatomography_point_grid_point_checkColumn = new Ext.grid.CheckColumn({
		header    : 'Point',
		dataIndex : 'point',
		width     : 40,
		resizable : false,
		renderer  : anatomography_point_grid_point_checkbox_renderer
	});

var anatomography_point_grid_col_version = {
	dataIndex:'version',
	header:'Version',
	id:'version',
	sortable: false,
	renderer: anatomography_point_grid_renderer,
	hidden:true
};
var anatomography_point_grid_col_rep_id = {
	dataIndex:'b_id',
	header:get_ag_lang('REP_ID'),
	renderer: anatomography_point_grid_renderer,
	id:'b_id'
};
var anatomography_point_grid_col_cdi_name = {
	dataIndex:'f_id',
	header:get_ag_lang('CDI_NAME'),
	renderer: anatomography_point_grid_renderer,
	id:'f_id'
};
var anatomography_point_grid_col_color = {
	dataIndex : 'color',
	header    : 'Color',
	id        : 'color',
	width     : 40,
	resizable : false,
	renderer  : anatomography_point_grid_color_cell_style,
	editor    : new Ext.ux.ColorField({
		listeners : {
			select: function(e, c){
				this.setValue(c);
				try{var record = Ext.getCmp('anatomography-point-editorgrid-panel')._edit.record;}catch(e){_dump("color:"+e);}
				if(record){
					record.beginEdit();
					record.set('color',"#"+c);
					record.commit();
					record.endEdit();

					var grid = Ext.getCmp('ag-parts-gridpanel');
					var store = grid.getStore();
					var f_id = record.get('f_id');
					var record = null;
					var regexp = new RegExp("^"+f_id+"$");
					var index = store.find('f_id',regexp);
					if(index<0) index = store.find('conv_id',regexp);
					if(index>=0) record = store.getAt(index);
					if(record){
						record.set('color',"#"+c);
						record.commit();
					}
				}
			}
		}
	})
};
var anatomography_point_grid_col_opacity = {
	dataIndex : 'opacity',
	header    : 'Opacity',
	id        : 'opacity',
	width     : 50,
	resizable : false,
	align     : 'right',
	renderer: anatomography_point_grid_combobox_renderer,
	editor    : new Ext.form.ComboBox({
		typeAhead     : true,
		triggerAction : 'all',
		store         : anatomography_point_grid_col_opacity_arr,
		lazyRender    : true,
		listClass     : 'x-combo-list-small',
		listeners     : {
			'select' : function(combo,record,index){
				try{var record = Ext.getCmp('anatomography-point-editorgrid-panel')._edit.record;}catch(e){_dump("opacity:"+e);}
				if(record){
					record.beginEdit();
					record.set('opacity',combo.getValue());
					record.commit();
					record.endEdit();

					var store = Ext.getCmp('ag-parts-gridpanel').getStore();
					var f_id = record.get('f_id');
					var record = null;
					var regexp = new RegExp("^"+f_id+"$");
					var index = store.find('f_id',regexp);
					if(index<0) index = store.find('conv_id',regexp);
					if(index>=0) record = store.getAt(index);
					if(record){
						record.set('opacity',combo.getValue());
						record.commit();
					}
				}
			},
			scope : this
		}
	})
};
var anatomography_point_grid_col_representation = {
	dataIndex : 'representation',
	header    : get_ag_lang('ANATOMO_REP_LABEL'),
	id        : 'representation',
	width     : 40,
	resizable : false,
	renderer  : anatomography_point_grid_combobox_renderer,
	hidden    : true,
	hideable  : true,
	editor    : new Ext.form.ComboBox({
		typeAhead     : true,
		triggerAction : 'all',
		store         : anatomography_point_grid_col_representation_arr,
		lazyRender    : true,
		listClass     : 'x-combo-list-small',
		listeners     : {
			'select' : function(combo,record,index){
				try{var record = Ext.getCmp('anatomography-point-editorgrid-panel')._edit.record;}catch(e){_dump("representation:"+e);}
				if(record){
					record.beginEdit();
					record.set('representation',combo.getValue());
					record.commit();
					record.endEdit();

					var store = Ext.getCmp('ag-parts-gridpanel').getStore();
					var f_id = record.get('f_id');
					var record = null;
					var regexp = new RegExp("^"+f_id+"$");
					var index = store.find('f_id',regexp);
					if(index<0) index = store.find('conv_id',regexp);
					if(index>=0) record = store.getAt(index);
					if(record){
						record.set('representation',combo.getValue());
						record.commit();
					}
				}
			},scope : this
		}
	})
};
var anatomography_point_grid_col_value = {
	dataIndex : 'value',
	header    : 'Value',
	id        : 'value',
	width     : 40,
	resizable : false,
	renderer  : anatomography_point_grid_renderer,
	hidden    : true,
	editor    : new Ext.form.TextField({
		allowBlank : true
	})
};
var anatomography_point_grid_col_organsys = {
	dataIndex:'organsys',
	header:get_ag_lang('GRID_TITLE_ORGANSYS'),
	renderer: anatomography_point_grid_renderer,
	id:'organsys',
	hidden:true
};
var anatomography_point_grid_col_entry = {
	dataIndex:'entry',
	header:get_ag_lang('GRID_TITLE_MODIFIED'),
	renderer: anatomography_point_grid_renderer,
	id:'entry',
	hidden:true
};


var anatomography_point_grid_cols = function(){ return [
	anatomography_point_grid_partslist_checkColumn,
	{dataIndex:'tg_id', header:'Model', id:'tg_id', sortable: false, renderer:anatomography_point_grid_group_renderer, hidden:true, fixed:true},
	{dataIndex:'common_id',header:'UniversalID', renderer: anatomography_point_grid_renderer, id:'common_id',hidden:true, fixed:true},
//	{dataIndex:'name_j', header:get_ag_lang('GRID_TITLE_NAME_J'), renderer: anatomography_point_grid_renderer, id:'name_j', hidden:false},
//	{dataIndex:'name_k', header:get_ag_lang('GRID_TITLE_NAME_K')', renderer: anatomography_point_grid_renderer, id:'name_k', hidden:false},
	{dataIndex:'name_e', header:get_ag_lang('DETAIL_TITLE_NAME_E'),                    renderer: anatomography_point_grid_renderer, id:'name_e'},
//	{dataIndex:'name_l', header:'Latina',                     renderer: anatomography_point_grid_renderer, id:'name_l', hidden:true},
	anatomography_point_grid_col_color,
	anatomography_point_grid_col_opacity,
	anatomography_point_grid_exclude_checkColumn,
	anatomography_point_grid_col_value,
//	anatomography_point_grid_col_organsys,
	anatomography_point_grid_col_representation,
	anatomography_point_grid_col_rep_id,
	anatomography_point_grid_col_cdi_name,
	{dataIndex:'xmin',  header:'Xmin(mm)',                        renderer: anatomography_point_grid_renderer, id:'xmin',     hidden:true},
	{dataIndex:'xmax',  header:'Xmax(mm)',                        renderer: anatomography_point_grid_renderer, id:'xmax',     hidden:true},
	{dataIndex:'ymin',  header:'Ymin(mm)',                        renderer: anatomography_point_grid_renderer, id:'ymin',     hidden:true},
	{dataIndex:'ymax',  header:'Ymax(mm)',                        renderer: anatomography_point_grid_renderer, id:'ymax',     hidden:true},
	{dataIndex:'zmin',  header:'Zmin(mm)',                        renderer: anatomography_point_grid_renderer, id:'zmin',     hidden:true},
	{dataIndex:'zmax',  header:'Zmax(mm)',                        renderer: anatomography_point_grid_renderer, id:'zmax',     hidden:true},
	{dataIndex:'volume',header:get_ag_lang('GRID_TITLE_VOLUME')+'(cm3)', renderer: anatomography_point_grid_renderer, id:'volume',   hidden:true},
	anatomography_point_grid_col_version,
	anatomography_point_grid_col_entry
];
};

update_anatomography_point_grid = function(aParam){
	var store = anatomography_point_grid.ds;
	var bp3d_parts_store = ag_parts_gridpanel.getStore();


	function update_anatomography_point_record(aRecord){
		var index = store.find('f_id',new RegExp("^"+aRecord.get('f_id')+"$"));
		if(index<0) return;
		var record = store.getAt(index);
		if(!record) return;

		var aIndex = bp3d_parts_store.indexOf(aRecord);
		if(aIndex>=0){
			record.beginEdit();
			record.set('partslist',true);
			for(var reckey in aRecord.data){
				record.set(reckey,aRecord.data[reckey]);
			}
			record.commit();
			record.endEdit();
		}else{
			record.beginEdit();
			record.set('partslist',false);
			record.commit();
			record.endEdit();
		}
	}
	if(aParam.constructor===Array){
		for(var i=0;i<aParam.length;i++){
			update_anatomography_point_record(aParam[i]);
		}
	}else{
		update_anatomography_point_record(aParam);
	}
};

var anatomography_point_grid = {
	ds : new Ext.data.SimpleStore({
		root   : 'records',
		fields : anatomography_point_grid_fields(),
		listeners : {
			"add" : function(store,records,index){
				var prm_record = ag_param_store.getAt(0);
				var bp3d_parts_store = ag_parts_gridpanel.getStore();
				for(var i=0;i<records.length;i++){
					var partslist = false;
					var zoom = false;
					var exclude = false;
					var color = null;
					var opacity = "1.0";
					var representation = "surface";
					var value = "";
					var point = false;
					var elem_type = records[i].get('elem_type');
					var regexp = new RegExp("^"+records[i].get('f_id')+"$");
					var index = bp3d_parts_store.find('f_id',regexp);
					if(index<0) index = bp3d_parts_store.find('conv_id',regexp);
					if(index>=0){
						partslist = true;
						var record = bp3d_parts_store.getAt(index);
						exclude = record.get('exclude');
						color = record.get('color');
						opacity = record.get('opacity');
						representation = record.get('representation');
						value = record.get('value');
						point = record.get('point');
					}else{
						if(!Ext.isEmpty(records[i].get('def_color'))) color = records[i].get('def_color');
					}
					records[i].beginEdit();
					records[i].set('partslist',partslist);
					records[i].set('zoom',zoom);
					records[i].set('exclude',exclude);
					records[i].set('color',color?color:'#'+ (elem_type=='bp3d_point'? prm_record.data.point_color_rgb:prm_record.data.color_rgb));
					records[i].set('opacity',opacity);
					records[i].set('representation',representation);
					records[i].set('value',value);
					records[i].set('conv_id',records[i].get('f_id'));
					records[i].set('point',point);
					records[i].commit(true);
					records[i].endEdit();
				}

				if(store.baseParams && store.baseParams.f_id){
					var index = store.find('f_id',new RegExp("^"+ store.baseParams.f_id +"$"));
					if(index>=0) Ext.getCmp('anatomography-point-editorgrid-panel').getSelectionModel().selectRow(index);
				}
			},
			"beforeload" : function(store,options){
			},
			"clear" : function(store){
			},
			"datachanged" : function(store){
			},
			"load" : function(store,records,options){
			},
			"loadexception" : function(){
			},
			"metachange" : function(store,meta){
			},
			"remove" : function(store,record,index){
			},
			"update" : function(store,record,operation){
			},
			scope : this
		}

	}),
	cm : new Ext.grid.ColumnModel(anatomography_point_grid_cols())
};

var ag_comment_tabpanel = new Ext.TabPanel({
	id                : 'ag-comment-tabpanel',
	region            : 'center',
	deferredRender    : false,
	layoutOnTabChange : true,
	border            : false,
	listeners : {
		'tabchange' : function(tabpanel, panel) {
			var button = Ext.getCmp('anatomo_comment_pick_button');
			if(button){
				if(panel.id == 'anatomography-pin-grid-panel'){
					button.toggle(true);
				}else{
					button.toggle(false);
				}
			}
			if(glb_point_pallet_index && panel.id == 'ag-parts-gridpanel'){
				if(panel.getStore().getCount()>glb_point_pallet_index){
					panel.getView().focusRow(glb_point_pallet_index);
				}
				glb_point_pallet_index = null;
			}
		},
		scope : this
	}
});

var ag_comment_panel = new Ext.Panel({
	id : 'anatomography_comment',
	region : 'east',
	split : true,
	autoScroll : false,
	width: 355,
	minWidth: 355,
	maxWidth : 500,
	layout : 'border',
	header        : controlPanelCollapsible,
	titleCollapse : controlPanelCollapsible,
	collapsible   : controlPanelCollapsible,
	items : [{
			region : 'north',
			id: 'ag-comment-panel-header',
			contentEl: 'ag-comment-panel-header-contentEl',
			border: false,
			height:46,
			bodyStyle: 'background:#dfe8f6;',
			listeners: {
				render: function(comp){
					Ext.getCmp('contents-tab-panel').on({
						tabchange: {
							fn: function(tabpanel,tab){
								if(tab.id != 'contents-tab-anatomography-panel') return;
								comp.setHeight(comp.initialConfig.height);
								comp.findParentByType('panel').doLayout();
							},
							buffer: 250
						}
					});
				}
			}
		},ag_comment_tabpanel
		,{
			id          : 'ag-control-panel',
			region      : 'south',
//			height      : 118,
			height      : 52,
			border      : false,
			split       : false,
			collapsible : false,
			frame       : false,
			bodyStyle: 'background:#dfe8f6;',
//			html        : '<div class="ag-extra-pallet" style=""><table class="ag-extra-pallet"><tbody><tr><td class="ag-extra-pallet ag-extra-pallet-focus-centering"><a href="#"><img src="css/focusCentering100px.png" ext:qtip="'+get_ag_lang('TOOLTIP_FOCUS_CENTER')+'"></a></td><td class="ag-extra-pallet ag-extra-pallet-focus-zoom"><a href="#"><img src="css/focusZoom100px.png" ext:qtip="'+get_ag_lang('TOOLTIP_FOCUS')+'"></a></td><td class="ag-extra-pallet ag-extra-pallet-distinct-color"><a href="#" class="x-item-disabled"><img src="css/setDistinct64px.png" ext:qtip="Set distinct color to selected parts"></a></td><td class="ag-extra-pallet ag-extra-pallet-default-color"><a href="#" class="x-item-disabled"><img src="css/setDefault64px.png" ext:qtip="Set default color to selected parts"></a></td></tr></tbody></table></div><div class="ag-control-panel-table" style=""><table class="ag-control-panel-table"><tbody><tr><td class="ag-control-panel-td-print"><a href="#"><img width=48 height=48 src="css/ico_print_48.png?1" alt="Print" /></a></td><td class="ag-control-panel-td-link"><a href="#" id="ag-control-panel-a-link"><img width=48 height=48 src="css/ico_link_48.png?2" alt="Link"></a></td><td class="ag-control-panel-td-embed"><a href="#" id="ag-control-panel-a-embed"><img width=48 height=48 src="css/ico_embed_48.png?1" alt="Embed"></a></td><td class="ag-control-panel-td-license"><!--<a href="#" id="ag-control-panel-a-license"><img width=48 height=48 src="css/ico_license_48_c.png" alt="License" style=""></a>-->'+get_ag_lang('LICENSE_AG')+'</td><td class="ag-control-panel-td-tweet" style="display:none;"><a href="#"><img width=48 height=48 src="css/ico_twitter_48.png" alt="Tweet"></a></td></tr></tbody></table></div>',
			html        : '<div class="ag-extra-pallet" style=""><table class="ag-extra-pallet"><tbody><tr><td class="ag-extra-pallet ag-extra-pallet-focus-centering"><a href="#"><img src="css/focusCentering100px.png" ext:qtip="'+get_ag_lang('TOOLTIP_FOCUS_CENTER')+'"></a></td><td class="ag-extra-pallet ag-extra-pallet-focus-zoom"><a href="#"><img src="css/focusZoom100px.png" ext:qtip="'+get_ag_lang('TOOLTIP_FOCUS')+'"></a></td><td class="ag-extra-pallet ag-extra-pallet-distinct-color"><a href="#" class="x-item-disabled"><img src="css/setDistinct64px.png" ext:qtip="Set distinct color to selected parts"></a></td><td class="ag-extra-pallet ag-extra-pallet-default-color"><a href="#" class="x-item-disabled"><img src="css/setDefault64px.png" ext:qtip="Set default color to selected parts"></a></td></tr></tbody></table></div>',
			listeners : {
				'show' : function(panel){
					panel.doLayout();
				},
				'afterlayout' : function(panel,layout){
					afterLayout(panel);
				},
				render: function(comp){
					$('td.ag-extra-pallet-focus-centering>a').live('click',function(){
						if($(this).hasClass('x-item-disabled')) return false;
						_dump("focus-centering");
						var btn = Ext.getCmp('pallet-focus-center-button');
						btn.fireEvent('click',btn);
						return false;
					});
					$('td.ag-extra-pallet-focus-zoom>a').live('click',function(){
						if($(this).hasClass('x-item-disabled')) return false;
						_dump("focus-zoom");
						var btn = Ext.getCmp('pallet-focus-button');
						btn.fireEvent('click',btn);
						return false;
					});
					$('td.ag-extra-pallet-distinct-color>a').live('click',function(){
						if($(this).hasClass('x-item-disabled')) return false;
						_dump("distinct-color");
						var btn = Ext.getCmp('ag-pallet-def-color-button');
						btn.fireEvent('click',btn);
						return false;
					});
					$('td.ag-extra-pallet-default-color>a').live('click',function(){
						if($(this).hasClass('x-item-disabled')) return false;
						_dump("default-color");
						var btn = Ext.getCmp('ag-pallet-none-color-button');
						btn.fireEvent('click',btn);
						return false;
					});

					$('td.ag-control-panel-td-print>a').live('click',function(){
						var form = Ext.getDom('ag-print-form');
						if(!form) return false;
						var target = Ext.id().replace(/-/g,"_");

						var width = $('img#ag_img').width();
						var height = $('img#ag_img').height();
//						var print_win = window.open("", target, "titlebar=no,toolbar=yes,status=no,menubar=yes,dependent=yes,width="+width+",height="+height);


						var print_win = window.open("", target, "titlebar=no,toolbar=yes,status=no,menubar=yes,dependent=yes,width="+width+",height="+height);

						var jsonStr = glb_anatomo_image_still;
						try{
							jsonStr = ag_extensions.toJSON.URI2JSON(glb_anatomo_image_still,{
								toString:true,
								mapPin:false,
								callback:undefined
							});
							jsonStr = encodeURIComponent(jsonStr);
						}catch(e){jsonStr = glb_anatomo_image_still;}

						var printURL = getEditUrl() + "print.html?" + jsonStr;

						var transaction_id = Ext.Ajax.request({
							url     : 'get-convert-url.cgi',
							method  : 'POST',
							params  : Ext.urlEncode({url:printURL}),
							success : function(conn,response,options){
								try{var results = Ext.util.JSON.decode(conn.responseText);}catch(e){}
								if(Ext.isEmpty(results) || Ext.isEmpty(results.status_code) || results.status_code!=200){
									var msg = get_ag_lang('CONVERT_URL_ERRMSG');
									if(results && results.status_code) msg += ' [ '+ results.status_code +' ]';
									Ext.MessageBox.show({
										title   : window_title,
										msg     : msg,
										buttons : Ext.MessageBox.OK,
										icon    : Ext.MessageBox.ERROR
									});
									return;
								}
								if(Ext.isEmpty(results.data)){
									var msg = get_ag_lang('CONVERT_URL_ERRMSG');
									if(results && results.status_code) msg += ' [ no data ]';
									Ext.MessageBox.show({
										title   : window_title,
										msg     : msg,
										buttons : Ext.MessageBox.OK,
										icon    : Ext.MessageBox.ERROR
									});
									return;
								}

								if(!Ext.isEmpty(results.data.url)){//shortURLに変換
									print_win.location.href = results.data.url;
								}else if(!Ext.isEmpty(results.data.expand)){//longURLに変換
									print_win.location.href = printURL;
								}
							},
							failure : function(conn,response,options){
								Ext.MessageBox.show({
									title   : window_title,
									msg     : get_ag_lang('CONVERT_URL_ERRMSG'),
									buttons : Ext.MessageBox.OK,
									icon    : Ext.MessageBox.ERROR
								});
							}
						});
						return false;
					});
					$('td.ag-control-panel-td-link>a').live('click',function(){
						anatomography_open_link_window();
						return false;
					});
					$('td.ag-control-panel-td-embed>a').live('click',function(){
						anatomography_open_embed_window();
						return false;
					});
					$('td.ag-control-panel-td-license>a').live('click',function(){
						var src = get_ag_lang('LICENSE_URL');
						window.open(src,"_blank","menubar=yes,titlebar=no,toolbar=yes,status=no,resizable=yes,dependent=yes,alwaysRaised=yes,scrollbars=yes,width=800,height=600");
						return false;
					});
					$('td.ag-control-panel-td-tweet>a').live('click',function(){
						window.open('twitter/tweet-ag.html?hashtags=anagra&text=Anatomography','_blank_ag','dependent=yes,width=800,height=600');
						return false;
					});

					Ext.getCmp('contents-tab-panel').on({
						tabchange: {
							fn: function(tabpanel,tab){
								if(tab.id != 'contents-tab-anatomography-panel') return;
								comp.setHeight(comp.initialConfig.height);
								comp.findParentByType('panel').doLayout();
							},
							buffer: 250
						}
					});

				},
				scope:this
			}
		}
	],
	listeners : {
		'show' : function(panel){
			panel.doLayout();
		},
		'render' : function(panel){
//			_dump("ag_comment_panel:render():controlPanelCollapsible=["+controlPanelCollapsible+"]["+window.screen.width+"]");
		},
		'afterlayout' : function(panel,layout){
			afterLayout(Ext.getCmp('ag-licenses-panel'));
			afterLayout(panel);
		},
		scope:this
	}
});

var anatomography_open_rotate_image_window = function(url_param){
	var urlStr = cgipath.animation + '?' + Ext.urlEncode(url_param);
	window.open(urlStr, "_blank", "titlebar=no,toolbar=yes,status=no,menubar=yes");
};


var anatomography_open_link_window = function(){
//	alert('link');

	var win = Ext.getCmp('ag-link-window');
	if(!Ext.isEmpty(win)){
		win.show(Ext.get('ag-control-panel-a-link'));
		return;
	}

	var anatomo_link_window = new Ext.Window({
		id          : 'ag-link-window',
		title       : 'Link',
		width       : 450,
		height      : 510,
		layout      : 'form',
		plain       : true,
		bodyStyle   : 'padding:5px;',
		buttonAlign : 'center',
		modal       : true,
		resizable   : false,
		contentEl   : 'ag-link-window-contentEl',
		closeAction : 'hide',
		buttons : [{
			text    : 'OK',
			handler : function(){
				Ext.getCmp('ag-link-window').hide(Ext.get('ag-control-panel-a-link'));
			}
		}],
		listeners : {
			beforeshow: function(comp){
				_dump("beforeshow():["+comp.id+"]");

				if(Ext.isEmpty(comp.loadMask) || typeof comp.loadMask == 'boolean') comp.loadMask = new Ext.LoadMask(comp.body,{removeMask:false});

				Ext.getCmp('ag-link-window-page-reproduction-textfield').setValue('');

				var button = Ext.getCmp('ag-link-window-image-re-use-size-m-button');
				button.suspendEvents(false);
				button.setValue(true);
				button.resumeEvents();

				var button = Ext.getCmp('ag-link-window-image-re-use-size-s-button');
				button.suspendEvents(false);
				button.setValue(false);
				button.resumeEvents();

				var button = Ext.getCmp('ag-link-window-image-re-use-size-l-button');
				button.suspendEvents(false);
				button.setValue(false);
				button.resumeEvents();


				Ext.getCmp('ag-link-window-image-re-use-still-textfield').setValue('');
				Ext.getCmp('ag-link-window-image-re-use-rotate-textfield').setValue('');

//				Ext.getCmp('ag-link-window-embed-textarea').setValue('');

				var button = Ext.getCmp('ag-link-window-url-checkbox');
				button.suspendEvents(false);
				button.setValue(false);
				button.resumeEvents();

				var editURL = getEditUrl();

				comp.ag_link_url = comp.ag_link_url || {};
				comp.ag_link_url['ag-link-window-page-reproduction-textfield'] = comp.ag_link_url['ag-link-window-page-reproduction-textfield'] || {};

				if(comp.ag_link_url['ag-link-window-page-reproduction-textfield']['long'] != glb_anatomo_editor_url){
					comp.loadMask.show();

					//Page reproduction
					comp.ag_link_url['ag-link-window-page-reproduction-textfield']['long'] = glb_anatomo_editor_url;
					delete comp.ag_link_url['ag-link-window-page-reproduction-textfield']['short'];


					//Image re-use(Still)
					var ag_image_still_url = editURL + cgipath.image;
					var param = Ext.urlDecode(glb_anatomo_image_still,true);
					if(!Ext.isEmpty(param.orax)) delete param.orax;
					if(!Ext.isEmpty(param.oray)) delete param.oray;
					if(!Ext.isEmpty(param.oraz)) delete param.oraz;
					if(!Ext.isEmpty(param.orcx)) delete param.orcx;
					if(!Ext.isEmpty(param.orcy)) delete param.orcy;
					if(!Ext.isEmpty(param.orcz)) delete param.orcz;
					if(!Ext.isEmpty(param.ordg)) delete param.ordg;
					if(!Ext.isEmpty(param.autorotate)) delete param.autorotate;

					comp.ag_link_url['ag-link-window-image-re-use-still-textfield-s'] = comp.ag_link_url['ag-link-window-image-re-use-still-textfield-s'] || {};
					delete comp.ag_link_url['ag-link-window-image-re-use-still-textfield-s']['short'];

					comp.ag_link_url['ag-link-window-image-re-use-still-textfield-m'] = comp.ag_link_url['ag-link-window-image-re-use-still-textfield-m'] || {};
					delete comp.ag_link_url['ag-link-window-image-re-use-still-textfield-m']['short'];

					comp.ag_link_url['ag-link-window-image-re-use-still-textfield-l'] = comp.ag_link_url['ag-link-window-image-re-use-still-textfield-l'] || {};
					delete comp.ag_link_url['ag-link-window-image-re-use-still-textfield-l']['short'];

					try{
						var jsonObj = ag_extensions.toJSON.URI2JSON(Ext.urlEncode(param),{
							toString:false,
							mapPin:false,
							callback:undefined
						});
						jsonObj.Window.ImageWidth = jsonObj.Window.ImageHeight = 120;
						comp.ag_link_url['ag-link-window-image-re-use-still-textfield-s']['long'] = ag_image_still_url + '?' + encodeURIComponent(Ext.util.JSON.encode(jsonObj));
						jsonObj.Window.ImageWidth = jsonObj.Window.ImageHeight = 320;
						comp.ag_link_url['ag-link-window-image-re-use-still-textfield-m']['long'] = ag_image_still_url + '?' + encodeURIComponent(Ext.util.JSON.encode(jsonObj));
						jsonObj.Window.ImageWidth = jsonObj.Window.ImageHeight = 640;
						comp.ag_link_url['ag-link-window-image-re-use-still-textfield-l']['long'] = ag_image_still_url + '?' + encodeURIComponent(Ext.util.JSON.encode(jsonObj));
					}catch(e){
						param.iw = param.ih = 120;
						comp.ag_link_url['ag-link-window-image-re-use-still-textfield-s']['long'] = ag_image_still_url + '?' + Ext.urlEncode(param);
						param.iw = param.ih = 320;
						comp.ag_link_url['ag-link-window-image-re-use-still-textfield-m']['long'] = ag_image_still_url + '?' + Ext.urlEncode(param);
						param.iw = param.ih = 640;
						comp.ag_link_url['ag-link-window-image-re-use-still-textfield-l']['long'] = ag_image_still_url + '?' + Ext.urlEncode(param);
					}





					//Image re-use(Rotate)
					var ag_image_rotate_url = editURL + cgipath.animation;
					var param = Ext.urlDecode(glb_anatomo_image_rotate,true);
					if(!Ext.isEmpty(param.ordg)) param.ordg = 0;

					comp.ag_link_url['ag-link-window-image-re-use-rotate-textfield-s'] = comp.ag_link_url['ag-link-window-image-re-use-rotate-textfield-s'] || {};
					delete comp.ag_link_url['ag-link-window-image-re-use-rotate-textfield-s']['short'];

					comp.ag_link_url['ag-link-window-image-re-use-rotate-textfield-m'] = comp.ag_link_url['ag-link-window-image-re-use-rotate-textfield-m'] || {};
					delete comp.ag_link_url['ag-link-window-image-re-use-rotate-textfield-m']['short'];

					comp.ag_link_url['ag-link-window-image-re-use-rotate-textfield-l'] = comp.ag_link_url['ag-link-window-image-re-use-rotate-textfield-l'] || {};
					delete comp.ag_link_url['ag-link-window-image-re-use-rotate-textfield-l']['short'];

					try{
						var jsonObj = ag_extensions.toJSON.URI2JSON(Ext.urlEncode(param),{
							toString:false,
							mapPin:false,
							callback:undefined
						});
						jsonObj.Window.ImageWidth = jsonObj.Window.ImageHeight = 120;
						comp.ag_link_url['ag-link-window-image-re-use-rotate-textfield-s']['long'] = ag_image_rotate_url + '?' + encodeURIComponent(Ext.util.JSON.encode(jsonObj));
						jsonObj.Window.ImageWidth = jsonObj.Window.ImageHeight = 320;
						comp.ag_link_url['ag-link-window-image-re-use-rotate-textfield-m']['long'] = ag_image_rotate_url + '?' + encodeURIComponent(Ext.util.JSON.encode(jsonObj));
						jsonObj.Window.ImageWidth = jsonObj.Window.ImageHeight = 640;
						comp.ag_link_url['ag-link-window-image-re-use-rotate-textfield-l']['long'] = ag_image_rotate_url + '?' + encodeURIComponent(Ext.util.JSON.encode(jsonObj));
					}catch(e){
						param.iw = param.ih = 120;
						comp.ag_link_url['ag-link-window-image-re-use-rotate-textfield-s']['long'] = ag_image_rotate_url + '?' + Ext.urlEncode(param);
						param.iw = param.ih = 320;
						comp.ag_link_url['ag-link-window-image-re-use-rotate-textfield-m']['long'] = ag_image_rotate_url + '?' + Ext.urlEncode(param);
						param.iw = param.ih = 640;
						comp.ag_link_url['ag-link-window-image-re-use-rotate-textfield-l']['long'] = ag_image_rotate_url + '?' + Ext.urlEncode(param);
					}


					var window_title = comp.title;

					var urls = {};
					var hash_key = 'ag-link-window-page-reproduction-textfield';
					urls[hash_key] = {url:comp.ag_link_url[hash_key]['long']};

					hash_key = 'ag-link-window-image-re-use-still-textfield-s';
					urls[hash_key] = {url:comp.ag_link_url[hash_key]['long']};
					hash_key = 'ag-link-window-image-re-use-still-textfield-m';
					urls[hash_key] = {url:comp.ag_link_url[hash_key]['long']};
					hash_key = 'ag-link-window-image-re-use-still-textfield-l';
					urls[hash_key] = {url:comp.ag_link_url[hash_key]['long']};

					hash_key = 'ag-link-window-image-re-use-rotate-textfield-s';
					urls[hash_key] = {url:comp.ag_link_url[hash_key]['long']};
					hash_key = 'ag-link-window-image-re-use-rotate-textfield-m';
					urls[hash_key] = {url:comp.ag_link_url[hash_key]['long']};
					hash_key = 'ag-link-window-image-re-use-rotate-textfield-l';
					urls[hash_key] = {url:comp.ag_link_url[hash_key]['long']};


					Ext.Ajax.request({
						url     : 'get-convert-url.cgi',
						method  : 'POST',
						params  : Ext.urlEncode({urls:Ext.encode(urls)}),
						success : function(conn,response,options){
							try{var results = Ext.util.JSON.decode(conn.responseText);}catch(e){}
							if(Ext.isEmpty(results) || Ext.isEmpty(results.status_code) || results.status_code!=200){
								var msg = get_ag_lang('CONVERT_URL_ERRMSG');
								if(results && results.status_code) msg += ' [ '+ results.status_code +' ]';
								for(var key in results){
									_dump("1:["+key+"]=["+results[key]+"]");
								}
								Ext.MessageBox.show({
									title   : window_title,
									msg     : msg,
									buttons : Ext.MessageBox.OK,
									icon    : Ext.MessageBox.ERROR
								});
								return;
							}
							for(var hash_key in results){
								if(hash_key == 'status_code') continue;
								var data = results[hash_key] && results[hash_key].result && results[hash_key].result.status_code==200 && results[hash_key].result.data ? results[hash_key].result.data : null;
								if(data && data.url) comp.ag_link_url[hash_key]['short'] = data.url;
							}
							Ext.getCmp('ag-link-window-page-reproduction-textfield').setValue(comp.ag_link_url['ag-link-window-page-reproduction-textfield']['short']);
							Ext.getCmp('ag-link-window-image-re-use-still-textfield').setValue(comp.ag_link_url['ag-link-window-image-re-use-still-textfield-m']['short']);
							Ext.getCmp('ag-link-window-image-re-use-rotate-textfield').setValue(comp.ag_link_url['ag-link-window-image-re-use-rotate-textfield-m']['short']);
							Ext.getCmp('ag-link-window').loadMask.hide();
						},
						failure : function(conn,response,options){
							Ext.getCmp('ag-link-window').loadMask.hide();
							Ext.MessageBox.show({
								title   : window_title,
								msg     : get_ag_lang('CONVERT_URL_ERRMSG'),
								buttons : Ext.MessageBox.OK,
								icon    : Ext.MessageBox.ERROR
							});
						}
					});


				}else{
					comp.loadMask.hide();

					Ext.getCmp('ag-link-window-page-reproduction-textfield').setValue(comp.ag_link_url['ag-link-window-page-reproduction-textfield']['short']);
//					Ext.getCmp('ag-link-window-embed-textarea').setValue(comp.ag_link_url['ag-link-window-embed-textarea']['short']);

					Ext.getCmp('ag-link-window-image-re-use-still-textfield').setValue(comp.ag_link_url['ag-link-window-image-re-use-still-textfield-m']['short']);
					Ext.getCmp('ag-link-window-image-re-use-rotate-textfield').setValue(comp.ag_link_url['ag-link-window-image-re-use-rotate-textfield-m']['short']);

				}
			},
			show: function(comp){
				_dump("show():["+comp.id+"]");
			},
			render: function(win){
				_dump("render():["+win.id+"]");
				if(Ext.isEmpty(win.loadMask) || typeof win.loadMask == 'boolean') win.loadMask = new Ext.LoadMask(win.body,{removeMask:false});

					var change_link_value = function(){
						var size = 'm';
						if(Ext.getCmp('ag-link-window-image-re-use-size-s-button').getValue()){
							size = 's';
						}else if(Ext.getCmp('ag-link-window-image-re-use-size-l-button').getValue()){
							size = 'l';
						}
						var comp = Ext.getCmp('ag-link-window');
						if(Ext.getCmp('ag-link-window-url-checkbox').getValue()){
							Ext.getCmp('ag-link-window-page-reproduction-textfield').setValue(comp.ag_link_url['ag-link-window-page-reproduction-textfield']['long']);
//							Ext.getCmp('ag-link-window-embed-textarea').setValue(comp.ag_link_url['ag-link-window-embed-textarea']['long']);
							Ext.getCmp('ag-link-window-image-re-use-still-textfield').setValue(comp.ag_link_url['ag-link-window-image-re-use-still-textfield-'+size]['long']);
							Ext.getCmp('ag-link-window-image-re-use-rotate-textfield').setValue(comp.ag_link_url['ag-link-window-image-re-use-rotate-textfield-'+size]['long']);
						}else{
							Ext.getCmp('ag-link-window-page-reproduction-textfield').setValue(comp.ag_link_url['ag-link-window-page-reproduction-textfield']['short']);
//							Ext.getCmp('ag-link-window-embed-textarea').setValue(comp.ag_link_url['ag-link-window-embed-textarea']['short']);
							Ext.getCmp('ag-link-window-image-re-use-still-textfield').setValue(comp.ag_link_url['ag-link-window-image-re-use-still-textfield-'+size]['short']);
							Ext.getCmp('ag-link-window-image-re-use-rotate-textfield').setValue(comp.ag_link_url['ag-link-window-image-re-use-rotate-textfield-'+size]['short']);
						}
					};
					var show_link_image = function(url){
						var size = 'width=320,height=320';
						if(Ext.getCmp('ag-link-window-image-re-use-size-s-button').getValue()){
							size = 'width=120,height=120';
						}else if(Ext.getCmp('ag-link-window-image-re-use-size-l-button').getValue()){
							size = 'width=640,height=640';
						}
						var win = window.open("", "_blank", "titlebar=no,toolbar=yes,status=no,menubar=yes,"+size);
						Ext.Ajax.request({
							url     : 'get-convert-url.cgi',
							method  : 'POST',
							params  : Ext.urlEncode({url:url}),
							success : function(conn,response,options){
								try{var results = Ext.util.JSON.decode(conn.responseText);}catch(e){}
								if(Ext.isEmpty(results) || Ext.isEmpty(results.status_code) || results.status_code!=200){
									var msg = get_ag_lang('CONVERT_URL_ERRMSG');
									if(results && results.status_code) msg += ' [ '+ results.status_code +' ]';
									Ext.MessageBox.show({
										title   : window_title,
										msg     : msg,
										buttons : Ext.MessageBox.OK,
										icon    : Ext.MessageBox.ERROR
									});
									return;
								}
								if(Ext.isEmpty(results.data)){
									var msg = get_ag_lang('CONVERT_URL_ERRMSG');
									if(results && results.status_code) msg += ' [ no data ]';
									Ext.MessageBox.show({
										title   : window_title,
										msg     : msg,
										buttons : Ext.MessageBox.OK,
										icon    : Ext.MessageBox.ERROR
									});
									return;
								}
								if(!Ext.isEmpty(results.data.url)){//shortURLに変換
									win.location.href = results.data.url;
								}
								if(!Ext.isEmpty(results.data.expand)){//longURLに変換
									win.location.href = url;
								}
							},
							failure : function(conn,response,options){
								Ext.MessageBox.show({
									title   : window_title,
									msg     : get_ag_lang('CONVERT_URL_ERRMSG'),
									buttons : Ext.MessageBox.OK,
									icon    : Ext.MessageBox.ERROR
								});
							}
						});
					};

					new Ext.form.Label({
						renderTo : 'ag-link-window-page-reproduction-label-renderTo',
						id       : 'ag-link-window-page-reproduction-label',
						html     : get_ag_lang('ANATOMO_EDITOR_LABEL')
					});

					new Ext.form.TextArea({
						renderTo : 'ag-link-window-page-reproduction-textfield-renderTo',
						id       : 'ag-link-window-page-reproduction-textfield',
						style    : 'width:100%;',
						height   : 22,
						selectOnFocus : true,
						readOnly      : true,
						listeners : {
							beforeshow: function(comp){
								_dump("beforeshow():["+comp.id+"]");
							},
							show: function(comp){
								_dump("show():["+comp.id+"]");
							},
							render: function(comp){
								_dump("render():["+comp.id+"]");
								comp.setValue(glb_anatomo_editor_url);
							}
						}
					});


					new Ext.form.Label({
						renderTo : 'ag-link-window-image-re-use-label-renderTo',
						id       : 'ag-link-window-image-re-use-label',
						html     : get_ag_lang('ANATOMO_IMAGE_LABEL')
					});

					new Ext.form.Label({
						renderTo : 'ag-link-window-image-re-use-size-label-renderTo',
						id       : 'ag-link-window-image-re-use-size-label',
						html     : 'Size&nbsp;'
					});
					new Ext.form.Radio({
						renderTo : 'ag-link-window-image-re-use-size-s-button-renderTo',
						id       : 'ag-link-window-image-re-use-size-s-button',
						name     : 'ag-link-window-image-re-use-size-radio',
						boxLabel : 'S',
						value    : 's',
						listeners : {
							check: function(checkbox,checked){
								_dump("check():["+checkbox.id+"]["+checked+"]");
								if(!checked) return;
								change_link_value();
							}
						}
					});
					new Ext.form.Radio({
						renderTo : 'ag-link-window-image-re-use-size-m-button-renderTo',
						id       : 'ag-link-window-image-re-use-size-m-button',
						name     : 'ag-link-window-image-re-use-size-radio',
						checked  : true,
						boxLabel : 'M',
						value    : 'm',
						listeners : {
							check: function(checkbox,checked){
								_dump("check():["+checkbox.id+"]["+checked+"]");
								if(!checked) return;
								change_link_value();
							}
						}
					});
					new Ext.form.Radio({
						renderTo : 'ag-link-window-image-re-use-size-l-button-renderTo',
						id       : 'ag-link-window-image-re-use-size-l-button',
						name     : 'ag-link-window-image-re-use-size-radio',
						boxLabel : 'L',
						value    : 'l',
						listeners : {
							check: function(checkbox,checked){
								_dump("check():["+checkbox.id+"]["+checked+"]");
								if(!checked) return;
								change_link_value();
							}
						}
					});

					new Ext.form.Label({
						renderTo : 'ag-link-window-image-re-use-still-label-renderTo',
						id       : 'ag-link-window-image-re-use-still-label',
						html     : 'Still'
					});
					new Ext.form.TextArea({
						renderTo : 'ag-link-window-image-re-use-still-textfield-renderTo',
						id       : 'ag-link-window-image-re-use-still-textfield',
						style    : 'width:100%;',
						height   : 22,
						selectOnFocus : true,
						readOnly      : true,
						listeners : {
							render: function(comp){
								_dump("render():["+comp.id+"]");
							}
						}
					});
					new Ext.Button({
						renderTo : 'ag-link-window-image-re-use-still-button-renderTo',
						id       : 'ag-link-window-image-re-use-still-button',
						text    : 'show image',
						listeners : {
							click: function(comp){
								_dump("click():["+comp.id+"]");
								show_link_image(Ext.getCmp('ag-link-window-image-re-use-still-textfield').getValue());
							}
						}
					});

					new Ext.form.Label({
						renderTo : 'ag-link-window-image-re-use-rotate-label-renderTo',
						id       : 'ag-link-window-image-re-use-rotate-label',
						html     : 'Rotate'
					});
					new Ext.form.TextArea({
						renderTo : 'ag-link-window-image-re-use-rotate-textfield-renderTo',
						id       : 'ag-link-window-image-re-use-rotate-textfield',
						style    : 'width:100%;',
						height   : 22,
						selectOnFocus : true,
						readOnly      : true,
						listeners : {
							render: function(comp){
								_dump("render():["+comp.id+"]");
							}
						}
					});
					new Ext.Button({
						renderTo : 'ag-link-window-image-re-use-rotate-button-renderTo',
						id       : 'ag-link-window-image-re-use-rotate-button',
						text    : 'show image',
						listeners : {
							click: function(comp){
								_dump("click():["+comp.id+"]");
								show_link_image(Ext.getCmp('ag-link-window-image-re-use-rotate-textfield').getValue());
							}
						}
					});

//					new Ext.form.Label({
//						renderTo : 'ag-link-window-embed-label-renderTo',
//						id       : 'ag-link-window-embed-label',
//						html     : get_ag_lang('ANATOMO_EMBEDDED_LABEL')
//					});
//					new Ext.form.TextArea({
//						renderTo : 'ag-link-window-embed-textarea-renderTo',
//						id       : 'ag-link-window-embed-textarea',
//						style    : 'width:100%;',
//						selectOnFocus : true,
//						readOnly      : true,
//						listeners : {
//							render: function(comp){
//								_dump("render():["+comp.id+"]");
//							}
//						}
//					});

					new Ext.form.Checkbox({
						renderTo : 'ag-link-window-url-checkbox-renderTo',
						id       : 'ag-link-window-url-checkbox',
						style    : 'width:100%;',
						boxLabel : 'Elongate URL to original configuration for parsing.',
						listeners : {
							check: function(checkbox,checked){
								_dump("check():["+checkbox.id+"]["+checked+"]");
								change_link_value();
							}
						}
					});

					var text_value = URI2Text(glb_anatomo_editor_url);

					new Ext.form.FieldSet({
						renderTo: 'ag-link-window-url-table-fieldset-renderTo',
						id      : 'ag-link-window-url-table-fieldset',
						title: 'Table',
						autoHeight: true,
						readOnly: true,
						layout: 'fit',
						items: [{
							xtype: 'textarea',
							id: 'ag-link-window-url-table-textarea',
							style: 'font-family:Courier;monospace;',
							readOnly: true,
							selectOnFocus: true,
							width: 402,
							height: 220,
							value: text_value
						}]
					});
			}
		}
	});
	anatomo_link_window.show(Ext.get('ag-control-panel-a-link'));
};

var anatomography_open_embed_window = function(){
//	alert('embed');

	var win = Ext.getCmp('ag-embed-window');
	if(!Ext.isEmpty(win)){
		win.show(Ext.get('ag-control-panel-a-embed'));
		return;
	}

	var anatomo_embed_window = new Ext.Window({
		id          : 'ag-embed-window',
		title       : 'Embed',
		width       : 450,
		height      : 344,
		layout      : 'form',
		plain       : true,
		bodyStyle   : 'padding:5px;',
		buttonAlign : 'center',
		modal       : true,
		resizable   : false,
		contentEl   : 'ag-embed-window-contentEl',
		closeAction : 'hide',
		buttons : [{
			text    : 'OK',
			handler : function(){
				Ext.getCmp('ag-embed-window').hide(Ext.get('ag-control-panel-a-embed'));
			}
		}],
		listeners : {
			beforeshow: function(comp){
				_dump("beforeshow():["+comp.id+"]");

				if(Ext.isEmpty(comp.loadMask) || typeof comp.loadMask == 'boolean') comp.loadMask = new Ext.LoadMask(comp.body,{removeMask:false});

				Ext.getCmp('ag-embed-window-page-reproduction-textfield').setValue('');

				var button = Ext.getCmp('ag-embed-window-image-re-use-size-m-button');
				button.suspendEvents(false);
				button.setValue(true);
				button.resumeEvents();

				var button = Ext.getCmp('ag-embed-window-image-re-use-size-s-button');
				button.suspendEvents(false);
				button.setValue(false);
				button.resumeEvents();

				var button = Ext.getCmp('ag-embed-window-image-re-use-size-l-button');
				button.suspendEvents(false);
				button.setValue(false);
				button.resumeEvents();


				Ext.getCmp('ag-embed-window-image-re-use-still-textfield').setValue('');
				Ext.getCmp('ag-embed-window-image-re-use-rotate-textfield').setValue('');

				Ext.getCmp('ag-embed-window-embed-textarea').setValue('');

				var button = Ext.getCmp('ag-embed-window-url-checkbox');
				button.suspendEvents(false);
				button.setValue(false);
				button.resumeEvents();

				var editURL = getEditUrl();

				comp.ag_embed_url = comp.ag_embed_url || {};
				comp.ag_embed_url['ag-embed-window-page-reproduction-textfield'] = comp.ag_embed_url['ag-embed-window-page-reproduction-textfield'] || {};

				if(comp.ag_embed_url['ag-embed-window-page-reproduction-textfield']['long'] != glb_anatomo_editor_url){
					comp.loadMask.show();

					//Page reproduction
					comp.ag_embed_url['ag-embed-window-page-reproduction-textfield']['long'] = glb_anatomo_editor_url;
					delete comp.ag_embed_url['ag-embed-window-page-reproduction-textfield']['short'];

					//Embed Manipulabel Image
					comp.ag_embed_url['ag-embed-window-embed-textarea'] = comp.ag_embed_url['ag-embed-window-embed-textarea'] || {};
//					comp.ag_embed_url['ag-embed-window-embed-textarea']['long'] = getEmbedIFrameUrl(glb_anatomo_editor_url);
					comp.ag_embed_url['ag-embed-window-embed-textarea']['long'] = glb_anatomo_editor_url;
					delete comp.ag_embed_url['ag-embed-window-embed-textarea']['short'];


					//Image re-use(Still)
					var ag_image_still_url = editURL + cgipath.image;
					var param = Ext.urlDecode(glb_anatomo_image_still,true);
					if(!Ext.isEmpty(param.orax)) delete param.orax;
					if(!Ext.isEmpty(param.oray)) delete param.oray;
					if(!Ext.isEmpty(param.oraz)) delete param.oraz;
					if(!Ext.isEmpty(param.orcx)) delete param.orcx;
					if(!Ext.isEmpty(param.orcy)) delete param.orcy;
					if(!Ext.isEmpty(param.orcz)) delete param.orcz;
					if(!Ext.isEmpty(param.ordg)) delete param.ordg;
					if(!Ext.isEmpty(param.autorotate)) delete param.autorotate;

					comp.ag_embed_url['ag-embed-window-image-re-use-still-textfield-s'] = comp.ag_embed_url['ag-embed-window-image-re-use-still-textfield-s'] || {};
					delete comp.ag_embed_url['ag-embed-window-image-re-use-still-textfield-s']['short'];

					comp.ag_embed_url['ag-embed-window-image-re-use-still-textfield-m'] = comp.ag_embed_url['ag-embed-window-image-re-use-still-textfield-m'] || {};
					delete comp.ag_embed_url['ag-embed-window-image-re-use-still-textfield-m']['short'];

					comp.ag_embed_url['ag-embed-window-image-re-use-still-textfield-l'] = comp.ag_embed_url['ag-embed-window-image-re-use-still-textfield-l'] || {};
					delete comp.ag_embed_url['ag-embed-window-image-re-use-still-textfield-l']['short'];

					try{
						var jsonObj = ag_extensions.toJSON.URI2JSON(Ext.urlEncode(param),{
							toString:false,
							mapPin:false,
							callback:undefined
						});
						jsonObj.Window.ImageWidth = jsonObj.Window.ImageHeight = 120;
						comp.ag_embed_url['ag-embed-window-image-re-use-still-textfield-s']['long'] = ag_image_still_url + '?' + encodeURIComponent(Ext.util.JSON.encode(jsonObj));
						jsonObj.Window.ImageWidth = jsonObj.Window.ImageHeight = 320;
						comp.ag_embed_url['ag-embed-window-image-re-use-still-textfield-m']['long'] = ag_image_still_url + '?' + encodeURIComponent(Ext.util.JSON.encode(jsonObj));
						jsonObj.Window.ImageWidth = jsonObj.Window.ImageHeight = 640;
						comp.ag_embed_url['ag-embed-window-image-re-use-still-textfield-l']['long'] = ag_image_still_url + '?' + encodeURIComponent(Ext.util.JSON.encode(jsonObj));
					}catch(e){
						param.iw = param.ih = 120;
						comp.ag_embed_url['ag-embed-window-image-re-use-still-textfield-s']['long'] = ag_image_still_url + '?' + Ext.urlEncode(param);
						param.iw = param.ih = 320;
						comp.ag_embed_url['ag-embed-window-image-re-use-still-textfield-m']['long'] = ag_image_still_url + '?' + Ext.urlEncode(param);
						param.iw = param.ih = 640;
						comp.ag_embed_url['ag-embed-window-image-re-use-still-textfield-l']['long'] = ag_image_still_url + '?' + Ext.urlEncode(param);
					}




					//Image re-use(Rotate)
					var ag_image_rotate_url = editURL + cgipath.animation;
					var param = Ext.urlDecode(glb_anatomo_image_rotate,true);
					if(!Ext.isEmpty(param.ordg)) param.ordg = 0;

					comp.ag_embed_url['ag-embed-window-image-re-use-rotate-textfield-s'] = comp.ag_embed_url['ag-embed-window-image-re-use-rotate-textfield-s'] || {};
					delete comp.ag_embed_url['ag-embed-window-image-re-use-rotate-textfield-s']['short'];

					comp.ag_embed_url['ag-embed-window-image-re-use-rotate-textfield-m'] = comp.ag_embed_url['ag-embed-window-image-re-use-rotate-textfield-m'] || {};
					delete comp.ag_embed_url['ag-embed-window-image-re-use-rotate-textfield-m']['short'];

					comp.ag_embed_url['ag-embed-window-image-re-use-rotate-textfield-l'] = comp.ag_embed_url['ag-embed-window-image-re-use-rotate-textfield-l'] || {};
					delete comp.ag_embed_url['ag-embed-window-image-re-use-rotate-textfield-l']['short'];

					try{
						var jsonObj = ag_extensions.toJSON.URI2JSON(Ext.urlEncode(param),{
							toString:false,
							mapPin:false,
							callback:undefined
						});
						jsonObj.Window.ImageWidth = jsonObj.Window.ImageHeight = 120;
						comp.ag_embed_url['ag-embed-window-image-re-use-rotate-textfield-s']['long'] = ag_image_rotate_url + '?' + encodeURIComponent(Ext.util.JSON.encode(jsonObj));
						jsonObj.Window.ImageWidth = jsonObj.Window.ImageHeight = 320;
						comp.ag_embed_url['ag-embed-window-image-re-use-rotate-textfield-m']['long'] = ag_image_rotate_url + '?' + encodeURIComponent(Ext.util.JSON.encode(jsonObj));
						jsonObj.Window.ImageWidth = jsonObj.Window.ImageHeight = 640;
						comp.ag_embed_url['ag-embed-window-image-re-use-rotate-textfield-l']['long'] = ag_image_rotate_url + '?' + encodeURIComponent(Ext.util.JSON.encode(jsonObj));
					}catch(e){
						param.iw = param.ih = 120;
						comp.ag_embed_url['ag-embed-window-image-re-use-rotate-textfield-s']['long'] = ag_image_rotate_url + '?' + Ext.urlEncode(param);
						param.iw = param.ih = 320;
						comp.ag_embed_url['ag-embed-window-image-re-use-rotate-textfield-m']['long'] = ag_image_rotate_url + '?' + Ext.urlEncode(param);
						param.iw = param.ih = 640;
						comp.ag_embed_url['ag-embed-window-image-re-use-rotate-textfield-l']['long'] = ag_image_rotate_url + '?' + Ext.urlEncode(param);
					}


					var window_title = comp.title;

					var urls = {};
					var hash_key = 'ag-embed-window-page-reproduction-textfield';
					urls[hash_key] = {url:comp.ag_embed_url[hash_key]['long']};

					hash_key = 'ag-embed-window-embed-textarea';
					urls[hash_key] = {url:comp.ag_embed_url[hash_key]['long']};

					hash_key = 'ag-embed-window-image-re-use-still-textfield-s';
					urls[hash_key] = {url:comp.ag_embed_url[hash_key]['long']};
					hash_key = 'ag-embed-window-image-re-use-still-textfield-m';
					urls[hash_key] = {url:comp.ag_embed_url[hash_key]['long']};
					hash_key = 'ag-embed-window-image-re-use-still-textfield-l';
					urls[hash_key] = {url:comp.ag_embed_url[hash_key]['long']};

					hash_key = 'ag-embed-window-image-re-use-rotate-textfield-s';
					urls[hash_key] = {url:comp.ag_embed_url[hash_key]['long']};
					hash_key = 'ag-embed-window-image-re-use-rotate-textfield-m';
					urls[hash_key] = {url:comp.ag_embed_url[hash_key]['long']};
					hash_key = 'ag-embed-window-image-re-use-rotate-textfield-l';
					urls[hash_key] = {url:comp.ag_embed_url[hash_key]['long']};

					Ext.Ajax.request({
						url     : 'get-convert-url.cgi',
						method  : 'POST',
						params  : Ext.urlEncode({urls:Ext.encode(urls)}),
						success : function(conn,response,options){
							try{var results = Ext.util.JSON.decode(conn.responseText);}catch(e){}
							if(Ext.isEmpty(results) || Ext.isEmpty(results.status_code) || results.status_code!=200){
								var msg = get_ag_lang('CONVERT_URL_ERRMSG');
								if(results && results.status_code) msg += ' [ '+ results.status_code +' ]';
								for(var key in results){
									_dump("1:["+key+"]=["+results[key]+"]");
								}
								Ext.MessageBox.show({
									title   : window_title,
									msg     : msg,
									buttons : Ext.MessageBox.OK,
									icon    : Ext.MessageBox.ERROR
								});
								return;
							}
							for(var hash_key in results){
								if(hash_key == 'status_code') continue;
								var data = results[hash_key] && results[hash_key].result && results[hash_key].result.status_code==200 && results[hash_key].result.data ? results[hash_key].result.data : null;
								if(data && data.url) comp.ag_embed_url[hash_key]['short'] = data.url;
							}
							Ext.getCmp('ag-embed-window-page-reproduction-textfield').setValue(getEmbedAUrl(comp.ag_embed_url['ag-embed-window-page-reproduction-textfield']['short']));
							Ext.getCmp('ag-embed-window-embed-textarea').setValue(getEmbedIFrameUrl(comp.ag_embed_url['ag-embed-window-embed-textarea']['short']));
							Ext.getCmp('ag-embed-window-image-re-use-still-textfield').setValue(getEmbedImgUrl(comp.ag_embed_url['ag-embed-window-image-re-use-still-textfield-m']['short']));
							Ext.getCmp('ag-embed-window-image-re-use-rotate-textfield').setValue(getEmbedImgUrl(comp.ag_embed_url['ag-embed-window-image-re-use-rotate-textfield-m']['short']));

							comp.loadMask.hide();
						},
						failure : function(conn,response,options){
							comp.loadMask.hide();
							Ext.MessageBox.show({
								title   : window_title,
								msg     : get_ag_lang('CONVERT_URL_ERRMSG'),
								buttons : Ext.MessageBox.OK,
								icon    : Ext.MessageBox.ERROR
							});
						}
					});

				}else{
					comp.loadMask.hide();

					Ext.getCmp('ag-embed-window-page-reproduction-textfield').setValue(getEmbedAUrl(comp.ag_embed_url['ag-embed-window-page-reproduction-textfield']['short']));
					Ext.getCmp('ag-embed-window-embed-textarea').setValue(getEmbedIFrameUrl(comp.ag_embed_url['ag-embed-window-embed-textarea']['short']));

					Ext.getCmp('ag-embed-window-image-re-use-still-textfield').setValue(getEmbedImgUrl(comp.ag_embed_url['ag-embed-window-image-re-use-still-textfield-m']['short']));
					Ext.getCmp('ag-embed-window-image-re-use-rotate-textfield').setValue(getEmbedImgUrl(comp.ag_embed_url['ag-embed-window-image-re-use-rotate-textfield-m']['short']));

				}
			},
			show: function(comp){
				_dump("show():["+comp.id+"]");
			},
			render: function(win){
				_dump("render():["+win.id+"]");
				if(Ext.isEmpty(win.loadMask) || typeof win.loadMask == 'boolean') win.loadMask = new Ext.LoadMask(win.body,{removeMask:false});

					var change_embed_value = function(){
						var size = 'm';
						if(Ext.getCmp('ag-embed-window-image-re-use-size-s-button').getValue()){
							size = 's';
						}else if(Ext.getCmp('ag-embed-window-image-re-use-size-l-button').getValue()){
							size = 'l';
						}
						var comp = Ext.getCmp('ag-embed-window');
						if(Ext.getCmp('ag-embed-window-url-checkbox').getValue()){
							Ext.getCmp('ag-embed-window-page-reproduction-textfield').setValue(getEmbedAUrl(comp.ag_embed_url['ag-embed-window-page-reproduction-textfield']['long']));
							Ext.getCmp('ag-embed-window-embed-textarea').setValue(getEmbedIFrameUrl(comp.ag_embed_url['ag-embed-window-embed-textarea']['long']));
							Ext.getCmp('ag-embed-window-image-re-use-still-textfield').setValue(getEmbedImgUrl(comp.ag_embed_url['ag-embed-window-image-re-use-still-textfield-'+size]['long']));
							Ext.getCmp('ag-embed-window-image-re-use-rotate-textfield').setValue(getEmbedImgUrl(comp.ag_embed_url['ag-embed-window-image-re-use-rotate-textfield-'+size]['long']));
						}else{
							Ext.getCmp('ag-embed-window-page-reproduction-textfield').setValue(getEmbedAUrl(comp.ag_embed_url['ag-embed-window-page-reproduction-textfield']['short']));
							Ext.getCmp('ag-embed-window-embed-textarea').setValue(getEmbedIFrameUrl(comp.ag_embed_url['ag-embed-window-embed-textarea']['short']));
							Ext.getCmp('ag-embed-window-image-re-use-still-textfield').setValue(getEmbedImgUrl(comp.ag_embed_url['ag-embed-window-image-re-use-still-textfield-'+size]['short']));
							Ext.getCmp('ag-embed-window-image-re-use-rotate-textfield').setValue(getEmbedImgUrl(comp.ag_embed_url['ag-embed-window-image-re-use-rotate-textfield-'+size]['short']));
						}
					};
					var show_embed_image = function(url){
						var size = 'width=320,height=320';
						if(Ext.getCmp('ag-embed-window-image-re-use-size-s-button').getValue()){
							size = 'width=120,height=120';
						}else if(Ext.getCmp('ag-embed-window-image-re-use-size-l-button').getValue()){
							size = 'width=640,height=640';
						}
						var win = window.open("", "_blank", "titlebar=no,toolbar=yes,status=no,menubar=yes,"+size);
						Ext.Ajax.request({
							url     : 'get-convert-url.cgi',
							method  : 'POST',
							params  : Ext.urlEncode({url:url}),
							success : function(conn,response,options){
								try{var results = Ext.util.JSON.decode(conn.responseText);}catch(e){}
								if(Ext.isEmpty(results) || Ext.isEmpty(results.status_code) || results.status_code!=200){
									var msg = get_ag_lang('CONVERT_URL_ERRMSG');
									if(results && results.status_code) msg += ' [ '+ results.status_code +' ]';
									Ext.MessageBox.show({
										title   : window_title,
										msg     : msg,
										buttons : Ext.MessageBox.OK,
										icon    : Ext.MessageBox.ERROR
									});
									return;
								}
								if(Ext.isEmpty(results.data)){
									var msg = get_ag_lang('CONVERT_URL_ERRMSG');
									if(results && results.status_code) msg += ' [ no data ]';
									Ext.MessageBox.show({
										title   : window_title,
										msg     : msg,
										buttons : Ext.MessageBox.OK,
										icon    : Ext.MessageBox.ERROR
									});
									return;
								}
								if(!Ext.isEmpty(results.data.url)){//shortURLに変換
									win.location.href = results.data.url;
								}
								if(!Ext.isEmpty(results.data.expand)){//longURLに変換
									win.location.href = url;
								}
							},
							failure : function(conn,response,options){
								Ext.MessageBox.show({
									title   : window_title,
									msg     : get_ag_lang('CONVERT_URL_ERRMSG'),
									buttons : Ext.MessageBox.OK,
									icon    : Ext.MessageBox.ERROR
								});
							}
						});
					};

					new Ext.form.Label({
						renderTo : 'ag-embed-window-page-reproduction-label-renderTo',
						id       : 'ag-embed-window-page-reproduction-label',
						html     : get_ag_lang('ANATOMO_EDITOR_LABEL_A')
					});

					new Ext.form.TextArea({
						renderTo : 'ag-embed-window-page-reproduction-textfield-renderTo',
						id       : 'ag-embed-window-page-reproduction-textfield',
						style    : 'width:100%;',
						height   : 22,
						selectOnFocus : true,
						readOnly      : true,
						listeners : {
							beforeshow: function(comp){
								_dump("beforeshow():["+comp.id+"]");
							},
							show: function(comp){
								_dump("show():["+comp.id+"]");
							},
							render: function(comp){
								_dump("render():["+comp.id+"]");
								comp.setValue(glb_anatomo_editor_url);
							}
						}
					});


					new Ext.form.Label({
						renderTo : 'ag-embed-window-image-re-use-label-renderTo',
						id       : 'ag-embed-window-image-re-use-label',
						html     : get_ag_lang('ANATOMO_IMAGE_LABEL_IMG')
					});

					new Ext.form.Label({
						renderTo : 'ag-embed-window-image-re-use-size-label-renderTo',
						id       : 'ag-embed-window-image-re-use-size-label',
						html     : 'Size&nbsp;'
					});
					new Ext.form.Radio({
						renderTo : 'ag-embed-window-image-re-use-size-s-button-renderTo',
						id       : 'ag-embed-window-image-re-use-size-s-button',
						name     : 'ag-embed-window-image-re-use-size-radio',
						boxLabel : 'S',
						value    : 's',
						listeners : {
							check: function(checkbox,checked){
								_dump("check():["+checkbox.id+"]["+checked+"]");
								if(!checked) return;
								change_embed_value();
							}
						}
					});
					new Ext.form.Radio({
						renderTo : 'ag-embed-window-image-re-use-size-m-button-renderTo',
						id       : 'ag-embed-window-image-re-use-size-m-button',
						name     : 'ag-embed-window-image-re-use-size-radio',
						checked  : true,
						boxLabel : 'M',
						value    : 'm',
						listeners : {
							check: function(checkbox,checked){
								_dump("check():["+checkbox.id+"]["+checked+"]");
								if(!checked) return;
								change_embed_value();
							}
						}
					});
					new Ext.form.Radio({
						renderTo : 'ag-embed-window-image-re-use-size-l-button-renderTo',
						id       : 'ag-embed-window-image-re-use-size-l-button',
						name     : 'ag-embed-window-image-re-use-size-radio',
						boxLabel : 'L',
						value    : 'l',
						listeners : {
							check: function(checkbox,checked){
								_dump("check():["+checkbox.id+"]["+checked+"]");
								if(!checked) return;
								change_embed_value();
							}
						}
					});

					new Ext.form.Label({
						renderTo : 'ag-embed-window-image-re-use-still-label-renderTo',
						id       : 'ag-embed-window-image-re-use-still-label',
						html     : 'Still'
					});
					new Ext.form.TextArea({
						renderTo : 'ag-embed-window-image-re-use-still-textfield-renderTo',
						id       : 'ag-embed-window-image-re-use-still-textfield',
						style    : 'width:100%;',
						height   : 22,
						selectOnFocus : true,
						readOnly      : true,
						listeners : {
							render: function(comp){
								_dump("render():["+comp.id+"]");
							}
						}
					});
					new Ext.Button({
						renderTo : 'ag-embed-window-image-re-use-still-button-renderTo',
						id       : 'ag-embed-window-image-re-use-still-button',
						text    : 'show image',
						listeners : {
							click: function(comp){
								_dump("click():["+comp.id+"]");

								var size = 'm';
								if(Ext.getCmp('ag-embed-window-image-re-use-size-s-button').getValue()){
									size = 's';
								}else if(Ext.getCmp('ag-embed-window-image-re-use-size-l-button').getValue()){
									size = 'l';
								}
								var url;
								var comp = Ext.getCmp('ag-embed-window');
								if(Ext.getCmp('ag-embed-window-url-checkbox').getValue()){
									url = comp.ag_embed_url['ag-embed-window-image-re-use-still-textfield-'+size]['long'];
								}else{
									url = comp.ag_embed_url['ag-embed-window-image-re-use-still-textfield-'+size]['short'];
								}
								show_embed_image(url);

							}
						}
					});

					new Ext.form.Label({
						renderTo : 'ag-embed-window-image-re-use-rotate-label-renderTo',
						id       : 'ag-embed-window-image-re-use-rotate-label',
						html     : 'Rotate'
					});
					new Ext.form.TextArea({
						renderTo : 'ag-embed-window-image-re-use-rotate-textfield-renderTo',
						id       : 'ag-embed-window-image-re-use-rotate-textfield',
						style    : 'width:100%;',
						height   : 22,
						selectOnFocus : true,
						readOnly      : true,
						listeners : {
							render: function(comp){
								_dump("render():["+comp.id+"]");
							}
						}
					});
					new Ext.Button({
						renderTo : 'ag-embed-window-image-re-use-rotate-button-renderTo',
						id       : 'ag-embed-window-image-re-use-rotate-button',
						text    : 'show image',
						listeners : {
							click: function(comp){

								var size = 'm';
								if(Ext.getCmp('ag-embed-window-image-re-use-size-s-button').getValue()){
									size = 's';
								}else if(Ext.getCmp('ag-embed-window-image-re-use-size-l-button').getValue()){
									size = 'l';
								}
								var url;
								var comp = Ext.getCmp('ag-embed-window');
								if(Ext.getCmp('ag-embed-window-url-checkbox').getValue()){
									url = comp.ag_embed_url['ag-embed-window-image-re-use-rotate-textfield-'+size]['long'];
								}else{
									url = comp.ag_embed_url['ag-embed-window-image-re-use-rotate-textfield-'+size]['short'];
								}
								show_embed_image(url);

							}
						}
					});

					new Ext.form.Label({
						renderTo : 'ag-embed-window-embed-label-renderTo',
						id       : 'ag-embed-window-embed-label',
						html     : get_ag_lang('ANATOMO_EMBEDDED_LABEL')
					});
					new Ext.form.TextArea({
						renderTo : 'ag-embed-window-embed-textarea-renderTo',
						id       : 'ag-embed-window-embed-textarea',
						style    : 'width:100%;',
						selectOnFocus : true,
						readOnly      : true,
						listeners : {
							render: function(comp){
								_dump("render():["+comp.id+"]");
							}
						}
					});

					new Ext.form.Checkbox({
						renderTo : 'ag-embed-window-url-checkbox-renderTo',
						id       : 'ag-embed-window-url-checkbox',
						style    : 'width:100%;',
						boxLabel : 'Elongate URL to original configuration for parsing.',
						listeners : {
							check: function(checkbox,checked){
								_dump("check():["+checkbox.id+"]["+checked+"]");
								change_embed_value();
							}
						}
					});

			}
		}
	});
	anatomo_embed_window.show(Ext.get('ag-control-panel-a-embed'));
};

var anatomography_panel_toolbar = new Ext.Toolbar([
	{
		id    : 'anatomo_anatomogram_label',
		xtype : 'tbtext',
		text  : get_ag_lang('ANATOMO_ANATOMOGRAM_LABEL')
	},
	' ',
	'-',
	{
		id    : 'anatomo_editor_label',
		xtype : 'tbtext',
		text  : get_ag_lang('ANATOMO_EDITOR_LABEL')+' : '
	},
	{
		xtype: 'textfield',
		id: 'anatomo_editor_url',
		readOnly:true,
		width: 100
	},
	' ',
	'-',
	{
		id    : 'anatomo_image_label',
		xtype : 'tbtext',
		text  : get_ag_lang('ANATOMO_IMAGE_LABEL')
	},
	{
		xtype: 'textfield',
		id: 'anatomo_image_url',
		readOnly:true,
		width: 100
	}
//	,'->',
//	{
//		id : 'prm2_check',
//		xtype: 'checkbox'
//	}
//	{
//		xtype: 'hidden',
//		id: 'cameraX',
//		width: 10,
//		value : 2.7979888916016167
//	},
//	{
//		xtype: 'hidden',
//		id: 'cameraY',
//		width: 10,
//		value : -998.4280435445771
//	},
//	{
//		xtype: 'hidden',
//		id: 'cameraZ',
//		width: 10,
//		value : 809.7306805551052
//	},
//	{
//		xtype: 'hidden',
//		id: 'targetX',
//		width: 10,
//		value : 2.7979888916016167
//	},
//	{
//		xtype: 'hidden',
//		id: 'targetY',
//		width: 10,
//		value : -110.37168800830841
//	},
//	{
//		xtype: 'hidden',
//		id: 'targetZ',
//		width: 10,
//		value : 809.7306805551052
//	}
]);




var prm_record = ag_param_store.getAt(0);

function onload_ag_img(){
	var elem = Ext.get("ag_img");
	elem.un("load", onload_ag_img);

	var checked = false;
	try{checked = Ext.getCmp('anatomo-clip-check').getValue();}catch(e){checked = false;}
	if(!checked) return;

	var clip;
	try{clip = Ext.getCmp('anatomo-clip-predifined-plane').getValue();}catch(e){clip = undefined;}

	var fix = Ext.getCmp('anatomo-clip-fix-check');
	var reverse = Ext.getCmp('anatomo-clip-reverse-check');
	var clipImgDiv = Ext.get('clipImgDiv');

	var prm_record = ag_param_store.getAt(0);
	prm_record.beginEdit();
	prm_record.set('clip_type', 'D');
	prm_record.set('clip_depth', 0);
	prm_record.endEdit();
	prm_record.commit();

	var param = Ext.urlDecode(makeAnatomoPrm(),true);
	var urlStr;

	if(clip == 'FREE'){
		if(clipImgDiv) clipImgDiv.hide();
		if(fix) fix.show();
//		urlStr = cgipath.clip+'?' + Ext.urlEncode(param);
		urlStr = cgipath.clip;
	}else{
		if(clipImgDiv) clipImgDiv.show();
		if(fix) fix.hide();
		if(reverse) reverse.enable();
		if(glb_rotateV == 90){
			param.cameraMode = "top";
		}else if(glb_rotateV == 270){
			param.cameraMode = "bottom";
		}else if(glb_rotateH == 90){
			param.cameraMode = "right";
		}else if(glb_rotateH == 180){
			param.cameraMode = "back";
		}else if(glb_rotateH == 270){
			param.cameraMode = "left";
		}else{
			param.cameraMode = "front";
		}
//		urlStr = cgipath.focusClip+'?' + Ext.urlEncode(param);
		urlStr = cgipath.focusClip;
	}

	var jsonStr = null;
	try{
		jsonStr = ag_extensions.toJSON.URI2JSON(param,{
			toString:true,
			mapPin:false,
			callback:undefined
		});
	}catch(e){jsonStr = null;}
	if(Ext.isEmpty(jsonStr)) jsonStr = Ext.urlEncode(param);

	Ext.Ajax.request({
		url     : urlStr,
		method  : 'POST',
//		params  : Ext.urlEncode(param),
		params  : jsonStr,
		success : function (response, options) {
			var targetXYZYRange = Ext.util.JSON.decode(response.responseText);
			updateRotateImg();

			var prm_record = ag_param_store.getAt(0);
			prm_record.beginEdit();

			prm_record.set('clip_paramA', parseFloat(targetXYZYRange.Clip.ClipPlaneA));
			prm_record.set('clip_paramB', parseFloat(targetXYZYRange.Clip.ClipPlaneB));
			prm_record.set('clip_paramC', parseFloat(targetXYZYRange.Clip.ClipPlaneC));
			prm_record.set('clip_paramD', parseFloat(targetXYZYRange.Clip.ClipPlaneD));
			if(clip == "FB" || clip == "TB" || clip == 'RL'){
				prm_record.set('clip_depth', parseFloat(targetXYZYRange.Clip.ClipPlaneD));
				prm_record.set('clip_type', 'P');
			}else if(clip == "FREE"){
				if(fix.getValue()){
					prm_record.set('clip_type', 'P');
					prm_record.set('clip_depth', Ext.getCmp('anatomo-clip-slider').getValue());
				}
			}

//切断面切り替え時にズームが変化しないようにする為
//			prm_record.set('zoom', sliderValue / 5);

			prm_record.endEdit();
			prm_record.commit();

			var clip_depth = prm_record.data.clip_depth;
			if(clip == 'FB'){
				clip_depth *= prm_record.data.clip_paramB;
			}else if(clip == 'RL'){
				clip_depth *= prm_record.data.clip_paramA;
			}else if(clip == 'TB'){
				clip_depth *= prm_record.data.clip_paramC;
			}

			var minValue;
			var maxValue;
			var clip_slider = Ext.getCmp('anatomo-clip-slider');
			var clip_text = Ext.getCmp('anatomo-clip-value-text');
			if(clip_slider && clip_text){
				if(clip == "FREE"){
//					minValue = Math.abs(Math.floor(prm_record.get('clip_paramD')))*-1;
//					maxValue = Math.abs(Math.ceil(prm_record.get('clip_paramD')));
					minValue = -1000;
					maxValue = 1000;
				}else if(clip == "FB"){
					minValue = Math.floor(parseFloat(targetXYZYRange.BoundingBox.YMin));
					maxValue = Math.ceil(parseFloat(targetXYZYRange.BoundingBox.YMax));
				}else if(clip == "RL"){
					minValue = Math.floor(parseFloat(targetXYZYRange.BoundingBox.XMin));
					maxValue = Math.ceil(parseFloat(targetXYZYRange.BoundingBox.XMax));
				}else if(clip == "TB"){
					minValue = Math.floor(parseFloat(targetXYZYRange.BoundingBox.ZMin));
					maxValue = Math.ceil(parseFloat(targetXYZYRange.BoundingBox.ZMax));
				}else{
					minValue = -350;
					maxValue = 1800;
				}
				clip_slider.minValue = minValue;
				clip_slider.maxValue = maxValue;
				clip_text.minValue = minValue;
				clip_text.maxValue = maxValue;
			}

//_dump("minValue=["+minValue+"],maxValue=["+maxValue+"]");
//_dump("clip_slider.minValue=["+clip_slider.minValue+"],clip_slider.maxValue=["+clip_slider.maxValue+"]");
//_dump("clip_depth=["+clip+"]["+clip_depth+"]");
//_dump("YRangeFromServer=["+YRangeFromServer+"]");

			if(clip_slider){
				var clip_slider_value;
				if(clip == "FB" || clip == "TB"){
					clip_slider.setValue(clip_depth*-1);
				}else if(clip == 'RL'){
					clip_slider.setValue(clip_depth);
				}else if(clip == 'FREE'){
					clip_slider.setValue(prm_record.get('clip_depth'));
				}
				clip_slider.syncThumb();
			}

			stopUpdateAnatomo();
			_updateAnatomo();
		}
	});
}

anatomography_control_panel = new Ext.Panel({
	title  : 'Controls',
	header : false,
	id     : 'control-tab-anatomography-panel',
	border : false
});

function updateClipPlane() {

	var clip;
	try{clip = Ext.getCmp('anatomo-clip-predifined-plane').getValue();}catch(e){clip = undefined;}
	if(!clip) return;

//	if(clip == 'TB'){
		updateAnatomo();
		return;
//	}

	// Store Camera, Target, UpVector
	var cameraPosX = m_ag.cameraPos.x;
	var cameraPosY = m_ag.cameraPos.y;
	var cameraPosZ = m_ag.cameraPos.z;
	var targetPosX = m_ag.targetPos.x;
	var targetPosY = m_ag.targetPos.y;
	var targetPosZ = m_ag.targetPos.z;
	var upVecX = m_ag.upVec.x;
	var upVecY = m_ag.upVec.y;
	var upVecZ = m_ag.upVec.z;

	var prm_record =ag_param_store.getAt(0);
	m_ag.cameraPos.x = prm_record.data.clipped_cameraX;
	m_ag.cameraPos.y = prm_record.data.clipped_cameraY;
	m_ag.cameraPos.z = prm_record.data.clipped_cameraZ;
	m_ag.targetPos.x = prm_record.data.clipped_targetX;
	m_ag.targetPos.y = prm_record.data.clipped_targetY;
	m_ag.targetPos.z = prm_record.data.clipped_targetZ;
	m_ag.upVec.x = prm_record.data.clipped_upVecX;
	m_ag.upVec.y = prm_record.data.clipped_upVecY;
	m_ag.upVec.z = prm_record.data.clipped_upVecZ;
	prm_record.set('clip_type', 'D');

//	var urlStr = cgipath.clip+'?' + makeAnatomoPrm();
	var urlStr = cgipath.clip;
	var params = makeAnatomoPrm();
	m_ag.cameraPos.x = cameraPosX;
	m_ag.cameraPos.y = cameraPosY;
	m_ag.cameraPos.z = cameraPosZ;
	m_ag.targetPos.x = targetPosX;
	m_ag.targetPos.y = targetPosY;
	m_ag.targetPos.z = targetPosZ;
	m_ag.upVec.x = upVecX;
	m_ag.upVec.y = upVecY;
	m_ag.upVec.z = upVecZ;
	Ext.Ajax.request({
		url: urlStr,
		method  : 'POST',
		params  : params,
		success: function (response, options) {
//			var clipAry = response.responseText.split("\t");
//			prm_record.set('clip_paramA', parseFloat(clipAry[0]));
//			prm_record.set('clip_paramB', parseFloat(clipAry[1]));
//			prm_record.set('clip_paramC', parseFloat(clipAry[2]));
//			prm_record.set('clip_paramD', parseFloat(clipAry[3]));
//			prm_record.set('clip_type', 'P');

			var clipAry = Ext.util.JSON.decode(response.responseText);
			prm_record.set('clip_paramA', parseFloat(clipAry.clip0A));
			prm_record.set('clip_paramB', parseFloat(clipAry.clip0B));
			prm_record.set('clip_paramC', parseFloat(clipAry.clip0C));
			prm_record.set('clip_paramD', parseFloat(clipAry.clip0D));
			prm_record.set('clip_type', 'P');

			updateAnatomo();
		},
		failure : function (response, options) {
		}
	});
}

function updateRotateImg() {
	var img = document.getElementById("rotateImg");
	if(!img) return;

	var rotateH = getRotateHorizontalValue();
	rotateH = Math.round(rotateH/15) * 15;
	if(rotateH>=360) rotateH -= 360;
	rotateH = new String(rotateH);
	while (rotateH.length < 3) {
		rotateH = "0" + rotateH;
	}

	var rotateV = getRotateVerticalValue();
	rotateV = Math.round(rotateV/15) * 15;
	if(rotateV>=360) rotateV -= 360;
	rotateV = new String(rotateV);
	while (rotateV.length < 3) {
		rotateV = "0" + rotateV;
	}

	img.setAttribute("src", "img_angle/" + rotateH + "_" + rotateV + ".png");
}

function getPageOffset(aElem){
	try {
		if(!aElem) return null;
		var elem = aElem;
		var top = elem.offsetTop;
		var left = elem.offsetLeft;
		while(elem.offsetParent != null){
			if(!elem || !elem.offsetParent) break;
			elem = elem.offsetParent;
			top += elem.offsetTop;
			left += elem.offsetLeft;
		}
		return {left:left,top:top};
	} catch( e ){
		_dump("getPageOffset():["+e+"]");
	}
}

function getClipImgOffset(e){
	var val = undefined;
	try{
		var clip;
		try{clip = Ext.getCmp('anatomo-clip-predifined-plane').getValue();}catch(e){clip = undefined;}
		if(!clip) return undefined;

		var target = e.getTarget('div.clipImgDiv');
		if(!target) return undefined;

		var offset = getPageOffset(target);

		var point = {
			x : e.getPageX(),
			y : e.getPageY()
		};

		//画面構成が変わった場合、修正する必要あり
		var cmp = Ext.getCmp('ag-command-sectional-view');
		if(cmp && cmp.body){
			var body = cmp.body.dom;
			point.x += body.scrollLeft;
			point.y += body.scrollTop;
		}

		var zoom = 1800/YRangeFromServer;
		if(clip == "FB" || clip == "RL"){
			val = point.x - offset.left;
			if(Ext.isIE) val -= 1;
			val -= (target.offsetWidth/2);
			val = (YRangeFromServer*(val/target.offsetHeight));
			val += glb_clip_center;
		}else if(clip == "TB"){
			val = point.y - offset.top;
			if(Ext.isIE) val -= 2;
			val -= (target.offsetHeight/2);
			val = (YRangeFromServer*(val/target.offsetHeight));
			val -= glb_clip_center;
			val *= -1;
		}

	}catch(e){
		_dump("getClipImgOffset():e=["+e+"]");
	}
	return val;
}

function mousedownClipImg(e){

//_dump("mousedownClipImg()");
	var checked = false;
	try{checked = Ext.getCmp('anatomo-clip-check').getValue();}catch(e){checked = false;}
	if(!checked) return;

	var val = getClipImgOffset(e);
	if(Ext.isEmpty(val)) return;

	var clip;
	try{clip = Ext.getCmp('anatomo-clip-predifined-plane').getValue();}catch(e){clip = undefined;}
	if(!clip) return;
	if(clip == "TB"){
	}

	var textCmp = Ext.getCmp('anatomo-clip-value-text');
	textCmp.setValue(val);
	textCmp.fireEvent('change',textCmp,val);

}

var rotateImgHorizontal;
var rotateImgVertical;
var rotateImgTip;
function mouseoverClipImg(e){
	if(!rotateImgTip){
		rotateImgTip = new Ext.Tip({
		});
	}
}

function mouseoutClipImg(e){
	if(!rotateImgTip) return;
	setTimeout(function(){
		if(rotateImgTip) rotateImgTip.hide();
	},100);
}

function mousemoveClipImg(e){
	try{
		var checked = false;
		try{checked = Ext.getCmp('anatomo-clip-check').getValue();}catch(e){checked = false;}
		if(!checked) return;

		var val = getClipImgOffset(e);
		if(Ext.isEmpty(val)) return;

		var clip;
		try{clip = Ext.getCmp('anatomo-clip-predifined-plane').getValue();}catch(e){clip = undefined;}
		if(!clip) return;
		val = Math.round(val) + ' mm';

		var pageOffsets = e.getXY();
		pageOffsets[0] += 10;
		pageOffsets[1] -= 30;

		if(rotateImgTip) rotateImgTip.showAt(pageOffsets);
		if(rotateImgTip) rotateImgTip.body.update(val);
		if(rotateImgTip) rotateImgTip.doAutoWidth();

	}catch(e){
		_dump("mousemoveClipImg():e=["+e+"]");
	}
}

function setClipImage(clipH,clipV,aCB){
	_setClipImage(clipH,clipV,[],aCB);
	return;

	var tree_param = {};
	tree_param.node = 'root';
	try{var treeType = Ext.getCmp('bp3d-tree-type-combo-ag').getValue();}catch(e){treeType=undefined;}
	if(!Ext.isEmpty(treeType)) tree_param.t_type = treeType;
	try{var bp3d_version = Ext.getCmp('anatomo-version-combo').getValue();}catch(e){bp3d_version='5.2';}
	tree_param.version = bp3d_version;
//	var urlStr = 'get-tree.cgi?' + Ext.urlEncode(tree_param);
	var urlStr = 'get-tree.cgi';
	Ext.Ajax.request({
		url     : urlStr,
		method  : 'POST',
		params  : Ext.urlEncode(tree_param),
		success : function (response, options) {
			var tree_nodes = Ext.util.JSON.decode(response.responseText);
			var f_ids = [];
			for(var i=0;i<tree_nodes.length;i++){
				f_ids.push(tree_nodes[i].f_id);
			}
			_setClipImage(clipH,clipV,f_ids,aCB);
		}
	});
}


function _setClipImage(clipH,clipV,f_ids,aCB){

	glb_clip_param = Ext.urlDecode(makeAnatomoPrm(),true);
	glb_clip_param.cm = 'N';
	glb_clip_param.cd = 'NaN';
//	glb_clip_param.iw = '301';
	glb_clip_param.iw = '136';
	glb_clip_param.ih = '301';
	glb_clip_param.bcl = 'FFFFFF';
	glb_clip_param.zm = '0';

	glb_clip_param.sx = '0';
	glb_clip_param.sn = '0';
	glb_clip_param.cf = '0';

	delete glb_clip_param.tn;

	delete glb_clip_param.cpa;
	delete glb_clip_param.cpb;
	delete glb_clip_param.cpc;
	delete glb_clip_param.cpd;
	delete glb_clip_param.cd;
	delete glb_clip_param.ct;
	glb_clip_param.cm = 'N';

	delete glb_clip_param.lp;
	delete glb_clip_param.lc;

	delete glb_clip_param.lt;
	delete glb_clip_param.le;
	delete glb_clip_param.la;

	delete glb_clip_param.gdr;
	delete glb_clip_param.gcl;
	delete glb_clip_param.gtc;

	for(var key in glb_clip_param){
		if(key.match(/[0-9]{3}$/)) delete glb_clip_param[key];
	}

//_dump("_setClipImage():f_ids.length=["+f_ids.length+"]");

	if(f_ids.length>0){
		for(var i=0;i<f_ids.length;i++){
			var num = makeAnatomoOrganNumber(i+1);
			glb_clip_param["oid" + num] = f_ids[i];
			glb_clip_param["osz" + num] = 'Z';
			glb_clip_param["oop" + num] = '1.0';
			glb_clip_param["orp" + num] = 'S';
		}
	}else{
		var num = '001';
		var tg_id = Ext.getCmp('anatomo-tree-group-combo').getValue();
//_dump("_setClipImage():tg_id=["+tg_id+"]");
		if(tg_id=='1' || tg_id=='5'){
			glb_clip_param["oid" + num] = 'FMA20394';
		}else if(tg_id=='2'){
			glb_clip_param["onm" + num] = 'talairach';
		}else{
			glb_clip_param["onm" + num] = 'brain';
		}
		glb_clip_param["osz" + num] = 'Z';
		glb_clip_param["oop" + num] = '1.0';
		glb_clip_param["orp" + num] = 'S';
	}

	if(clipH == 90){
		glb_clip_param.cameraMode = "right";
	}else{
		glb_clip_param.cameraMode = "front";
	}

	glb_clip_param.cx = m_ag.initCameraPos.x;
	glb_clip_param.cy = m_ag.initCameraPos.y;
	glb_clip_param.cz = m_ag.initCameraPos.z;

	glb_clip_param.tx = m_ag.initTargetPos.x;
	glb_clip_param.ty = m_ag.initTargetPos.y;
	glb_clip_param.tz = m_ag.initTargetPos.z;

	glb_clip_param.ux = m_ag.initUpVec.x;
	glb_clip_param.uy = m_ag.initUpVec.y;
	glb_clip_param.uz = m_ag.initUpVec.z;

//	var urlStr = cgipath.focusClip+'?' + Ext.urlEncode(glb_clip_param);
	var urlStr = cgipath.focusClip;

	var jsonStr = null;
	try{
		jsonStr = ag_extensions.toJSON.URI2JSON(glb_clip_param,{
			toString:true,
			mapPin:false,
			callback:undefined
		});
	}catch(e){jsonStr = null;}
	if(Ext.isEmpty(jsonStr)) jsonStr = Ext.urlEncode(glb_clip_param);

	Ext.Ajax.request({
		url     : urlStr,
		method  : 'POST',
//		params  : Ext.urlEncode(glb_clip_param),
		params  : jsonStr,
		success : function (response, options) {
			var targetXYZYRange = Ext.util.JSON.decode(response.responseText);
			if(targetXYZYRange.Camera && targetXYZYRange.BoundingBox){
				glb_clip_param.cx = parseFloat(targetXYZYRange.Camera.CameraX);
				glb_clip_param.cy = parseFloat(targetXYZYRange.Camera.CameraY);
				glb_clip_param.cz = parseFloat(targetXYZYRange.Camera.CameraZ);

				glb_clip_param.tx = parseFloat(targetXYZYRange.Camera.TargetX);
				glb_clip_param.ty = parseFloat(targetXYZYRange.Camera.TargetY);
				glb_clip_param.tz = parseFloat(targetXYZYRange.Camera.TargetZ);

				glb_clip_param.ux = parseFloat(targetXYZYRange.Camera.CameraUpVectorX);
				glb_clip_param.uy = parseFloat(targetXYZYRange.Camera.CameraUpVectorY);
				glb_clip_param.uz = parseFloat(targetXYZYRange.Camera.CameraUpVectorZ);

				YRangeFromServer = parseFloat(targetXYZYRange.BoundingBox.ZMax) - parseFloat(targetXYZYRange.BoundingBox.ZMin);

				glb_clip_param.zm = ((parseFloat(Math.log(1800) / Math.LN2) - parseFloat(Math.log(YRangeFromServer) / Math.LN2)) * 5) / 5;

			}else if(targetXYZYRange.AgCamera){
				glb_clip_param.cx = parseFloat(targetXYZYRange.AgCamera.cameraPosX);
				glb_clip_param.cy = parseFloat(targetXYZYRange.AgCamera.cameraPosY);
				glb_clip_param.cz = parseFloat(targetXYZYRange.AgCamera.cameraPosZ);

				glb_clip_param.tx = parseFloat(targetXYZYRange.AgCamera.targetPosX);
				glb_clip_param.ty = parseFloat(targetXYZYRange.AgCamera.targetPosY);
				glb_clip_param.tz = parseFloat(targetXYZYRange.AgCamera.targetPosZ);

				glb_clip_param.ux = parseFloat(targetXYZYRange.AgCamera.upVecX);
				glb_clip_param.uy = parseFloat(targetXYZYRange.AgCamera.upVecY);
				glb_clip_param.uz = parseFloat(targetXYZYRange.AgCamera.upVecZ);

				YRangeFromServer = parseFloat(targetXYZYRange.AgCamera.yrange);

				glb_clip_param.zm = ((parseFloat(Math.log(1800) / Math.LN2) - parseFloat(Math.log(YRangeFromServer) / Math.LN2)) * 5) / 5;
			}


			delete glb_clip_param.cameraMode;
			for(var key in glb_clip_param){
				if(typeof glb_clip_param[key] == "number" && isNaN(glb_clip_param[key])){
					delete glb_clip_param[key];
					continue;
				}
				if(Ext.isEmpty(glb_clip_param[key])){
					delete glb_clip_param[key];
					continue;
				}
			}

			glb_clip_center = 0;
			var clip;
			try{clip = Ext.getCmp('anatomo-clip-predifined-plane').getValue();}catch(e){clip = undefined;}
			if(clip){
				if(clip == 'FB'){
					glb_clip_center = glb_clip_param.ty;
				}else if(clip == 'RL'){
					glb_clip_center = glb_clip_param.tx;
				}else if(clip == 'TB'){
					glb_clip_center = glb_clip_param.tz;
				}
			}

			var jsonStr = null;
			try{
				jsonStr = ag_extensions.toJSON.URI2JSON(glb_clip_param,{
					toString:true,
					mapPin:false,
					callback:undefined
				});
			}catch(e){jsonStr = null;}
			if(Ext.isEmpty(jsonStr)) jsonStr = Ext.urlEncode(glb_clip_param);

//			var src = Ext.urlEncode(glb_clip_param);
			var src = jsonStr;
			var img = document.getElementById("clipImg");
//			img.setAttribute("src", cgipath.image+'?'+src);
			img.setAttribute("src", cgipath.image+'?'+src);
			if(aCB) (aCB)(glb_clip_param,YRangeFromServer);
		}
	});
}

function setClipImageHV (clipH,clipV,rotateH,rotateV,aCB) {
	var clip;
	try{clip = Ext.getCmp('anatomo-clip-predifined-plane').getValue();}catch(e){clip = undefined;}
	if(!clip) return;

	stopUpdateAnatomo();

	glb_rotateH = rotateH;
	glb_rotateV = rotateV;

//_dump("CALL setClipImage(1)");
	setClipImage(clipH,clipV,function(aParam,aYRange){ onloadClipImage(); });
}

function onloadClipImage(){
	var checked = false;
	try{checked = Ext.getCmp('anatomo-clip-check').getValue();}catch(e){checked = false;}
	if(!checked) return;
	onload_ag_img();
}

function updateClipImage(){
	var checked = false;
	try{checked = Ext.getCmp('anatomo-clip-check').getValue();}catch(e){checked = false;}
	if(!checked) return false;
	return false;
}

function setRotate(horizontal,vertical) {

//m_ag.cameraPos = new AGVec3d(2.7979888916016167, -998.4280435445771, 809.7306805551052);
//m_ag.targetPos = new AGVec3d(2.7979888916015625, -110.37168800830841, 809.7306805551052);
//m_ag.upVec = new AGVec3d(0, 0, 1);

	setCameraAndTarget(m_ag.cameraPos, m_ag.targetPos, m_ag.upVec, true);
	var deg = calcRotateDeg();
//_dump("setRotate():H=["+deg.H+"],V=["+deg.V+"]");

	var h = (deg.H - horizontal) * -1;
	var v = (deg.V - vertical) * -1;

//_dump("setRotate():h=["+h+"],v=["+v+"]");

	if(h!=0) addLongitude(h);

	if(v!=0) addLatitude(v);

	var deg = calcRotateDeg();
//_dump("setRotate():H=["+deg.H+"],V=["+deg.V+"]\n");
	setRotateHorizontalValue(horizontal);
	setRotateVerticalValue(vertical);

	updateRotateImg();
	stopUpdateAnatomo();
	_updateAnatomo();
}

function setRotateHorizontal (angle,degree) {
	var deg = getRotateHorizontalValue();
	angle = Math.round(angle/15)*15;
	while(deg != angle){
		deg += (15*degree);
		if(deg >= 360) deg = deg - 360;
		if(deg < 0) deg = deg + 360;
		setRotateHorizontalValue(deg);
		setCameraAndTarget(m_ag.cameraPos, m_ag.targetPos, m_ag.upVec, true);
		addLongitude(15*degree);
	}
}

function setRotateVertical (angle,degree) {
	var deg = getRotateVerticalValue();
	angle = Math.round(angle/15)*15;
	while(deg != angle){
		deg += (15*degree);
		if(deg >= 360) deg = deg - 360;
		if(deg < 0) deg = deg + 360;
		setRotateVerticalValue(deg);
		setCameraAndTarget(m_ag.cameraPos, m_ag.targetPos, m_ag.upVec, true);
		addLatitude(15*degree);
	}
}

function rotateHorizontal (degree) {
	var deg = getRotateHorizontalValue();
	deg = deg + degree;
	if (deg >= 360) {
		deg = deg - 360;
	}
	if (deg < 0) {
		deg = deg + 360;
	}
	setRotateHorizontalValue(deg);
	updateRotateImg();
	setCameraAndTarget(m_ag.cameraPos, m_ag.targetPos, m_ag.upVec, true);
	addLongitude(degree);
	updateAnatomo();
}

function rotateVertical (degree) {
	var deg = getRotateVerticalValue();
	deg = deg + degree;
	if (deg < 0) {
		deg = deg + 360;
	}
	if (deg >= 360) {
		deg = deg - 360;
	}
	setRotateVerticalValue(deg);
	updateRotateImg();
	setCameraAndTarget(m_ag.cameraPos, m_ag.targetPos, m_ag.upVec, true);
	addLatitude(degree);
	updateAnatomo();
}

function anatomoZoomUpButton () {
	var slider = Ext.getCmp('zoom-slider');
	slider.setValue(slider.getValue() + 1);
}

function anatomoZoomDownButton () {
	var slider = Ext.getCmp('zoom-slider');
	slider.setValue(slider.getValue() - 1);
}

function anatomoUpdateZoomValueText (value) {
	anatomoUpdateZoomValue = true;
	var textField = Ext.getCmp('zoom-value-text');
	if(textField) textField.setValue(value);
	anatomoUpdateZoomValue = false;
}

function anatomoClipUpButton () {
	var textField = Ext.getCmp('anatomo-clip-value-text');
	var slider = Ext.getCmp('anatomo-clip-slider');
	slider.setValue(textField.getValue() + 1);
}

function anatomoClipDownButton () {
	var textField = Ext.getCmp('anatomo-clip-value-text');
	var slider = Ext.getCmp('anatomo-clip-slider');
	slider.setValue(textField.getValue() - 1);
}

function anatomoUpdateClipValueText (value) {
	anatomoUpdateClipValue = true;
	var textField = Ext.getCmp('anatomo-clip-value-text');
	if(textField) textField.setValue(value);
	anatomoUpdateClipValue = false;
}

var selectCommand = function () {
};


function anatomography_init() {
	makeRotImgDiv();
	ag_command_init();
}

function anatomography_render(){

	var ag_image_control_center_panel = new Ext.Panel({
		region    : 'center',
		border    : false,
		bodyStyle : 'border-top-width:1px;border-right-width:1px;',
		layout    : 'accordion',
		items : [

		{
			title      : 'Image controls',
			border     : false,
			autoScroll : false,
			bodyStyle  : 'overflow-y:auto;',
			contentEl  : 'ag-command-image-controls-content',
			collapsed  : true,
			listeners: {
				'beforerender': function(panel){
				},
				'render': function(panel){
					Ext.get('ag-command-image-controls-content').removeClass('x-hide-display');
					var prm_record = ag_param_store.getAt(0);

					ag_command_rotation_horizontal_numberField_task = new Ext.util.DelayedTask(function(){
						var field = Ext.getCmp('rotateH');
						if(!field || !field.rendered) return;
						if(!field.validate()) return;
						setRotate(getRotateHorizontalValue(),getRotateVerticalValue());
						field.selectText();
					});

					new Ext.form.NumberField({
						ctCls : 'x-small-editor',
						renderTo: 'ag-command-rotation-horizontal-render',
						id: 'rotateH',
						width: 30,
						value : prm_record.data.rotate_h,
						allowBlank : false,
						allowDecimals : true,
						allowNegative : true,
						selectOnFocus : true,
						enableKeyEvents : true,
						maxValue : 359,
						minValue : 0,
						listeners: {
							'keydown' : function(field,e){
								if(e.getKey()!=e.ENTER){
									ag_command_rotation_horizontal_numberField_task.delay(500);
									return;
								}
								if(!field.validate()) return;
								setRotate(getRotateHorizontalValue(),getRotateVerticalValue());
								field.selectText();
							},
							'change' : function(field){
								if(!field.validate()) return;
								setRotate(getRotateHorizontalValue(),getRotateVerticalValue());
							}
						}
					})

					ag_command_rotation_vertical_numberField_task = new Ext.util.DelayedTask(function(){
						var field = Ext.getCmp('rotateV');
						if(!field || !field.rendered) return;
						if(!field.validate()) return;
						setRotate(getRotateHorizontalValue(),getRotateVerticalValue());
						field.selectText();
					});

					new Ext.form.NumberField({
						ctCls : 'x-small-editor',
						renderTo: 'ag-command-rotation-vertical-render',
						id: 'rotateV',
						width: 30,
						value : prm_record.data.rotate_v,
						allowBlank : false,
						allowDecimals : true,
						allowNegative : true,
						selectOnFocus : true,
						enableKeyEvents : true,
						maxValue : 359,
						minValue : 0,
						listeners: {
							'keydown' : function(field,e){
								if(e.getKey()!=e.ENTER){
									ag_command_rotation_vertical_numberField_task.delay(500);
									return;
								}
								if(!field.validate()) return;
								setRotate(getRotateHorizontalValue(),getRotateVerticalValue());
								field.selectText();
							},
							'change' : function(field){
								if(!field.validate()) return;
								setRotate(getRotateHorizontalValue(),getRotateVerticalValue());
							}
						}
					});
					new Ext.form.Checkbox({
						ctCls : 'x-small-editor',
						renderTo : 'ag-command-image-controls-rotateAuto-render',
						id       : 'ag-command-image-controls-rotateAuto',
						boxLabel : '&nbsp;On/Off',
						checked  : false,
						listeners: {
							'check': function(checkbox,checked){
								Ext.getCmp('ag-command-autorotate-chechbox').setValue(checked);
if(checked){
//	_dump("");
//	_dump("m_ag.cameraPos");
	calcRotateAxisDeg(m_ag.cameraPos);
//	_dump("m_ag.targetPos");
	calcRotateAxisDeg(m_ag.targetPos);
//	_dump("m_ag.upVec");
	calcRotateAxisDeg(m_ag.upVec);
//	_dump("");
}


								agRotateAuto.init();
								agRotateAuto.rotate(checked);
								stopUpdateAnatomo();
								_updateAnatomo(false);
							},
							scope:this
						}
					});

					new Ext.form.ComboBox({
						ctCls         : 'x-small-editor',
						renderTo      : 'ag-command-image-controls-rotateAuto-angles-render',
						id            : 'ag-command-image-controls-rotateAuto-angles',
						editable      : false,
						mode          : 'local',
						lazyInit      : false,
						displayField  : 'disp',
						valueField    : 'value',
						width         : 45,
						triggerAction : 'all',
						value         : 15,
						regex         : new RegExp("^[-0-9]+$"),
						allowBlank    : false,
						selectOnFocus : true,
						validator     : function(value){
							value = Number(value);
							if(isNaN(value)) return '';
							if(Math.abs(value)<=0 || Math.abs(value)>180) return '';
							return true;
						},
						store : new Ext.data.SimpleStore({
							fields: ['disp', 'value'],
							data : [
//								[-90, -90],
//								[-45, -45],
//								[-30, -30],
//								[-15, -15],
//								[-10, -10],
//								[-5, -5],
								[90, 90],
								[45, 45],
								[30, 30],
								[15, 15],
								[10, 10],
								[5, 5]
							]
						}),
						listeners : {
							'render' : function(combo){
							},
							'valid' : function(combo) {
								var value = Number(combo.getValue());
								var chg_value = 360/Math.round(360/value);
//								_dump("value=["+value+"]:chg_value=["+chg_value+"]");
								if(value!=chg_value) combo.setValue(chg_value);
							},
							'select' : function(combo, record, index) {
								agRotateAuto.init();
							},
							scope:this
						}
					});

					new Ext.form.NumberField({
						ctCls : 'x-small-editor',
						renderTo: 'ag-command-image-controls-rotateAuto-interval-render',
						id       : 'ag-command-image-controls-rotateAuto-interval',
						width: 25,
						value : 1,
						allowBlank : false,
						allowDecimals : true,
						allowNegative : true,
						selectOnFocus : true,
						enableKeyEvents : true,
						maxValue : 30,
						minValue : 1,
						listeners: {
							'keydown' : function(field,e){
								if(e.getKey()!=e.ENTER){
									ag_command_rotation_vertical_numberField_task.delay(500);
									return;
								}
								if(!field.validate()) return;
//								setRotate(getRotateHorizontalValue(),getRotateVerticalValue());
//								field.selectText();
							},
							'change' : function(field){
//								if(!field.validate()) return;
//								setRotate(getRotateHorizontalValue(),getRotateVerticalValue());
							}
						}
					});
					agRotateAuto.init();
				}
			}
		},
		{
			title      : 'Sectional View',
			id         : 'ag-command-sectional-view',
			border     : false,
			autoScroll : false,
			bodyStyle  : 'overflow-y:auto;',
			contentEl  : 'ag-command-sectional-view-content',
			hidden     : true,
			listeners: {
				'beforerender': function(panel){
				},
				'render': function(panel){
					Ext.get('ag-command-sectional-view-content').removeClass('x-hide-display');
					var prm_record = ag_param_store.getAt(0);

					new Ext.form.Checkbox ({
						ctCls : 'x-small-editor',
						renderTo: 'ag-command-clip-checkbox-render',
						id : 'anatomo-clip-check',
						checked: isNaN(prm_record.data.clip_depth)?false:true,
						listeners: {
							'render': function(checkbox){
								checkbox.on('check',oncheck_anatomo_clip_check);
							},
							scope:this
						}
					});

					new Ext.form.ComboBox ({
						ctCls : 'x-small-editor',
						renderTo: 'ag-command-clip-method-render',
						id : 'anatomo-clip-method-combo',
						editable: false,
						mode: 'local',
						lazyInit: false,
						displayField: 'disp',
						valueField: 'value',
						width: 68,
						triggerAction: 'all',
						value: 'NS',
						hidden : false,
						store: new Ext.data.SimpleStore({
							fields: ['disp', 'value'],
							data : [
								['Amptation', 'NS'],
								['Section', 'S']
							]
						}),
						listeners: {
							'render': function(combobox){
								combobox.on('select',onselect_anatomo_clip_method_combo);
							},
							scope:this
						}
					});

					new Ext.form.ComboBox ({
						ctCls : 'x-small-editor',
						renderTo: 'ag-command-clip-predifined-render',
						id : 'anatomo-clip-predifined-plane',
						editable: false,
						mode: 'local',
						lazyInit: false,
						displayField: 'disp',
						valueField: 'value',
						width: 88,
						listWidth : 100,
						triggerAction: 'all',
						value: 'TB',
						hidden : false,
						store: new Ext.data.SimpleStore({
							fields: ['disp', 'value'],
							data : [
								['FRONTAL', 'FB'],
								['SAGITTAL', 'RL'],
								['TRANSVERSE', 'TB'],
								['FREE PLANE', 'FREE']
							]
						}),
						listeners: {
							'render': function(combobox){
								combobox.on('select',onselect_anatomo_clip_predifined_plane);
								setClipImage(0,0,setClipLine);
							},
							scope:this
						}
					});

					new Ext.form.Checkbox ({
						hidden : false,
						ctCls : 'x-small-editor',
						renderTo: 'ag-command-clip-fix-checkbox-render',
						id : 'anatomo-clip-fix-check',
						boxLabel : 'Fix',
						checked: false,
						listeners: {
							'render': function(checkbox){
								checkbox.on('check',oncheck_anatomo_clip_fix_check);
							},
							scope:this
						}
					});

					new Ext.form.Checkbox ({
						hidden : false,
						ctCls : 'x-small-editor',
						renderTo: 'ag-command-clip-reverse-checkbox-render',
						id : 'anatomo-clip-reverse-check',
						boxLabel : 'Reverse',
						checked: false,
						listeners: {
							'render': function(checkbox){
								checkbox.on('check',oncheck_anatomo_clip_reverse_check);
							},
							scope:this
						}
					});

					new Ext.Slider({
						renderTo : 'ag-command-clip-slider-render',
						id: 'anatomo-clip-slider',
						vertical: false,
						value : isNaN(prm_record.data.clip_depth)?0:prm_record.data.clip_depth,
						width : 121,
						minValue: -350,
						maxValue: 1800,
						increment: 1,
						plugins: tip_depth,
						hidden : false,
						listeners: {
							'render': function(slider){
								slider.on('change',onchange_anatomo_clip_slider);
							},
							scope:this
						}
					});

					new Ext.form.NumberField ({
						ctCls : 'x-small-editor',
						renderTo : 'ag-command-clip-text-render',
						id: 'anatomo-clip-value-text',
						width: 40,
						value : isNaN(prm_record.data.clip_depth)?0:prm_record.data.clip_depth,
//						maxValue : 1000,
//						minValue : -1000,
						maxValue : 1800,
						minValue : -350,
						hidden : false,
						listeners: {
							'render': function(numberfield){
								numberfield.on('change',onchange_anatomo_clip_value_text);
							},
							scope:this
						}
					});

					Ext.EventManager.on("clipImgDiv", 'mousedown', mousedownClipImg);
					Ext.EventManager.on("clipImgDiv", 'mouseover', mouseoverClipImg);
					Ext.EventManager.on("clipImgDiv", 'mouseout',  mouseoutClipImg);
					Ext.EventManager.on("clipImgDiv", 'mousemove', mousemoveClipImg);
//					Ext.EventManager.on("clipImg",    'load',      onloadClipImage);

					var fix = Ext.getCmp('anatomo-clip-fix-check');
					if(fix) fix.hide();
					var reverse = Ext.getCmp('anatomo-clip-reverse-check');
					if(reverse) reverse.hide();
					var method = Ext.getCmp('anatomo-clip-method-combo');
					if(method) method.hide();
					var plane = Ext.getCmp('anatomo-clip-predifined-plane');
					if(plane) plane.hide();
					var slider = Ext.getCmp('anatomo-clip-slider');
					if(slider) slider.hide();
					var textField = Ext.getCmp('anatomo-clip-value-text');
					if(textField) textField.hide();

					var buttonSliderUp = Ext.get('anatomo-clip-slider-up-button');
					if(buttonSliderUp) buttonSliderUp.hide();
					var buttonSliderDown = Ext.get('anatomo-clip-slider-down-button');
					if(buttonSliderDown) buttonSliderDown.hide();
					var buttonTextUp = Ext.get('anatomo-clip-text-up-button');
					if(buttonTextUp) buttonTextUp.hide();
					var buttonTextDown = Ext.get('anatomo-clip-text-down-button');
					if(buttonTextDown) buttonTextDown.hide();
					var labelClipUnit = Ext.get('anatomo-clip-unit-label');
					if(labelClipUnit) labelClipUnit.hide();

					var clipImgDiv = Ext.get('clipImgDiv');
					if(clipImgDiv) clipImgDiv.hide();

				}
			}
		},
		{
			title      : 'Window controls',
			id         : 'ag-command-window-controls',
			border     : false,
			autoScroll : false,
			bodyStyle  : 'overflow-y:auto;',
			contentEl  : 'ag-command-window-controls-content',
			listeners: {
				'beforerender': function(panel){
				},
				'render': function(panel){
					Ext.get('ag-command-window-controls-content').removeClass('x-hide-display');
					var prm_record = ag_param_store.getAt(0);

					new Ext.form.ComboBox({
						ctCls : 'x-small-editor',
						renderTo:'ag-command-windowsize-width-render',
						id:'anatomo-width-combo',
						editable: true,
						mode: 'local',
						lazyInit: false,
						displayField: 'disp',
						valueField: 'value',
						width: 55,
						triggerAction: 'all',
						value: prm_record.data.image_w,
						store: new Ext.data.SimpleStore({
							fields: ['disp', 'value'],
							data : [
								[100, 100],
								[200, 200],
								[300, 300],
								[400, 400],
								[500, 500],
								[600, 600],
								[700, 700],
								[800, 800],
								[900, 900]
							]
						}),
						listeners: {
							'render': function(combo){
								var checkbox = Ext.getCmp('anatomo-windowsize-autosize-check');
								if(checkbox && checkbox.rendered) oncheck_anatomo_windowsize_autosize_check(checkbox,checkbox.getValue());
							},
							'select' : function(combo, record, index) {
								var prm_record =ag_param_store.getAt(0);
								prm_record.beginEdit();
								prm_record.set('image_w', record.data.value);
								prm_record.endEdit();
								prm_record.commit();
								updateAnatomo();
							},
							scope:this
						}
					});

					new Ext.form.ComboBox({
						ctCls : 'x-small-editor',
						renderTo:'ag-command-windowsize-height-render',
						id:'anatomo-height-combo',
						editable: true,
						mode: 'local',
						lazyInit: false,
						displayField: 'disp',
						valueField: 'value',
						width: 55,
						value:prm_record.data.image_h,
						triggerAction: 'all',
						store: new Ext.data.SimpleStore({
							fields: ['disp', 'value'],
							data : [
								[100, 100],
								[200, 200],
								[300, 300],
								[400, 400],
								[500, 500],
								[600, 600],
								[700, 700],
								[800, 800],
								[900, 900]
							]
						}),
						listeners: {
							'render': function(combo){
								var checkbox = Ext.getCmp('anatomo-windowsize-autosize-check');
								if(checkbox && checkbox.rendered) oncheck_anatomo_windowsize_autosize_check(checkbox,checkbox.getValue());
							},
							'select' : function(combo, record, index) {
								var prm_record =ag_param_store.getAt(0);
								prm_record.beginEdit();
								prm_record.set('image_h', record.data.value);
								prm_record.endEdit();
								prm_record.commit();
								updateAnatomo();
							},
							scope:this
						}
					});

					new Ext.form.Checkbox ({
						hidden : false,
						ctCls : 'x-small-editor',
						renderTo: 'ag-command-windowsize-autosize-checkbox-render',
						id : 'anatomo-windowsize-autosize-check',
						boxLabel : 'Auto Window Size',
						checked: true,
						listeners: {
							'render': function(checkbox){
								checkbox.on('check',oncheck_anatomo_windowsize_autosize_check);
								oncheck_anatomo_windowsize_autosize_check(checkbox,checkbox.getValue());
							},
							scope:this
						}
					});

					new Ext.ux.ColorField({
						ctCls : 'x-small-editor',
						width: 80,
						renderTo:'ag-command-bgcolor-render',
						value:prm_record.data.bg_rgb,
						id:'anatomo-bgcp',
						listeners: {
							select : function (e, color) {
								var prm_record = ag_param_store.getAt(0);
								prm_record.beginEdit();
								prm_record.set('bg_rgb', color);
								prm_record.endEdit();
								prm_record.commit();
								updateAnatomo();
							}
						}
					});

					new Ext.form.Checkbox ({
						hidden : false,
						ctCls : 'x-small-editor',
						renderTo: 'ag-command-bgcolor-transparent-checkbox-render',
						id : 'anatomo-bgcolor-transparent-check',
						hidden : false,
						boxLabel : 'Transparent',
						checked: false,
						listeners: {
							'render': function(checkbox){
								checkbox.on('check',oncheck_anatomo_bgcolor_transparent_check);
								oncheck_anatomo_bgcolor_transparent_check(checkbox,checkbox.getValue());
							},
							scope:this
						}
					});

					new Ext.form.TextField ({
						ctCls : 'x-small-editor',
						renderTo: 'ag-command-colormap-max-render',
						id: 'scalar-max-textfield',
						width: 45,
						value: (isNaN(prm_record.data.scalar_max))?'':prm_record.data.scalar_max,
						listeners: {
							'change': {
								fn:function (textField, newValue, oldValue) {
									var prm_record =ag_param_store.getAt(0);
									prm_record.beginEdit();
									prm_record.set('scalar_max', parseFloat(newValue));
									prm_record.endEdit();
									prm_record.commit();
									updateAnatomo();
								}, scope:this
							}
						}
					});

					new Ext.form.TextField ({
						ctCls : 'x-small-editor',
						renderTo: 'ag-command-colormap-min-render',
						id: 'scalar-min-textfield',
						width: 45,
						value: (isNaN(prm_record.data.scalar_min))?'':prm_record.data.scalar_min,
						listeners: {
							'change': {
								fn:function (textField, newValue, oldValue) {
									var prm_record =ag_param_store.getAt(0);
									prm_record.beginEdit();
									prm_record.set('scalar_min', parseFloat(newValue));
									prm_record.endEdit();
									prm_record.commit();
									updateAnatomo();
								}, scope:this
							}
						}
					});

					new Ext.form.Checkbox ({
						ctCls : 'x-small-editor',
						renderTo: 'ag-command-colormap-bar-render',
						id: 'show-colorbar-check',
						width: 45,
						checked: (prm_record.data.colorbar_f=='1')?true:false,
						listeners: {
							'check': {
								fn:function (checkbox, fChecked) {
									var button = Ext.getCmp('ag-pallet-heatmap-bar-button');		//2011-09-30 ADD
									if(button && button.rendered) button.toggle(fChecked,true);	//2011-09-30 ADD

									var prm_record = ag_param_store.getAt(0);
									prm_record.beginEdit();
									if (fChecked) {
										prm_record.set('colorbar_f', '1');
										prm_record.set('heatmap_f', '1');
									} else {
										prm_record.set('colorbar_f', '0');
										prm_record.set('heatmap_f', '0');
									}
									prm_record.endEdit();
									prm_record.commit();
									updateAnatomo();

									//2011-09-30 ADD
									if(fChecked){
										var grid = Ext.getCmp('ag-parts-gridpanel');
										if(grid && grid.rendered){
											var colModel = grid.getColumnModel();
											var colid = colModel.getIndexById('value');
											if(colModel.isHidden(colid)) colModel.setHidden(colid,false);
										}
									}

								}, scope:this
							}
						}
					});

//					_dump("prm_record.data.color_rgb=["+prm_record.data.color_rgb+"]");
					new Ext.ux.ColorField({
						ctCls : 'x-small-editor',
						width: 80,
						renderTo:'ag-command-default-parts-color-render',
						value:prm_record.data.color_rgb.toUpperCase(),
						id:'anatomo-default-parts-color',
						listeners: {
							select: function (e, color) {
								var prm_record = ag_param_store.getAt(0);
								prm_record.beginEdit();
								prm_record.set('color_rgb', color);
								prm_record.endEdit();
								prm_record.commit();
								updateAnatomo();
							}
						}
					});

					new Ext.ux.ColorField({
						ctCls : 'x-small-editor',
						width: 80,
						renderTo:'ag-command-default-pick-color-render',
						value: get_point_color().toUpperCase(),
						id:'anatomo-default-pick-color',
						listeners: {
							select: function(field, color){
								set_point_color(color);
								if(!Ext.isEmpty(get_point_f_id())) updateAnatomo();
							}
						}
					});

				}
			}
		},

//2011-09-07
		{
			hidden:true,// 2013/11/12時点で常に空なので、必要になれば表示させる
			title      : 'Sample',
			id         : 'ag-command-sample-panel',
			border     : false,
			autoScroll : false,
			bodyStyle  : 'overflow-y:auto;',
			tbar : [
				new Ext.form.Checkbox({
					ctCls : 'x-small-editor',
					id : 'ag-command-sample-latest-version-check',
					boxLabel : 'Latest version',
					hidden   : false,
					checked  : true,
					listeners: {
						'render': function(checkbox){
						},
						scope:this
					}
				})
			],
			listeners: {
				'beforerender': function(panel){
				},
				'render': function(panel){
//					setTimeout(function(){Ext.getCmp('ag-command-sample-panel').expand(false);},500);
					setTimeout(function(){Ext.getCmp('ag-command-window-controls').expand(false);},500);

					var ag_sample_template = new Ext.XTemplate(
						'<tpl for=".">',
							'<div class="thumb-wrap" style="{style}" id="contents_{id}" ext:qtip="{shortName}">',
								'<table cellpadding=0 cellspacing=0><tr><td ext:qtip="{shortName}">',
									'<div class="thumb" style="background:{bgColor};float:left;" ext:qtip="{shortName}">',
										'<img src="{src}" alt="{name}" width="60" height="60" ext:qtip="{shortName}">',
									'</div>',
								'</td><td valign="top" align="left" ext:qtip="{shortName}">',
									'<span ext:qtip="{shortName}">{shortName}</span>',
								'</td></tr></table>',
							'</div>',
						'</tpl>',
						{
							isEmpty : function(val){
								return Ext.isEmpty(val);
							},
							isUPPath : function(val){
								return (!Ext.isEmpty(val) && val != 'ctg_' ? true : false);
							}
						}
					);
					ag_sample_template.compile();

					var ag_sample_images_store = new Ext.data.JsonStore({
						url: 'get-savecontents.cgi',
						baseParams    : {
							parent : (Ext.isEmpty(gParams.parent)?'':gParams.parent),
							lng    : gParams.lng,
							type   : 'sample'
						},
						pruneModifiedRecords : true,
						root: 'images',
						fields: [
							'id',
							'name',
							'src',
							'partslist',
							'baseparam',
							'anatomoprm',
							'cameraprm',
							'environment'
						],
						listeners: {
							'beforeload' : {
								fn:function(self,options){
									self.baseParams = self.baseParams || {};
//									for(var key in self.baseParams){
//										_dump("ag_sample_images_store:"+key+"=["+self.baseParams[key]+"]");
//									}
								},
								scope:this
							},
							'load': {
								fn:function(self,records,options){
								},
								scope:this,
								single:true
							},
							'datachanged':{
								fn:function(self){
								},scope:this},
							'loadexception': {
								fn:function(){
								},scope:this
							}
						}
					});
					ag_sample_images_store.load();

					var ag_sample_formatData = function(data){
						data.shortName = null;
						if(data.name) data.shortName = data.name.ellipse(get_ag_lang('SORTNAME_LENGTH'));
						data.bgColor = "#dddddd";
						return data;
					};

					var ag_sample_formatTimestamp = function(val){
						return new Date(val).format(bp3d.defaults.TIME_FORMAT);
					}

					var ag_sample_onLoadException = function(v,o){
						var element = view_images.getEl();
						if(element) element.update('<div style="padding:10px;">Error loading images.</div>'); 
					};

					var ag_sample_dataview = new Ext.DataView({
						id           : 'ag-sample-dataview',
						tpl          : ag_sample_template,
						singleSelect : true,
						overClass    : 'x-view-over',
						autoShow     : false,
						itemSelector : 'div.thumb-wrap',
						multiSelect  : false,
						emptyText    : '<div style="padding:10px;">'+get_ag_lang('MSG_NOT_ICON')+'</div>',
						store        : ag_sample_images_store,
						listeners: {
							'selectionchange': {
								fn:function(view,selections){
									if(!selections || selections.length == 0) return;
									var checked = false;
									try{checked = Ext.getCmp('ag-command-sample-latest-version-check').getValue()}catch(e){}
									loadSaveData(view.getRecord(selections[0]).copy(),checked);
								},
								scope:this
							},
							'loadexception'  : {fn:ag_sample_onLoadException, scope:this},
							'beforeselect'   : {fn:function(view){return view.store.getRange().length > 0;}},
							'click'          : {fn:function(view,index,node,e){},scope:this, buffer:0},
							'beforeclick'    : {fn:function(view,index,node,e){},scope:this, buffer:0},
							'dblclick'       : {fn:function(view,index,node,e){},scope:this, buffer:0}
						},
						prepareData: ag_sample_formatData.createDelegate(this)
					});

					panel.add(ag_sample_dataview);
				}
			}
		}


		]
	});

	var ag_image_control_panel = new Ext.Panel({
		id         : 'ag-image-control-panel',
		autoScroll : false,
		bodyBorder : false,
		boder      : false,
		region     : 'west',
		width      : 162,
		minWidth   : 162,
		maxWidth   : 162,
		layout     : 'border',
//		split      : true,
		header        : controlPanelCollapsible,
		titleCollapse : controlPanelCollapsible,
		collapsible   : controlPanelCollapsible,
		items      : [{
			id: 'ag-image-control-north-panel',
			region: 'north',
			height: 110,
			border: false,
			frame: false,
			bodyStyle: 'border-width:0 1px 0 0;background:transparent;',
			html:'<table cellpadding=0 cellspacing=0 align="center"><tr><td><a class="goto-bp3d-btn" href="#"><img src="css/goto_bp3d.png"></a></td></tr></table>',
			listeners  : {
				render: function(comp){
					$('a.goto-bp3d-btn').live('click',function(){
						Ext.getCmp('contents-tab-panel').activate(Ext.getCmp('contents-tab-bodyparts-panel'));
						return false;
					});
					Ext.getCmp('contents-tab-panel').on({
						tabchange: {
							fn: function(tabpanel,tab){
								if(tab.id != 'contents-tab-anatomography-panel') return;
								comp.setHeight(comp.initialConfig.height);
								comp.findParentByType('panel').doLayout();
							},
							buffer: 250
						}
					});
				},
				scope:this
			}
		},ag_image_control_center_panel],
		listeners  : {
			'show' : function(panel){
				panel.doLayout();
			},
			'afterlayout' : function(panel,layout){
				afterLayout(panel);
			},
			render: function(comp){
			},
			scope:this
		}
	});


	var anatomography_point_editorgrid_panel = new Ext.grid.EditorGridPanel({
		id             : 'anatomography-point-editorgrid-panel',
		header         : false,
		region         : 'center',
		ddGroup        : 'partlistDD',
		enableDragDrop : true,
		border         : false,
		stripeRows     : true,
		columnLines    : true,
		maskDisabled   : true,
		plugins        : [
			anatomography_point_grid_partslist_checkColumn,
			anatomography_point_grid_zoom_checkColumn,
			anatomography_point_grid_exclude_checkColumn
		],
		clicksToEdit   : 1,
		trackMouseOver : true,
		selModel       : new Ext.grid.RowSelectionModel({singleSelect:true}),
		ds: anatomography_point_grid.ds,
		cm: anatomography_point_grid.cm,
		enableColLock: false,
		loadMask: true,
		viewConfig: {
			deferEmptyText: false,
			emptyText: '<div class="bp3d-pallet-empty-message">'+get_ag_lang('CLICK_IMAGE_GRID_EMPTY_MESSAGE')+'</div>'
		},
		listeners : {
			"beforeedit" : function(e){
				if(e.field == 'partslist'){
//					e.cancel = (Ext.isEmpty(e.record.get('zmax'))||(!isAdditionPartsList())?true:false);
					e.cancel = (isNoneDataRecord(e.record)||(!isAdditionPartsList())?true:false);
				}else{
					e.cancel = !e.record.get('partslist');
				}
				if(!e.cancel) e.grid._edit = e;
			},
			"afteredit" : function(e){
				e.record.commit();
//				e.grid._edit = undefined;
				if(e.field == 'partslist'){
					if(e.value){
						bp3d_parts_store.add(e.record.copy());
					}else{
						var record = null;
						var index = bp3d_parts_store.find('f_id',new RegExp("^"+e.record.get('f_id')+"$"));
						if(index>=0) record = bp3d_parts_store.getAt(index);
						if(record) bp3d_parts_store.remove(record);
					}
				}else{
					var record = null;
					var regexp = new RegExp("^"+e.record.get('f_id')+"$");
					var index = bp3d_parts_store.find('f_id',regexp);
					if(index<0) index = bp3d_parts_store.find('conv_id',regexp);
					if(index>=0) record = bp3d_parts_store.getAt(index);
					if(record){
						record.set(e.field,e.record.get(e.field));
						record.commit();
					}
				}
			},
			"complete": function(comp,row,col){
				comp.view.focusRow(row);
			},
			"resize" : function(grid){
				resizeGridPanelColumns(grid);
			},
			"render" : function(grid){
				restoreHiddenGridPanelColumns(grid);
			},
			scope : this
		}
	});
	anatomography_point_editorgrid_panel.getColumnModel().on({
		'hiddenchange' : function(column,columnIndex,hidden){
			var editorgrid = Ext.getCmp('anatomography-point-editorgrid-panel');
			resizeGridPanelColumns(editorgrid);
			saveHiddenGridPanelColumns(editorgrid);
		},
		scope: this,
		delay: 100
	});

	var anatomography_point_grid_header_panel = new Ext.Panel({
		contentEl : 'ag-point-grid-content',
		region    : 'north',
		height    : 41,
		minHeight : 41,
		maxHeight : 41,
		border    : false,
		listeners : {
			"bodyresize": function(panel,adjWidth,adjHeight,rawWidth,rawHeight){
				if(adjWidth == undefined || !adjWidth) return;

				var table = Ext.get('ag-point-grid-content-table');
				if(table) table.setWidth(adjWidth);

//既に生成済みの場合、テーブル幅のみを更新
				if(Ext.get('anatomo_comment_point_toggle_partof')) return;

//通常は、render時に生成するがIEでテーブル幅が確定前に生成すると幅が不正確になる為、ここで生成する
				new Ext.form.ComboBox ({
					renderTo : 'ag-comment-point-type-render',
					id: 'anatomo-tree-type-combo',
					xtype: 'combo',
					typeAhead: true,
					triggerAction: 'all',
					width: 140,
					editable: false,
					mode: 'local',
					lazyInit: false,
					disabled : true,
					displayField: 't_name',
					valueField: 't_type',
					store : new Ext.data.JsonStore({
						url:'get-tree_type.cgi',
						totalProperty : 'total',
						root: 'records',
						fields: [
							't_type',
							't_name'
						],
						baseParams : {
							parent : (Ext.isEmpty(gParams.parent)?'':gParams.parent),
							lng    : gParams.lng
						},
						listeners: {
							'beforeload' : function(self,options){
								self.baseParams = self.baseParams || {};
								delete self.baseParams.version;
								try{self.baseParams.version = Ext.getCmp('anatomo-version-combo').getValue();}catch(e){}

								var cmp = Ext.getCmp('anatomo-tree-type-combo');
								if(cmp && cmp.rendered) cmp.disable();

								for(var key in init_bp3d_params){
									if(key.match(/_id$/)) self.baseParams[key] = init_bp3d_params[key];
								}

								try{
									var store = Ext.getCmp('anatomo-version-combo').getStore();
									var idx = store.findBy(function(record,id){
										if(record.data.tgi_version==self.baseParams.version) return true;
									});
									if(idx>=0){
										var record = store.getAt(idx);
										if(record){
											self.baseParams.md_id = record.data.md_id;
											self.baseParams.mv_id = record.data.mv_id;
											self.baseParams.mr_id = record.data.mr_id;
											self.baseParams.ci_id = record.data.ci_id;
											self.baseParams.cb_id = record.data.cb_id;
										}
									}
								}catch(e){}
							},
							'load' : function(self,records,options){
								var cmp = Ext.getCmp('anatomo-tree-type-combo');
								if(cmp && cmp.rendered){
									if(records.length>0){
										cmp.enable();
										cmp.setValue(records[0].get('t_type'));
										cmp.fireEvent('select',cmp,records[0],0);
									}
								}
							},
							scope:this
						}
					}),
					listeners: {
						'select': function(combo,record,index){

							var record = Ext.getCmp('anatomography-point-editorgrid-panel').getSelectionModel().getSelected();
							if(record){

								Ext.getCmp('anatomography-point-editorgrid-panel').loadMask.show();
								var loader = Ext.getCmp('anatomography-point-editorgrid-panel').getStore();
								loader.removeAll();
								loader.baseParams = {};
								var elem = Ext.getDom('ag-point-grid-content-route');
								if(elem) elem.innerHTML = '&nbsp;';

								var cmp = Ext.getCmp('anatomo-tree-type-combo');
								if(cmp && cmp.rendered){
									var type = cmp.getValue();
									if(Ext.getCmp('anatomo_comment_point_toggle_partof').pressed){
										if(type == '4'){
											loader = anatomography_point_partof_store;
										}else if(type == '3'){
											loader = anatomography_point_isa_store;
										}else if(type == '1'){
											loader = anatomography_point_conventional_root_store;
										}
									}else if(Ext.getCmp('anatomo_comment_point_toggle_haspart').pressed){
										if(type == '4'){
											loader = anatomography_point_haspart_store;
										}else if(type == '3'){
											loader = anatomography_point_hasmember_store;
										}else if(type == '1'){
											loader = anatomography_point_conventional_child_store;
										}
									}
								}
								if(loader){
									loader.baseParams = loader.baseParams || {};
									loader.baseParams.f_id = record.data.f_id;
									loader.load();
								}else{
									var loader = Ext.getCmp('anatomography-point-editorgrid-panel').getStore();
									loader.removeAll();
									loader.baseParams = {};
									var elem = Ext.getDom('ag-point-grid-content-route');
									if(elem) elem.innerHTML = '&nbsp;';
									Ext.getCmp('anatomography-point-editorgrid-panel').loadMask.hide();
									Ext.getCmp('ag-parts-gridpanel').loadMask.hide();
								}
							}

						},
						'render': function(combo){
							combo.getStore().load();
						},
						scope:this
					}
				});

				new Ext.Toolbar.Button({
					renderTo     : 'ag-comment-point-toggle-partof-render',
					id : 'anatomo_comment_point_toggle_partof',
					enableToggle : true,
					toggleGroup  : 'anatomo_comment_point_toggle',
					pressed      : true,
					text         : 'Path to Root',
					listeners : {
						'click' : {
							fn : function(button) {
								if(!button.pressed) button.toggle(true);
								var record = Ext.getCmp('anatomography-point-editorgrid-panel').getSelectionModel().getSelected();
								if(record){
									var loader = null;
									var cmp = Ext.getCmp('anatomo-tree-type-combo');
									if(cmp && cmp.rendered){
										var type = cmp.getValue();
										if(type == '4'){
											loader = anatomography_point_partof_store;
										}else if(type == '3'){
											loader = anatomography_point_isa_store;
										}else if(type == '1'){
											loader = anatomography_point_conventional_root_store;
										}
									}

									if(loader){
										loader.baseParams = loader.baseParams || {};
										loader.baseParams.f_id = record.data.f_id;
										loader.load();
									}
								}
							},
							scope : this
						},
						'toggle' : {
							fn : function(button, pressed) {
							},
							scope : this
						}
					}
				});

				new Ext.Toolbar.Button({
					renderTo     : 'ag-comment-point-toggle-haspart-render',
					id : 'anatomo_comment_point_toggle_haspart',
					enableToggle : true,
					toggleGroup  : 'anatomo_comment_point_toggle',
					text : 'Children',
					listeners : {
						'click' : {
							fn : function(button) {
								if(!button.pressed) button.toggle(true);
								var record = Ext.getCmp('anatomography-point-editorgrid-panel').getSelectionModel().getSelected();
								if(record){
									var loader = null;
									var cmp = Ext.getCmp('anatomo-tree-type-combo');
									if(cmp && cmp.rendered){
										var type = cmp.getValue();
										if(type == '4'){
											loader = anatomography_point_hasmember_store;
										}else if(type == '3'){
											loader = anatomography_point_haspart_store;
										}else if(type == '1'){
											loader = anatomography_point_conventional_child_store;
										}
									}
									if(loader){
										loader.baseParams = loader.baseParams || {};
										loader.baseParams.f_id = record.data.f_id;
										loader.load();
									}
								}
							},
							scope : this
						},
						'toggle' : {
							fn : function(button, pressed) {
							},
							scope : this
						}
					}
				});
/*
				new Ext.Toolbar.Button({
					renderTo     : 'ag-comment-point-toggle-isa-render',
					id : 'anatomo_comment_point_toggle_isa',
					enableToggle : true,
					toggleGroup  : 'anatomo_comment_point_toggle',
					text : 'Path to Root',
					listeners : {
						'click' : {
							fn : function(button) {
								if(!button.pressed) button.toggle(true);
								var record = Ext.getCmp('anatomography-point-editorgrid-panel').getSelectionModel().getSelected();
								if(record){
									var loader = anatomography_point_isa_store;
									if(loader){
										loader.baseParams = loader.baseParams || {};
										loader.baseParams.f_id = record.data.f_id;
										loader.load();
									}
								}
							},
							scope : this
						},
						'toggle' : {
							fn : function(button, pressed) {
							},
							scope : this
						}
					}
				});

				new Ext.Toolbar.Button({
					renderTo     : 'ag-comment-point-toggle-hasmember-render',
					id : 'anatomo_comment_point_toggle_hasmember',
					enableToggle : true,
					toggleGroup  : 'anatomo_comment_point_toggle',
					text : 'Children',
					listeners : {
						'click' : {
							fn : function(button) {
								if(!button.pressed) button.toggle(true);
								var record = Ext.getCmp('anatomography-point-editorgrid-panel').getSelectionModel().getSelected();
								if(record){
									var loader = anatomography_point_hasmember_store;
									if(loader){
										loader.baseParams = loader.baseParams || {};
										loader.baseParams.f_id = record.data.f_id;
										loader.load();
									}
								}
							},
							scope : this
						},
						'toggle' : {
							fn : function(button, pressed) {
							},
							scope : this
						}
					}
				});
*/
			},
			"render": function(panel){

				new Ext.Toolbar.Button({
					id : 'anatomo_comment_point_button',
					enableToggle : true,
					text : 'Pick',
					hidden : true,
					listeners : {
						'toggle' : {
							fn : function(button, pressed) {
								anatomoPointMode = pressed;
								if(pressed) Ext.getCmp('anatomo_comment_pick_button').toggle(false);
							},
							scope : this
						}
					}
				});
			},
			scope : this
		}
	});

	var ag_point_grid_footer_panel = new Ext.Panel({
		contentEl : 'ag-point-grid-footer-content',
		region    : 'south',
		height    : 52,
		minHeight : 52,
		maxHeight : 52,
		border    : false,
		bodyStyle : 'border-top-width:1px;',
		listeners : {
			"bodyresize": function(panel,adjWidth,adjHeight,rawWidth,rawHeight){
				if(adjWidth == undefined || !adjWidth) return;

				var table = Ext.get('ag-point-grid-footer-content-table');
				if(table) table.setWidth(adjWidth);

//既に生成済みの場合、テーブル幅のみを更新
				if(Ext.get('anatomography-point-grid-bbar-tx-text')) return;

				new Ext.form.NumberField({
					id       : 'anatomography-point-grid-bbar-tx-text',
					renderTo : 'ag-point-grid-footer-content-coordinate-x-render',
					width    : 54,
					style    : 'color:gray;',
					readOnly : true,
					selectOnFocus : true
				});
				new Ext.form.NumberField({
					id       : 'anatomography-point-grid-bbar-ty-text',
					renderTo : 'ag-point-grid-footer-content-coordinate-y-render',
					width    : 54,
					style    : 'color:gray;',
					readOnly : true,
					selectOnFocus : true
				});
				new Ext.form.NumberField({
					id       : 'anatomography-point-grid-bbar-tz-text',
					renderTo : 'ag-point-grid-footer-content-coordinate-z-render',
					width    : 54,
					style    : 'color:gray;',
					readOnly : true,
					selectOnFocus : true
				});

				new Ext.form.NumberField({
					id       : 'ag-point-grid-footer-content-distance-x-text',
					renderTo : 'ag-point-grid-footer-content-distance-x-render',
					width    : 54,
					style    : 'color:gray;',
					readOnly : true,
					selectOnFocus : true
				});
				new Ext.form.NumberField({
					id       : 'ag-point-grid-footer-content-distance-y-text',
					renderTo : 'ag-point-grid-footer-content-distance-y-render',
					width    : 54,
					style    : 'color:gray;',
					readOnly : true,
					selectOnFocus : true
				});
				new Ext.form.NumberField({
					id       : 'ag-point-grid-footer-content-distance-z-text',
					renderTo : 'ag-point-grid-footer-content-distance-z-render',
					width    : 54,
					style    : 'color:gray;',
					readOnly : true,
					selectOnFocus : true
				});
				new Ext.form.NumberField({
					id       : 'anatomography-point-grid-bbar-distance-text',
					renderTo : 'ag-point-grid-footer-content-distance-render',
					width    : 54,
					style    : 'color:gray;',
					readOnly : true,
					selectOnFocus : true
				});
			}
		}
	});

	var ag_point_grid_panel = new Ext.Panel({
		id     : 'anatomography-point-grid-panel',
		header : false,
		title  : 'Pick',
		layout : 'border',
		border : false,
		items  : [
			Ext.getCmp('anatomography-point-editorgrid-panel'),
			anatomography_point_grid_header_panel,
			ag_point_grid_footer_panel
		],
		listeners  : {
			'show' : function(panel){
				panel.doLayout();
			},
			'afterlayout' : function(panel,layout){
				afterLayout(anatomography_point_grid_header_panel);
				afterLayout(panel);
			},
			scope:this
		}
	});

	function ag_point_search_renderer(value,metadata,record,rowIndex,colIndex,store){

		var dataIndex = ag_point_search_cols[colIndex].dataIndex;
		var item;
		for(var i=0;i<record.fields.length;i++){
			if(record.fields.keys[i] != dataIndex) continue;
			item = record.fields.items[i];
			break;
		}

		if(item){
			if(item.type == 'date'){
				if(dataIndex == 'entry' && value) value = new Date(value).format(bp3d.defaults.DATE_FORMAT);
				if(dataIndex == 'lastmod' && value) value = new Date(value).format(bp3d.defaults.TIME_FORMAT);
			}else if(item.type == 'float'){
				if(!Ext.isEmpty(value)) value = Math.round(parseFloat(value)*1000)/1000;
			}
		}

		if(isNoneDataRecord(record)){
			metadata.css += ' ag_point_none_data'; 
		}
		if(store.baseParams && store.baseParams.f_id && store.baseParams.f_id == record.data.f_id) metadata.css += ' ag_point_data'; 
		return value;
	}

	function ag_point_search_partslist_checkbox_renderer(value,metadata,record,rowIndex,colIndex,store){
		var id = Ext.getCmp('ag-point-search-editorgrid-panel').getColumnModel().getColumnId(colIndex);
		metadata.css += ' x-grid3-check-col-td'; 
		if(isNoneDataRecord(record)) metadata.css += ' ag_point_none_data'; 
		if(store.baseParams && store.baseParams.f_id && store.baseParams.f_id == record.data.f_id) metadata.css += ' ag_point_data';
		if(record.data.seg_color) metadata.attr = 'style="background:'+record.data.seg_color+';"'
		if(isAdditionPartsList()){
			return '<div class="x-grid3-check-col'+(value?'-on':'')+' x-grid3-cc-'+id+'">&#160;</div>';
		}else{
			return '<div class="ag_grid_checkbox'+(value?'-on':'')+'-dis x-grid3-cc-'+id+'">&#160;</div>';
		}
	}

	function ag_point_search_checkbox_renderer(value,metadata,record,rowIndex,colIndex,store){
		var id = Ext.getCmp('ag-point-search-editorgrid-panel').getColumnModel().getColumnId(colIndex);
		metadata.css += ' x-grid3-check-col-td'; 
		if(isNoneDataRecord(record)){
			metadata.css += ' ag_point_none_data'; 
		}else{
			if(record.data.partslist){
			}else{
				metadata.css += ' ag_point_none_pallet_data'; 
			}
		}
		if(store.baseParams && store.baseParams.f_id && store.baseParams.f_id == record.data.f_id) metadata.css += ' ag_point_data'; 
		return '<div class="x-grid3-check-col'+(value?'-on':'')+' x-grid3-cc-'+id+'">&#160;</div>';
	}

	function ag_point_search_point_checkbox_renderer(value,metadata,record,rowIndex,colIndex,store){
		var id = Ext.getCmp('ag-point-search-editorgrid-panel').getColumnModel().getColumnId(colIndex);
		metadata.css += ' x-grid3-check-col-td'; 
		if(isNoneDataRecord(record) || isPointDataRecord(record)){
			metadata.css += ' ag_point_none_data'; 
		}else{
			if(record.data.partslist){
			}else{
				metadata.css += ' ag_point_none_pallet_data'; 
			}
		}
		if(store.baseParams && store.baseParams.f_id && store.baseParams.f_id == record.data.f_id) metadata.css += ' ag_point_data'; 
		return '<div class="x-grid3-check-col'+(value?'-on':'')+' x-grid3-cc-'+id+'">&#160;</div>';
	}

	var ag_point_search_col_version = {
		dataIndex:'version',
		header:'Version',
		id:'version',
		sortable: false,
		renderer: ag_point_search_renderer,
		hidden:true
	};
	var ag_point_search_col_rep_id = {
		dataIndex:'b_id',
		header:get_ag_lang('REP_ID'),
		renderer: ag_point_search_renderer,
		id:'b_id'
	};
	var ag_point_search_col_cdi_name = {
		dataIndex:'f_id',
		header:get_ag_lang('CDI_NAME'),
		renderer: ag_point_search_renderer,
		id:'f_id'
	};

	var ag_point_search_col_value = {
		dataIndex : 'value',
		header    : 'Value',
		id        : 'value',
		width     : 40,
		resizable : false,
		renderer  : ag_point_search_renderer,
		hidden    : true,
		editor    : new Ext.form.TextField({
			allowBlank : true
		})
	};
	var ag_point_search_col_organsys = {
		dataIndex:'organsys',
		header:get_ag_lang('GRID_TITLE_ORGANSYS'),
		renderer: ag_point_search_renderer,
		id:'organsys',
		hidden:true
	};
	var ag_point_search_col_entry = {
		dataIndex:'entry',
		header:get_ag_lang('GRID_TITLE_MODIFIED'),
		renderer: ag_point_search_renderer,
		id:'entry',
		hidden:true
	};

	var ag_point_search_col_color = {
		dataIndex : 'color',
		header    : 'Color',
		id        : 'color',
		width     : 40,
		resizable : false,
		renderer  : anatomography_point_grid_color_cell_style,
		editor    : new Ext.ux.ColorField({
			listeners : {
				select: function(e, c){
					this.setValue(c);
					try{var record = Ext.getCmp('ag-point-search-editorgrid-panel')._edit.record;}catch(e){_dump("color:"+e);}
					if(record){
						record.beginEdit();
						record.set('color',"#"+c);
						record.commit();
						record.endEdit();

						var grid = Ext.getCmp('ag-parts-gridpanel');
						var store = grid.getStore();
						var f_id = record.get('f_id');
						var record = null;
						var regexp = new RegExp("^"+f_id+"$");
						var index = store.find('f_id',regexp);
						if(index<0) index = store.find('conv_id',regexp);
						if(index>=0) record = store.getAt(index);
						if(record){
							record.set('color',"#"+c);
							record.commit();
						}
					}
				}
			}
		})
	};

	var ag_point_search_col_opacity = {
		dataIndex : 'opacity',
		header    : 'Opacity',
		id        : 'opacity',
		width     : 50,
		resizable : false,
		align     : 'right',
		renderer: anatomography_point_grid_combobox_renderer,
		editor    : new Ext.form.ComboBox({
			typeAhead     : true,
			triggerAction : 'all',
			store         : anatomography_point_grid_col_opacity_arr,
			lazyRender    : true,
			listClass     : 'x-combo-list-small',
			listeners     : {
				'select' : function(combo,record,index){
					try{var record = Ext.getCmp('ag-point-search-editorgrid-panel')._edit.record;}catch(e){_dump("opacity:"+e);}
					if(record){
						record.beginEdit();
						record.set('opacity',combo.getValue());
						record.commit();
						record.endEdit();

						var store = Ext.getCmp('ag-parts-gridpanel').getStore();
						var f_id = record.get('f_id');
						var record = null;
						var regexp = new RegExp("^"+f_id+"$");
						var index = store.find('f_id',regexp);
						if(index<0) index = store.find('conv_id',regexp);
						if(index>=0) record = store.getAt(index);
						if(record){
							record.set('opacity',combo.getValue());
							record.commit();
						}
					}
				},
				scope : this
			}
		})
	};
	var ag_point_search_col_representation = {
		dataIndex : 'representation',
		header    : get_ag_lang('ANATOMO_REP_LABEL'),
		id        : 'representation',
		width     : 40,
		resizable : false,
		renderer  : anatomography_point_grid_combobox_renderer,
		hidden    : true,
		hideable  : true,
		editor    : new Ext.form.ComboBox({
			typeAhead     : true,
			triggerAction : 'all',
			store         : anatomography_point_grid_col_representation_arr,
			lazyRender    : true,
			listClass     : 'x-combo-list-small',
			listeners     : {
				'select' : function(combo,record,index){
					try{var record = Ext.getCmp('ag-point-search-editorgrid-panel')._edit.record;}catch(e){_dump("representation:"+e);}
					if(record){
						record.beginEdit();
						record.set('representation',combo.getValue());
						record.commit();
						record.endEdit();

						var store = Ext.getCmp('ag-parts-gridpanel').getStore();
						var f_id = record.get('f_id');
						var record = null;
						var regexp = new RegExp("^"+f_id+"$");
						var index = store.find('f_id',regexp);
						if(index<0) index = store.find('conv_id',regexp);
						if(index>=0) record = store.getAt(index);
						if(record){
							record.set('representation',combo.getValue());
							record.commit();
						}
					}
				},scope : this
			}
		})
	};

	var ag_point_search_partslist_checkColumn = new Ext.grid.CheckColumn({
		header    : 'Pallet',
		dataIndex : 'partslist',
		width     : 40,
		fixed     : true,
		renderer  : ag_point_search_partslist_checkbox_renderer
	});
	var ag_point_search_zoom_checkColumn = new Ext.grid.CheckColumn({
		header    : "Zoom",
		dataIndex : 'zoom',
		hidden    : true,
		width     : 40,
		resizable : false,
		renderer  : ag_point_search_checkbox_renderer
	});

	var ag_point_search_exclude_checkColumn = new Ext.grid.CheckColumn({
		header    : "Remove",
		dataIndex : 'exclude',
		width     : 50,
		resizable : false,
		renderer  : ag_point_search_checkbox_renderer
	});

	var ag_point_search_point_checkColumn = new Ext.grid.CheckColumn({
		header    : 'Point',
		dataIndex : 'point',
		width     : 40,
		resizable : false,
		renderer  : ag_point_search_point_checkbox_renderer
	});

	var ag_point_search_cols = [
		ag_point_search_partslist_checkColumn,
		{dataIndex:'tg_id', header:'Model', id:'tg_id', sortable: false, renderer:anatomography_point_grid_group_renderer, hidden:true, fixed:true},
		{dataIndex:'common_id',header:'UniversalID',               renderer: ag_point_search_renderer, id:'common_id',hidden:true, fixed:true},
		{dataIndex:'name_j', header:get_ag_lang('GRID_TITLE_NAME_J'),  renderer: ag_point_search_renderer, id:'name_j', hidden:true},
		{dataIndex:'name_k', header:get_ag_lang('GRID_TITLE_NAME_K'),  renderer: ag_point_search_renderer, id:'name_k', hidden:true},
		{dataIndex:'name_e', header:get_ag_lang('GRID_TITLE_NAME_E'),renderer: ag_point_search_renderer, id:'name_e'},
		{dataIndex:'name_l', header:'Latina',                      renderer: ag_point_search_renderer, id:'name_l', hidden:true},

		ag_point_search_col_color,
		ag_point_search_col_opacity,
		ag_point_search_exclude_checkColumn,
		ag_point_search_col_value,
//		ag_point_search_col_organsys,
		ag_point_search_col_representation,
		ag_point_search_col_rep_id,
		ag_point_search_col_cdi_name,

		{dataIndex:'xmin',  header:'Xmin(mm)',                        renderer: ag_point_search_renderer, id:'xmin',     hidden:true},
		{dataIndex:'xmax',  header:'Xmax(mm)',                        renderer: ag_point_search_renderer, id:'xmax',     hidden:true},
		{dataIndex:'ymin',  header:'Ymin(mm)',                        renderer: ag_point_search_renderer, id:'ymin',     hidden:true},
		{dataIndex:'ymax',  header:'Ymax(mm)',                        renderer: ag_point_search_renderer, id:'ymax',     hidden:true},
		{dataIndex:'zmin',  header:'Zmin(mm)',                        renderer: ag_point_search_renderer, id:'zmin',     hidden:true},
		{dataIndex:'zmax',  header:'Zmax(mm)',                        renderer: ag_point_search_renderer, id:'zmax',     hidden:true},
		{dataIndex:'volume',header:get_ag_lang('GRID_TITLE_VOLUME')+'(cm3)', renderer: ag_point_search_renderer, id:'volume',   hidden:true},

		ag_point_search_col_version,
		ag_point_search_col_entry,
		{dataIndex:'distance',  header:'Distance(mm)',                renderer: ag_point_search_renderer, id:'distance', hidden:false}
	];

	ag_point_search_fields = [
		{name:'partslist'},
		{name:'common_id'},
		{name:'b_id'},
		{name:'f_id'},
		{name:'name_j'},
		{name:'name_e'},
		{name:'name_k'},
		{name:'name_l'},
		{name:'phase'},
		'version',
//		'tg_id',
//		'tgi_id',
		{name:'tg_id',type:'int',convert:function(v,r){
			if(Ext.isEmpty(v)){
				return r.md_id;
			}else{
				return v;
			}
		}},
		{name:'tgi_id',type:'int',convert:function(v,r){
			if(Ext.isEmpty(v)){
				return r.mv_id;
			}else{
				return v;
			}
		}},

		'segment',
		'seg_color',
		'seg_thum_bgcolor',
		'seg_thum_bocolor',

		{name:'entry',   type:'date', dateFormat: 'timestamp'},
		{name:'xmin',    type:'float'},
		{name:'xmax',    type:'float'},
		{name:'ymin',    type:'float'},
		{name:'ymax',    type:'float'},
		{name:'zmin',    type:'float'},
		{name:'zmax',    type:'float'},
		{name:'volume',  type:'float'},
		{name:'organsys'},
		{name:'color'},
		{name:'value'},
		{name:'zoom',type:'boolean'},
		{name:'exclude',type:'boolean'},
		{name:'opacity',type:'float'},
		{name:'representation'},
		{name:'point',type:'boolean'},
		{name:'elem_type'},
		{name:'def_color'},
		{name:'distance',type:'float'},
	];

	var ag_point_search = {
		ds : new Ext.data.SimpleStore({
			root   : 'records',
			fields : ag_point_search_fields,
			listeners : {
				"add" : function(store,records,index){
					var prm_record = ag_param_store.getAt(0);
					var bp3d_parts_store = ag_parts_gridpanel.getStore();

					//検索結果を全てパレットに追加する
//					var newRecord = Ext.data.Record.create(bp3d_parts_store_fields);
//					var newRecords = [];

					for(var i=0;i<records.length;i++){
						var partslist = false;
//						var partslist = true;//検索結果を全てパレットに追加する為、常にtrueにする
						var zoom = false;
						var exclude = false;
						var color = null;
						var opacity = "1.0";
						var representation = "surface";
						var value = "";
						var point = false;
						var elem_type = records[i].get('elem_type');
						var regexp = new RegExp("^"+records[i].get('f_id')+"$");
						var index = bp3d_parts_store.find('f_id',regexp);
						if(index<0) index = bp3d_parts_store.find('conv_id',regexp);
//						if(index<0){
//							newRecords.push(new newRecord(records[i].data));
//						}
						if(index>=0){
							partslist = true;
							var record = bp3d_parts_store.getAt(index);
							exclude = record.get('exclude');
							color = record.get('color');
							opacity = record.get('opacity');
							representation = record.get('representation');
							value = record.get('value');
							point = record.get('point');
						}else{
							if(!Ext.isEmpty(records[i].get('def_color'))) color = records[i].get('def_color');
						}
						records[i].beginEdit();
						records[i].set('partslist',partslist);
						records[i].set('zoom',zoom);
						records[i].set('exclude',exclude);
						records[i].set('color',color?color:'#'+ (elem_type=='bp3d_point'? prm_record.data.point_color_rgb:prm_record.data.color_rgb));
						records[i].set('opacity',opacity);
						records[i].set('representation',representation);
						records[i].set('value',value);
						records[i].set('conv_id',records[i].get('f_id'));
						records[i].set('point',point);
						records[i].commit(true);
						records[i].endEdit();
					}
//					if(newRecords.length>0) bp3d_parts_store.add(newRecords);

					if(store.baseParams && store.baseParams.f_id){
						var index = store.find('f_id',new RegExp("^"+ store.baseParams.f_id +"$"));
						if(index>=0) Ext.getCmp('ag-point-search-editorgrid-panel').getSelectionModel().selectRow(index);
					}
				},
				"beforeload" : function(store,options){
				},
				"clear" : function(store){
				},
				"datachanged" : function(store){
				},
				"load" : function(store,records,options){
				},
				"loadexception" : function(){
				},
				"metachange" : function(store,meta){
				},
				"remove" : function(store,record,index){
				},
				"update" : function(store,record,operation){
				},
				scope : this
			}

		}),
		cm : new Ext.grid.ColumnModel(ag_point_search_cols)
	};


	var ag_point_search_editorgrid_panel = new Ext.grid.EditorGridPanel({
		id             : 'ag-point-search-editorgrid-panel',
		header         : false,
		region         : 'center',
		ddGroup        : 'partlistDD',
		enableDragDrop : true,
		border         : false,
		stripeRows     : true,
		columnLines    : true,
		maskDisabled   : true,
		plugins        : [
			ag_point_search_partslist_checkColumn,
			ag_point_search_zoom_checkColumn,
			ag_point_search_exclude_checkColumn
		],
		clicksToEdit   : 1,
		trackMouseOver : true,
		selModel       : new Ext.grid.RowSelectionModel({singleSelect:true}),
		ds: ag_point_search.ds,
		cm: ag_point_search.cm,
		enableColLock: false,
		loadMask: true,
		style : 'border-bottom-width:1px;',
		viewConfig: {
			deferEmptyText: true,
			emptyText: '<div class="bp3d-pallet-empty-message">'+get_ag_lang('NEIGHBOR_PARTS_GRID_EMPTY_MESSAGE')+'</div>'
		},
		bbar: [{
			xtype: 'tbfill'
		},{
			id: 'ag-point-search-editorgrid-bbar-text',
			xtype: 'tbtext',
			text: '- / -'
		}],
		listeners : {
			"beforeedit" : function(e){
				if(e.field == 'partslist'){
//					e.cancel = (Ext.isEmpty(e.record.get('zmax'))||(!isAdditionPartsList())?true:false);
					e.cancel = (isNoneDataRecord(e.record)||(!isAdditionPartsList())?true:false);
				}else{
					e.cancel = !e.record.get('partslist');
				}
				if(!e.cancel) e.grid._edit = e;
			},
			"afteredit" : function(e){
				e.record.commit();
//				e.grid._edit = undefined;
				if(e.field == 'partslist'){
					if(e.value){
						bp3d_parts_store.add(e.record.copy());
					}else{
						var record = null;
						var index = bp3d_parts_store.find('f_id',new RegExp("^"+e.record.get('f_id')+"$"));
						if(index>=0) record = bp3d_parts_store.getAt(index);
						if(record) bp3d_parts_store.remove(record);
					}
				}else{
					var record = null;
					var regexp = new RegExp("^"+e.record.get('f_id')+"$");
					var index = bp3d_parts_store.find('f_id',regexp);
					if(index<0) index = bp3d_parts_store.find('conv_id',regexp);
					if(index>=0) record = bp3d_parts_store.getAt(index);
					if(record){
						record.set(e.field,e.record.get(e.field));
						record.commit();
					}
				}
			},
			"complete": function(comp,row,col){
				comp.view.focusRow(row);
			},
			"resize" : function(grid){
				resizeGridPanelColumns(grid);
			},
			"render" : function(grid){
				restoreHiddenGridPanelColumns(grid);
				setTimeout(function(){
					grid.getStore().loadData([]);
				},250);

				ag_parts_gridpanel.getStore().on('remove',function(store,record,index){
					var regexp = new RegExp("^"+record.get('f_id')+"$");
					var index = this.getStore().find('f_id',regexp);
					if(index>=0){
						var r = this.getStore().getAt(index);
						r.beginEdit();
						r.set('partslist',false);
						r.commit();
						r.endEdit();
					}
				},grid);
			},
			scope : this
		}
	});
	ag_point_search_editorgrid_panel.getColumnModel().on({
		'hiddenchange' : function(column,columnIndex,hidden){
			var editorgrid = Ext.getCmp('anatomography-point-editorgrid-panel');
			resizeGridPanelColumns(editorgrid);
			saveHiddenGridPanelColumns(editorgrid);
		},
		scope: this,
		delay: 100
	});

	var ag_point_search_header_panel = new Ext.Panel({
		contentEl : 'ag-point-search-header-content',
		region    : 'north',
		height    : 52,
		minHeight : 52,
		maxHeight : 52,
		border    : false,
		bodyStyle : 'border-top-width:1px;',

		items: [
		{
			hidden: true,
			xtype: 'numberfield',
			id: 'ag-point-search-header-content-screen-x-text',
			readOnly: true
		},{
			hidden: true,
			xtype: 'numberfield',
			id: 'ag-point-search-header-content-screen-y-text',
			readOnly: true
		}
/*
		,{
			hidden: true,
			xtype: 'numberfield',
			id: 'ag-point-search-header-content-coordinate-x-text',
			readOnly: true,
			listeners: {
				change: function(field,newValue,oldValue){
					$('div#ag-point-search-header-content-coordinate-x-render').text(newValue);
				}
			}
		},{
			hidden: true,
			xtype: 'numberfield',
			id: 'ag-point-search-header-content-coordinate-y-text',
			readOnly: true,
			listeners: {
				change: function(field,newValue,oldValue){
					$('div#ag-point-search-header-content-coordinate-y-render').text(newValue);
				}
			}
		},{
			hidden: true,
			xtype: 'numberfield',
			id: 'ag-point-search-header-content-coordinate-z-text',
			readOnly: true,
			listeners: {
				change: function(field,newValue,oldValue){
					$('div#ag-point-search-header-content-coordinate-z-render').text(newValue);
				}
			}
		},{
			hidden: true,
			xtype: 'numberfield',
			id: 'ag-point-search-header-content-voxel-range-text',
			readOnly: true,
			listeners: {
				change: function(field,newValue,oldValue){
					$('div#ag-point-search-header-content-distance-z-render').text(newValue);
				}
			}
		}
*/
		],
		listeners : {
			"bodyresize": function(panel,adjWidth,adjHeight,rawWidth,rawHeight){
				if(adjWidth == undefined || !adjWidth) return;

				var table = Ext.get('ag-point-search-header-content-table');
				if(table) table.setWidth(adjWidth);

//既に生成済みの場合、テーブル幅のみを更新
				if(Ext.get('ag-point-search-header-content-more-button')) return;

				new Ext.form.NumberField({
					id       : 'ag-point-search-header-content-coordinate-x-text',
					renderTo : 'ag-point-search-header-content-coordinate-x-render',
					width    : 54,
					style    : 'color:gray;',
					readOnly : true,
					selectOnFocus : true
				});
				new Ext.form.NumberField({
					id       : 'ag-point-search-header-content-coordinate-y-text',
					renderTo : 'ag-point-search-header-content-coordinate-y-render',
					width    : 54,
					style    : 'color:gray;',
					readOnly : true,
					selectOnFocus : true
				});
				new Ext.form.NumberField({
					id       : 'ag-point-search-header-content-coordinate-z-text',
					renderTo : 'ag-point-search-header-content-coordinate-z-render',
					width    : 54,
					style    : 'color:gray;',
					readOnly : true,
					selectOnFocus : true
				});

/*
				new Ext.form.NumberField({
					id       : 'ag-point-search-header-content-screen-x-text',
					renderTo : 'ag-point-search-header-content-distance-x-render',
					width    : 33,
					readOnly : true,
					selectOnFocus : true
				});
				new Ext.form.NumberField({
					id       : 'ag-point-search-header-content-screen-y-text',
					renderTo : 'ag-point-search-header-content-distance-y-render',
					width    : 33,
					readOnly : true,
					selectOnFocus : true
				});
*/

				new Ext.form.NumberField({
					id       : 'ag-point-search-header-content-voxel-range-text',
					renderTo : 'ag-point-search-header-content-distance-z-render',
					width    : 23,
					style    : 'color:gray;',
					readOnly : true,
					selectOnFocus : true
				});

/*
				new Ext.form.NumberField({
					id       : 'ag-point-search-header-content-distance-text',
					renderTo : 'ag-point-search-header-content-distance-render',
					width    : 54,
					readOnly : true,
					selectOnFocus : true
				});
*/
				new Ext.Button({
					id       : 'ag-point-search-header-content-more-button',
					renderTo : 'ag-point-search-header-content-distance-render',
					width    : 54,
					disabled : true,
					text     : 'more',
					listeners: {
						click: function(b){
							var voxelRadiusCmp = Ext.getCmp('ag-point-search-header-content-voxel-range-text');
							var voxelRadius = voxelRadiusCmp.getValue();
							if(Ext.isEmpty(voxelRadius)) return;

							var screenXCmp = Ext.getCmp('ag-point-search-header-content-screen-x-text');
							var screenYCmp = Ext.getCmp('ag-point-search-header-content-screen-y-text');

							var screenX = screenXCmp.getValue();
							var screenY = screenYCmp.getValue();
							point_search(screenX,screenY,voxelRadius+5);


						}
					}
				});
			}
		}
	});

	var ag_point_search_panel = new Ext.Panel({
		id     : 'anatomography-point-search-panel',
		header : false,
		title  : 'Neighbor Parts',
		loadMask: true,
		border : false,
		layout : 'border',
		items  : [
			ag_point_search_header_panel,
			ag_point_search_editorgrid_panel
		],
		listeners  : {
			render: function(comp){
				if(Ext.isEmpty(comp.loadMask) || typeof comp.loadMask == 'boolean') comp.loadMask = new Ext.LoadMask(comp.body,{removeMask:false});
			},
			'show' : function(panel){
				panel.doLayout();
			},
			'afterlayout' : function(panel,layout){
//				afterLayout(anatomography_point_grid_header_panel);
				afterLayout(panel);
			},
			scope:this
		}
	});

	var ag_bp3d_grid_store_fields = [
		{name:'f_id'},
		{name:'b_id'},
		{name:'name_j'},
		{name:'name_e'},
		{name:'name_k'},
		{name:'name_l'},
		{name:'phase'},
		{name:'entry',   type:'date', dateFormat: 'timestamp'},
		{name:'zmin',    type:'float'},
		{name:'zmax',    type:'float'},
		{name:'volume',  type:'float'},
		{name:'organsys'}
	];

	var ag_bp3d_grid_store = new Ext.data.JsonStore({
		url           : 'get-contents-tree-list.cgi',
		totalProperty : 'total',
		root          : 'records',
		fields        : ag_bp3d_grid_store_fields,
		baseParams    : {
			parent : (Ext.isEmpty(gParams.parent)?'':gParams.parent),
			lng    : gParams.lng
		},
		listeners     : {
			'beforeload' : function(self,options){
				self.removeAll();
				self.baseParams = self.baseParams || {};
				var bp3d_version = Ext.getCmp('anatomo-version-combo');
				if(bp3d_version && bp3d_version.rendered){
					self.baseParams.version = bp3d_version.getValue();
				}else{
					self.baseParams.version = init_bp3d_version;
				}
				if(self.baseParams.b_ids) self.baseParams.b_ids = undefined;
				try{
					if(ag_comment_tabpanel.getActiveTab().id != 'anatomography-bp3d-grid-panel') return false;
					var store = Ext.getCmp('ag-parts-gridpanel').getStore();
					var b_ids = [];
					var records = store.getRange();
					for(var i=0,len=records.length;i<len;i++){
						if(records[i].data.exclude) continue;
						if(Ext.isEmpty(records[i].data.b_id)){
							b_ids.push(records[i].data.f_id);
						}else{
							b_ids.push(records[i].data.b_id);
						}
					}
					if(b_ids.length>0){
						self.baseParams.b_ids = Ext.util.JSON.encode(b_ids);
					}else{
						return false;
					}
				}catch(e){
					_dump("ag_bp3d_grid_store.beforeload():"+e);
					return false;
				}
			},
			'load' : function(self,records,options){
			},
			'datachanged' : function(self){
			},
			'loadexception' : function(){
			},
			'exception' : function(){
			},
			scope:this
		}
	});
	try{
		var store = Ext.getCmp('ag-parts-gridpanel').getStore();
		store.on('add',function(){
			var store = Ext.getCmp('anatomography-bp3d-grid-panel').getStore();
			store.reload();
		},this);
		store.on('remove',function(){
			var store = Ext.getCmp('anatomography-bp3d-grid-panel').getStore();
			store.reload();
		},this);
		store.on('update',function(){
			var store = Ext.getCmp('anatomography-bp3d-grid-panel').getStore();
			store.reload();
		},this);
	}catch(e){
		_dump("store:"+e);
	}
	var ag_bp3d_grid_cols = [
		{dataIndex:'f_id',     header:get_ag_lang('CDI_NAME'),                           id:'f_id',     hidden:true},
		{dataIndex:'b_id',     header:get_ag_lang('REP_ID'),                              id:'b_id',     hidden:false},
//		{dataIndex:'name_j',   header:get_ag_lang('GRID_TITLE_NAME_J'),      id:'name_j',   hidden:false},
//		{dataIndex:'name_k',   header:get_ag_lang('GRID_TITLE_NAME_K'),      id:'name_k',   hidden:false},
		{dataIndex:'name_e',   header:get_ag_lang('DETAIL_TITLE_NAME_E'),                         id:'name_e',   hidden:false},
//		{dataIndex:'name_l',   header:'Latina',                          id:'name_l',   hidden:true},
//		{dataIndex:'phase',    header:get_ag_lang('GRID_TITLE_PHASE'),       id:'phase',    hidden:false},
		{dataIndex:'entry',    header:get_ag_lang('GRID_TITLE_MODIFIED'),    id:'entry',    hidden:true, renderer:Ext.util.Format.dateRenderer('Y/m/d')}, 
		{dataIndex:'xmin',     header:'Xmin(mm)',                        id:'xmin',     hidden:true},
		{dataIndex:'xmax',     header:'Xmax(mm)',                        id:'xmax',     hidden:true},
		{dataIndex:'ymin',     header:'Ymin(mm)',                        id:'ymin',     hidden:true},
		{dataIndex:'ymax',     header:'Ymax(mm)',                        id:'ymax',     hidden:true},
		{dataIndex:'zmin',     header:'Zmin(mm)',                        id:'zmin',     hidden:false},
		{dataIndex:'zmax',     header:'Zmax(mm)',                        id:'zmax',     hidden:false},
		{dataIndex:'volume',   header:get_ag_lang('GRID_TITLE_VOLUME')+'(cm3)', id:'volume',   hidden:true}
	];

	var ag_bp3d_grid_panel = new Ext.grid.GridPanel({
		id         : 'anatomography-bp3d-grid-panel',
		header     : false,
		title      : 'BP3D',
		border     : false,
		loadMask   : true,
		columns    : ag_bp3d_grid_cols,
		stripeRows : true,
		columnLines    : true,
		selModel   : new Ext.grid.RowSelectionModel(),
		store      : ag_bp3d_grid_store,
		listeners : {
			'activate' : function(panel){
				panel.getStore().reload();
			},
			'deactivate' : function(panel){
			},
			'render' : function(panel){
			},
			'resize' : function(grid){
				resizeGridPanelColumns(grid);
			},
			scope : this
		}
	});
	ag_bp3d_grid_panel.getColumnModel().on({
		'hiddenchange' : function(column,columnIndex,hidden){
			resizeGridPanelColumns(Ext.getCmp('anatomography-bp3d-grid-panel'));
		},
		scope: this,
		delay: 100
	});

	ag_fma_search_grid_cols_hidden = {
		'common_id':true,
		'name_j':true,
		'name_k':true,
		'name_e':false,
		'name_l':true,
		'phase':true,
		'entry':true,
		'xmin':true,
		'xmax':true,
		'ymin':true,
		'ymax':true,
		'zmin':true,
		'zmax':true,
		'volume':false,
		'organsys':true,
		'exclude':true,
		'color':true,
		'opacity':true,
		'representation':true,
		'value':true,
		'point':true
	};

	createAGSearchGridPanel = function(aQuery){
		try{
		function ag_fma_search_store_fields(){
			return [
				'f_id',
				'b_id',
				'common_id',
				'name_j',
				'name_e',
				'name_k',
				'name_l',
				'syn_j',
				'syn_e',
				'organsys_j',
				'organsys_e',
				'text',
				'name',
				'organsys',
				'phase',
				{name:'xmin',   type:'float'},
				{name:'xmax',   type:'float'},
				{name:'ymin',   type:'float'},
				{name:'ymax',   type:'float'},
				{name:'zmin',   type:'float'},
				{name:'zmax',   type:'float'},
				{name:'volume', type:'float'},
				'taid',
				'physical',
				'phy_id',
				'version',
//				'tg_id',
//				'tgi_id',
				{name:'tg_id',type:'int',convert:function(v,r){
					if(Ext.isEmpty(v)){
						return r.md_id;
					}else{
						return v;
					}
				}},
				{name:'tgi_id',type:'int',convert:function(v,r){
					if(Ext.isEmpty(v)){
						return r.mv_id;
					}else{
						return v;
					}
				}},

				'state',
				'elem_type',
				{name:'entry', type:'date', dateFormat:'timestamp'},
				{name:'lastmod', type:'date', dateFormat:'timestamp'},
				{name:'partslist'},
				{name:'color'},
				{name:'value'},
				{name:'zoom',type:'boolean'},
				{name:'exclude',type:'boolean'},
				{name:'opacity',type:'float'},
				{name:'representation'}
			];
		}

		var ag_fma_search_store = new Ext.data.JsonStore({
			url: 'get-fma.cgi',
			pruneModifiedRecords : true,
			totalProperty : 'total',
			root: 'records',
			fields: ag_fma_search_store_fields(),
//			remoteSort: true,
//			sortInfo: {field: 'volume', direction: 'DESC'},
			listeners: {
				'beforeload' : {
					fn:function(self,options){
						try{
							ag_fma_search_editorgrid_panel.getStore().removeAll();
							self.baseParams = self.baseParams || {};
							delete gParams.parent;
							if(!Ext.isEmpty(gParams.parent)) self.baseParams.parent = gParams.parent;
							self.baseParams.lng = gParams.lng;
							try{var bp3d_version = Ext.getCmp('bp3d-version-combo').getValue();}catch(e){_dump("bp3d_contents_store.beforeload():e=["+e+"]");bp3d_version='5.2';}
							if(!Ext.isEmpty(bp3d_version)) self.baseParams.version = bp3d_version;
						}catch(e){
							_dump("ag_fma_search_store.beforeload():"+e);
						}

						for(var key in init_bp3d_params){
							if(key.match(/_id$/)) self.baseParams[key] = init_bp3d_params[key];
						}

						try{
							var store = Ext.getCmp('anatomo-version-combo').getStore();
							var idx = store.findBy(function(record,id){
								if(record.data.tgi_version==self.baseParams.version) return true;
							});
							if(idx>=0){
								var record = store.getAt(idx);
								if(record){
									self.baseParams.md_id = record.data.md_id;
									self.baseParams.mv_id = record.data.mv_id;
									self.baseParams.mr_id = record.data.mr_id;
									self.baseParams.ci_id = record.data.ci_id;
									self.baseParams.cb_id = record.data.cb_id;
								}
							}
						}catch(e){}
					},
					scope:this
				},
				'load': {
					fn:function(self,records,options){
						ag_fma_search_editorgrid_panel.getStore().add(records);
						try{ag_fma_search_editorgrid_panel.el.child('div.x-grid3-scroller').scrollTo('top',0,false);}catch(e){_dump("ag_fma_search_store.load():"+e);}

						try{
							var tb = ag_fma_search_editorgrid_panel.getBottomToolbar();
							var count = tb.items.getCount();
							var item = tb.items.get(13);
							item.el.innerHTML='<label>'+self.getTotalCount()+'&nbsp;Objects</label>';
						}catch(e){
							_dump("load():"+e);
						}

					},
					scope:this
				}
			}
		});

		function ag_fma_search_grid_renderer(value,metadata,record,rowIndex,colIndex,store){
			var dataIndex = ag_fma_search_grid_cols[colIndex].dataIndex;
			var item;
			for(var i=0;i<record.fields.length;i++){
				if(record.fields.keys[i] != dataIndex) continue;
				item = record.fields.items[i];
				break;
			}
			if(item){
				if(item.type == 'date'){
					if(dataIndex == 'entry' && value) value = new Date(value).format(bp3d.defaults.DATE_FORMAT);
					if(dataIndex == 'lastmod' && value) value = new Date(value).format(bp3d.defaults.TIME_FORMAT);
				}
			}
			if(isNoneDataRecord(record)){
				metadata.css += ' ag_point_none_data'; 
			}
			return value;
		}
		function ag_fma_search_grid_combobox_renderer(value,metadata,record,rowIndex,colIndex,store){
			if(isNoneDataRecord(record)){
				metadata.css += ' ag_point_none_data'; 
				value = "";
			}else{
				if(record.data.partslist){
				}else{
					value = "";
				}
			}
			return value;
		}
		function ag_fma_search_grid_partslist_checkbox_renderer(value,metadata,record,rowIndex,colIndex,store){
			var id = ag_fma_search_editorgrid_panel.getColumnModel().getColumnId(colIndex);
			metadata.css += ' x-grid3-check-col-td'; 
			if(isNoneDataRecord(record)) metadata.css += ' ag_point_none_data'; 
			if(isAdditionPartsList()){
				return '<div class="x-grid3-check-col'+(value?'-on':'')+' x-grid3-cc-'+id+'">&#160;</div>';
			}else{
				return '<div class="ag_grid_checkbox'+(value?'-on':'')+'-dis x-grid3-cc-'+id+'">&#160;</div>';
			}
		}
		function ag_fma_search_grid_color_cell_renderer(value,metadata,record,rowIndex,colIndex,store) {
			if(isNoneDataRecord(record)){
				metadata.css += ' ag_point_none_data'; 
				return '';
			}else{
				if(record.data.partslist && value){
					return '<span style="background-color:' + value + '">&nbsp;&nbsp;&nbsp;&nbsp;</span>';
				}else{
					return '';
				}
			}
			return value;
		};

		function ag_fma_search_grid_checkbox_renderer(value,metadata,record,rowIndex,colIndex,store){
			var id = ag_fma_search_editorgrid_panel.getColumnModel().getColumnId(colIndex);
			metadata.css += ' x-grid3-check-col-td'; 
			if(isNoneDataRecord(record)){
				metadata.css += ' ag_point_none_data'; 
			}else{
				if(record.data.partslist){
				}else{
					metadata.css += ' ag_point_none_pallet_data'; 
				}
			}
			return '<div class="x-grid3-check-col'+(value?'-on':'')+' x-grid3-cc-'+id+'">&#160;</div>';
		}
		function ag_fma_search_grid_point_checkbox_renderer(value,metadata,record,rowIndex,colIndex,store){
			var id = ag_fma_search_editorgrid_panel.getColumnModel().getColumnId(colIndex);
			metadata.css += ' x-grid3-check-col-td'; 
			if(isNoneDataRecord(record) || isPointDataRecord(record)){
				metadata.css += ' ag_point_none_data'; 
			}else{
				if(record.data.partslist){
				}else{
					metadata.css += ' ag_point_none_pallet_data'; 
				}
			}
			return '<div class="x-grid3-check-col'+(value?'-on':'')+' x-grid3-cc-'+id+'">&#160;</div>';
		}

		var ag_fma_search_grid_partslist_checkColumn = new Ext.grid.CheckColumn({
			header    : 'Pallet',
			dataIndex : 'partslist',
			id        : 'partslist',
			width     : 40,
			fixed     : true,
			hidden    : false,
			hideable  : true,
			renderer  : ag_fma_search_grid_partslist_checkbox_renderer
		});
		var ag_fma_search_grid_exclude_checkColumn = new Ext.grid.CheckColumn({
			header    : "Remove",
			dataIndex : 'exclude',
			id        : 'exclude',
			width     : 50,
			resizable : false,
			hidden    : ag_fma_search_grid_cols_hidden['exclude'],
			renderer  : ag_fma_search_grid_checkbox_renderer
		});
		var ag_fma_search_grid_point_checkColumn = new Ext.grid.CheckColumn({
			header    : 'Point',
			dataIndex : 'point',
			id        : 'point',
			width     : 40,
			resizable : false,
			hidden    : ag_fma_search_grid_cols_hidden['point'],
			renderer  : ag_fma_search_grid_point_checkbox_renderer
		});

		var ag_fma_search_grid_col_rep_id = {
			dataIndex:'b_id',
			header:get_ag_lang('REP_ID'),
			renderer: ag_fma_search_grid_renderer,
			id:'b_id',
			width:70,
			resizable:true,
			fixed:!true,
			hideable:true
		};
		var ag_fma_search_grid_col_cdi_name = {
			dataIndex:'f_id',
			header:get_ag_lang('CDI_NAME'),
			renderer: ag_fma_search_grid_renderer,
			id:'f_id',
			width:70,
			resizable:true,
			fixed:!true,
			hideable:true
		};
		var ag_fma_search_grid_col_color = {
			dataIndex : 'color',
			header    : 'Color',
			id        : 'color',
			width     : 40,
			resizable : false,
			hidden    : ag_fma_search_grid_cols_hidden['color'],
			hideable  : true,
			renderer  : ag_fma_search_grid_color_cell_renderer,
			editor    : new Ext.ux.ColorField({
				listeners : {
					select: function(e, c){
						try{var record = ag_fma_search_editorgrid_panel._edit.record;}catch(e){_dump("color:"+e);}
						if(record){
							record.beginEdit();
							record.set('color',"#"+c);
							record.commit();
							record.endEdit();

							var grid = Ext.getCmp('ag-parts-gridpanel');
							var store = grid.getStore();
							var f_id = record.get('f_id');
							var record = null;
							var regexp = new RegExp("^"+f_id+"$");
							var index = store.find('f_id',regexp);
							if(index<0) index = store.find('conv_id',regexp);
							if(index>=0) record = store.getAt(index);
							if(record){
								record.set('color',"#"+c);
								record.commit();
							}
						}
					}
				}
			})
		};
		var ag_fma_search_grid_col_opacity = {
			dataIndex : 'opacity',
			header    : 'Opacity',
			id        : 'opacity',
			width     : 50,
			resizable : false,
			hidden    : ag_fma_search_grid_cols_hidden['opacity'],
			hideable  : true,
			align     : 'right',
			renderer: ag_fma_search_grid_combobox_renderer,
			editor    : new Ext.form.ComboBox({
				typeAhead     : true,
				triggerAction : 'all',
				store         : anatomography_point_grid_col_opacity_arr,
				lazyRender    : true,
				listClass     : 'x-combo-list-small',
				listeners     : {
					'select' : function(combo,record,index){
						try{var record = ag_fma_search_editorgrid_panel._edit.record;}catch(e){_dump("color:"+e);}
						if(record){
							record.beginEdit();
							record.set('opacity',combo.getValue());
							record.commit();
							record.endEdit();

							var store = Ext.getCmp('ag-parts-gridpanel').getStore();
							var f_id = record.get('f_id');
							var record = null;
							var regexp = new RegExp("^"+f_id+"$");
							var index = store.find('f_id',regexp);
							if(index<0) index = store.find('conv_id',regexp);
							if(index>=0) record = store.getAt(index);
							if(record){
								record.set('opacity',combo.getValue());
								record.commit();
							}

						}
					},scope : this
				}
			})
		};
		var ag_fma_search_grid_col_representation = {
			dataIndex : 'representation',
			header    : get_ag_lang('ANATOMO_REP_LABEL'),
			id        : 'representation',
			width     : 40,
			resizable : false,
			renderer  : ag_fma_search_grid_combobox_renderer,
			hidden    : ag_fma_search_grid_cols_hidden['representation'],
			hideable  : true,
			editor    : new Ext.form.ComboBox({
				typeAhead     : true,
				triggerAction : 'all',
				store         : anatomography_point_grid_col_representation_arr,
				lazyRender    : true,
				listClass     : 'x-combo-list-small',
				listeners     : {
					'select' : function(combo,record,index){
						try{var record = ag_fma_search_editorgrid_panel._edit.record;}catch(e){_dump("color:"+e);}
						if(record){
							record.beginEdit();
							record.set('representation',combo.getValue());
							record.commit();
							record.endEdit();

							var store = Ext.getCmp('ag-parts-gridpanel').getStore();
							var f_id = record.get('f_id');
							var record = null;
							var regexp = new RegExp("^"+f_id+"$");
							var index = store.find('f_id',regexp);
							if(index<0) index = store.find('conv_id',regexp);
							if(index>=0) record = store.getAt(index);
							if(record){
								record.set('representation',combo.getValue());
								record.commit();
							}

						}
					},scope : this
				}
			})
		};
		var ag_fma_search_grid_col_value = {
			dataIndex : 'value',
			header    : 'Value',
			id        : 'value',
			width     : 40,
			resizable : false,
			renderer  : ag_fma_search_grid_renderer,
			hidden    : ag_fma_search_grid_cols_hidden['value'],
			editor    : new Ext.form.TextField({
				allowBlank : true
			})
		};
		var ag_fma_search_grid_col_organsys = {
			dataIndex:'organsys',
			header:get_ag_lang('GRID_TITLE_ORGANSYS'),
			renderer: ag_fma_search_grid_renderer,
			id:'organsys',
			hidden:ag_fma_search_grid_cols_hidden['organsys']
		};
		var ag_fma_search_grid_col_entry = {
			dataIndex:'entry',
			header:get_ag_lang('GRID_TITLE_MODIFIED'),
			renderer: ag_fma_search_grid_renderer,
			id:'entry',
			hidden:ag_fma_search_grid_cols_hidden['entry']
		};

		var ag_fma_search_grid_cols = [
			ag_fma_search_grid_partslist_checkColumn,
			{dataIndex:'common_id',header:'UniversalID',                     renderer: ag_fma_search_grid_renderer, id:'common_id',hidden:ag_fma_search_grid_cols_hidden['common_id'], fixed:true},
			{dataIndex:'name_j',   header:get_ag_lang('DETAIL_TITLE_NAME_J'),    renderer: ag_fma_search_grid_renderer, id:'name_j',   hidden:ag_fma_search_grid_cols_hidden['name_j']},
			{dataIndex:'name_k',   header:get_ag_lang('DETAIL_TITLE_NAME_K'),    renderer: ag_fma_search_grid_renderer, id:'name_k',   hidden:ag_fma_search_grid_cols_hidden['name_k']},
			{dataIndex:'name_e',   header:get_ag_lang('DETAIL_TITLE_NAME_E'),    renderer: ag_fma_search_grid_renderer, id:'name_e',   hidden:ag_fma_search_grid_cols_hidden['name_e']},
			{dataIndex:'name_l',   header:get_ag_lang('DETAIL_TITLE_NAME_L'),    renderer: ag_fma_search_grid_renderer, id:'name_l',   hidden:ag_fma_search_grid_cols_hidden['name_l']},
			ag_fma_search_grid_col_color,
			ag_fma_search_grid_col_opacity,
			ag_fma_search_grid_exclude_checkColumn,
			ag_fma_search_grid_col_value,
//			ag_fma_search_grid_col_organsys,
			ag_fma_search_grid_col_representation,
			ag_fma_search_grid_col_rep_id,
			ag_fma_search_grid_col_cdi_name,
			{dataIndex:'xmin',     header:'Xmin(mm)',                        renderer: ag_fma_search_grid_renderer, id:'xmin',     hidden:ag_fma_search_grid_cols_hidden['xmin']},
			{dataIndex:'xmax',     header:'Xmax(mm)',                        renderer: ag_fma_search_grid_renderer, id:'xmax',     hidden:ag_fma_search_grid_cols_hidden['xmax']},
			{dataIndex:'ymin',     header:'Ymin(mm)',                        renderer: ag_fma_search_grid_renderer, id:'ymin',     hidden:ag_fma_search_grid_cols_hidden['ymin']},
			{dataIndex:'ymax',     header:'Ymax(mm)',                        renderer: ag_fma_search_grid_renderer, id:'ymax',     hidden:ag_fma_search_grid_cols_hidden['ymax']},
			{dataIndex:'zmin',     header:'Zmin(mm)',                        renderer: ag_fma_search_grid_renderer, id:'zmin',     hidden:ag_fma_search_grid_cols_hidden['zmin']},
			{dataIndex:'zmax',     header:'Zmax(mm)',                        renderer: ag_fma_search_grid_renderer, id:'zmax',     hidden:ag_fma_search_grid_cols_hidden['zmax']},
			{dataIndex:'volume',   header:get_ag_lang('GRID_TITLE_VOLUME')+'(cm3)', renderer: ag_fma_search_grid_renderer, id:'volume',   hidden:ag_fma_search_grid_cols_hidden['volume']},
			ag_fma_search_grid_col_entry
		];

		var ag_fma_search_dummy_store = new Ext.data.SimpleStore({
			pruneModifiedRecords : true,
			root: 'records',
			fields: ag_fma_search_store_fields(),
			listeners: {
				'add' : function(store,records,index){
//_dump("ag_fma_search_dummy_store.add():"+records.length);
					var prm_record = ag_param_store.getAt(0);
					var bp3d_parts_store = ag_parts_gridpanel.getStore();
					for(var i=0;i<records.length;i++){
						var partslist = false;
						var zoom = false;
						var exclude = false;
						var color = null;
						var opacity = "1.0";
						var representation = "surface";
						var value = "";
						var point = false;
						var elem_type = records[i].get('elem_type');
						var regexp = new RegExp("^"+records[i].get('f_id')+"$");
						var index = bp3d_parts_store.find('f_id',regexp);
						if(index<0) index = bp3d_parts_store.find('conv_id',regexp);
						if(index>=0){
							partslist = true;
							var record = bp3d_parts_store.getAt(index);
							exclude = record.get('exclude');
							color = record.get('color');
							opacity = record.get('opacity');
							representation = record.get('representation');
							value = record.get('value');
							point = record.get('point');
						}
						records[i].beginEdit();
						records[i].set('partslist',partslist);
						records[i].set('zoom',zoom);
						records[i].set('exclude',exclude);
						records[i].set('color',color?color:'#'+ (elem_type=='bp3d_point'? prm_record.data.point_color_rgb:prm_record.data.color_rgb));
						records[i].set('opacity',opacity);
						records[i].set('representation',representation);
						records[i].set('value',value);
						records[i].set('conv_id',records[i].get('b_id'));
						records[i].set('point',point);
						records[i].commit(true);
						records[i].endEdit();
					}
				}
			}
		});
		ag_fma_search_dummy_store.loadData([]);

		var ag_fma_search_editorgrid_panel = new Ext.grid.EditorGridPanel({
			title          : aQuery,
			border         : false,
			stripeRows     : true,
			columnLines    : true,
			maskDisabled   : true,
			plugins        : [
				ag_fma_search_grid_partslist_checkColumn,
				ag_fma_search_grid_exclude_checkColumn
			],
			clicksToEdit   : 1,
			trackMouseOver : true,
			selModel       : new Ext.grid.RowSelectionModel({singleSelect:true}),
			ds: ag_fma_search_dummy_store,
			columns: ag_fma_search_grid_cols,
			enableColLock: false,
			loadMask: true,
			closable: true,
			bbar: new Ext.PagingToolbar({
				pageSize    : 50,
				store       : ag_fma_search_store,
				displayInfo : false,
				displayMsg  : '',
				emptyMsg    : '',
				hideMode    : 'offsets',
				hideParent  : true,
				items :[
					'->',
					'-',
					{xtype: 'tbtext', text: '&nbsp;'}
					,'-',
					{
						tooltip   : get_ag_lang('COPY_TITLE'),
						iconCls  : 'pallet_copy',
						listeners : {
							'click': {
								fn:function(button,e){
									try{
										copyList(ag_fma_search_editorgrid_panel,ag_fma_search_store);
									}catch(e){
										_dump("7389:"+e);
									}
								},
								scope:this
							}
						}
					}
				],
				listeners : {
					"render" : function(toolbar){
//_dump("PagingToolbar.render()");
					},
					scope : this
				}
			}),
			listeners : {
				"beforeedit" : function(e){
					if(e.field == 'partslist'){
//						e.cancel = (Ext.isEmpty(e.record.get('zmax'))||(!isAdditionPartsList())?true:false);
						e.cancel = (isNoneDataRecord(e.record)||(!isAdditionPartsList())?true:false);
					}else{
						e.cancel = !e.record.get('partslist');
					}
					if(!e.cancel) e.grid._edit = e;
				},
				"afteredit" : function(e){
					e.record.commit();
//					e.grid._edit = undefined;
					if(e.field == 'partslist'){
						if(e.value){
							bp3d_parts_store.add(e.record.copy());
						}else{
							var record = null;
							var regexp = new RegExp("^"+e.record.get('f_id')+"$");
							var index = bp3d_parts_store.find('f_id',regexp);
							if(index<0) index = bp3d_parts_store.find('conv_id',regexp);
							if(index>=0) record = bp3d_parts_store.getAt(index);
							if(record) bp3d_parts_store.remove(record);
						}
					}else{
						var record = null;
						var regexp = new RegExp("^"+e.record.get('f_id')+"$");
						var index = bp3d_parts_store.find('f_id',regexp);
						if(index<0) index = bp3d_parts_store.find('conv_id',regexp);
						if(index>=0) record = bp3d_parts_store.getAt(index);
						if(record){
							record.set(e.field,e.record.get(e.field));
							record.commit();
						}
					}
				},
				"complete": function(comp,row,col){
					comp.view.focusRow(row);
				},
				"resize" : function(grid){
					resizeGridPanelColumns(grid);
				},
				"render" : function(grid){
					if(Ext.isEmpty(grid.loadMask) || typeof grid.loadMask == 'boolean') grid.loadMask = new Ext.LoadMask(grid.body,{removeMask:false,store:ag_fma_search_store});
					restoreHiddenGridPanelColumns(grid,'ag-fma-search-editorgrid-panel');

					var o = {start:0,limit:50};
					ag_fma_search_store.baseParams = ag_fma_search_store.baseParams || {};
					ag_fma_search_store.baseParams.query = aQuery;
					ag_fma_search_store.baseParams.node = 'search';
					ag_fma_search_store.load({params:o});
				},
				scope : this
			}
		});
		ag_fma_search_editorgrid_panel.getColumnModel().on({
			'hiddenchange' : function(column,columnIndex,hidden){
				resizeGridPanelColumns(ag_fma_search_editorgrid_panel);
				saveHiddenGridPanelColumns(ag_fma_search_editorgrid_panel,'ag-fma-search-editorgrid-panel');
				for(var i=0,len=column.getColumnCount();i<len;i++){
					ag_fma_search_grid_cols_hidden[column.getColumnId(i)] = column.isHidden(i);
				}
			},
			scope: this,
			delay: 100
		});
		return ag_fma_search_editorgrid_panel;
		}catch(e){
			_dump("createAGSearchGridPanel():"+e);
		}
	};

	update_ag_fma_search_grid = function(aParam){
		try{
			function update_ag_fma_search_record(aRecord){
				var index = store.find('f_id',new RegExp("^"+aRecord.get('f_id')+"$"));
				if(index<0) return;
				var record = store.getAt(index);
				if(!record) return;

				var aIndex = bp3d_parts_store.indexOf(aRecord);
				if(aIndex>=0){
					record.beginEdit();
					record.set('partslist',true);
					for(var reckey in aRecord.data){
						record.set(reckey,aRecord.data[reckey]);
					}
					record.commit();
					record.endEdit();
				}else{
					record.beginEdit();
					record.set('partslist',false);
					record.commit();
					record.endEdit();
				}
			}
			var bp3d_parts_store = ag_parts_gridpanel.getStore();
			var tabpanel = Ext.getCmp('ag-fma-search-tabpanel');
			for(var index=0,len=tabpanel.items.getCount();index<len;index++){
				var store = tabpanel.items.itemAt(index).getStore();
				if(aParam.constructor===Array){
					for(var i=0;i<aParam.length;i++){
						update_ag_fma_search_record(aParam[i]);
					}
				}else{
					update_ag_fma_search_record(aParam);
				}
			}
		}catch(e){
			_dump("update_ag_fma_search_grid():"+e);
		}
	};


	var ag_fma_search_tabpanel = new Ext.TabPanel({
		id : 'ag-fma-search-tabpanel',
		border: false,
		tabPosition:'top',
		enableTabScroll: true,
		anchor:'100% 100%'
	});
	var ag_fma_search_panel = new Ext.Panel({
		id    : 'ag-fma-search-panel',
		title : 'Search',
		border: true,
		layout: 'anchor',
		tbar: [
			new Ext.app.SearchFieldListeners({
				hideLabel: true,
				pageSize : 50,
				listeners : {
					'clear' : function(field){
//_dump("SearchFieldListeners.clear()");
					},
					'search' : function(field,query){
//_dump("SearchFieldListeners.search():"+query);
						var tabCmp = Ext.getCmp('ag-fma-search-tabpanel');
						var tab = null;
						for(var index=0,len=tabCmp.items.getCount();index<len;index++){
							var title = tabCmp.items.itemAt(index).initialConfig.title;
							if(title != query) continue;
							tab = tabCmp.items.itemAt(index);
							break;
						}
						if(!tab){
							tab = createAGSearchGridPanel(query);
							if(tab) tabCmp.setActiveTab(tabCmp.add(tab));
						}else{
							tabCmp.setActiveTab(tab);
						}
					},
					scope: this
				}
			})
		],
		items: ag_fma_search_tabpanel,
		listeners: {
			'add': function(tabpanel,tab,index){
//_dump("ag_fma_search_tabpanel.add():"+tab.id);
			},
			scope: this
		}
	});

	ag_comment_tabpanel.add(ag_parts_gridpanel);
	ag_comment_tabpanel.add(ag_point_grid_panel);
	ag_comment_tabpanel.add(ag_pin_grid_panel);
	ag_comment_tabpanel.add(ag_image_comment_panel);
//	ag_comment_tabpanel.add(ag_bp3d_grid_panel);
//	ag_comment_tabpanel.add(ag_fma_search_editorgrid_panel);
//	ag_comment_tabpanel.add(ag_fma_search_panel);
	ag_comment_tabpanel.add(ag_point_search_panel);
	ag_comment_tabpanel.activate(ag_parts_gridpanel);

	anatomography_image = new Ext.Panel({
		contentEl  : 'anatomography-image-contentEl',
		id         : 'anatomography-image',
		region     : 'center',
//		autoScroll : true,
		autoScroll : false,
		border     : false,
//		bodyStyle  : 'border-right-width:1px;background-color:#f8f8f8;',
		bodyStyle  : 'background-color:#f8f8f8;',
		listeners : {
			"render": function(comp){
				anatomography_image_render(comp);
			},
			scope:this
		}
	});

	ag_image_shortcut_panel = new Ext.Panel({
		hidden     : false,
		autoShow   : true,
		id         : 'ag-image-shortcut-panel',
		region     : 'north',
//		height     : 52,
//		minHeight  : 52,
//		maxHeight  : 52,
//		autoScroll : false,
//		height     : 106,
		minHeight  : 52,
//		maxHeight  : 106,
		autoHeight     : true,
		autoScroll : true,
		border     : false,
//		bodyStyle  : 'border-right-width:1px;background-color:#f8f8f8;',
		contentEl  : 'ag-image-rotate-box',
		listeners  : {
			'show' : function(panel){
				panel.doLayout();
			},
			'afterlayout' : function(panel,layout){
				afterLayout(panel);
			},
			'resize' : function(panel){
				afterLayout(panel);
			},
			'render': function(panel){
if(0){
					Ext.get('ag-image-rotate-box').removeClass('x-hide-display');
					var prm_record = ag_param_store.getAt(0);
					new Ext.Slider({
						renderTo: 'ag-command-zoom-slider-render',
						id: 'zoom-slider',
						value : prm_record.data.zoom,
						width: 90,
						minValue: 0,
						maxValue: DEF_ZOOM_MAX-1,
						increment: 1,
						plugins: new Ext.ux.SliderTip(),
						listeners: {
							'change' : {
								fn : function (slider, value) {
									if(glb_zoom_xy){
										var elemImg = Ext.get("ag_img");
										var xyImg = elemImg.getXY();
										var mouseX = glb_zoom_xy[0] - xyImg[0];
										var mouseY = glb_zoom_xy[1] - xyImg[1];
										var centerX = parseInt((ag_param_store.getAt(0).data.image_w /2) -  mouseX);
										var centerY = parseInt((ag_param_store.getAt(0).data.image_h /2) -  mouseY);
										setCameraAndTarget(m_ag.cameraPos, m_ag.targetPos, m_ag.upVec, true);
										moveTargetByMouseForOrtho(ag_param_store.getAt(0).data.image_h, centerX / parseFloat(Math.pow(2, ag_param_store.getAt(0).data.zoom)), centerY / parseFloat(Math.pow(2, ag_param_store.getAt(0).data.zoom)));
									}
									var prm_record =ag_param_store.getAt(0);
									prm_record.beginEdit();
									prm_record.set('zoom', value / 5);
									prm_record.endEdit();
									prm_record.commit();
									anatomoUpdateZoomValueText(value + 1);
									if(glb_zoom_xy){
										var elemImg = Ext.get("ag_img");
										var xyImg = elemImg.getXY();
										var mouseX = glb_zoom_xy[0] - xyImg[0];
										var mouseY = glb_zoom_xy[1] - xyImg[1];
										var moveX = parseInt(mouseX - (ag_param_store.getAt(0).data.image_w /2));
										var moveY = parseInt(mouseY - (ag_param_store.getAt(0).data.image_h /2));
										setCameraAndTarget(m_ag.cameraPos, m_ag.targetPos, m_ag.upVec, true);
										moveTargetByMouseForOrtho(ag_param_store.getAt(0).data.image_h, moveX / parseFloat(Math.pow(2, ag_param_store.getAt(0).data.zoom)), moveY / parseFloat(Math.pow(2, ag_param_store.getAt(0).data.zoom)));
									}
									updateAnatomo();
									updateClipImage();
									if(glb_zoom_xy) glb_zoom_xy = null;
								},
								scope  : this
							},
							'render' : {
								fn : function(slider){
									if(glb_zoom_slider){
										var textField = Ext.getCmp('zoom-value-text');
										var slider = Ext.getCmp('zoom-slider');
										if(slider && slider.rendered && textField && textField.rendered){
											slider.setValue(glb_zoom_slider-1);
											slider.syncThumb();
											glb_zoom_slider = null;
										}
									}
								},
								scope:this
							}
						}
					});

					new Ext.form.NumberField ({
						ctCls : 'x-small-editor',
						renderTo: 'ag-command-zoom-text-render',
						id: 'zoom-value-text',
						width: 30,
						value : prm_record.data.zoom+1,
						allowBlank : false,
						allowDecimals : false,
						allowNegative : false,
						selectOnFocus : true,
						maxValue : DEF_ZOOM_MAX,
						minValue : 1,
						listeners: {
							'change': {
								fn : function(textField,newValue,oldValue){
									if (anatomoUpdateZoomValue) {
										return;
									}
									var value = isNaN(parseInt(newValue, 10))?oldValue:parseInt(newValue, 10);
									if (value < 1) {
										value = 1;
									}
									if (value > DEF_ZOOM_MAX) {
										value = DEF_ZOOM_MAX
									}
									textField.setValue(value);
									var slider = Ext.getCmp('zoom-slider');
									slider.setValue(value - 1);
								},
								scope:this
							},
							'valid': {
								fn : function(textField){
									var value = textField.getValue();
									var slider = Ext.getCmp('zoom-slider');
									slider.setValue(value - 1);
								},
								scope:this
							},
							'render': {
								fn : function(){
									if(glb_zoom_slider){
										var textField = Ext.getCmp('zoom-value-text');
										var slider = Ext.getCmp('zoom-slider');
										if(slider && slider.rendered && textField && textField.rendered){
											slider.setValue(glb_zoom_slider-1);
											glb_zoom_slider = null;
										}
									}
								},
								scope:this
							}
						}
					});
}

			},
			scope:this
		}
	});

	ag_contents_panel = new Ext.Panel({
		id         : 'ag-contents-panel',
		region     : 'center',
		autoScroll : false,
		bodyBorder : false,
		boder : false,
		layout : 'border',
		items : [
			anatomography_image
			,{


			region      : 'south',
//			height      : 118,
			height      : 64,
//			height      : 90,
//			height      : 94,
//			height      : 108,
			border      : false,
			split       : false,
			collapsible : false,
			frame       : false,
			bodyStyle: 'background:#dfe8f6;',
			html        : '<div class="ag-control-panel-table" style=""><table class="ag-control-panel-table"><tbody><tr><td style="vertical-align: top;"><table class="ag-control-panel-table-button"><tbody><tr><td class="ag-control-panel-td ag-control-panel-td-print"><a href="#"><img width=48 height=48 src="css/ico_print_48.png?1" alt="Print" /></a></td><td class="ag-control-panel-td ag-control-panel-td-link"><a href="#" id="ag-control-panel-a-link"><img width=48 height=48 src="css/ico_link_48.png?2" alt="Link"></a></td><td class="ag-control-panel-td ag-control-panel-td-embed"><a href="#" id="ag-control-panel-a-embed"><img width=48 height=48 src="css/ico_embed_48.png?1" alt="Embed"></a></td><td class="ag-control-panel-td ag-control-panel-td-download">'+

			'<div class="ag-control-panel-download-div-button">'+
			'<a href="#" id="ag-control-panel-a-download"><img width=33 height=48 src="css/icon_download.png?2" alt="Download" style="width:33px;"></a>'+
			'</div>'+

			'</td></tr></tbody></table></td>' +
//			'</tr><tr>' +
			'<td class="ag-control-panel-td-license"><div class="ag-control-panel-div-license">'+get_ag_lang('LICENSE_AG')+'</div></td>' +
//			'<td class="ag-control-panel-td-tweet" style="display:none;"><a href="#"><img width=48 height=48 src="css/ico_twitter_48.png" alt="Tweet"></a></td>'+
			'</tr></tbody></table></div>',
			listeners : {
				'show' : function(panel){
					panel.doLayout();
				},
				'afterlayout' : function(panel,layout){
					afterLayout(panel);
				},
				render: function(comp){

					$('td.ag-control-panel-td-download>div>a').live('click',function(e){
//						console.log(e);
						var maskElem = Ext.get(e.currentTarget).findParent('div.ag-control-panel-download-div-button',2,true);
						if(maskElem && maskElem.isMasked()) return;
						if(maskElem) maskElem.mask();

						var store = Ext.getCmp('ag-parts-gridpanel').getStore();
						var target_rep_ids = [];
						store.each(function(record){
							target_rep_ids.push({
								rep_id: record.get('b_id'),
								opacity: record.get('opacity'),
								exclude: record.get('exclude')
							});
						});
						if(target_rep_ids.length){
							var _download = function(params){
								params = params || {};
								var form_name = 'form_download';
								var form;
								if(!document.forms[form_name]){
									form = $('<form>').attr({
										action: "download.cgi",
										method: "POST",
										name:   form_name,
										id:     form_name,
										style:  "display:none;"
									}).appendTo($(document.body));
								}else{
									form = $(document.forms[form_name]).empty();
								}
								if(Ext.isArray(params.rep_id) && params.rep_id.length){
									var input = $('<input type="hidden" name="rep_id">').appendTo(form);
									input.val(Ext.encode(params.rep_id));
								}
								if(Ext.isArray(params.exclusion_ids) && params.exclusion_ids.length){
									var input = $('<input type="hidden" name="exclusion_ids">').appendTo(form);
									input.val(Ext.encode(params.exclusion_ids));
								}
								if(Ext.isArray(params.ids) && params.ids.length){
									var input = $('<input type="hidden" name="ids">').appendTo(form);
									input.val(Ext.encode(params.ids));
								}
								if(params.filename){
									var input = $('<input type="hidden" name="filename">').appendTo(form);
									input.val(params.filename);
								}
								var input = $('<input type="hidden" name="type" value="art_file">').appendTo(form);
								var input = $('<input type="hidden" name="all_downloads" value="1">').appendTo(form);

								document.forms[form_name].submit();
							};

							var transaction_id = Ext.Ajax.request({
								url     : 'download-pallet-art_file.cgi',
								method  : 'POST',
								params  : Ext.urlEncode({rep_ids:Ext.encode(target_rep_ids)}),
								success : function(conn,response,options){
									try{var results = Ext.util.JSON.decode(conn.responseText);}catch(e){}
									results = results || {};
									if(Ext.isArray(results.rep_ids) && results.rep_ids.length){
//										var filename = Ext.util.Format.date(new Date(),'YmdHis_u');

										var filename = Ext.util.Format.date(new Date(),'YmdHis');
										_download({rep_id:results.rep_ids,ids:results.art_ids,filename:filename});
										if(maskElem) maskElem.unmask();
										return;

										var win = window.open(
											"about:blank",
//											filename,
											null,
											"menubar=yes,titlebar=no,toolbar=yes,status=no,resizable=yes,dependent=yes,alwaysRaised=yes,scrollbars=yes,width=800,height=600"
										);
										console.log(win.name);
										setTimeout(function(){
											var form_name = 'form_download_art_file_list';
											var form;
											if(!document.forms[form_name]){
												form = $('<form>').attr({
													action: "download-art_file-list.cgi?type=html&lng=ja",
													method: "POST",
													name:   form_name,
													id:     form_name,
													style:  "display:none;",
													target: filename
												}).appendTo($(document.body));
											}else{
												form = $(document.forms[form_name]).empty();
											}
											var input = $('<input type="hidden" name="rep_ids">').appendTo(form);
											input.val(Ext.encode(results.rep_ids));

											form.bind('submit',function(){
												form.remove();
											});
											document.forms[form_name].submit();
										},250);

									}
									if(maskElem) maskElem.unmask();
								},
								failure : function(conn,response,options){
									Ext.MessageBox.show({
										title   : 'Donwload OBJ',
										msg     : get_ag_lang('CONVERT_URL_ERRMSG'),
										buttons : Ext.MessageBox.OK,
										icon    : Ext.MessageBox.ERROR
									});
									if(maskElem) maskElem.unmask();
								}
							});


						}else{
							if(maskElem) maskElem.unmask();
						}
						return false;
					});

					$('td.ag-control-panel-td-print>a').live('click',function(){
						var form = Ext.getDom('ag-print-form');
						if(!form) return false;
						var target = Ext.id().replace(/-/g,"_");

						var width = $('img#ag_img').width();
						var height = $('img#ag_img').height();
//						var print_win = window.open("", target, "titlebar=no,toolbar=yes,status=no,menubar=yes,dependent=yes,width="+width+",height="+height);


						var print_win = window.open("", target, "titlebar=no,toolbar=yes,status=no,menubar=yes,dependent=yes,width="+width+",height="+height);

						var jsonStr = glb_anatomo_image_still;
						try{
							jsonStr = ag_extensions.toJSON.URI2JSON(glb_anatomo_image_still,{
								toString:true,
								mapPin:false,
								callback:undefined
							});
							jsonStr = encodeURIComponent(jsonStr);
						}catch(e){jsonStr = glb_anatomo_image_still;}

						var printURL = getEditUrl() + "print.html?" + jsonStr;

						var transaction_id = Ext.Ajax.request({
							url     : 'get-convert-url.cgi',
							method  : 'POST',
							params  : Ext.urlEncode({url:printURL}),
							success : function(conn,response,options){
								try{var results = Ext.util.JSON.decode(conn.responseText);}catch(e){}
								if(Ext.isEmpty(results) || Ext.isEmpty(results.status_code) || results.status_code!=200){
									var msg = get_ag_lang('CONVERT_URL_ERRMSG');
									if(results && results.status_code) msg += ' [ '+ results.status_code +' ]';
									Ext.MessageBox.show({
										title   : window_title,
										msg     : msg,
										buttons : Ext.MessageBox.OK,
										icon    : Ext.MessageBox.ERROR
									});
									return;
								}
								if(Ext.isEmpty(results.data)){
									var msg = get_ag_lang('CONVERT_URL_ERRMSG');
									if(results && results.status_code) msg += ' [ no data ]';
									Ext.MessageBox.show({
										title   : window_title,
										msg     : msg,
										buttons : Ext.MessageBox.OK,
										icon    : Ext.MessageBox.ERROR
									});
									return;
								}

								if(!Ext.isEmpty(results.data.url)){//shortURLに変換
									print_win.location.href = results.data.url;
								}else if(!Ext.isEmpty(results.data.expand)){//longURLに変換
									print_win.location.href = printURL;
								}
							},
							failure : function(conn,response,options){
								Ext.MessageBox.show({
									title   : window_title,
									msg     : get_ag_lang('CONVERT_URL_ERRMSG'),
									buttons : Ext.MessageBox.OK,
									icon    : Ext.MessageBox.ERROR
								});
							}
						});
						return false;
					});
					$('td.ag-control-panel-td-link>a').live('click',function(){
						anatomography_open_link_window();
						return false;
					});
					$('td.ag-control-panel-td-embed>a').live('click',function(){
						anatomography_open_embed_window();
						return false;
					});
					$('td.ag-control-panel-td-license>a').live('click',function(){
						var src = get_ag_lang('LICENSE_URL');
						window.open(src,"_blank","menubar=yes,titlebar=no,toolbar=yes,status=no,resizable=yes,dependent=yes,alwaysRaised=yes,scrollbars=yes,width=800,height=600");
						return false;
					});
					$('td.ag-control-panel-td-tweet>a').live('click',function(){
						window.open('twitter/tweet-ag.html?hashtags=anagra&text=Anatomography','_blank_ag','dependent=yes,width=800,height=600');
						return false;
					});

					Ext.getCmp('contents-tab-panel').on({
						tabchange: {
							fn: function(tabpanel,tab){
								if(tab.id != 'contents-tab-anatomography-panel') return;
								comp.setHeight(comp.initialConfig.height);
								comp.findParentByType('panel').doLayout();
							},
							buffer: 250
						}
					});

				},
				scope:this
			}












			}
		]
	});

	oncheck_anatomo_windowsize_autosize_check = function(checkbox, fChecked){
		var wc = Ext.getCmp('anatomo-width-combo');
		var hc = Ext.getCmp('anatomo-height-combo');
		if(wc && wc.rendered && hc && hc.rendered){
			if(fChecked){
				wc.disable();
				hc.disable();
			}else{
				wc.enable();
				hc.enable();
			}
		}
		if(fChecked) setImageWindowSize();
	};

	oncheck_anatomo_bgcolor_transparent_check = function(checkbox, fChecked){
		var prm_record = ag_param_store.getAt(0);
		prm_record.beginEdit();
		prm_record.set('bg_transparent', fChecked ? 0 : NaN);
		prm_record.endEdit();
		prm_record.commit();
		updateAnatomo();
	};

	anatomography_panel = new Ext.Panel({
		title  : get_ag_lang('TITLE_AG'),
		tabTip   : get_ag_lang('TABTIP_AG'),		id    : 'contents-tab-anatomography-panel',
		autoScroll : false,
		bodyBorder : false,
		boder : false,
		layout : 'border',
		items : [
			ag_contents_panel,
			ag_comment_panel,
			ag_image_control_panel
		],
//		tbar  : anatomography_panel_toolbar,
		listeners : {
			'show' : function(panel){
				panel.doLayout();
				var cmp = Ext.getCmp('zoom-slider');
				if(cmp) cmp.syncThumb();
			},
			scope:this
		}
	});
}

function ag_command_init(e){
	var ag_command_btn_move = Ext.get('ag-command-btn-move');
	var ag_command_btn_rotate = Ext.get('ag-command-btn-rotate');
	if(!ag_command_btn_move || !ag_command_btn_rotate) return;
	ag_command_btn_move.addListener("click",ag_command_toggle);
	ag_command_btn_rotate.addListener("click",ag_command_toggle);
	if(anatomoDragModeMove){
		ag_command_btn_move.addClass("ag_command_btn_on");
	}else{
		ag_command_btn_rotate.addClass("ag_command_btn_on");
	}
}
function ag_command_toggle(e){
	e.preventDefault();
	var target = e.getTarget(undefined,undefined,true);
	ag_command_toggle_exec(target);
	return false;
}
function ag_command_toggle_exec(target){
	target.blur();
	if(target.hasClass("ag_command_btn_on")) return;
	var elem = Ext.select('a[class*=ag_command_btn_on]',true);
	if(elem){
		for(var i=elem.getCount()-1;i>=0;i--){
			elem.item(i).removeClass("ag_command_btn_on");
		}
	}
//	if(target.id == "ag-command-btn-move"){
//		target = Ext.get('ag-command-btn-rotate');
//	}else{
//		target = Ext.get('ag-command-btn-move');
//	}
	target.addClass("ag_command_btn_on");

	var checkbox = Ext.getCmp('anatomo-dragmode-check');
	anatomoDragModeMove = (target.id == "ag-command-btn-move" ? true : false);
	if(checkbox && checkbox.rendered && checkbox.getValue() != anatomoDragModeMove) checkbox.setValue(anatomoDragModeMove);
}

var agRotateAuto = {
//var ag_image_auto_rotate_interval = -1;
//var ag_image_auto_rotate_start_time = -1;
//var ag_image_auto_rotate_angle = 0;
//var ag_image_auto_rotate_rotAxis = {
//	rotAxisX : 0,
//	rotAxisZ : 0,
//	rotAxisY : 0
//};
//var ag_image_auto_rotate_imgX = 0;
//var ag_image_auto_rotate_imgY = 0;

	load_time : -1,
	dt_time : -1,
	angle : 0,
	rotAxis : null,
	imgX : 0,
	imgY : 0,

	init : function(){
		agRotateAuto.removeRotateImages();
		agRotateAuto.load_time = (new Date()).getTime();
		agRotateAuto.dt_time = getDateString();
		agRotateAuto.angle = 0;
		agRotateAuto.imgX = 0;
		agRotateAuto.imgY = 0;
		if(agRotateAuto.checkCoordinate(new AGVec3d(m_ag.upVec.x,m_ag.upVec.y,m_ag.upVec.z))){
			agRotateAuto.dispAxisOfRotationAngle();
			agRotateAuto.dispNowAngle();
		}
	},

	checkCoordinate : function(pAGVec3d,fname){
		if(isNaN(pAGVec3d.x) || isNaN(pAGVec3d.y) || isNaN(pAGVec3d.z)){
			Ext.MessageBox.show({
				title   : 'Auto rotation',
				msg     : 'The result of the calculation is incorrect coordinates. ['+fname+']',
				buttons : Ext.MessageBox.OK,
				icon    : Ext.MessageBox.ERROR
			});
			return false;
		}else{
			agRotateAuto.rotAxis = pAGVec3d;
			return true;
		}
	},

	dispAxisOfRotationAngle : function(){
		var dom = Ext.getDom('ag-command-image-controls-rotateAuto-axis-label');
		if(dom && agRotateAuto.rotAxis){
			var deg = calcRotateAxisDeg(agRotateAuto.rotAxis);
			dom.innerHTML = Math.round(deg.V);
//			dom.innerHTML = Math.round(deg.H)+","+Math.round(deg.V);
		}
	},

	dispNowAngle : function(){
		var dom = Ext.getDom('ag-command-image-controls-rotateAuto-now-angle-label');
		if(dom){
			dom.innerHTML = Math.round(agRotateAuto.angle);
		}
	},

	removeRotateImages : function(){
		var delobjs = {
			dt : agRotateAuto.dt_time
		};
		Ext.Ajax.request({
			url     : 'del-rotate_images.cgi',
			method  : 'POST',
			params  : Ext.urlEncode(delobjs),
			success : function(conn,response,options){
			},
			failure : function(conn,response,options){
			}
		});
	},

	setRotAxis : function(rotAxis){
		agRotateAuto.removeRotateImages();
		agRotateAuto.dt_time = getDateString();
		if(agRotateAuto.checkCoordinate(new AGVec3d(rotAxis.rotAxisX,rotAxis.rotAxisY,rotAxis.rotAxisZ),'setRotAxis')){
			agRotateAuto.dispAxisOfRotationAngle();
		}
	},

	getAngles : function (){
		var angles;
		try{
			angles = Ext.getCmp('ag-command-image-controls-rotateAuto-angles').getValue();
		}catch(e){
			angles = 15;
		}
		return angles;
	},

	getInterval : function(){
		var interval;
		try{
			interval = Ext.getCmp('ag-command-image-controls-rotateAuto-interval').getValue();
		}catch(e){
			interval = 1;
		}
		return interval;
	},

	rotate : function(state){
		var ag_img = Ext.get('ag_img');
		if(!state){
			ag_img.un('load',agRotateAuto._rotate);
			ag_img.un('abort',agRotateAuto._abort);
			ag_img.un('error',agRotateAuto._error);
			return;
		}
		ag_img.on('load',agRotateAuto._rotate);
		ag_img.on('abort',agRotateAuto._abort);
		ag_img.on('error',agRotateAuto._error);

		agRotateAuto.load_time = (new Date()).getTime();
		agRotateAuto._rotate();
	},

	_rotate : function(){
//		_dump("agRotateAuto._rotate()");
		var interval = agRotateAuto.getInterval() * 1000;
		var curTime = (new Date()).getTime();

		agRotateAuto.angle += agRotateAuto.getAngles();
		if(agRotateAuto.angle>=360){
			agRotateAuto.angle -= 360;
		}else if(agRotateAuto.angle<=-360){
			agRotateAuto.angle += 360;
		}
		agRotateAuto.dispNowAngle();

		if(curTime-agRotateAuto.load_time<interval){
			interval -= (curTime-agRotateAuto.load_time);
			setTimeout(function(){
				agRotateAuto.load_time = (new Date()).getTime();
				stopUpdateAnatomo();
				_updateAnatomo(false);
			},interval);
		}else{
			agRotateAuto.load_time = curTime;
			stopUpdateAnatomo();
			_updateAnatomo(false);
		}
	},

	_abort : function(){
		_dump("agRotateAuto._abort()");
	},
	_error : function(){
		_dump("agRotateAuto._error()");
	}
};

function addAgMenuItem(parentMenu){
	return;
}


agCommandMenuImageMove = {
	xtype : 'menu',
	id    : 'ag-command-menu-image-move',
	text  : 'Move',
	icon    : 'css/menu_move.png',
	menu  : {
		items : [{
			xtype   : 'menuitem',
			id      : 'ag-command-menu-image-move-up',
			text    : 'up',
			icon    : 'css/arrow_up.png',
			handler : agCommandMenuClick
		},{
			xtype   : 'menuitem',
			id      : 'ag-command-menu-image-move-right',
			text    : 'right',
			icon    : 'css/arrow_right.png',
			handler : agCommandMenuClick
		},{
			xtype   : 'menuitem',
			id      : 'ag-command-menu-image-move-down',
			text    : 'down',
			icon    : 'css/arrow_down.png',
			handler : agCommandMenuClick
		},{
			xtype   : 'menuitem',
			id      : 'ag-command-menu-image-move-left',
			text    : 'left',
			icon    : 'css/arrow_left.png',
			handler : agCommandMenuClick
		},'-',{
			xtype   : 'menuitem',
			id      : 'ag-command-menu-image-move-focus-center',
			text    : 'Centering',
			icon    : 'css/focus_center.png',
			handler : agCommandMenuClick
		},{
			xtype   : 'menuitem',
			id      : 'ag-command-menu-image-move-focus-zoom',
			text    : 'Centering & Zoom',
			icon    : 'css/focus_zoom.png',
			handler : agCommandMenuClick
		}]
	}
};

agCommandMenuImageRotation = {
	xtype : 'menu',
	id    : 'ag-command-menu-image-rotation',
	text  : 'Rotation',
	icon    : 'css/menu_rotate.png',
	menu  : {
		items : [{
			xtype   : 'menuitem',
			id      : 'ag-command-menu-image-rotation-up',
			text    : 'up',
			icon    : 'img/rotate_u.png',
			handler : agCommandMenuClick
		},{
			xtype   : 'menuitem',
			id      : 'ag-command-menu-image-rotation-right',
			text    : 'right',
			icon    : 'img/rotate_r.png',
			handler : agCommandMenuClick
		},{
			xtype   : 'menuitem',
			id      : 'ag-command-menu-image-rotation-down',
			text    : 'down',
			icon    : 'img/rotate_d.png',
			handler : agCommandMenuClick
		},{
			xtype   : 'menuitem',
			id      : 'ag-command-menu-image-rotation-left',
			text    : 'left',
			icon    : 'img/rotate_l.png',
			handler : agCommandMenuClick
		},'-',{
			xtype   : 'menuitem',
			id      : 'ag-command-menu-image-rotation-0-0',
			text    : 'H:<tt>&nbsp;&nbsp;</tt>0,V:<tt>&nbsp;&nbsp;</tt>0',
			handler : agCommandMenuClick
		},{
			xtype   : 'menuitem',
			id      : 'ag-command-menu-image-rotation-90-0',
			text    : 'H:<tt>&nbsp;</tt>90,V:<tt>&nbsp;&nbsp;</tt>0',
			handler : agCommandMenuClick
		},{
			xtype   : 'menuitem',
			id      : 'ag-command-menu-image-rotation-180-0',
			text    : 'H:180,V:<tt>&nbsp;&nbsp;</tt>0',
			handler : agCommandMenuClick
		},{
			xtype   : 'menuitem',
			id      : 'ag-command-menu-image-rotation-270-0',
			text    : 'H:270,V:<tt>&nbsp;&nbsp;</tt>0',
			handler : agCommandMenuClick
		},{
			xtype   : 'menuitem',
			id      : 'ag-command-menu-image-rotation-180-90',
			text    : 'H:180,V:<tt>&nbsp;</tt>90',
			handler : agCommandMenuClick
		},{
			xtype   : 'menuitem',
			id      : 'ag-command-menu-image-rotation-0-270',
			text    : 'H:<tt>&nbsp;&nbsp;</tt>0,V:270',
			handler : agCommandMenuClick
		}]
	}
};
agCommandMenuImageZoom = {
	xtype : 'menu',
	id    : 'ag-command-menu-image-zoom',
	text  : 'Zoom',
	icon    : 'css/magnifier.png',
	menu  : {
		items : [{
			xtype   : 'menuitem',
			id      : 'ag-command-menu-image-zoom-up',
			text    : 'In',
			icon    : 'css/magnifier_zoom.png',
			handler : agCommandMenuClick
		},{
			xtype   : 'menuitem',
			id      : 'ag-command-menu-image-zoom-down',
			text    : 'Out',
			icon    : 'css/magnifier_zoom_out.png',
			handler : agCommandMenuClick
		}]
	}
};
agCommandMenuImageGridCheckbox = {
	xtype   : 'checkbox',
	id      : 'ag-command-menu-image-grid-checkbox',
	text    : 'Grid(On/Off)',
	checked : false,
	checkHandler : agCommandMenuClick
};
agCommandMenuImageGridColor = {
	id   : 'ag-command-menu-image-grid-color',
	text : 'Choose a Color',
	menu : new Ext.menu.ColorMenu({
		id      : 'ag-command-menu-image-grid-color-palette',
		handler : agCommandMenuClick,
		listeners : {
			'beforerender' : function(menu){
				if(menu.palette && menu.palette.colors) menu.palette.colors = window.palette_color;
			},
			'beforeshow' : function(menu){
				var color = Ext.getCmp('ag-command-grid-color-field').getValue();
				if(!color) return;
				color = color.replace(/^#/g,"").toUpperCase();
				if(menu.palette){
					menu.palette.suspendEvents();
					menu.palette.select(color);
					menu.palette.resumeEvents();
				}
			}
		}
	})
};
agCommandMenuImageGridLen = {
	id   : 'ag-command-menu-image-grid-len',
	text : 'Rect Length',
	menu : {
		items : ['<b class="menu-title">Choose a Rect Length</b>'],
		listeners : {
			'beforeshow' : function(menu){
				var key = 'ag-command-menu-image-grid-len-';
				var combo = Ext.getCmp('ag-command-grid-len-combobox');
				var count = menu.items.getCount();
				while(count>1){
					count--;
					var item = menu.items.get(count);
					if(item) menu.remove(item);
				}
				var records = combo.getStore().getRange();
				if(records.length==0) return;
				var items = {};
				for(var i=0;i<records.length;i++){
					items[records[i].data.value] = menu.addMenuItem({
						id      : key+records[i].data.value,
						text    : records[i].data.disp,
						value   : records[i].data.value,
						checked : false,
						group   : key+'group',
						handler : agCommandMenuClick
					});
				}
				var value = combo.getValue();
				if(items[value]) items[value].setChecked(true);
			}
		}
	}
};
agCommandMenuImageGrid = {
	xtype : 'menu',
	id    : 'ag-command-menu-image-grid',
	text  : 'Grid',
	menu  : {
		items : [
			agCommandMenuImageGridCheckbox,
			'-',
			agCommandMenuImageGridColor,
			agCommandMenuImageGridLen
		],
		listeners : {
			'beforeshow' : function(menu){
				var show = Ext.getCmp('ag-command-grid-show-check').getValue();
				Ext.getCmp('ag-command-menu-image-grid-checkbox').setChecked(show);
				if(show){
					Ext.getCmp('ag-command-menu-image-grid-color').enable();
					Ext.getCmp('ag-command-menu-image-grid-len').enable();
				}else{
					Ext.getCmp('ag-command-menu-image-grid-color').disable();
					Ext.getCmp('ag-command-menu-image-grid-len').disable();
				}
			}
		}
	}
};
agCommandMenuImageControls = {
	xtype : 'menu',
	id    : 'ag-command-menu-image-controls',
	text  : 'Image controls',
	menu  : {
		items : [
			agCommandMenuImageMove,
			agCommandMenuImageRotation,
			agCommandMenuImageZoom,
			agCommandMenuImageGrid
		]
	}
};

agCommandMenuClipCheckbox = {
	xtype   : 'checkbox',
	id      : 'ag-command-menu-clip-checkbox',
	text    : 'Clip(On/Off)',
	checked : false,
	checkHandler : agCommandMenuClick
};
agCommandMenuClipMethod = {
	id   : 'ag-command-menu-clip-method',
	text : 'Method',
	menu : {
		items : ['<b class="menu-title">Choose a Method</b>'],
		listeners : {
			'beforeshow' : function(menu){
				var key = 'ag-command-menu-clip-method-';
				var combo = Ext.getCmp('anatomo-clip-method-combo');
				var count = menu.items.getCount();
				while(count>1){
					count--;
					var item = menu.items.get(count);
					if(item) menu.remove(item);
				}
				var records = combo.getStore().getRange();
				if(records.length==0) return;
				for(var i=0;i<records.length;i++){
					menu.addMenuItem({
						id      : key+records[i].data.value,
						text    : records[i].data.disp,
						value   : records[i].data.value,
						checked : false,
						group   : key+'group',
						handler : agCommandMenuClick
					});
				}
				Ext.getCmp(key+combo.getValue()).setChecked(true);
			}
		}
	}
};
agCommandMenuClipPredefinedPlane = {
	id   : 'ag-command-menu-clip-predefined-plane',
	text : 'Predefined plane',
	menu : {
		items : ['<b class="menu-title">Choose a Predefined plane</b>'],
		listeners : {
			'beforeshow' : function(menu){
				var key = 'ag-command-menu-clip-predefined-plane-';
				var combo = Ext.getCmp('anatomo-clip-predifined-plane');
				var count = menu.items.getCount();
				while(count>1){
					count--;
					var item = menu.items.get(count);
					if(item) menu.remove(item);
				}
				var records = combo.getStore().getRange();
				if(records.length==0) return;
				var items = {};
				for(var i=0;i<records.length;i++){
					items[records[i].data.value] = menu.addMenuItem({
						id      : key+records[i].data.value,
						text    : records[i].data.disp,
						value   : records[i].data.value,
						checked : false,
						group   : key+'group',
						handler : agCommandMenuClick
					});
				}
				menu.addSeparator();
				var fix_menu = menu.addMenuItem({
					xtype   : 'checkbox',
					id      : key+'freeplane-fix',
					text    : 'Fix',
					checked : false,
					checkHandler : agCommandMenuClick
				});
				var reverse_menu = menu.addMenuItem({
					xtype   : 'checkbox',
					id      : key+'reverse',
					text    : 'Reverse',
					checked : false,
					checkHandler : agCommandMenuClick
				});

				var plane = combo.getValue();
				var fix = Ext.getCmp('anatomo-clip-fix-check').getValue();
				var reverse = Ext.getCmp('anatomo-clip-reverse-check').getValue();

				if(plane=='FREE'){
					fix_menu.enable();
					fix_menu.setChecked(fix);
					if(fix){
						reverse_menu.enable();
						reverse_menu.setChecked(reverse);
					}else{
						reverse_menu.disable();
						reverse_menu.setChecked(false);
					}
				}else{
					fix_menu.disable();
					fix_menu.setChecked(false);
					reverse_menu.enable();
					reverse_menu.setChecked(reverse);
				}
				if(items[plane]) items[plane].setChecked(true);
			}
		}
	}
};

agCommandMenuSectionalView = {
	text  : 'Sectional View',
	hidden: true,
	menu  : {
		id    : 'ag-command-menu-sectional-view',
		items : [
			agCommandMenuClipCheckbox,
			'-',
			agCommandMenuClipMethod,
			agCommandMenuClipPredefinedPlane,
			'-',{
				xtype   : 'menuitem',
				id      : 'ag-command-menu-clip-up',
				text    : 'up',
				icon    : 'css/arrow_up.png',
				handler : agCommandMenuClick
			},{
				xtype   : 'menuitem',
				id      : 'ag-command-menu-clip-down',
				text    : 'down',
				icon    : 'css/arrow_down.png',
				handler : agCommandMenuClick
			}
		],
		listeners : {
			'beforeshow' : function(menu){
//				_dump("agCommandMenuSectionalView:beforeshow(1):"+menu.id);
				var checked = Ext.getCmp('anatomo-clip-check').getValue();
				Ext.getCmp('ag-command-menu-clip-checkbox').setChecked(checked);
				if(checked){
					Ext.getCmp('ag-command-menu-clip-method').enable();
					Ext.getCmp('ag-command-menu-clip-predefined-plane').enable();
					Ext.getCmp('ag-command-menu-clip-up').enable();
					Ext.getCmp('ag-command-menu-clip-down').enable();
				}else{
					Ext.getCmp('ag-command-menu-clip-method').disable();
					Ext.getCmp('ag-command-menu-clip-predefined-plane').disable();
					Ext.getCmp('ag-command-menu-clip-up').disable();
					Ext.getCmp('ag-command-menu-clip-down').disable();
				}
			},
			'show' : function(menu){
//				_dump("agCommandMenuSectionalView:show(1):"+menu.id);
			}
		}
	}
};

agCommandMenuWindowSizeWidth = {
	text : 'Width',
	icon : 'css/arrow_width.png',
	menu : {
		id    : 'ag-command-menu-window-size-width',
		items : ['<b class="menu-title">Choose a Window width</b>'],
		listeners : {
			'beforeshow' : function(menu){
				var key = 'ag-command-menu-window-size-width-';
				var combo = Ext.getCmp('anatomo-width-combo');
				var count = menu.items.getCount();
				while(count>1){
					count--;
					var item = menu.items.get(count);
					if(item) menu.remove(item);
				}
				var records = combo.getStore().getRange();
				if(records.length==0) return;
				var items = {};
				for(var i=0;i<records.length;i++){
					items[records[i].data.value] = menu.addMenuItem({
						id      : key+records[i].data.value,
						text    : records[i].data.disp+' px',
						value   : records[i].data.value,
						checked : false,
						group   : key+'group',
						handler : agCommandMenuClick
					});
				}
				if(Ext.getCmp('anatomo-windowsize-autosize-check').getValue()) return;
				var value = combo.getValue();
				if(items[value]) items[value].setChecked(true);
			}
		}
	}
};
agCommandMenuWindowSizeHeight = {
	text : 'Height',
	icon : 'css/arrow_height.png',
	menu : {
		id    : 'ag-command-menu-window-size-height',
		items : ['<b class="menu-title">Choose a Window height</b>'],
		listeners : {
			'beforeshow' : function(menu){
				var key = 'ag-command-menu-window-size-height-';
				var combo = Ext.getCmp('anatomo-height-combo');
				var count = menu.items.getCount();
				while(count>1){
					count--;
					var item = menu.items.get(count);
					if(item) menu.remove(item);
				}
				var records = combo.getStore().getRange();
				if(records.length==0) return;
				var items = {};
				for(var i=0;i<records.length;i++){
					items[records[i].data.value] = menu.addMenuItem({
						id      : key+records[i].data.value,
						text    : records[i].data.disp+' px',
						value   : records[i].data.value,
						checked : false,
						group   : key+'group',
						handler : agCommandMenuClick
					});
				}
				if(Ext.getCmp('anatomo-windowsize-autosize-check').getValue()) return;
				var value = combo.getValue();
				if(items[value]) items[value].setChecked(true);
			}
		}
	}
};
agCommandMenuWindowSizeAutoCheckbox = {
	xtype   : 'checkbox',
	id      : 'ag-command-menu-window-size-autosize',
	text    : 'Auto Window Size',
	checked : false,
	checkHandler : agCommandMenuClick
};
agCommandMenuWindowSize = {
	text : 'Window size',
	menu : {
		id    : 'ag-command-menu-window-size',
		items : [
			agCommandMenuWindowSizeWidth,
			agCommandMenuWindowSizeHeight,
			agCommandMenuWindowSizeAutoCheckbox
		],
		listeners : {
			'beforeshow' : function(menu){
//				_dump("agCommandMenuWindowSize:beforeshow(1):"+menu.id);
				var autosize = Ext.getCmp('anatomo-windowsize-autosize-check').getValue();
				Ext.getCmp('ag-command-menu-window-size-autosize').setChecked(autosize);
			}
		}
	}
};


agCommandMenuWindowBackgroundColorMenu = {
	text : 'Choose a Color',
	menu : new Ext.menu.ColorMenu({
		id      : 'ag-command-menu-window-background-color-palette',
		handler : agCommandMenuClick,
		listeners : {
			'beforerender' : function(menu){
				if(menu.palette && menu.palette.colors) menu.palette.colors = window.palette_color;
			},
			'beforeshow' : function(menu){
				var bgcp = Ext.getCmp('anatomo-bgcp').getValue();
				if(!bgcp) return;
				bgcp = bgcp.replace(/^#/g,"").toUpperCase();
				if(menu.palette){
					menu.palette.suspendEvents();
					menu.palette.select(bgcp);
					menu.palette.resumeEvents();
				}
			}
		}
	})
};
agCommandMenuWindowBackgroundColorTransparent = {
	xtype   : 'checkbox',
	id      : 'ag-command-menu-window-background-color-transparent',
	text    : 'Transparent',
	checked : false,
	checkHandler : agCommandMenuClick
};
agCommandMenuWindowBackgroundColor = {
	text  : 'Background color',
	menu  : {
		id    : 'ag-command-menu-window-background-color',
		items : [
			agCommandMenuWindowBackgroundColorMenu,
			agCommandMenuWindowBackgroundColorTransparent
		],
		listeners : {
			'beforeshow' : function(menu){
//				_dump("agCommandMenuWindowBackgroundColor:beforeshow(1):"+menu.id);
				var transparent = Ext.getCmp('anatomo-bgcolor-transparent-check').getValue();
				Ext.getCmp('ag-command-menu-window-background-color-transparent').setChecked(transparent);
			}
		}
	}
};


agCommandMenuDefaultPartsColor = {
	text : 'Default parts color',
	menu : new Ext.menu.ColorMenu({
		id      : 'ag-command-menu-default-parts-color',
		handler : agCommandMenuClick,
		listeners : {
			'beforerender' : function(menu){
				if(menu.palette && menu.palette.colors) menu.palette.colors = window.palette_color;
			},
			'beforeshow' : function(menu){
				var color = Ext.getCmp('anatomo-default-parts-color').getValue();
				if(!color) return;
				color = color.replace(/^#/g,"").toUpperCase();
				if(menu.palette){
					menu.palette.suspendEvents();
					menu.palette.select(color);
					menu.palette.resumeEvents();
				}
			}
		}
	})
};

agCommandMenuPointColorMenu = {
	text : 'Choose a Color',
	menu : new Ext.menu.ColorMenu({
		id      : 'ag-command-menu-point-color',
		handler : agCommandMenuClick,
		listeners : {
			'beforerender' : function(menu){
				if(menu.palette && menu.palette.colors) menu.palette.colors = window.palette_color;
			},
			'beforeshow' : function(menu){
				var color = Ext.getCmp('anatomo-default-point-parts-color').getValue();
				if(!color) return;
				color = color.replace(/^#/g,"").toUpperCase();
				if(menu.palette){
					menu.palette.suspendEvents();
					menu.palette.select(color);
					menu.palette.resumeEvents();
				}
			}
		}
	})
};
agCommandMenuPointSphere = {
	text : 'Sphere',
	menu : {
		id    : 'ag-command-menu-point-sphere',
		items : ['<b class="menu-title">Choose a Sphere</b>'],
		listeners : {
			'beforeshow' : function(menu){
				var key = 'ag-command-menu-point-sphere-';
				var combo = Ext.getCmp('ag-command-point-sphere-combo');
				var count = menu.items.getCount();
				while(count>1){
					count--;
					var item = menu.items.get(count);
					if(item) menu.remove(item);
				}
				var records = combo.getStore().getRange();
				if(records.length==0) return;
				var items = {};
				for(var i=0;i<records.length;i++){
					items[records[i].data.value] = menu.addMenuItem({
						id      : key+records[i].data.value,
						text    : records[i].data.disp,
						value   : records[i].data.value,
						checked : false,
						group   : key+'group',
						handler : agCommandMenuClick
					});
				}
				var value = combo.getValue();
				if(items[value]) items[value].setChecked(true);
			}
		}
	}
};
agCommandMenuPointClassificationLabel = {
	text : 'Classification label',
	menu : {
		id    : 'ag-command-menu-point-classification-label',
		items : [
			'<b class="menu-title">Choose a Classification label</b>'
		],
		listeners : {
			'beforeshow' : function(menu){
				var combo = Ext.getCmp('anatomo-point-label-combo');
				var count = menu.items.getCount();
				while(count>1){
					count--;
					var item = menu.items.get(count);
					if(item) menu.remove(item);
				}
				var records = combo.getStore().getRange();
				if(records.length==0) return;
				var key = 'ag-command-menu-point-classification-label-';
				for(var i=0;i<records.length;i++){
					menu.addMenuItem({
						id      : key+records[i].data.value,
						text    : records[i].data.disp,
						value   : records[i].data.value,
						checked : false,
						group   : key+'group',
						handler : agCommandMenuClick
					});
				}
				var label = combo.getValue();
				Ext.getCmp(key+label).setChecked(true);
			}
		}
	}
};
agCommandMenuPointDescription = {
	xtype   : 'checkbox',
	id      : 'ag-command-menu-point-description',
	text    : 'Description',
	checked : false,
	checkHandler : agCommandMenuClick
};
agCommandMenuPointDrawPointIndicationLine = {
	id    : 'ag-command-menu-point-draw-point-indication-line',
	text : 'Draw Point Indication Line',
	menu : {
		items : ['<b class="menu-title">Choose a Draw Point Indication Line</b>'],
		listeners : {
			'beforeshow' : function(menu){
				var key = 'ag-command-menu-point-draw-point-indication-line-';
				var combo = Ext.getCmp('ag-command-point-description-draw-point-indication-line-combo');
				var count = menu.items.getCount();
				while(count>1){
					count--;
					var item = menu.items.get(count);
					if(item) menu.remove(item);
				}
				var records = combo.getStore().getRange();
				if(records.length==0) return;
				var items = {};
				for(var i=0;i<records.length;i++){
					items[records[i].data.value] = menu.addMenuItem({
						id      : key+records[i].data.value,
						text    : records[i].data.disp,
						value   : records[i].data.value,
						checked : false,
						group   : key+'group',
						handler : agCommandMenuClick
					});
				}
				var value = combo.getValue();
				if(items[value]) items[value].setChecked(true);
			}
		}
	}
};
agCommandMenuPoint = {
	id    : 'ag-command-menu-point',
	text  : 'Point',
	hidden : true,
	menu  : {
		items : [
			agCommandMenuPointColorMenu,
			agCommandMenuPointSphere,
			agCommandMenuPointClassificationLabel,
			agCommandMenuPointDescription,
			agCommandMenuPointDrawPointIndicationLine
		],
		listeners : {
			'beforeshow' : function(menu){
//				_dump("agCommandMenuPoint:beforeshow(1):"+menu.id);
				var description = Ext.getCmp('ag-command-point-description-check').getValue();
				Ext.getCmp('ag-command-menu-point-description').setChecked(description);
				var cmp_line = Ext.getCmp('ag-command-menu-point-draw-point-indication-line');
				if(description){
					cmp_line.enable();
				}else{
					cmp_line.disable();
				}
			}
		}
	}
};

agCommandMenuWindowControls = {
	id    : 'ag-command-menu-window-controls',
	text  : 'Window controls',
	menu  : {
		items : [
			agCommandMenuWindowSize,
			agCommandMenuWindowBackgroundColor,
			agCommandMenuDefaultPartsColor,
			agCommandMenuPoint
		]
	}
};

agMenuItemShortcutKeys = {
	id    : 'ag-menu-options-shortcut',
	text  : 'Shortcut Keys',
	handler : openOptionsShortcutKeys
};

agCommandMenuItems = [
	agCommandMenuImageControls,
	agCommandMenuSectionalView,
	agCommandMenuWindowControls,
	'-',
	agMenuItemShortcutKeys
];

function agCommandMenuClick(b,e){
//	_dump("agCommandMenuClick():["+b.xtype+"]:["+b.id+"]:["+(typeof e)+"]["+e+"]["+b.checked+"]["+b.value+"]");
	try{
		e.stopEvent();
	}catch(ex){}
	if(b.id.match(/^ag-command-menu-image-move-(.+)$/)){
		var cmd = RegExp.$1;
		var x = ag_param_store.getAt(0).data.image_w /2;
		var y = ag_param_store.getAt(0).data.image_h /2;
		var move_value = 15;
		if(cmd=='up' || cmd=='down' || cmd=='left' || cmd=='right'){
			if(cmd=='up'){
				y += move_value;
			}else if(cmd=='down'){
				y -= move_value;
			}else if(cmd=='left'){
				x += move_value;
			}else if(cmd=='right'){
				x -= move_value;
			}
			anatomoImgMoveCenter(x,y);
		}else if(cmd=='focus-center'){
			ag_focus(false,true);
		}else if(cmd=='focus-zoom'){
			ag_focus(false);
		}
	}else if(b.id.match(/^ag-command-menu-image-rotation-(.+)$/)){
		var cmd = RegExp.$1;
//		var rotation_value = 15;
		var rotation_value = 1;
		if(cmd=='up'){
			rotateVertical(-rotation_value);
		}else if(cmd=='down'){
			rotateVertical(rotation_value);
		}else if(cmd=='left'){
			rotateHorizontal(rotation_value);
		}else if(cmd=='right'){
			rotateHorizontal(-rotation_value);
		}else if(cmd.match(/(\d+)-(\d+)/)){
			var h = Number(RegExp.$1);
			var v = Number(RegExp.$2);
			if(isNaN(h) || isNaN(v)) return;
			setRotate(h,v);
		}
	}else if(b.id.match(/^ag-command-menu-image-zoom-(.+)$/)){
		var cmd = RegExp.$1;
		if(cmd=='up'){
			anatomoZoomUpButton();
		}else if(cmd=='down'){
			anatomoZoomDownButton();
		}
	}else if(b.id.match(/^ag-command-menu-image-grid-(.+)$/)){
		var cmd = RegExp.$1;
		if(cmd=='checkbox'){
			Ext.getCmp('ag-command-grid-show-check').setValue(b.checked);
		}else if(cmd.match(/^color-(.+)$/)){
			if(Ext.isEmpty(b.value)) return;
			try{
				var cmp = Ext.getCmp('ag-command-grid-color-field');
				cmp.setValue(b.value);
				if(!cmp.menu) cmp.onTriggerClick();
				cmp.menu.palette.select(b.value);
				cmp.menu.hide();
			}catch(e){
				_dump(e);
			}
		}else if(cmd.match(/^len-(.+)$/)){
			var cmp = Ext.getCmp('ag-command-grid-len-combobox');
			var store = cmp.getStore();
			var record = null;
			var index = store.find('value',new RegExp("^"+b.value+"$"));
			if(index<0) return;
			var record = store.getAt(index);
			cmp.setValue(b.value);
			cmp.fireEvent('select',cmp,record,index);
		}
	}else if(b.id.match(/^ag-command-menu-clip-(.+)$/)){
		var cmd = RegExp.$1;
		if(cmd=='checkbox'){
			Ext.getCmp('anatomo-clip-check').setValue(b.checked);
		}else if(cmd=='up'){
			anatomoClipUpButton();
		}else if(cmd=='down'){
			anatomoClipDownButton();
		}else if(cmd.match(/^method-(.+)$/)){
			cmd = RegExp.$1;
			var cmp = Ext.getCmp('anatomo-clip-method-combo');
			var store = cmp.getStore();
			var record = null;
			var index = store.find('value',new RegExp("^"+b.value+"$"));
			if(index<0) return;
			var record = store.getAt(index);
			cmp.setValue(b.value);
			cmp.fireEvent('select',cmp,record,index);
		}else if(cmd.match(/^predefined-plane-(.+)$/)){
			cmd = RegExp.$1;
			if(cmd=='FB' || cmd=='RL' || cmd=='TB' || cmd=='FREE'){
				var cmp = Ext.getCmp('anatomo-clip-predifined-plane');
				var store = cmp.getStore();
				var record = null;
				var index = store.find('value',new RegExp("^"+b.value+"$"));
				if(index<0) return;
				var record = store.getAt(index);
				cmp.setValue(b.value);
				cmp.fireEvent('select',cmp,record,index);
			}else if(cmd=='freeplane-fix'){
				Ext.getCmp('anatomo-clip-fix-check').setValue(b.checked);
			}else if(cmd=='reverse'){
				Ext.getCmp('anatomo-clip-reverse-check').setValue(b.checked);
			}
		}
	}else if(b.id.match(/^ag-command-menu-window-size-(.+)$/)){
		var cmd = RegExp.$1;
		if(cmd=='autosize'){
			Ext.getCmp('anatomo-windowsize-autosize-check').setValue(b.checked);
		}else if(cmd.match(/^width-(.+)$/)){
			Ext.getCmp('anatomo-windowsize-autosize-check').setValue(false);
			var cmp = Ext.getCmp('anatomo-width-combo');
			var store = cmp.getStore();
			var record = null;
			var index = store.find('value',new RegExp("^"+b.value+"$"));
			if(index<0) return;
			var record = store.getAt(index);
			cmp.setValue(b.value);
			cmp.fireEvent('select',cmp,record,index);
		}else if(cmd.match(/^height-(.+)$/)){
			Ext.getCmp('anatomo-windowsize-autosize-check').setValue(false);
			var cmp = Ext.getCmp('anatomo-height-combo');
			var store = cmp.getStore();
			var record = null;
			var index = store.find('value',new RegExp("^"+b.value+"$"));
			if(index<0) return;
			var record = store.getAt(index);
			cmp.setValue(b.value);
			cmp.fireEvent('select',cmp,record,index);
		}
	}else if(b.id.match(/^ag-command-menu-window-background-color-(.+)$/)){
		var cmd = RegExp.$1;
		if(cmd=='transparent'){
			Ext.getCmp('anatomo-bgcolor-transparent-check').setValue(b.checked);
		}else if(cmd=='palette'){
			if(Ext.isEmpty(b.value)) return;
			try{
				var cmp = Ext.getCmp('anatomo-bgcp');
				cmp.setValue(b.value);
				if(!cmp.menu) cmp.onTriggerClick();
				cmp.menu.palette.select(b.value);
				cmp.menu.hide();
			}catch(e){
				_dump(e);
			}
		}
	}else if(b.id.match(/^ag-command-menu-default-parts-(.+)$/)){
		var cmd = RegExp.$1;
		if(cmd=='color'){
			if(Ext.isEmpty(b.value)) return;
			try{
				var cmp = Ext.getCmp('anatomo-default-parts-color');
				cmp.setValue(b.value);
				if(!cmp.menu) cmp.onTriggerClick();
				cmp.menu.palette.select(b.value);
				cmp.menu.hide();
			}catch(e){
				_dump(e);
			}
		}
	}else if(b.id.match(/^ag-command-menu-point-(.+)$/)){
		var cmd = RegExp.$1;
		if(cmd=='description'){
			Ext.getCmp('ag-command-point-description-check').setValue(b.checked);
		}else if(cmd=='color'){
			if(Ext.isEmpty(b.value)) return;
			try{
				var cmp = Ext.getCmp('anatomo-default-point-parts-color');
				cmp.setValue(b.value);
				if(!cmp.menu) cmp.onTriggerClick();
				cmp.menu.palette.select(b.value);
				cmp.menu.hide();
			}catch(e){
				_dump(e);
			}
		}else if(cmd.match(/^sphere-(.+)$/)){
			cmd = RegExp.$1;
			var cmp = Ext.getCmp('ag-command-point-sphere-combo');
			var store = cmp.getStore();
			var record = null;
			var index = store.find('value',new RegExp("^"+b.value+"$"));
			if(index<0) return;
			var record = store.getAt(index);
			cmp.setValue(b.value);
			cmp.fireEvent('select',cmp,record,index);
		}else if(cmd.match(/^classification-label-(.*)$/)){
			cmd = RegExp.$1;
			var cmp = Ext.getCmp('anatomo-point-label-combo');
			var store = cmp.getStore();
			var record = null;
			var index = store.find('value',new RegExp("^"+b.value+"$"));
			if(index<0) return;
			var record = store.getAt(index);
			cmp.setValue(b.value);
			cmp.fireEvent('select',cmp,record,index);
		}else if(cmd.match(/^draw-point-indication-line-(.+)$/)){
			cmd = RegExp.$1;
			var cmp = Ext.getCmp('ag-command-point-description-draw-point-indication-line-combo');
			var store = cmp.getStore();
			var record = null;
			var index = store.find('value',new RegExp("^"+b.value+"$"));
			if(index<0) return;
			var record = store.getAt(index);
			cmp.setValue(b.value);
			cmp.fireEvent('select',cmp,record,index);
		}
	}
}

var agShortcutMenuCommands = [
	agCommandMenuImageMove,
	agCommandMenuImageRotation,
	agCommandMenuImageZoom
];
function getMenuTextFromMenuId(id,pMenu){
	if(Ext.isEmpty(pMenu)){
		var commands = agShortcutMenuCommands;
		for(var i=0;i<commands.length;i++){
			if(typeof commands[i] != 'object') continue;
			var text = getMenuTextFromMenuId(id,commands[i]);
			if(!Ext.isEmpty(text)) return text;
		}
	}else{
		if(id==pMenu.id) return pMenu.text;
		if(!pMenu.menu || !pMenu.menu.items || pMenu.menu.items.length==0) return undefined;
		for(var i=0;i<pMenu.menu.items.length;i++){
			var text = getMenuTextFromMenuId(id,pMenu.menu.items[i]);
			if(!Ext.isEmpty(text)) return pMenu.text? pMenu.text + ":" + text : text;
		}
	}
}
function getAllMenuText(pMenu,menuText,menuList){
	if(Ext.isEmpty(pMenu)){
		var commands = agShortcutMenuCommands;
		var list = [];
		for(var i=0;i<commands.length;i++){
			if(typeof commands[i] != 'object') continue;
			getAllMenuText(commands[i],"",list);
		}
		return list;
	}else{
		if(pMenu.text){
			if(menuText.length>0) menuText += ":";
			menuText += pMenu.text;
		}
		if(!pMenu.menu || !pMenu.menu.items || pMenu.menu.items.length==0){
			if(pMenu.id && pMenu.text) menuList.push({id:pMenu.id,text:menuText});
		}else{
			for(var i=0;i<pMenu.menu.items.length;i++){
				getAllMenuText(pMenu.menu.items[i],menuText,menuList);
			}
		}
	}
}
var agCommandArr = [];
var agKeyArr = [];
var list = getAllMenuText();
var span = document.createElement('span');
for(var i=0;i<list.length;i++){
	span.innerHTML = list[i].text;
	agCommandArr.push([list[i].id,span.textContent]);
}
span = undefined;
agKeyMapNames.sort();
for(var i=0;i<agKeyMapNames.length;i++){
	agKeyArr.push([agKeyMapNames[i],agKeyMapNames[i]]);
}

function openOptionsShortcutKeys(b,e){
	try{
		e.stopEvent();
	}catch(ex){}

	var ag_shortcut_keys_grid_shift_checkColumn = new Ext.grid.CheckColumn({
		id:'shift',
		dataIndex:'shift',
		header:'Shift',
		width:40,
		sortable: true,
		align:'center'
	});
	var ag_shortcut_keys_grid_ctrl_checkColumn = new Ext.grid.CheckColumn({
		id:'ctrl',
		dataIndex:'ctrl',
		header:'Ctrl',
		width:40,
		sortable: true,
		align:'center'
	});
	var ag_shortcut_keys_grid_alt_checkColumn = new Ext.grid.CheckColumn({
		id:'alt',
		dataIndex:'alt',
		header:'Alt',
		width:40,
		sortable: true,
		align:'center'
	});
	var ag_shortcut_keys_grid_stop_checkColumn = new Ext.grid.CheckColumn({
		id:'stop',
		dataIndex:'stop',
		header:'Stop',
		width:40,
		align:'center',
		sortable: true,
		hidden:true
	});

	function ag_shortcut_keys_grid_command_renderer(value,metadata,record,rowIndex,colIndex,store){
		var text = getMenuTextFromMenuId(value);
		return text?text:value;
	}

	var ag_shortcut_keys_window = new Ext.Window({
		title       : 'Shortcut Keys',
		width       : 600,
		height      : 500,
		bodyStyle   : 'padding:5px;',
		buttonAlign : 'right',
		modal       : true,
		resizable   : true,
		border      : false,
		layout      : 'border',
		items: [{
			id : 'ag-shortcut-keys-window-grid',
			region : 'center',
			xtype : 'grid',
			store : ag_keymap_store,
			colModel: new Ext.grid.ColumnModel({
				columns : [
					{id:'order', dataIndex:'order', header:'#',     width:30, sortable:true, align:'right'},
					{id:'key',   dataIndex:'key',   header:'Key',   width:80, sortable:true, align:'left'},
					{id:'code',  dataIndex:'code',  header:'Code',  width:30, sortable:true, align:'right', hidden:true},
					ag_shortcut_keys_grid_shift_checkColumn,
					ag_shortcut_keys_grid_ctrl_checkColumn,
					ag_shortcut_keys_grid_alt_checkColumn,
					ag_shortcut_keys_grid_stop_checkColumn,
					{id:'cmd',   dataIndex:'cmd',   header:'Command',sortable:true,align:'left',renderer:ag_shortcut_keys_grid_command_renderer}
				]
			}),
			plugins        : [
				ag_shortcut_keys_grid_shift_checkColumn,
				ag_shortcut_keys_grid_ctrl_checkColumn,
				ag_shortcut_keys_grid_alt_checkColumn,
				ag_shortcut_keys_grid_stop_checkColumn
			],
			listeners : {
				'beforeedit' : function(e){
						e.cancel = true;
				},
				'rowclick' : function(grid,rowIndex,e){
				}
			},
			autoExpandColumn : 'cmd',
			autoExpandMin : 80,
			stripeRows : true,
			columnLines    : true,
			sm: new Ext.grid.RowSelectionModel({
				singleSelect:true,
				listeners : {
					'rowselect' : function(sm,rowIndex,record){
						var key_combo = Ext.getCmp('ag-shortcut-keys-window-key-combo');
						var shift_checkbox = Ext.getCmp('ag-shortcut-keys-window-shift-checkbox');
						var ctrl_checkbox = Ext.getCmp('ag-shortcut-keys-window-ctrl-checkbox');
						var alt_checkbox = Ext.getCmp('ag-shortcut-keys-window-alt-checkbox');
						var command_combo = Ext.getCmp('ag-shortcut-keys-window-command-combo');

						key_combo.enable();
						shift_checkbox.enable();
						ctrl_checkbox.enable();
						alt_checkbox.enable();
						command_combo.enable();

						key_combo.setValue(record.get('key'));
						shift_checkbox.setValue(record.get('shift'));
						ctrl_checkbox.setValue(record.get('ctrl'));
						alt_checkbox.setValue(record.get('alt'));
						command_combo.setValue(record.get('cmd'));

						var down_button = Ext.getCmp('ag-shortcut-keys-window-grid-down-button');
						var up_button = Ext.getCmp('ag-shortcut-keys-window-grid-up-button');
						var delete_button = Ext.getCmp('ag-shortcut-keys-window-grid-delete-button');
						if(rowIndex==record.store.getCount()-1){
							down_button.disable();
						}else{
							down_button.enable();
						}
						if(rowIndex==0){
							up_button.disable();
						}else{
							up_button.enable();
						}
						delete_button.enable();
					},
					'selectionchange' : function(sm){
						if(sm.getCount()>0) return;
						var key_combo = Ext.getCmp('ag-shortcut-keys-window-key-combo');
						var shift_checkbox = Ext.getCmp('ag-shortcut-keys-window-shift-checkbox');
						var ctrl_checkbox = Ext.getCmp('ag-shortcut-keys-window-ctrl-checkbox');
						var alt_checkbox = Ext.getCmp('ag-shortcut-keys-window-alt-checkbox');
						var command_combo = Ext.getCmp('ag-shortcut-keys-window-command-combo');
						key_combo.disable();
						shift_checkbox.disable();
						ctrl_checkbox.disable();
						alt_checkbox.disable();
						command_combo.disable();

						key_combo.clearValue();
						shift_checkbox.setValue(false);
						ctrl_checkbox.setValue(false);
						alt_checkbox.setValue(false);
						command_combo.clearValue();

						var down_button = Ext.getCmp('ag-shortcut-keys-window-grid-down-button');
						var up_button = Ext.getCmp('ag-shortcut-keys-window-grid-up-button');
						var delete_button = Ext.getCmp('ag-shortcut-keys-window-grid-delete-button');
						down_button.disable();
						up_button.disable();
						delete_button.disable();
					}
				}
			}),
			tbar : ['->','-',{
				id : 'ag-shortcut-keys-window-grid-add-button',
				iconCls  : 'pallet_add',
				handler  : function(button, e){
					var grid = Ext.getCmp('ag-shortcut-keys-window-grid');
					var sel = grid.getSelectionModel();
					var store = grid.getStore();
					var count = store.getCount();
					var ag_keymap_record = Ext.data.Record.create(ag_keymap_fields);
					var new_record = new ag_keymap_record({
						order : count+1,
						shift : false,
						ctrl  : false,
						alt   : false,
						stop  : true
					});
					store.add(new_record);
					sel.selectLastRow();
				}
			},'-',{
				id : 'ag-shortcut-keys-window-grid-down-button',
				iconCls  : 'pallet_down',
				disabled : true,
				handler  : function(button, e){
					var grid = Ext.getCmp('ag-shortcut-keys-window-grid');
					var sel = grid.getSelectionModel();
					var record  = sel.getSelected();
					if(Ext.isEmpty(record)) return;
					var store = record.store;
					var index = store.indexOf(record);
					var n_record = store.getAt(index+1);

					var order = record.get('order');
					var n_order = n_record.get('order');

					record.beginEdit();
					record.set('order',n_order);
					record.commit();
					record.endEdit();

					n_record.beginEdit();
					n_record.set('order',order);
					n_record.commit();
					n_record.endEdit();

					var sort_state = store.getSortState();
					store.sort(sort_state.field,sort_state.direction);
				}
			},{
				id : 'ag-shortcut-keys-window-grid-up-button',
				iconCls  : 'pallet_up',
				disabled : true,
				handler  : function(button, e){
					var grid = Ext.getCmp('ag-shortcut-keys-window-grid');
					var sel = grid.getSelectionModel();
					var record  = sel.getSelected();
					if(Ext.isEmpty(record)) return;
					var store = record.store;
					var index = store.indexOf(record);
					var p_record = store.getAt(index-1);

					var order = record.get('order');
					var p_order = p_record.get('order');

					record.beginEdit();
					record.set('order',p_order);
					record.commit();
					record.endEdit();

					p_record.beginEdit();
					p_record.set('order',order);
					p_record.commit();
					p_record.endEdit();

					var sort_state = store.getSortState();
					store.sort(sort_state.field,sort_state.direction);
				}
			},'-',{
				id : 'ag-shortcut-keys-window-grid-delete-button',
				tooltip  : 'Delete Selected',
				iconCls  : 'pallet_delete',
				disabled : true,
				handler  : function(button, e){
					var grid = Ext.getCmp('ag-shortcut-keys-window-grid');
					var sel = grid.getSelectionModel();
					var record  = sel.getSelected();
					if(Ext.isEmpty(record)) return;
					var store = record.store;
					store.remove(record);
					var count = store.getCount();
					if(count == 0){
						store.removeAll();
					}else{
						for(var i=0;i<count;i++){
							record = store.getAt(i);
							var order = (i+1);
							if(record.get('order') == order) continue;
							record.beginEdit();
							record.set('order',order);
							record.commit();
							record.endEdit();
						}
					}
					sel.clearSelections();

					var key_combo = Ext.getCmp('ag-shortcut-keys-window-key-combo');
					var shift_checkbox = Ext.getCmp('ag-shortcut-keys-window-shift-checkbox');
					var ctrl_checkbox = Ext.getCmp('ag-shortcut-keys-window-ctrl-checkbox');
					var alt_checkbox = Ext.getCmp('ag-shortcut-keys-window-alt-checkbox');
					var command_combo = Ext.getCmp('ag-shortcut-keys-window-command-combo');
					key_combo.clearValue();
					shift_checkbox.setValue(false);
					ctrl_checkbox.setValue(false);
					alt_checkbox.setValue(false);
					command_combo.clearValue();

				}
			}]
		},{
			region : 'east',
			width  : 250,
			layout : 'form',
			labelWidth : 60,
			labelAlign : 'right',
			bodyStyle   : 'padding:5px;',
			items  : [{
				disabled : true,
				id:'ag-shortcut-keys-window-key-combo',
				fieldLabel:'Key',
				xtype : 'combo',
				typeAhead: true,
				triggerAction: 'all',
				lazyRender:true,
				mode: 'local',
				width:160,
				store: new Ext.data.SimpleStore({
					id: 0,
					fields: [
						'value',
						'disp'
					],
					data: agKeyArr
				}),
				valueField: 'value',
				displayField: 'disp',
				listeners     : {
					'select' : function(combo,record,index){
						var grid = Ext.getCmp('ag-shortcut-keys-window-grid');
						var sel = grid.getSelectionModel();
						var record  = sel.getSelected();
						if(Ext.isEmpty(record)) return;
						record.beginEdit();
						record.set('key',combo.getValue());
						record.commit();
						record.endEdit();
					},scope : this
				}
			},{
				border : false,
				bodyStyle   : 'padding:5px;text-align:center;',
				layout      : 'column',
				items : [{
					columnWidth: .33,
					id:'ag-shortcut-keys-window-shift-checkbox',
					disabled : true,
					hideLabel : true,
					boxLabel : 'Shift',
					xtype    : 'checkbox',
					handler  : function(checkbox, e){
						var grid = Ext.getCmp('ag-shortcut-keys-window-grid');
						var sel = grid.getSelectionModel();
						var record  = sel.getSelected();
						if(Ext.isEmpty(record)) return;
						record.beginEdit();
						record.set('shift',checkbox.getValue());
						record.commit();
						record.endEdit();
					}
				},{
					columnWidth: .33,
					id:'ag-shortcut-keys-window-ctrl-checkbox',
					disabled : true,
					hideLabel : true,
					boxLabel : 'Ctrl',
					xtype    : 'checkbox',
					handler  : function(checkbox, e){
						var grid = Ext.getCmp('ag-shortcut-keys-window-grid');
						var sel = grid.getSelectionModel();
						var record  = sel.getSelected();
						if(Ext.isEmpty(record)) return;
						record.beginEdit();
						record.set('ctrl',checkbox.getValue());
						record.commit();
						record.endEdit();
					}
				},{
					columnWidth: .33,
					id:'ag-shortcut-keys-window-alt-checkbox',
					disabled : true,
					hideLabel : true,
					boxLabel : 'Alt',
					xtype    : 'checkbox',
					handler  : function(checkbox, e){
						var grid = Ext.getCmp('ag-shortcut-keys-window-grid');
						var sel = grid.getSelectionModel();
						var record  = sel.getSelected();
						if(Ext.isEmpty(record)) return;
						record.beginEdit();
						record.set('alt',checkbox.getValue());
						record.commit();
						record.endEdit();
					}
				}]
			},{
				disabled : true,
				id:'ag-shortcut-keys-window-command-combo',
				fieldLabel:'Command',
				xtype : 'combo',
				typeAhead: true,
				triggerAction: 'all',
				lazyRender:true,
				mode: 'local',
				width:160,
				store: new Ext.data.SimpleStore({
					id: 0,
					fields: [
						'value',
						'disp'
					],
					data: agCommandArr
				}),
				valueField: 'value',
				displayField: 'disp',
				listeners     : {
					'select' : function(combo,record,index){
						var grid = Ext.getCmp('ag-shortcut-keys-window-grid');
						var sel = grid.getSelectionModel();
						var record  = sel.getSelected();
						if(Ext.isEmpty(record)) return;
						record.beginEdit();
						record.set('cmd',combo.getValue());
						record.commit();
						record.endEdit();
					},scope : this
				}
			}]
		}],
		buttons : [{
			text    : 'OK',
			handler : function(){
				var grid = Ext.getCmp('ag-shortcut-keys-window-grid');
				var sel = grid.getSelectionModel();
				var store = grid.getStore();
				var records = store.getRange();
				glb_us_keymap.length=0;
				var order = 0;
				for(var i=0;i<records.length;i++){
					var key = records[i].get('key');
					var cmd = records[i].get('cmd');
					if(Ext.isEmpty(key) || Ext.isEmpty(cmd)) continue;
					var code = Ext.EventObject[key];
					order++;
					glb_us_keymap.push({
						order : order,
						key   : key,
						code  : code,
						shift : records[i].get('key'),
						ctrl  : records[i].get('ctrl'),
						alt   : records[i].get('alt'),
						stop  : records[i].get('stop'),
						cmd   : cmd
					});
				}
				ag_put_usersession_task.delay(1000);
				ag_shortcut_keys_window.close();
				agKeyMapExec();
			}
		},{
			text    : 'Cencel',
			handler : function(){
				var grid = Ext.getCmp('ag-shortcut-keys-window-grid');
				var sel = grid.getSelectionModel();
				var store = grid.getStore();
				ag_shortcut_keys_window.close();
				store.loadData({keymaps:glb_us_keymap});
			}
		}]
	});
	ag_shortcut_keys_window.show();
}

agOptionsMenuItems = [
	agMenuItemShortcutKeys
];


//システム共通のパレット色（※英字は大文字で定義すること）
//var palette_color = [
//	"000000", "993300", "333300", "003300", "003366", "000080",
//	"333399", "333333", "800000", "FF6600", "808000", "008000",
//	"008080", "0000FF", "666699", "808080", "FF0000", "FF9900",
//	"99CC00", "339966", "33CCCC", "3366FF", "800080", "969696",
//	"FF00FF", "FFCC00", "FFFF00", "00FF00", "00FFFF", "00CCFF",
//	"993366", "C0C0C0", "FF99CC", "FFCC99", "F0D2A0", "FFFF99",
//	"CCFFCC", "CCFFFF", "99CCFF", "CC99FF", "FFFFFF"
//];
var palette_color2 = [
	"000000", "993300", "333300", "003300", "003366", "000080",
	"333399", "333333", "800000", "FF6600", "808000", "008000",
	"008080", "0000FF", "666699", "808080", "FF0000", "FF9900",
	"99CC00", "339966", "33CCCC", "3366FF", "800080", "969696",
	"FF00FF", "FFCC00", "FFFF00", "00FF00", "00FFFF", "00CCFF",
	"993366", "C0C0C0", "FF99CC", "FFCC99", "F0D2A0", "FFFF99",
	"CCFFCC", "CCFFFF", "99CCFF", "CC99FF", "FFFFFF"
];

var palette_color = [
"FFFFFF","FFCCCC","FFE6CC","FFFFCC","E6FFCC","CCFFCC","CCFFE6","CCFFFF","CCE6FF","CCCCFF","E6CCFF","FFCCFF","FFCCE6",
"E6E6E6","FF9999","FFCC99","FFFF99","CCFF99","99FF99","99FFCC","99FFFF","99CCFF","9999FF","CC99FF","FF99FF","FF99CC",
"CCCCCC","FF6666","FFB366","FFFF66","B3FF66","66FF66","66FFB3","66FFFF","66B3FF","6666FF","B366FF","FF66FF","FF66B3",
"B3B3B3","FF3333","FF9933","FFFF33","99FF33","33FF33","33FF99","33FFFF","3399FF","3333FF","9933FF","FF33FF","FF3399",
"999999","FF0000","FF8000","FFFF00","80FF00","00FF00","00FF80","00FFFF","0080FF","0000FF","8000FF","FF00FF","FF0080",
"808080","CC0000","CC6600","CCCC00","66CC00","00CC00","00CC66","00CCCC","0066CC","0000CC","6600CC","CC00CC","CC0066",
"666666","990000","994D00","999900","4D9900","009900","00994D","009999","004D99","000099","4D0099","990099","99004D",
"4D4D4D","660000","663300","666600","336600","006600","006633","006666","003366","000066","330066","660066","660033",
"333333","330000","331A00","333300","1A3300","003300","00331A","003333","001A33","000033","1A0033","330033","33001A",
"000000","F0D2A0"
];

//Ext.onReady(function(){
//	Ext.Ajax.on({
//		beforerequest: function(conn,options){
//			console.log("Ext.Ajax.beforerequest():"+options.url);
////			console.log(conn);
////			console.log(options);
//		},
//		requestcomplete: function(conn,response,options){
//			console.log("Ext.Ajax.requestcomplete():"+options.url);
////			console.log(conn);
////			console.log(response);
////			console.log(options);
//		},
//		requestexception: function(conn,response,options){
//			console.log("Ext.Ajax.requestexception():"+options.url);
//			console.log(conn);
//			console.log(response);
//			console.log(options);
//		}
//	});
//});

Ext.EventManager.on(window,'load',function(){
//	Ext.state.Manager.setProvider(new Ext.state.CookieProvider()); //ソート順とかをCookieに登録する為に必要らしい

	Ext.QuickTips.init();
	ag_init();
	if(Ext.isEmpty(gParams.tp_md)){
		try{anatomography_render();}catch(e){_dump("anatomography_render():"+e);}
//		try{
			ag_ann_init();
//		}catch(e){
//			if(window.console) console.log(e);
//			_dump("ag_ann_init():"+e);
//		}
		try{anatomography_init();}catch(e){_dump("anatomography_init():"+e);}
	}

});
